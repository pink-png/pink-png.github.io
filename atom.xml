<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://yoursite.com</id>
    <title>死肥宅</title>
    <subtitle>肥宅快乐水</subtitle>
    <icon>http://yoursite.com/images/favicon.ico</icon>
    <link href="http://yoursite.com" />
    <author>
      <name>Yn</name>
    </author>
    <updated>2021-06-25T08:43:00.000Z</updated>
    <category term="编程语言" />
    <category term=" Web开发" />
    <category term=" 移动应用开发" />
    <category term=" 数据库" />
    <category term=" 前端开发" />
    <category term=" 后端开发" />
    <category term=" 框架" />
    <category term=" 数据科学与机器学习" />
    <category term=" 人工智能（AI）" />
    <category term=" 云计算" />
    <category term=" DevOps" />
    <category term=" 安全性与网络" />
    <category term=" 软件工程与项目管理" />
    <category term=" UI/UX设计" />
    <category term=" 开源项目" />
    <category term=" 职业发展与面试准备" />
    <category term=" 新技术趋势与前沿" />
    <category term="前端面试" />
    <category term="后端面试" />
    <category term="avaScript" />
    <category term=" Python" />
    <category term=" Java" />
    <category term=" C++" />
    <category term=" C#" />
    <category term=" Ruby" />
    <category term=" PHP" />
    <category term=" Go" />
    <category term=" Swift" />
    <category term=" Rust" />
    <category term=" Kotlin" />
    <category term=" TypeScript" />
    <category term=" R" />
    <category term=" MATLAB" />
    <category term=" Perl" />
    <category term=" Lua" />
    <category term=" Shell" />
    <category term=" Scala" />
    <category term=" Groovy" />
    <category term=" Objective-C" />
    <entry>
        <id>http://yoursite.com/front-end/Jquery/</id>
        <title>Jquery基础</title>
        <link rel="alternate" href="http://yoursite.com/front-end/Jquery/"/>
        <content type="html"></content>
        <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/" />
        <category term="Jquery" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Jquery/" />
        <category term="Jquery" scheme="http://yoursite.com/tags/Jquery/" />
        <updated>2021-06-25T08:43:00.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/front-end/JavaScript%E8%BF%90%E7%94%A8/</id>
        <title>js运用</title>
        <link rel="alternate" href="http://yoursite.com/front-end/JavaScript%E8%BF%90%E7%94%A8/"/>
        <content type="html">&lt;h1 id=&#34;一：什么是JavaScript&#34;&gt;&lt;a href=&#34;#一：什么是JavaScript&#34; class=&#34;headerlink&#34; title=&#34;一：什么是JavaScript&#34;&gt;&lt;/a&gt;一：什么是JavaScript&lt;/h1&gt;&lt;h2 id=&#34;1-发展历史&#34;&gt;&lt;a href=&#34;#1-发展历史&#34; class=&#34;headerlink&#34; title=&#34;1.发展历史&#34;&gt;&lt;/a&gt;1.发展历史&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1995年 JavaScript 1.0 问世 它的主要用途是代替 Perl 等服务器端语言处理输入验证
1997年 javascript 1.1 作为提案被提交给欧洲计算机制造商协会（Ecma）TC39 委员会他们花了数月时间打造出 ECMA-262
1998年 国际标准化组织（ISO）和国际电工委员会（IEC）也将 ECMAScript 采纳为标准  自此以后，各家浏览器均以 ECMAScript 作为自己 JavaScript 实现的依据，虽然具体实现各有不同。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-javascript的构成&#34;&gt;&lt;a href=&#34;#2-javascript的构成&#34; class=&#34;headerlink&#34; title=&#34;2.javascript的构成&#34;&gt;&lt;/a&gt;2.javascript的构成&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.核心（ECMAScript）    
2.文档对象模型（DOM）
3.浏览器对象模型（BOM）
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;一：数据类型以及相应的操作&#34;&gt;&lt;a href=&#34;#一：数据类型以及相应的操作&#34; class=&#34;headerlink&#34; title=&#34;一：数据类型以及相应的操作&#34;&gt;&lt;/a&gt;一：数据类型以及相应的操作&lt;/h1&gt;&lt;h5 id=&#34;2：关于Array处理数据的方法总结&#34;&gt;&lt;a href=&#34;#2：关于Array处理数据的方法总结&#34; class=&#34;headerlink&#34; title=&#34;2：关于Array处理数据的方法总结&#34;&gt;&lt;/a&gt;2：关于Array处理数据的方法总结&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;//敲重点1：创建数组的方式有2种，一种是构造函数的方式 一个是字面量的方式，最好使用字面量的方式
//因为不管Array或者String本身也是构造函数
        Array = String;
        let aa = new Array(1,2,3,4,5);
        console.log(aa);  //string

        let bb = [1,2,3,4];
        console.log(bb); //[1,2,3,4]

----------------------------------------------------------

//敲重点2：ECMAScript的数组每个槽位可以存储任意类型的数据，而且ECMAScript数组也是动态大小的，会随着数据的添加自动增长
        let arr = [1,&amp;#39;1&amp;#39;,[1,2,3,4],&amp;#123;obj1:11,obj2:[1,2,3,4]&amp;#125;];

------------------------------------------------------------
        
//敲重点3：数组排列位置
//使用for循环打乱位数组置
        var Arr = [4, 1, 67, 12, 45, 121, 3];
        function randArr(arr) &amp;#123;
            for (var i = 0; i &amp;lt; arr.length; i++) &amp;#123;
                var iRand = parseInt(arr.length * Math.random());
                var temp = arr[i];
                arr[i] = arr[iRand];
                arr[iRand] = temp;
            &amp;#125;
            return arr;
        &amp;#125;

//使用sort方法错误打乱位数组置
        arr.sort(function () &amp;#123;
            return (0.5 - Math.random());
        &amp;#125;);


//reverse()方法是倒序交换位置 会改变原来的数组
        let newarr = arr.reverse()
          console.log(newarr === arr)  //true


//利用sort()对数组对象某个值进行升序排序
        let arr = [&amp;#123; &amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2 &amp;#125;, &amp;#123; &amp;#39;a&amp;#39;: 466, &amp;#39;b&amp;#39;: 2 &amp;#125;, &amp;#123; &amp;#39;a&amp;#39;: 623, &amp;#39;b&amp;#39;: 2 &amp;#125;, &amp;#123; &amp;#39;a&amp;#39;: 7, &amp;#39;b&amp;#39;: 2 &amp;#125;, &amp;#123; &amp;#39;a&amp;#39;: 67, &amp;#39;b&amp;#39;: 2 &amp;#125;]

        function creatCompare(propertyName) &amp;#123; //根据哪个属性值排序
            return function (obj1, obj2) &amp;#123;
                //对象两两比较
                let value1 = obj1[propertyName];
                let value2 = obj2[propertyName];
                if (value1 &amp;lt; value2) &amp;#123;
                    return -1
                &amp;#125; else if (value1 &amp;gt; value2) &amp;#123;
                    return 1
                &amp;#125; else &amp;#123;
                    return 0
                &amp;#125;
            &amp;#125;
        &amp;#125;

        let newarr = arr.sort(creatCompare(&amp;#39;a&amp;#39;))
        console.log(newarr)
---------------------------------------------------------------

//敲重点4：数组的转换方法
//数组转成字符串
        let color = [&amp;#39;green&amp;#39;,&amp;#39;red&amp;#39;,&amp;#39;pink&amp;#39;]
        console.log(color.join())  // green,red,pink
        console.log(color.join(&amp;#39;,&amp;#39;)) // green,red,pink
        console.log(color.join(&amp;#39;|&amp;#39;))  // green|red|pink

//以下这种方法只能转成以逗号分隔的字符串
        let colors = [&amp;quot;red&amp;quot;, &amp;quot;blue&amp;quot;, &amp;quot;green&amp;quot;]; 
        alert(colors.toString()); // red,blue,green
        alert(colors.valueOf()); // red,blue,green
        alert(colors); // red,blue,green		
//扩展：字符串转数组
        console.log(color.join(&amp;#39;|&amp;#39;).split(&amp;#39;|&amp;#39;)) //[&amp;#39;green&amp;#39;,&amp;#39;red&amp;#39;,&amp;#39;pink&amp;#39;]

----------------------------------------------------------------

//敲重点5：栈方法
        let arr = [1,2,3,4];
        arr.push(5); //向数组末尾添加5
        let poparr = arr.pop();   //取得数组末尾的值，并且删除
        console.log(arr);  //[1,2,3,4]

----------------------------------------------------------------

//敲重点6：队列方法
           let arr = [1,2,3,4];
           let shiftarr = arr.shift(); //删除数组第一项并取得
           arr.unshift(1); //向数组第一项添加
           console.log(arr); // [1,2,3,4]

------------------------------------------------------------

//敲重点7：数组相关的操作方法
        let arr = [1,2,3,4,5]
        
//拼接2个数组  返回一个新的数组,不改变原来的数组
        let zenarr = arr.concat(6,7,8)
        console.log(zenarr) // [1, 2, 3, 4, 5, 6, 7, 8]
        
//concat方法不传参数对数组进行第一层的深拷贝
        let arr = [1,2,3];
        let newarr = arr.concat()
        

//数组截取    遵循左包，右不包
        console.log(arr.slice(1))  //[2,3,4]
        console.log(arr.slice(2))   //[3,4]
        console.log(arr.slice(2,4)) //[3,4] 

//slice方法不传参数对数组进行第一层深拷贝
        let arr = [1,2,3,4]
        let slicearr = arr.slice()
        console.log(slicearr) //返回跟原来一样的新数组   [1,2,3,4]

------------------------------------------------------------


//敲重点8：数组增删改
    
        let arr = [1,2,3,4]

//删除    
        arr.splice(1,1) //传入2个参数，第一个数数组开始位置，第二个是删除的数量
        console.log(arr)   //[1,3,4] 

//插入
        arr.splice(1,0,2) //传入3个参数  第一个参数是开始位置，第二个是要删除的数量，要插入的元素   
        console.log(arr) //[1,2,3,4]

//替换
        arr.splice(3,0,4,5,6)  //方法同插入  ，在序列为3的位置后面，删除0个，添加 4，5，6
        console.log(arr) //[1, 2, 3, 4, 5, 6, 4]

--------------------------------------------------------------

//敲重点9：搜索和位置方法
        
//indexOf从索为0开始搜索   
//lastIndexOf从最后一项开始搜索
        let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1];
        alert(numbers.indexOf(4)); // 3
        alert(numbers.lastIndexOf(4)); // 5
        alert(numbers.includes(4)); // true
        alert(numbers.indexOf(4, 4)); // 5
        alert(numbers.lastIndexOf(4, 4)); // 3
        alert(numbers.includes(4, 7)); // false
        let person = &amp;#123; name: &amp;quot;Nicholas&amp;quot; &amp;#125;;
        let people = [&amp;#123; name: &amp;quot;Nicholas&amp;quot; &amp;#125;];
        let morePeople = [person];
        alert(people.indexOf(person)); // -1
        alert(morePeople.indexOf(person)); // 0
        alert(people.includes(person)); // false
        alert(morePeople.includes(person)); // true


//使用includes()方法判断数组里有无某数据  
          function test(fruit) &amp;#123;
            const redFruits = [&amp;#39;apple&amp;#39;, &amp;#39;strawberry&amp;#39;, &amp;#39;cherry&amp;#39;, &amp;#39;cranberries&amp;#39;];
            if (redFruits.includes(fruit)) &amp;#123;
                console.log(&amp;#39;存在&amp;#39;);
            &amp;#125;else&amp;#123;
                console.log(&amp;#39;不存在&amp;#39;)
            &amp;#125;
        &amp;#125;

--------------------------------------------------------------

//敲重点10：断言函数的运用
//找到匹配项后，这两个方法都不再继续搜索。 
//可以说是查询判断里性能最好的方法
        const people = [
            &amp;#123;
                name: &amp;quot;Matt&amp;quot;,
                age: 27
            &amp;#125;,
            &amp;#123;
                name: &amp;quot;Nicholas&amp;quot;,
                age: 29
            &amp;#125;
        ];
        alert(people.find((element, index, array) =&amp;gt; element.age &amp;lt; 28));
        // &amp;#123;name: &amp;quot;Matt&amp;quot;, age: 27&amp;#125;
        alert(people.findIndex((element, index, array) =&amp;gt; element.age &amp;lt; 28));
        // 0


//其实也可以当做循环使用
        const evens = [2, 4, 6];

        evens.find((element, index, array) =&amp;gt; &amp;#123;
            console.log(element);
            console.log(index); 
            console.log(array);
            return element === 4;
        &amp;#125;);
// 2
// 0
// [2, 4, 6]
// 4
// 1
// [2, 4, 6]

--------------------------------------------------------------

//敲重点11：迭代方法
every()：对数组每一项都运行传入的函数，如果对每一项函数都返回 true，则这个方法返回 true。
filter()：对数组每一项都运行传入的函数，函数返回 true 的项会组成数组之后返回。
forEach()：对数组每一项都运行传入的函数，没有返回值。
map()：对数组每一项都运行传入的函数，返回由每次函数调用的结果构成的数组。
some()：对数组每一项都运行传入的函数，如果有一项函数返回 true，则这个方法返回 true。
这些方法都不改变调用它们的数组。

//map方法每次要主动定义返回项
            let newobjarr =  objarr.map((item)=&amp;gt;&amp;#123;
                item.a += 1;
                item.b += 1;
                return &amp;#123;a:item.a,b:item.b&amp;#125;

            &amp;#125;)     
            console.log(newobjarr)

//敲重点12：归并方法
reduce()
        

        //每一项都加1
        let arr = [1,1,2,3,4,5]
        const res = arr.reduce(function(prev,cur)&amp;#123;
            return [...prev,cur + 1]
        &amp;#125;,[])




        //数组求和
        const text = [&amp;#123;
            id: 1,
            sex: 0
        &amp;#125;, &amp;#123;
            id: 2,
            sex: 1
        &amp;#125;, &amp;#123;
            id: 3,
            sex: 1
        &amp;#125;]

        const res = text.reduce(function (prev, cur, index, array) &amp;#123;
            return prev + cur.id
        &amp;#125;, 0)


        // 计算数组每个元素出现的次数
        const arr = [1, 1, 2, 3, 4]
        const rescount = arr.reduce(function (prev, cur, index, array) &amp;#123;
            if (cur in prev) &amp;#123;
                prev[cur]++
            &amp;#125; else &amp;#123;
                prev[cur] = 1
            &amp;#125;
            return prev
        &amp;#125;, &amp;#123;&amp;#125;)
        
        //取出最大值
         const res = arr.reduce(function(prev,cur)&amp;#123;
           return prev &amp;lt;= cur ? prev = cur : prev = prev
        &amp;#125;,0)


        //数组去重
        const res = arr.reduce(function(prev,cur)&amp;#123;
            return !prev.includes(cur) ? [...prev,cur] : prev
        &amp;#125;,[])


        // 将二维数组转化为一维
        const arrer = [[0, 1], [2, 3], [4, 5]]
        const arrerres = arrer.reduce(function (prev, cur) &amp;#123;
            return prev.concat(cur)
        &amp;#125;, [])


        // 将多维数组转化为一维
        let arr = [[0, 1], [2, 3], [4, [5, 6, 7]]]
        const newArr = function (arr) &amp;#123;
            return arr.reduce((pre, cur) =&amp;gt; pre.concat(Array.isArray(cur) ? newArr(cur) : cur), [])
        &amp;#125;

reduceRight()




//12.某些方法调用用会修改自身的数组?
  push
  pop
  shift
  unshift
  splice
  sort
  reverse
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;3：关于String包装类型处理数据的总结&#34;&gt;&lt;a href=&#34;#3：关于String包装类型处理数据的总结&#34; class=&#34;headerlink&#34; title=&#34;3：关于String包装类型处理数据的总结&#34;&gt;&lt;/a&gt;3：关于String包装类型处理数据的总结&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;
        let mseesage = new String(&amp;#39;hello&amp;#39;)
        console.log(mseesage.length)  //返回字符串的长度  5
        console.log(mseesage.charAt(0))  //返回某个索引值  h
        console.log(mseesage.charCodeAt(0))  //字符编码  h的字符编码是108

3.1
// 字符串拼接  不改变原来的字符串， 返回一个新的字符串
        let o = &amp;#39;hello&amp;#39;
        let result = stringvalue.concat(&amp;#39;world&amp;#39;) //可以接受多个参数，用逗号分开

        console.log(result)  //  hello world
        console.log(stringvalue) //hello  

// 采用 加号 +  实现快速拼接
        let a = &amp;#39;hello&amp;#39;
        let b = a + &amp;#39;world&amp;#39;
        console.log(a)  // hello
        console.log(b) //hello world 

3.2
//字符串提取
        let stringvalue = &amp;#39;hello world&amp;#39;
        console.log(stringValue.slice(3)); // &amp;quot;lo world&amp;quot;
        console.log(stringValue.substring(3)); // &amp;quot;lo world&amp;quot;
        console.log(stringValue.substr(3)); // &amp;quot;lo world&amp;quot;
        console.log(stringValue.slice(3, 7)); // &amp;quot;lo w&amp;quot;
        console.log(stringValue.substring(3, 7)); // &amp;quot;lo w&amp;quot;
        console.log(stringValue.substr(3, 7)); // &amp;quot;lo worl&amp;quot; 

//clice 单个参数是 左不包后面全要 (]        2个参数是 左不包，后包  (]
//substring 单个参数是 左不包后面全要 (]         2个参数是 左包，后包   []
//substr 单个参数是 左包后面全要  []           2个参数是 左包，第二个参数是截取个数  []

3.3
//字符串位置方法
        let stringvalue = &amp;#39;hello world&amp;#39;
        console.log(stringvalue.indexOf(&amp;quot;o&amp;quot;)) // 4
        console.log(stringvalue.lastIndexOf(&amp;quot;o&amp;quot;)) // 7 
//indexOd和lastIndexOf的区别就是前者是从前面开始寻找，后者是从后面开始寻找

//传入第二个参数的时候，
        console.log(stringValue.indexOf(&amp;quot;o&amp;quot;, 6)); // 7
        console.log(stringValue.lastIndexOf(&amp;quot;o&amp;quot;, 6)); // 4 
//第二个参数代表从哪个序列开始寻找


//寻找某段字符串里的某个字符，并全部记录它的序列位置
        let stringValue = &amp;quot;Lorem ipsum dolor sit amet, consectetur adipisicing elit&amp;quot;;
        let positions = new Array();
        let pos = stringValue.indexOf(&amp;quot;e&amp;quot;); 

        while(pos &amp;gt; -1)&amp;#123; 
            positions.push(pos)
            pos = stringValue.indexOf(&amp;#39;e&amp;#39;, pos + 1)
        &amp;#125;
        console.log(positions)  // [3,24,32,35,52]

3.4
//查看字符串里是否包含某个 字符串 或者字符
//有三种方法可以判断  
        let message = &amp;quot;foobarbaz&amp;quot;;
        console.log(message.startsWith(&amp;quot;foo&amp;quot;)); // true
        console.log(message.startsWith(&amp;quot;bar&amp;quot;)); // false
        console.log(message.endsWith(&amp;quot;baz&amp;quot;)); // true
        console.log(message.endsWith(&amp;quot;bar&amp;quot;)); // false
        console.log(message.includes(&amp;quot;bar&amp;quot;)); // true
        console.log(message.includes(&amp;quot;qux&amp;quot;)); // false 

//startsWith()检查开始于索引 0 的匹配项 
//endsWith()检查开始于索引(string.length - substring.length)的匹配项
//includes()检查整个字符串

//基本就是使用includes就完事了

3.5
//trim() 删除2边空格    原字符串不受到影响 返回一个新的字符串
        let stringValue = &amp;quot; hello world &amp;quot;;
        let trimmedStringValue = stringValue.trim();
        console.log(stringValue); // &amp;quot; hello world &amp;quot;
        console.log(trimmedStringValue); // &amp;quot;hello world&amp;quot; 

//扩展：
//trimLeft()和 trimRight()方法分别用于从字符串开始和末尾清理空格符。


3.6
//repeat()  复制多次字符串 原字符串不受影响  返回一个新的字符串
        let stringvalue = &amp;#39;ha&amp;#39;
        console.log(stringvalue.repeat(12).concat(&amp;#39; yyyy&amp;#39;)) 
// hahahahahahahahahahahaha yyyy


3.7
 //padStart()和 padEnd()方法会复制字符串，如果小于指定长度，则在相应一边填充字符，直至
//满足长度条件。这两个方法的第一个参数是长度，第二个参数是可选的填充字符串，默认为空格


3.8
// 字符串迭代与解构简单的运用，原理参考js高程
        let arr = []
        let str = &amp;#39;asddd&amp;#39;
        arr = [...str]
        console.log(arr)  //[&amp;quot;a&amp;quot;, &amp;quot;s&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;d&amp;quot;]

3.9
        //字符串大小转换
        let stringValue = &amp;quot;hello world&amp;quot;;
        console.log(stringValue.toLocaleUpperCase()); // &amp;quot;HELLO WORLD&amp;quot;
        console.log(stringValue.toUpperCase()); // &amp;quot;HELLO WORLD&amp;quot;
        console.log(stringValue.toLocaleLowerCase()); // &amp;quot;hello world&amp;quot;
        console.log(stringValue.toLowerCase()); // &amp;quot;hello world&amp;quot; 
/*原来就有的是 toUpperCase 和 toLowerCase ，但是在很多地区，地区特定的方法与通用的方法是一样的。但在少数语言中（如土耳其语），Unicode 大小写转换需应用特殊规则，要使用地区特定的方法才能实现正确转换。*/

//推荐使用 toLocaleUpperCase 和 toLocaleLowerCase

//记忆方法是一个是Up是向上 就是放大

3.10
//字符串替换  简单用法   
        let text = &amp;quot;cat, bat, sat, fat&amp;quot;;
        let result = text.replace(&amp;quot;at&amp;quot;, &amp;quot;ond&amp;quot;);
        console.log(result); // &amp;quot;cond, bat, sat, fat&amp;quot;  
            //配合正则表达式的高级用法
        result = text.replace(/a t/g, &amp;quot;ond&amp;quot;);
        console.log(result); // &amp;quot;cond, bond, sond, fond&amp;quot; 

3.11
//计算输入的字符个数
         getByteLen(val) &amp;#123;
              var len = 0
              for (var i = 0; i &amp;lt; val.length; i++) &amp;#123;
                var a = val.charAt(i)
                if (a.match(/[^\x00-\xff]/gi) != null) &amp;#123;
                  len += 2
                &amp;#125; else &amp;#123;
                  len += 1
                &amp;#125;
              &amp;#125;
              return len
            &amp;#125;

3.12
        
//实现方法为将字符串按某个字符切割成若干个字符串，并以数组形式返回
        var s = &amp;quot;abc,abcd,aaa&amp;quot;;
        ss = s.split(&amp;quot;,&amp;quot;);// 在每个逗号(,)处进行分解  [&amp;quot;abc&amp;quot;, &amp;quot;abcd&amp;quot;, &amp;quot;aaa&amp;quot;]
        var s1 = &amp;quot;helloworld&amp;quot;;
        ss1 = s1.split(&amp;#39;&amp;#39;);  //[&amp;quot;h&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;l&amp;quot;, &amp;quot;l&amp;quot;, &amp;quot;o&amp;quot;, &amp;quot;w&amp;quot;, &amp;quot;o&amp;quot;, &amp;quot;r&amp;quot;, &amp;quot;l&amp;quot;, &amp;quot;d&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;4：关于Number包装类型的处理&#34;&gt;&lt;a href=&#34;#4：关于Number包装类型的处理&#34; class=&#34;headerlink&#34; title=&#34;4：关于Number包装类型的处理&#34;&gt;&lt;/a&gt;4：关于Number包装类型的处理&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;    
        let num1 = new Number(10.4545)
        let num2 = new Number(10)
        console.log(num1.toFixed(2)) //10.45  //表示返回2位小数,采用4舍5入
        console.log(num2.toFixed(2)) //10.00 
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;5：关于Date时间处理&#34;&gt;&lt;a href=&#34;#5：关于Date时间处理&#34; class=&#34;headerlink&#34; title=&#34;5：关于Date时间处理&#34;&gt;&lt;/a&gt;5：关于Date时间处理&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;// 创建时间类
        let time = new Date()   
        console.log(time)  // Sat Nov 14 2020 15:51:41 GMT+0800 (中国标准时间)
        console.log(Date.parse(new Date())) //使用Date.parse这个方法可以将其转化成 13位的时间戳
    

// 填入时间戳，得出天/时/分
        function DateDifference(faultDate, completeTime) &amp;#123;
          // let d1 = new Date(faultDate);
          // let d2 = new Date(completeTime);
          var stime = new Date(faultDate).getTime();
          var etime = new Date(completeTime).getTime();
          var usedTime = etime - stime;  //两个时间戳相差的毫秒数
          var days = Math.floor(usedTime / (24 * 3600 * 1000));
          //计算出小时数
          var leave1 = usedTime % (24 * 3600 * 1000);    //计算天数后剩余的毫秒数
          var hours = Math.floor(leave1 / (3600 * 1000));
          //计算相差分钟数
          var leave2 = leave1 % (3600 * 1000);        //计算小时数后剩余的毫秒数
          var minutes = Math.floor(leave2 / (60 * 1000));
          var time = days + &amp;quot;天&amp;quot; + hours + &amp;quot;时&amp;quot; + minutes + &amp;quot;分&amp;quot;;
          //   var time = days;
          return time;
        &amp;#125;
// 使用方法
        console.log( DateDifference(1597800343,1697900343) )


//时间戳转时间格式
        getdate() &amp;#123;
           var now = new Date(),
           y = now.getFullYear(),
           m = now.getMonth() + 1,
           d = now.getDate()
           return y + &amp;#39;-&amp;#39; + (m &amp;lt; 10 ? &amp;#39;0&amp;#39; + m : m) + &amp;#39;-&amp;#39; + (d &amp;lt; 10 ? &amp;#39;0&amp;#39; + d : d) + &amp;#39; &amp;#39; +                             now.toTimeString().substr(0, 8)
         &amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;6：关于Math内置对象的处理&#34;&gt;&lt;a href=&#34;#6：关于Math内置对象的处理&#34; class=&#34;headerlink&#34; title=&#34;6：关于Math内置对象的处理&#34;&gt;&lt;/a&gt;6：关于Math内置对象的处理&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;
2.1：
//Math对象属性  例如 Math.E  (自然对数的基数 e 的值)

2.2：	
//最大最小值
         let max = Math.max(3, 6, 5, 7)
         let min = Math.min(3, 4, 1, 5)

         console.log(max)  //7
         console.log(min)  //1 

//可以传入数组
        let values = [1, 2, 3, 4, 5, 6, 7, 8];
        let maxarr = Math.max(...values); 
        console.log(maxarr)

2.3：
        //舍入方法
        console.log(Math.ceil(25.9)); // 26
        console.log(Math.ceil(25.5)); // 26
        console.log(Math.ceil(25.1)); // 26
        console.log(Math.round(25.9)); // 26
        console.log(Math.round(25.5)); // 26
        console.log(Math.round(25.1)); // 25
        console.log(Math.fround(0.4)); // 0.4000000059604645
        console.log(Math.fround(0.5)); // 0.5
        console.log(Math.fround(25.9)); // 25.899999618530273
        console.log(Math.floor(25.9)); // 25
        console.log(Math.floor(25.5)); // 25
        console.log(Math.floor(25.1)); // 25 

//Math.ceil()方法始终向上舍入为最接近的整数
//Math.floor()方法始终向下舍入为最接近的整数
//Math.round()方法执行四舍五入
//Math.fround()方法返回数值最接近的单精度（32 位）浮点值表示


2.4
// 随机数
         let round = Math.random()  
//返回一个 0-1 范围内的随机数（0.9356889462950324），其中包含0但是不包含1

2.4.1
//返回一个 [a,b]中的随机数
        let bb = Math.round(Math.random()*b + a)
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;7：数据类型检测&#34;&gt;&lt;a href=&#34;#7：数据类型检测&#34; class=&#34;headerlink&#34; title=&#34;7：数据类型检测&#34;&gt;&lt;/a&gt;7：数据类型检测&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;(1)typeof  (2)instanceof  (3)constructor  (4)Object.prototype.toString.call()

1：在`JavaScript`里使用`typeof`判断数据类型，只能区分**基本类型**，即：`number`、`string`、`undefined`、`boolean`、`object`。

2：对于`null`、`array`、`function`、`object`来说，使用`typeof`都会统一返回`object`字符串。

3：要想区分对象、数组、函数、单纯使用`typeof`是不行的。在JS中，可以通过`Object.prototype.toString.call()`方法，判断某个对象之属于哪种内置类型。分为`null`、`string`、`boolean`、`number`、`undefined`、`array`、`function`、`object`、`date`、`math`。

4：constructor 本来是用于标识对象类型的。

5：一般认为 instanceof 操作符是确定对象类型 更可靠的方式。


    let obj = &amp;#123;&amp;#125;
    let num1 = 1
    console.log(typeof obj)   //object
    console.log(obj instanceof Object)  //true
    console.log(obj.constructor) //ƒ Object() &amp;#123; [native code] &amp;#125;
    console.log( Object.prototype.toString.call(1)) // [object Number]
    console.log(Object.prototype.toString.call(obj)) // [object Object]
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;8：深浅拷贝&#34;&gt;&lt;a href=&#34;#8：深浅拷贝&#34; class=&#34;headerlink&#34; title=&#34;8：深浅拷贝&#34;&gt;&lt;/a&gt;8：深浅拷贝&lt;/h5&gt;&lt;p&gt;1：深浅拷贝的区别&lt;/p&gt;
&lt;p&gt;首先要知道一点的就是，JavaScript的数据类型的分为基本数据类型和引用类型，&lt;/p&gt;
&lt;p&gt;对于基本数据类型的拷贝，并没有深浅拷贝的区别，我们所说的深浅拷贝都是对于&lt;strong&gt;引用数据类型&lt;/strong&gt;而言的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;浅拷贝的概念&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;浅拷贝的意思就是只复制引用，而未复制真正的值。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;       // 定义一个数组
       let arr = [1,2,3,4,5]
       // 定义一个对象
       let obj = &amp;#123;a:&amp;#39;a&amp;#39;,b:&amp;#39;b&amp;#39;,c:[1,2,3,4,5],d:&amp;#123;dd:&amp;#39;dd&amp;#39;&amp;#125;&amp;#125;
    
       //赋值这个数组给另一个变量
       let clonearr = arr
       //赋值这个数组给另一个对象
       let cloneobj = obj 

        // 打印一下拷贝的数据，嗯，是个原本来的一样的
       console.log(clonearr) // [1,2,3,4,5]
       console.log(cloneobj) // &amp;#123;a:&amp;#39;a&amp;#39;,b:&amp;#39;b&amp;#39;,c:Array[3],d:&amp;#123;dd:&amp;#39;dd&amp;#39;&amp;#125;&amp;#125;
    
        // 这个时候操作来了，我们给这个克隆的数组添加数据 克隆的对象也修改数据
        clonearr.push(6)
        cloneobj.a = &amp;#123;aa:&amp;#39;aa&amp;#39;&amp;#125;

        //打印2个数组   发现arr是和修改过的clonearr是一样的
        console.log(arr)  // [1,2,3,4,5,6]
        console.log(clonearr) // [1,2,3,4,5,6]

        //打印2个对象   发现obj是和修改过的cloneobj是一样的
        console.log(obj); // &amp;#123;a:&amp;#123;aa:&amp;#39;aa&amp;#39;&amp;#125;,b:&amp;#39;b&amp;#39;,c:Array[3],d:&amp;#123;dd:&amp;#39;dd&amp;#39;&amp;#125;&amp;#125;
        console.log(cloneobj); // &amp;#123;a:&amp;#123;aa:&amp;#39;aa&amp;#39;&amp;#125;,b:&amp;#39;b&amp;#39;,c:Array[3],d:&amp;#123;dd:&amp;#39;dd&amp;#39;&amp;#125;&amp;#125;
 
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;1：深拷贝有哪些方式？&#34;&gt;&lt;a href=&#34;#1：深拷贝有哪些方式？&#34; class=&#34;headerlink&#34; title=&#34;1：深拷贝有哪些方式？&#34;&gt;&lt;/a&gt;1：深拷贝有哪些方式？&lt;/h6&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;深拷贝就是对目标的完全拷贝，不像浅拷贝那样只是复制了一层引用，就连值也都复制了。

只要进行了深拷贝，它们老死不相往来，谁也不会影响谁。

目前实现深拷贝的方法不多，主要是两种：

1. 利用 `JSON` 对象中的 `parse` 和 `stringify`
2. 利用递归来实现每一层都重新创建对象并赋值

`JSON.stringify` 是将一个 `JavaScript` 值转成一个 `JSON` 字符串。

`JSON.parse` 是将一个 `JSON` 字符串转成一个 `JavaScript` 值或对象。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;使用JSON.stringify(obj)的缺点&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;   确实是深拷贝，也很方便。但是，这个方法只能适用于一些简单的情况。比如下面这样的一个对象就不适用：   
const obj = &amp;#123;
          name:&amp;#39;gsq&amp;#39;,
          hello:function()&amp;#123;
              console.log(&amp;#39;gsq&amp;#39;);
          &amp;#125;
      &amp;#125;

      const cloneobj = JSON.parse(JSON.stringify(obj))

      console.log(obj) // &amp;#123;name: &amp;quot;gsq&amp;quot;, hello: ƒ&amp;#125;
      console.log(cloneobj) //  &amp;#123;name: &amp;quot;gsq&amp;quot;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：使用 JSON.parse(JSON.stringify(obj)) 进行深拷贝 对   &lt;code&gt;undefined&lt;/code&gt;、&lt;code&gt;function&lt;/code&gt;、&lt;code&gt;symbol&lt;/code&gt; 会在转换过程中被忽略。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;递归的方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;递归的思想就很简单了，就是对每一层的数据都实现一次 &lt;code&gt;创建对象-&amp;gt;对象赋值&lt;/code&gt; 的操作，简单粗暴上代码：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这种方式就不存在&lt;code&gt;undefined&lt;/code&gt;、&lt;code&gt;function&lt;/code&gt;、&lt;code&gt;symbol&lt;/code&gt; 被忽略了&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;function deepClone(source)&amp;#123;
  const targetObj = source.constructor === Array ? [] : &amp;#123;&amp;#125;; // 判断复制的目标是数组还是对象
  for(let keys in source)&amp;#123; // 遍历目标
    if(source.hasOwnProperty(keys))&amp;#123;
      if(source[keys] &amp;amp;&amp;amp; typeof source[keys] === &amp;#39;object&amp;#39;)&amp;#123; // 如果值是对象，就递归一下
        targetObj[keys] = source[keys].constructor === Array ? [] : &amp;#123;&amp;#125;;
        targetObj[keys] = deepClone(source[keys]);
      &amp;#125;else&amp;#123; // 如果不是，就直接赋值
        targetObj[keys] = source[keys];
      &amp;#125;
    &amp;#125; 
  &amp;#125;
  return targetObj;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;2：浅拷贝有哪些方式&#34;&gt;&lt;a href=&#34;#2：浅拷贝有哪些方式&#34; class=&#34;headerlink&#34; title=&#34;2：浅拷贝有哪些方式&#34;&gt;&lt;/a&gt;2：浅拷贝有哪些方式&lt;/h6&gt;&lt;p&gt;1：concat&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;        const arr = [1,2,3,4,5];
        const clonearr = arr.concat();
console.log(arr === clonearr)  // false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2：slice&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;    let arr1 = [1,2,3,4]
    let arr2 = arr1.slice()
console.log(arr1 === arr2) //false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3：es6之  &lt;code&gt;Object.assign()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;    let obj = &amp;#123;&amp;#39;a&amp;#39; : 1, &amp;#39;b&amp;#39; : 2&amp;#125;
    let cloneobj = Object.assign(&amp;#123;&amp;#125;,obj)
console.log(obj === cloneobj) //false    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4：es6扩展运算符 …&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;        let arr = [1,2,3,4]
        let clonearr = [...arr]
console.log(arr === clonearr) //false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;5：es6 from方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;        const a1 = [1, 2, 3, 4];
        const a2 = Array.from(a1); 
console.log(a1 === a2) //false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6：使用map方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;        const arr = [1,2,3,4]
        let clonearr = arr.map(item =&amp;gt; item)
console.log(arr === clonearr)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;7：自定义函数浅拷贝&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;function shallowClone(source) &amp;#123;
  const targetObj = source.constructor === Array ? [] : &amp;#123;&amp;#125;; // 判断复制的目标是数组还是对象
  for (let keys in source) &amp;#123; // 遍历目标
    if (source.hasOwnProperty(keys)) &amp;#123;
      targetObj[keys] = source[keys];
    &amp;#125;
  &amp;#125;
  return targetObj;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;赋值运算符 &lt;code&gt;=&lt;/code&gt; 实现的是浅拷贝，只拷贝对象的引用值；&lt;/li&gt;
&lt;li&gt;JavaScript 中数组和对象自带的拷贝方法都是“首层深拷贝”；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JSON.stringify&lt;/code&gt; 实现的是深拷贝，但是对目标对象有要求，转化的值不能是&lt;code&gt;function&lt;/code&gt;，&lt;code&gt;undefined&lt;/code&gt;，&lt;code&gt;symbol&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;若想真正意义上的深拷贝，请递归。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;二：作用域以及变量&#34;&gt;&lt;a href=&#34;#二：作用域以及变量&#34; class=&#34;headerlink&#34; title=&#34;二：作用域以及变量&#34;&gt;&lt;/a&gt;二：作用域以及变量&lt;/h1&gt;&lt;h5 id=&#34;2：变量声明提升&#34;&gt;&lt;a href=&#34;#2：变量声明提升&#34; class=&#34;headerlink&#34; title=&#34;2：变量声明提升&#34;&gt;&lt;/a&gt;2：变量声明提升&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;只有var会存在变量提升&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;       var a = 1;
       var b = 2;
       var c = 4;
       a = b = c ;  //相当于  a = c    b = c
       console.log(a) //4
       console.log(b) //4
       console.log(c) //4
       console.log(a = b = c) //4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;        var foo = 1;
        function bar() &amp;#123;
            if (!foo) &amp;#123;
                var foo = 10;
            &amp;#125;
            alert(foo);
        &amp;#125;
         bar();   //输出什么?

解析过程：
        //1:首先会预解析 ：注意函数比变量优先级高
        function bar()&amp;#123;
            var foo;   //这里此时foo没有被赋值 是undefined
            if(!foo) &amp;#123; //!undefined == true
                var foo; 
                foo = 10
            &amp;#125;  //到这里后foo被赋值为10
            alert(foo)
        &amp;#125;
        var foo;
        foo = 1;
        bar()  // 10
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;        var num = 123;
        function f1(num) &amp;#123;
            console.log(num); 
        &amp;#125;
        function f2() &amp;#123;
            var num = 456;
            f1(num);
        &amp;#125;
        f2();

解析过程：
        //1:首先会预解析 ：注意函数比变量优先级高
        function f1(num)&amp;#123;
            console.log(num)
        &amp;#125;
        function f2()&amp;#123;  //执行f2函数
            var num; //声明num
            num = 456; //赋值456
            f1(num) //执行f1函数 。传入num的值456 ，打印456
        &amp;#125;

        var num;
        num = 123;
        f2()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;        function fn()&amp;#123;
           var a = 1, b = 1, c = 1;
         &amp;#125;
         fn();
         console.log(c); 
         console.log(b);
         console.log(a); 

解析过程：
        //  1:预解析
        function fn()&amp;#123;
            var a,b,c;
            a = 1, b = 1, c = 1;
        &amp;#125;
        // 执行fn函数  因为作用域链是从里往外查询
        // 分别输出cba 直接在c这一行报错
        // 原因:
        //js是解释型语言，执行一行解释一行，发现报错就停止执行
        //因为作用域链是从里往外查询 此时输出cba的环境已经是最大的windows环境了
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;        function fn1()&amp;#123;
           var a = b = c = 1;
         &amp;#125;
         fn1();
         console.log(c); 
         console.log(b); 
         console.log(a); 

解析过程：
         //1:预解析
         function fn1()&amp;#123;
             var a = 1;
             b = 1;  
             c = 1; 
         &amp;#125;  //对于局部函数变量里面没有声明var的变量  都是全局变量
         console.log(c);  //1 
         console.log(b);  //1
         console.log(a);  // Uncaught ReferenceError: a is not defined
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;        var a = 1;
        function fn()&amp;#123;
            var a = 2;
            function fnSon(a)&amp;#123;
                a = 3;
                console.log(a); 
            &amp;#125;
            fnSon();
            console.log(a);  
        &amp;#125;
        console.log(a);  
        fn();
        console.log(a); 

解析过程：
        //预解析
        function fn()&amp;#123;
            function fnSon(a)&amp;#123;
                a = 3; //a没有定义var是全局变量
                console.log(a) //直接得到当前作用域的值 3
            &amp;#125;
            var a; //跟fnSon函数同一作用预的变量a
            a = 2; //a赋值2
            fnSon(); //此时fnSon并未传入参数a ,直接执行fnSon 
            console.log(a) //得到当前作用域的值 2
        &amp;#125;
        var a;
        a = 1;
        console.log(a) //直接得到全局变量 1
        fn(); //执行fn函数 
        console.log(a)  //
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;        var a ;
        function a()&amp;#123;
            console.log(&amp;#39;呵呵&amp;#39;)
            function a()&amp;#123;
                a = 4;
                console.log(&amp;#39;哈哈&amp;#39;)
            &amp;#125;
            a();
            console.log(a);
        &amp;#125;
        a();
        console.log(a);

解析过程:
        //预解析
        function a()&amp;#123;
            console.log(&amp;#39;呵呵&amp;#39;) //注意啦:  打印不存在变量提升
            function a()&amp;#123;
                a = 4; //全局变量a
                console.log(&amp;#39;哈哈&amp;#39;)  //哈哈
            &amp;#125;
            a() 
            console.log(a) // 取得当前同级作用域的 4 
        &amp;#125;
        var a;
        a()
        console.log(a) //函数a //此时函数a取代了 a 函数
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;        var value = &amp;#39;hello&amp;#39;;
        function show() &amp;#123;
            alert(value);
            if (!value) &amp;#123;
                var value = &amp;#39;function&amp;#39;;
            &amp;#125;
            alert(value);
        &amp;#125;
        show() 


解析过程：
        // 预解析
        var value;
        value = &amp;#39;hello&amp;#39;
        function show() &amp;#123;
            var value;  //undefined
            alert(value) 
            if(!value)&amp;#123;  //!undnefined  = true
                value = &amp;#39;function&amp;#39; 
            &amp;#125;
            alert(value)       
        &amp;#125;
        show()  //此处调用函数依次弹出 &amp;quot;undefined&amp;quot;, &amp;quot;function&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;3：作用域链&#34;&gt;&lt;a href=&#34;#3：作用域链&#34; class=&#34;headerlink&#34; title=&#34;3：作用域链&#34;&gt;&lt;/a&gt;3：作用域链&lt;/h5&gt;&lt;p&gt;作用域分为&lt;strong&gt;全局作用域&lt;/strong&gt;和&lt;strong&gt;函数作用域&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;作用域&lt;/th&gt;
&lt;th&gt;意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;函数作用域&lt;/td&gt;
&lt;td&gt;在固定的代码片段才能被访问&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;全局作用域&lt;/td&gt;
&lt;td&gt;代码在程序的任何地方都能被访问，window 对象的内置属性都拥有全局作用域。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;        var a = 10, b = 20;  //全局作用域
        function fn() &amp;#123;
            var a = 100, c = 300; //fn作用域
            console.log(a);
            function bar() &amp;#123;  
                var a = 1000, d = 4000  //bar作用域
                console.log(a);
            &amp;#125;
        &amp;#125;
        bar()

作用域特点：
作用域有上下级关系，上下级关系的确定就看函数是在哪个作用域下创建的。如上，fn作用域下创建了bar函数，那么“fn作用域”就是“bar作用域”的上级。   

作用域用处：
作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突。

变量取值：
到创建 这个变量 的函数的作用域中取值
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作用域链&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;        var x = 10;

        function fn() &amp;#123;
            console.log(x);
        &amp;#125;

        function show(f) &amp;#123;
            var x = 20;
            (function () &amp;#123;
                f();    // 10
            &amp;#125;)()
        &amp;#125;

        show(fn);
1：一般情况下，变量取值到 创建 这个变量 的函数的作用域中取值。
    
2：但是如果在当前作用域中没有查到值，就会向上级作用域去查，直到查到全局作用域，这么一个查找过程形成的链条就叫做作用域链。
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;4：闭包（closure）&#34;&gt;&lt;a href=&#34;#4：闭包（closure）&#34; class=&#34;headerlink&#34; title=&#34;4：闭包（closure）&#34;&gt;&lt;/a&gt;4：闭包（closure）&lt;/h5&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;特点&lt;/td&gt;
&lt;td&gt;1：外部访问函数内部变成可能（我们知道作用域链，是只能里面一层一层访问到外面，但是，外部不能访问内部）2：局部变量常驻在内存中  3：可以避免使用全局变量，防止全局变量污染  4：缺点是会造成内存泄漏（有一块内存空间长期被占用，而不被释放）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;概念&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;闭包函数：&lt;/strong&gt;声明在一个函数中的函数，叫做闭包函数。&lt;strong&gt;闭包：&lt;/strong&gt;内部函数总是可以访问其所在的外部函数中声明的参数和变量，即使在其外部函数被返回（寿命终结）了之后。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;闭包的创建&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;example 1
        function funA() &amp;#123;
            var a = 10;  // funA的活动对象之中;
            return function () &amp;#123;   //匿名函数的活动对象;
                alert(a);
            &amp;#125;
        &amp;#125;
        var b = funA();
        b();  //10
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;example 2
        function outerFn() &amp;#123;
            var i = 0;
            function innerFn() &amp;#123;
                i++;
                console.log(i);
            &amp;#125;
            return innerFn;
        &amp;#125;
        var inner = outerFn();  //每次外部函数执行的时候,都会开辟一块内存空间,外部函数的地址不同，都会重新创建一个新的地址
        inner();
        inner();
        inner();
        var inner2 = outerFn();
        inner2();
        inner2();
        inner2();   //1 2 3 1 2 3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;example 3
        var i = 0;
        function outerFn() &amp;#123;
            function innnerFn() &amp;#123;
                i++;
                console.log(i);
            &amp;#125;
            return innnerFn;
        &amp;#125;
        var inner1 = outerFn();
        var inner2 = outerFn();
        inner1();
        inner2();      //同一个地址变量每调用一次  i+1 
        inner1();
        inner2();     //1 2 3 4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;example 4
        function fn() &amp;#123;
            var a = 3;
            return function () &amp;#123;
                return ++a;
            &amp;#125;
        &amp;#125;
        alert(fn()());  //4   
        alert(fn()());  //4 
    //并没有创建地址变量去保存
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;example 5
        function outerFn() &amp;#123;
            var i = 0;
            function innnerFn() &amp;#123;
                i++;
                console.log(i);
            &amp;#125;
            return innnerFn;
        &amp;#125;
        var inner1 = outerFn();
        var inner2 = outerFn();
        inner1();
        inner2();
        inner1();
        inner2();    //1 1 2 2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;example 6
        (function () &amp;#123;   //自调用函数
            var m = 0;
            function getM() &amp;#123; return m; &amp;#125; 
            function seta(val) &amp;#123; m = val; &amp;#125; 
            window.g = getM;  //window是最高级的对象  添加windows下一个g的一个键值  值为 getM
            window.f = seta; 
        &amp;#125;)();
        f(100);
        console.info(g());   //100  闭包找到的是同一地址中父级函数中对应变量最终的值
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;example 7
        function a() &amp;#123;
            var i = 0;
            function b() &amp;#123; alert(++i); &amp;#125;
            return b;
        &amp;#125;
        var c = a();   //函数的赋值是引用类型的
        c();      //1 
        c();      //2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;example 8
        function f() &amp;#123;
            var count = 0;
            return function () &amp;#123;
                count++;
                console.info(count);
            &amp;#125;
        &amp;#125;
        var t1 = f();
        t1();     //1 
        t1();     //2 
        t1();     //3 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;example 9
        var add = function (x) &amp;#123;
            var sum = 1;
            var tmp = function (x) &amp;#123;
                sum = sum + x;
                return tmp;
            &amp;#125;
            tmp.toString = function () &amp;#123;
                return sum;
            &amp;#125;
            return tmp;
        &amp;#125;
        alert(add(1)(2)(3));     //6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;example 10
        var lis = document.getElementsByTagName(&amp;quot;li&amp;quot;);
        for (var i = 0; i &amp;lt; lis.length; i++) &amp;#123;
            (function (i) &amp;#123;
                lis[i].onclick = function () &amp;#123;
                    console.log(i);
                &amp;#125;;
            &amp;#125;)(i);       //事件处理函数中闭包的写法
        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;example 11
        function m1() &amp;#123;
            var x = 1;
            return function () &amp;#123;
                console.log(++x);
            &amp;#125;
        &amp;#125;

        m1()();   //2
        m1()();   //2
        m1()();   //2

        var m2 = m1();
        m2();   //2
        m2();   //3
        m2();   //4
   //一个是有变量地址的，一个是没有的 ，有的才会保存
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;example 12
        var fn = (function () &amp;#123;
            var i = 10;
            function fn() &amp;#123;
                console.log(++i);
            &amp;#125;
            return fn;
        &amp;#125;)()
        fn();   //11
        fn();   //12
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;example 13
        function love1() &amp;#123;
            var num = 223;
            var me1 = function () &amp;#123;
                console.log(num);
            &amp;#125;
            num++;
            return me1;
        &amp;#125;
        var loveme1 = love1();
        loveme1();   //输出224
预解析：
        function love1() &amp;#123;
            var num;
            var me1;
            me1 = function()&amp;#123;
                console.log(num)
            &amp;#125;
            num = 233
            num ++;
            return me1;
        &amp;#125;
        var loveme1 = love1();
        loveme1();   //输出224
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;example 14
        function fun(n, o) &amp;#123;
            console.log(o);
            return &amp;#123;
                fun: function (m) &amp;#123;
                    return fun(m, n);
                &amp;#125;
            &amp;#125;;
        &amp;#125;
        var a = fun(0);  //undefined
        a.fun(1);  //0  
        a.fun(2);  //0  
        a.fun(3);  //0  
        var b = fun(0).fun(1).fun(2).fun(3);   //undefined  0  1  2
        var c = fun(0).fun(1);
        c.fun(2);
        c.fun(3);  //undefined  0  1  1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;example 15
        function fn() &amp;#123;
            var arr = [];
            for (var i = 0; i &amp;lt; 5; i++) &amp;#123;
                arr[i] = function () &amp;#123;
                    return i;
                &amp;#125;
            &amp;#125;
            return arr;
        &amp;#125;
        var list = fn();
        for (var i = 0, len = list.length; i &amp;lt; len; i++) &amp;#123;
            console.log(list[i]());
        &amp;#125;  //5 5 5 5 5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;example 16
        function fn() &amp;#123;
            var arr = [];
            for (var i = 0; i &amp;lt; 5; i++) &amp;#123;
                arr[i] = (function (i) &amp;#123;
                    return function () &amp;#123;
                        return i;
                    &amp;#125;;
                &amp;#125;)(i);
            &amp;#125;
            return arr;
        &amp;#125;
        var list = fn();
        for (var i = 0, len = list.length; i &amp;lt; len; i++) &amp;#123;
            console.log(list[i]());
        &amp;#125;  //0 1 2 3 4
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;三：JavaScript创建对象&#34;&gt;&lt;a href=&#34;#三：JavaScript创建对象&#34; class=&#34;headerlink&#34; title=&#34;三：JavaScript创建对象&#34;&gt;&lt;/a&gt;三：JavaScript创建对象&lt;/h1&gt;&lt;h5 id=&#34;1：js创建对象的几种方式的优缺点&#34;&gt;&lt;a href=&#34;#1：js创建对象的几种方式的优缺点&#34; class=&#34;headerlink&#34; title=&#34;1：js创建对象的几种方式的优缺点&#34;&gt;&lt;/a&gt;1：js创建对象的几种方式的优缺点&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1:工厂模式
        function createPerson(name, age, job) &amp;#123;
            let o = new Object();
            o.name = name;
            o.age = age;
            o.job = job;
            o.sayName = function () &amp;#123;
                console.log(this.name);
            &amp;#125;;
            return o;
        &amp;#125;
        let person1 = createPerson(&amp;quot;Nicholas&amp;quot;, 29, &amp;quot;Software Engineer&amp;quot;);
        let person2 = createPerson(&amp;quot;Greg&amp;quot;, 27, &amp;quot;Doctor&amp;quot;);
        console.log(person1.isPrototypeOf == person2.isPrototypeOf); //true

//敲重点一：
这里，函数 createPerson()接收 3 个参数，根据这几个参数构建了一个包含 Person 信息的对象。
可以用不同的参数多次调用这个函数，每次都会返回包含 3 个属性和 1 个方法的对象。这种工厂模式虽
然可以解决创建多个类似对象的问题，但没有解决对象标识问题（即新创建的对象是什么类型）。
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;2:构造函数模式
        function Person(name, age, job) &amp;#123;
            this.name = name;
            this.age = age;
            this.job = job;
            this.sayName = function () &amp;#123;
                console.log(this.name);
            &amp;#125;;
        &amp;#125;
        let person1 = new Person(&amp;quot;Nicholas&amp;quot;, 29, &amp;quot;Software Engineer&amp;quot;);
        let person2 = new Person(&amp;quot;Greg&amp;quot;, 27, &amp;quot;Doctor&amp;quot;);
        person1.sayName(); // Nicholas
        person2.sayName(); // Greg 
        console.log(person1.isPrototypeOf == person2.isPrototypeOf) //true
        console.log(person1.sayName == person2.sayName);  //false    

//敲重点一：
实际上，Person()内部的代码跟 createPerson()基本是一样的，只是有如下区别。
1: 没有显式地创建对象没有 return
2: 属性和方法直接赋值给了 this
3: 没有 return

//敲重点二：
构造函数名称的首字母都是要大写的，非构造函数则以小写字母开头。
有助于在 ECMAScript 中区分构造函数和普通函数。毕竟 ECMAScript 的构造函数就是能创建对象的函数。

//敲重点三：
要创建 Person 的实例，应使用 new 操作符。以这种方式调用构造函数会执行如下操作。
1: 在内存中创建一个新对象。
2: 这个新对象内部的[[Prototype]]特性被赋值为构造函数的 prototype 属性。
3: 构造函数内部的 this 被赋值为这个新对象（即 this 指向新对象）。
4: 执行构造函数内部的代码（给新对象添加属性）。
5: 如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的新对象。

//敲重点四：
person1 和 person2 分别保存着 Person 的不同实例。这两个对象都有一个 constructor 属性指向 Person，
console.log(person1.constructor == Person); // true
console.log(person2.constructor == Person); // true 
constructor 本来是用于标识对象类型的。不过，一般认为 instanceof 操作符是确定对象类型
更可靠的方式。前面例子中的每个对象都是 Object 的实例，同时也是 Person 的实例，如下面调用
instanceof 操作符的结果所示：
console.log(person1 instanceof Object); // true
console.log(person1 instanceof Person); // true
console.log(person2 instanceof Object); // true
console.log(person2 instanceof Person); // true 
定义自定义构造函数可以确保实例被标识为特定类型，相比于工厂模式，这是一个很大的好处。在
这个例子中，person1 和 person2 之所以也被认为是 Object 的实例，是因为所有自定义对象都继承自 Object

//敲重点五：
构造函数不一定要写成函数声明的形式。赋值给变量的函数表达式也可以表示构造函数：
        let Person = function (name, age, job) &amp;#123;
            this.name = name;
            this.age = age;
            this.job = job;
            this.sayName = function () &amp;#123;
                console.log(this.name);
            &amp;#125;;
        &amp;#125;
let person1 = new Person(&amp;quot;Nicholas&amp;quot;, 29, &amp;quot;Software Engineer&amp;quot;);
let person2 = new Person(&amp;quot;Greg&amp;quot;, 27, &amp;quot;Doctor&amp;quot;);
person1.sayName(); // Nicholas
person2.sayName(); // Greg
console.log(person1 instanceof Object); // true
console.log(person1 instanceof Person); // true
console.log(person2 instanceof Object); // true
console.log(person2 instanceof Person); // true 

//敲重点六：
在实例化时，如果不想传参数，那么构造函数后面的括号可加可不加。只要有 new 操作符，就可以调用相应的构造函数：
        function Person() &amp;#123;
            this.name = &amp;quot;Jake&amp;quot;;
            this.sayName = function () &amp;#123;
                console.log(this.name);
            &amp;#125;;
        &amp;#125;
        let person1 = new Person();
        let person2 = new Person;

        person1.sayName(); // Jake
        person2.sayName(); // Jake
        console.log(person1 instanceof Object); // true
        console.log(person1 instanceof Person); // true
        console.log(person2 instanceof Object); // true
        console.log(person2 instanceof Person); // true

//敲重点七： 构造函数也是函数
构造函数与普通函数唯一的区别就是调用方式不同。除此之外，构造函数也是函数。并没有把某个
函数定义为构造函数的特殊语法。任何函数只要使用 new 操作符调用就是构造函数，而不使用 new 操
作符调用的函数就是普通函数。比如，前面的例子中定义的 Person()可以像下面这样调用：

为啥都是大写，因为这样可以区别于普通的函数，一目了然的就知道这是构造函数


//敲重点八：构造函数的问题（优化构造函数）
构造函数虽然有用，但也不是没有问题。构造函数的主要问题在于，其定义的方法会在每个实例上
都创建一遍。因此对前面的例子而言，person1 和 person2 都有名为 sayName()的方法，但这两个方
法不是同一个 Function 实例。我们知道，ECMAScript 中的函数是对象，因此每次定义函数时，都会
初始化一个对象

逻辑上讲，这个构造函数实际上是这样的：
 function Person(name, age, job) &amp;#123;
            this.name = name;
            this.age = age;
            this.job = job;
            this.sayName = new Function(&amp;quot;console.log(this.name)&amp;quot;); // 逻辑等价
        &amp;#125;
这样理解这个构造函数可以更清楚地知道，每个 Person 实例都会有自己的 Function 实例用于显
示 name 属性。当然了，以这种方式创建函数会带来不同的作用域链和标识符解析。但创建新 Function
实例的机制是一样的。因此不同实例上的函数虽然同名却不相等，如下所示：
console.log(person1.sayName == person2.sayName); // false 

怎么优化呢?
    函数定义转移到构造函数外部
        function Person(name, age, job) &amp;#123;
            this.name = name;
            this.age = age;
            this.job = job;
            this.sayName = sayName;
        &amp;#125;
        function sayName() &amp;#123;
            console.log(this.name);
        &amp;#125;
        let person1 = new Person(&amp;quot;Nicholas&amp;quot;, 29, &amp;quot;Software Engineer&amp;quot;);
        let person2 = new Person(&amp;quot;Greg&amp;quot;, 27, &amp;quot;Doctor&amp;quot;);
        person1.sayName(); // Nicholas
        person2.sayName(); // Greg 
    
在这里，sayName()被定义在了构造函数外部。在构造函数内部，sayName 属性等于全局 sayName()函数。因为这一次 sayName 属性中包含的只是一个指向外部函数的指针，所以 person1 和 person2共享了定义在全局作用域上的 sayName()函数。这样虽然解决了相同逻辑的函数重复定义的问题，但全局作用域也因此被搞乱了，因为那个函数实际上只能在一个对象上调用。如果这个对象需要多个方法，那么就要在全局作用域中定义多个函数。这会导致自定义类型引用的代码不能很好地聚集一起。这个新问题可以通过原型模式来解决。
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2：原型模式创建对象（重点部分单独分离出来）&#34;&gt;&lt;a href=&#34;#2：原型模式创建对象（重点部分单独分离出来）&#34; class=&#34;headerlink&#34; title=&#34;2：原型模式创建对象（重点部分单独分离出来）&#34;&gt;&lt;/a&gt;2：原型模式创建对象（重点部分单独分离出来）&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;//敲重点一：为啥出现原型模式创建对象?
这样虽然解决了相同逻辑的函数重复定义的问题，但全局作用域也因此被搞乱了，因为那个函数实际上只能在一个对象上调用。如果这个对象需要多个方法，那么就要在全局作用域中定义多个函数。这会导致自定义类型引用的代码不能很好地聚集一起。这个新问题可以通过原型模式来解决。

        function Person() &amp;#123; &amp;#125;
        //也可以使用函数表达式的方式创建对象
        //  let Person = function() &amp;#123;&amp;#125;; 
    
        Person.prototype.name = &amp;quot;Nicholas&amp;quot;;
        Person.prototype.age = 29;
        Person.prototype.job = &amp;quot;Software Engineer&amp;quot;;
        Person.prototype.sayName = function () &amp;#123;
            console.log(this.name);
        &amp;#125;;
        let person1 = new Person();
        person1.sayName(); // &amp;quot;Nicholas&amp;quot;
        let person2 = new Person();
        person2.sayName(); // &amp;quot;Nicholas&amp;quot;
        console.log(person1.sayName == person2.sayName); // true
这里，所有属性和 sayName()方法都直接添加到了 Person 的 prototype 属性上，构造函数体中什么也没有。但这样定义之后，调用构造函数创建的新对象仍然拥有相应的属性和方法。与构造函数模式不同，使用这种原型模式定义的属性和方法是由所有实例共享的。因此 person1 和 person2 访问的都是相同的属性和相同的 sayName()函数。要理解这个过程，就必须理解 ECMAScript 中原型的本质。 



//敲重点二：理解原型
无论何时，只要创建一个函数，就会按照特定的规则为这个函数创建一个 prototype 属性（指向原型对象）。默认情况下，所有原型对象自动获得一个名为 constructor 的属性，指回与之关联的构造函数。对前面的例子而言，Person.prototype.constructor 指向 Person。然后，因构造函数而异，可能会给原型对象添加其他属性和方法。

在自定义构造函数时，原型对象默认只会获得 constructor 属性，其他的所有方法都继承自Object。每次调用构造函数创建一个新实例，这个实例的内部[[Prototype]]指针就会被赋值为构造函数的原型对象。脚本中没有访问这个[[Prototype]]特性的标准方式，但 Firefox、Safari 和 Chrome会在每个对象上暴露__proto__属性，通过这个属性可以访问对象的原型。在其他实现中，这个特性完全被隐藏了。关键在于理解这一点：实例与构造函数原型之间有直接的联系，但实例与构造函数之间没有。

1:构造函数可以是函数表达式, 也可以是函数声明
2:声明之后，构造函数就有了一个 与之关联的原型对象
3:如前所述，构造函数有一个 prototype 属性 引用其原型对象，而这个原型对象也有一个 constructor 属性，引用这个构造函数 换句话说，两者循环引用
4: 正常的原型链都会终止于 Object 的原型对象,Object 原型的原型是 null
5:构造函数、原型对象和实例是 3 个完全不同的对象
6:实例通过__proto__链接到原型对象 它实际上指向隐藏特性[[Prototype]] 构造函数通过 prototype 属性链接到原型对象 实例与构造函数没有直接联系，与原型对象有直接联系
7: 同一个构造函数创建的两个实例 共享同一个原型对象：


//敲重点三：相关API
1：
使用 isPrototypeOf()方法确定两个对象之间的这种关系
本质上，isPrototypeOf()会在传入参数的[[Prototype]]指向调用它的对象时返回 true
//说白了就是判断当前的实例对象是不是指向当前的原型
console.log(Person.prototype.isPrototypeOf(person1)); // true
console.log(Person.prototype.isPrototypeOf(person2)); // true 

2：
ECMAScript的Object 类型有一个方法叫 Object.getPrototypeOf()，返回参数的内部特性[[Prototype]]的值 
//说白了，就是获取当前实例的原型对象
console.log(Object.getPrototypeOf(person1) == Person.prototype); // true
console.log(Object.getPrototypeOf(person1).name); // &amp;quot;Nicholas&amp;quot;

3:
Object 类型还有一个 setPrototypeOf()方法，可以向实例的私有特性[[Prototype]]写入一
个新值。这样就可以重写一个对象的原型继承关系
        let biped = &amp;#123;
            numLegs: 2
        &amp;#125;;
        let person = &amp;#123;
            name: &amp;#39;Matt&amp;#39;
        &amp;#125;;
        Object.setPrototypeOf(person, biped);
        console.log(person.name); // Matt
        console.log(person.numLegs); // 2
        console.log(Object.getPrototypeOf(person) === biped); // true
//但是不建议这样做，会严重影响性能

4:
为避免使用 Object.setPrototypeOf()可能造成的性能下降，可以通过 Object.create()来创建一个新对象，同时为其指定原型
        let biped = &amp;#123;
            numLegs: 2
        &amp;#125;;
        let person = Object.create(biped);
        person.name = &amp;#39;Matt&amp;#39;;
        console.log(person.name); // Matt
        console.log(person.numLegs); // 2
        console.log(Object.getPrototypeOf(person) === biped); // true


//敲重点四：原型层级
说白了就是 构造函数创造出来的实例 访问属性或者方法 会先从构造函数里面寻找，如果找不到会到原型里面找
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;四：JavaScript继承&#34;&gt;&lt;a href=&#34;#四：JavaScript继承&#34; class=&#34;headerlink&#34; title=&#34;四：JavaScript继承&#34;&gt;&lt;/a&gt;四：JavaScript继承&lt;/h1&gt;&lt;h5 id=&#34;1：原型链&#34;&gt;&lt;a href=&#34;#1：原型链&#34; class=&#34;headerlink&#34; title=&#34;1：原型链&#34;&gt;&lt;/a&gt;1：原型链&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;//敲重点一： 什么是原型链
原型链是ECMAScript的主要继承方式

其基本思想就是通过原型继承多个引用
类型的属性和方法。重温一下构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型有一个属性指回构造函数，而实例有一个内部指针指向原型。如果原型是另一个类型的实例呢？那就意味着这个原型本身有一个内部指针指向另一个原型，相应地另一个原型也有一个指针指向另一个构造函数。这样就在实例和原型之间构造了一条原型链。这就是原型链的基本构想。
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;1：js如何实现继承-ES6类的原理&#34;&gt;&lt;a href=&#34;#1：js如何实现继承-ES6类的原理&#34; class=&#34;headerlink&#34; title=&#34;1：js如何实现继承(ES6类的原理)&#34;&gt;&lt;/a&gt;1：js如何实现继承(ES6类的原理)&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;原型链继承

盗用构造函数继承

组合继承

原型式继承

寄生式继承

寄生组合继承
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2：ES6类&#34;&gt;&lt;a href=&#34;#2：ES6类&#34; class=&#34;headerlink&#34; title=&#34;2：ES6类&#34;&gt;&lt;/a&gt;2：ES6类&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;//敲重点一： 为什么出现类的概念
因为通过原型链和构造函数虽然能是实现继承，各种继承策略都有自己的问题，也有相应的妥协 但是代码也显得非常冗长和混乱。   

为解决这些问题，ECMAScript 6 新引入的 class 关键字具有正式定义类的能力。类（class）是ECMAScript 中新的基础性语法糖结构。虽然 ECMAScript 6 类表面上看起来可以支持正式的面向对象编程，但实际上它背后使用的仍然是原型和构造函数的概念

//敲重点二： 怎么定义一个类
class Person &amp;#123;&amp;#125;  //类声明
或者
const Animal = class &amp;#123;&amp;#125;;  //类表达式

与函数表达式类似，类表达式在它们被求值前也不能引用。
与函数定义不同的是，虽然函数声明可以提升，但类定义不能

//敲重点三：类可以由哪些构成
构造函数方法、实例方法、获取函数、设置函数和静态类方法
1.构造函数方法 constructor ，每当创建实例的时候都会执行
2.实例方法  就是定义在原型上的方法，是每个实例都共享的
3.静态方法  直接用类点静态方法调用，（注意，实例是不能调用的）
静态方法很适合返回实例工厂
        class Person &amp;#123;
            constructor(age) &amp;#123;
                this.age_ = age;
            &amp;#125;
            sayAge() &amp;#123;
                console.log(this.age_);
            &amp;#125;
            static create() &amp;#123;
                // 使用随机年龄创建并返回一个 Person 实例
                return new Person(Math.floor(Math.random() * 100));
            &amp;#125;
        &amp;#125;
        console.log(Person.create()); // Person &amp;#123; age_: ... &amp;#125;

//敲重点四：继承
ES6 类支持单继承。使用 extends 关键字，就可以继承任何拥有[[Construct]]和原型的对象。很大程度上，这意味着不仅可以继承一个类，也可以继承普通的构造函数（保持向后兼容）
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;五：new，this&#34;&gt;&lt;a href=&#34;#五：new，this&#34; class=&#34;headerlink&#34; title=&#34;五：new，this&#34;&gt;&lt;/a&gt;五：new，this&lt;/h1&gt;&lt;h5 id=&#34;1：new操作符具体干了什么&#34;&gt;&lt;a href=&#34;#1：new操作符具体干了什么&#34; class=&#34;headerlink&#34; title=&#34;1：new操作符具体干了什么&#34;&gt;&lt;/a&gt;1：new操作符具体干了什么&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1：在内存中创建一个新对象
2：这个对象内部的[[Prototype]]特性被赋值为构造函数的protopype属性
3：构造函数的内部的this被赋值为这个新对象（即this指向新对象）
4：执行构造函数内部的代码（给新对象添加属性）
5：如果构造函数返回非空对象，则返回该对象；否则返回刚创建的新对象
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2：new的模拟实现&#34;&gt;&lt;a href=&#34;#2：new的模拟实现&#34; class=&#34;headerlink&#34; title=&#34;2：new的模拟实现&#34;&gt;&lt;/a&gt;2：new的模拟实现&lt;/h5&gt;&lt;h5 id=&#34;3：this对象的理解&#34;&gt;&lt;a href=&#34;#3：this对象的理解&#34; class=&#34;headerlink&#34; title=&#34;3：this对象的理解&#34;&gt;&lt;/a&gt;3：this对象的理解&lt;/h5&gt;&lt;h1 id=&#34;六：call-x2F-apply-x2F-bind&#34;&gt;&lt;a href=&#34;#六：call-x2F-apply-x2F-bind&#34; class=&#34;headerlink&#34; title=&#34;六：call&amp;#x2F;apply&amp;#x2F;bind&#34;&gt;&lt;/a&gt;六：call&amp;#x2F;apply&amp;#x2F;bind&lt;/h1&gt;&lt;h5 id=&#34;1：call-x2F-apply-x2F-bind&#34;&gt;&lt;a href=&#34;#1：call-x2F-apply-x2F-bind&#34; class=&#34;headerlink&#34; title=&#34;1：call&amp;#x2F;apply&amp;#x2F;bind&#34;&gt;&lt;/a&gt;1：call&amp;#x2F;apply&amp;#x2F;bind&lt;/h5&gt;&lt;h5 id=&#34;2：call和apply的模拟实现&#34;&gt;&lt;a href=&#34;#2：call和apply的模拟实现&#34; class=&#34;headerlink&#34; title=&#34;2：call和apply的模拟实现&#34;&gt;&lt;/a&gt;2：call和apply的模拟实现&lt;/h5&gt;&lt;h5 id=&#34;3：bind的模拟实现&#34;&gt;&lt;a href=&#34;#3：bind的模拟实现&#34; class=&#34;headerlink&#34; title=&#34;3：bind的模拟实现&#34;&gt;&lt;/a&gt;3：bind的模拟实现&lt;/h5&gt;&lt;h1 id=&#34;七：事件&#34;&gt;&lt;a href=&#34;#七：事件&#34; class=&#34;headerlink&#34; title=&#34;七：事件&#34;&gt;&lt;/a&gt;七：事件&lt;/h1&gt;&lt;h5 id=&#34;1：事件流&#34;&gt;&lt;a href=&#34;#1：事件流&#34; class=&#34;headerlink&#34; title=&#34;1：事件流&#34;&gt;&lt;/a&gt;1：事件流&lt;/h5&gt;&lt;h5 id=&#34;2：事件的三个阶段&#34;&gt;&lt;a href=&#34;#2：事件的三个阶段&#34; class=&#34;headerlink&#34; title=&#34;2：事件的三个阶段&#34;&gt;&lt;/a&gt;2：事件的三个阶段&lt;/h5&gt;&lt;h5 id=&#34;3：事件的代理有何委托&#34;&gt;&lt;a href=&#34;#3：事件的代理有何委托&#34; class=&#34;headerlink&#34; title=&#34;3：事件的代理有何委托&#34;&gt;&lt;/a&gt;3：事件的代理有何委托&lt;/h5&gt;&lt;h5 id=&#34;4：如何派发事件&#34;&gt;&lt;a href=&#34;#4：如何派发事件&#34; class=&#34;headerlink&#34; title=&#34;4：如何派发事件&#34;&gt;&lt;/a&gt;4：如何派发事件&lt;/h5&gt;&lt;h1 id=&#34;八：event-loop&#34;&gt;&lt;a href=&#34;#八：event-loop&#34; class=&#34;headerlink&#34; title=&#34;八：event loop&#34;&gt;&lt;/a&gt;八：event loop&lt;/h1&gt;&lt;h5 id=&#34;1：进程和线程&#34;&gt;&lt;a href=&#34;#1：进程和线程&#34; class=&#34;headerlink&#34; title=&#34;1：进程和线程&#34;&gt;&lt;/a&gt;1：进程和线程&lt;/h5&gt;&lt;h5 id=&#34;2：执行栈&#34;&gt;&lt;a href=&#34;#2：执行栈&#34; class=&#34;headerlink&#34; title=&#34;2：执行栈&#34;&gt;&lt;/a&gt;2：执行栈&lt;/h5&gt;&lt;h5 id=&#34;3：为什么js是单线程，而不是多线程&#34;&gt;&lt;a href=&#34;#3：为什么js是单线程，而不是多线程&#34; class=&#34;headerlink&#34; title=&#34;3：为什么js是单线程，而不是多线程&#34;&gt;&lt;/a&gt;3：为什么js是单线程，而不是多线程&lt;/h5&gt;&lt;h5 id=&#34;4：宏任务-x2F-微任务&#34;&gt;&lt;a href=&#34;#4：宏任务-x2F-微任务&#34; class=&#34;headerlink&#34; title=&#34;4：宏任务&amp;#x2F;微任务&#34;&gt;&lt;/a&gt;4：宏任务&amp;#x2F;微任务&lt;/h5&gt;&lt;h5 id=&#34;5-浏览器与Node事件（有何区别）&#34;&gt;&lt;a href=&#34;#5-浏览器与Node事件（有何区别）&#34; class=&#34;headerlink&#34; title=&#34;5:浏览器与Node事件（有何区别）&#34;&gt;&lt;/a&gt;5:浏览器与Node事件（有何区别）&lt;/h5&gt;&lt;h1 id=&#34;十：浏览器缓存机制&#34;&gt;&lt;a href=&#34;#十：浏览器缓存机制&#34; class=&#34;headerlink&#34; title=&#34;十：浏览器缓存机制&#34;&gt;&lt;/a&gt;十：浏览器缓存机制&lt;/h1&gt;&lt;h5 id=&#34;1：缓存位置&#34;&gt;&lt;a href=&#34;#1：缓存位置&#34; class=&#34;headerlink&#34; title=&#34;1：缓存位置&#34;&gt;&lt;/a&gt;1：缓存位置&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;## webStorage

1. 存储内容大小一般支持5MB左右（不同浏览器可能还不一样）

2. 浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。

3. 相关API：

   1. ```xxxxxStorage.setItem(&amp;#39;key&amp;#39;, &amp;#39;value&amp;#39;);```
                      该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。

   2. ```xxxxxStorage.getItem(&amp;#39;person&amp;#39;);```

      ​		该方法接受一个键名作为参数，返回键名对应的值。

   3. ```xxxxxStorage.removeItem(&amp;#39;key&amp;#39;);```

      ​		该方法接受一个键名作为参数，并把该键名从存储中删除。

   4. ``` xxxxxStorage.clear()```

      ​		该方法会清空存储中的所有数据。

4. 备注：

   1. SessionStorage存储的内容会随着浏览器窗口关闭而消失。
   2. LocalStorage存储的内容，需要手动清除才会消失。
   3. ```xxxxxStorage.getItem(xxx)```如果xxx对应的value获取不到，那么getItem的返回值是null。
   4. ```JSON.parse(null)```的结果依然是null。
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2：缓存策略（强缓存，协商缓存）&#34;&gt;&lt;a href=&#34;#2：缓存策略（强缓存，协商缓存）&#34; class=&#34;headerlink&#34; title=&#34;2：缓存策略（强缓存，协商缓存）&#34;&gt;&lt;/a&gt;2：缓存策略（强缓存，协商缓存）&lt;/h5&gt;&lt;h1 id=&#34;十一：浏览器渲染原理&#34;&gt;&lt;a href=&#34;#十一：浏览器渲染原理&#34; class=&#34;headerlink&#34; title=&#34;十一：浏览器渲染原理&#34;&gt;&lt;/a&gt;十一：浏览器渲染原理&lt;/h1&gt;&lt;h5 id=&#34;1：渲染过程&#34;&gt;&lt;a href=&#34;#1：渲染过程&#34; class=&#34;headerlink&#34; title=&#34;1：渲染过程&#34;&gt;&lt;/a&gt;1：渲染过程&lt;/h5&gt;&lt;h5 id=&#34;2：阻塞过程&#34;&gt;&lt;a href=&#34;#2：阻塞过程&#34; class=&#34;headerlink&#34; title=&#34;2：阻塞过程&#34;&gt;&lt;/a&gt;2：阻塞过程&lt;/h5&gt;&lt;h5 id=&#34;3：重绘和汇流（重排）&#34;&gt;&lt;a href=&#34;#3：重绘和汇流（重排）&#34; class=&#34;headerlink&#34; title=&#34;3：重绘和汇流（重排）&#34;&gt;&lt;/a&gt;3：重绘和汇流（重排）&lt;/h5&gt;&lt;h1 id=&#34;十二：进阶知识&#34;&gt;&lt;a href=&#34;#十二：进阶知识&#34; class=&#34;headerlink&#34; title=&#34;十二：进阶知识&#34;&gt;&lt;/a&gt;十二：进阶知识&lt;/h1&gt;&lt;h5 id=&#34;1：函数式编程&#34;&gt;&lt;a href=&#34;#1：函数式编程&#34; class=&#34;headerlink&#34; title=&#34;1：函数式编程&#34;&gt;&lt;/a&gt;1：函数式编程&lt;/h5&gt;&lt;h5 id=&#34;2：HTML5-Web-Worker&#34;&gt;&lt;a href=&#34;#2：HTML5-Web-Worker&#34; class=&#34;headerlink&#34; title=&#34;2：HTML5 Web Worker&#34;&gt;&lt;/a&gt;2：HTML5 Web Worker&lt;/h5&gt;&lt;h5 id=&#34;3：Service-Worker&#34;&gt;&lt;a href=&#34;#3：Service-Worker&#34; class=&#34;headerlink&#34; title=&#34;3：Service Worker&#34;&gt;&lt;/a&gt;3：Service Worker&lt;/h5&gt;&lt;h1 id=&#34;十三：ECMAScript&#34;&gt;&lt;a href=&#34;#十三：ECMAScript&#34; class=&#34;headerlink&#34; title=&#34;十三：ECMAScript&#34;&gt;&lt;/a&gt;十三：ECMAScript&lt;/h1&gt;&lt;h2 id=&#34;一：es5基础-es5是从ECMAScript从第一版到现在比较完善的一版&#34;&gt;&lt;a href=&#34;#一：es5基础-es5是从ECMAScript从第一版到现在比较完善的一版&#34; class=&#34;headerlink&#34; title=&#34;一：es5基础(es5是从ECMAScript从第一版到现在比较完善的一版)&#34;&gt;&lt;/a&gt;一：es5基础(es5是从ECMAScript从第一版到现在比较完善的一版)&lt;/h2&gt;&lt;h3 id=&#34;1：变量-var&#34;&gt;&lt;a href=&#34;#1：变量-var&#34; class=&#34;headerlink&#34; title=&#34;1：变量 var&#34;&gt;&lt;/a&gt;1：变量 var&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.var声明的作用域
    //该变量将在函数退出时被销毁
    function test() &amp;#123; 
         var message = &amp;quot;hi&amp;quot;; // 局部变量
    &amp;#125; 
    test(); 
    console.log(message); // 出错！
    
    //去掉之前的 var 操作符之后，message 就变成了全局变量
    function test() &amp;#123; 
         message = &amp;quot;hi&amp;quot;; // 全局变量
    &amp;#125; 
    test(); 
    console.log(message); // &amp;quot;hi&amp;quot;


2.逗号分隔符定义多个变量
    var name = &amp;#39;hi&amp;#39;,
        age = 18,
        height = 1.8
    
3.var声明提升
    function foo() &amp;#123; 
         console.log(age); 
         var age = 26; 
    &amp;#125; 
    foo(); // undefined 

上面的代码等价于
    function foo() &amp;#123; 
         var age; 
         console.log(age); 
         age = 26; 
    &amp;#125; 
    foo(); // undefined

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2：JavaScript-ES5-数据类型&#34;&gt;&lt;a href=&#34;#2：JavaScript-ES5-数据类型&#34; class=&#34;headerlink&#34; title=&#34;2：JavaScript(ES5)数据类型&#34;&gt;&lt;/a&gt;2：JavaScript(ES5)数据类型&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;数据类型：`Undefined`、`Null`、`Boolean`、`String`、`Number`、`Symbol （ES6新出的）`、`Object`
引用类型：Object可以细分为：`基本引用类型`,`集合引用类型`
基本引用类型：`Date`,`RegExp`,`原始包装类型(Boolean,Number,String)`,`单例内置对象(Global,Math)`
集合引用类型：`Object`,`Array`,`定型数组`,`Map`,`WeakMap`,`Set`,`WeakSet`
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3：数据类型的检测&#34;&gt;&lt;a href=&#34;#3：数据类型的检测&#34; class=&#34;headerlink&#34; title=&#34;3：数据类型的检测&#34;&gt;&lt;/a&gt;3：数据类型的检测&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;`为什么要有数据类型的检测?`
只有 7 种数据类型似乎不足以表示全部数据。但 ECMAScript 的数据类型很灵活，一种数据类型可以当作多种数据类型来使用


`有哪些检测方法?`
(1)typeof
(2)instanceof(主要用于判断是那种对象类型)
(3)constructor  
(4)Object.prototype.toString.call()

1：在`JavaScript`里使用`typeof`判断数据类型，即：`number`、`string`、`undefined`、`boolean`。

2：对于`null`、`array`、`function`、`object`来说，使用`typeof`都会统一返回`object`字符串。

3：要想区分对象、数组、函数、单纯使用`typeof`是不行的。在JS中，可以通过`Object.prototype.toString.call()`方法，判断某个对象之属于哪种内置类型。分为`null`、`string`、`boolean`、`number`、`undefined`、`array`、`function`、`object`、`date`、`math`。

4：constructor 本来是用于标识对象类型的。

5：一般认为 instanceof 操作符是确定对象类型 更可靠的方式。


    let obj = &amp;#123;&amp;#125;
    let num1 = 1
    console.log(typeof obj)   //object
    console.log(obj instanceof Object)  //true
    console.log(obj.constructor) //ƒ Object() &amp;#123; [native code] &amp;#125;
    console.log( Object.prototype.toString.call(1)) // [object Number]
    console.log(Object.prototype.toString.call(obj)) // [object Object]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;二：es6新增的特性&#34;&gt;&lt;a href=&#34;#二：es6新增的特性&#34; class=&#34;headerlink&#34; title=&#34;二：es6新增的特性&#34;&gt;&lt;/a&gt;二：es6新增的特性&lt;/h2&gt;&lt;h3 id=&#34;1：变量-let&#34;&gt;&lt;a href=&#34;#1：变量-let&#34; class=&#34;headerlink&#34; title=&#34;1：变量 let&#34;&gt;&lt;/a&gt;1：变量 let&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.只能在块作用域里面生效
    if (true) &amp;#123; 
         var name = &amp;#39;Matt&amp;#39;; 
         console.log(name); // Matt 
    &amp;#125; 
    console.log(name); // Matt

    if (true) &amp;#123; 
         let age = 26; 
         console.log(age); // 26 
    &amp;#125; 
    console.log(age); // ReferenceError: age 没有定义

2.不能重复定义同一个变量
    var name; 
    var name; 

    let age; 
    let age; // SyntaxError；标识符 age 已经声明过了

3.暂时性死区
    // name 会被提升
    console.log(name); // undefined 
    var name = &amp;#39;Matt&amp;#39;; 

    // age 不会被提升
    console.log(age); // ReferenceError：age 没有定义
    let age = 26; 

4.全局声明
    // 与 var 关键字不同，使用 let 在全局作用域中声明的变量不会成为 window 对象的属性

    var name = &amp;#39;Matt&amp;#39;; 
    console.log(window.name); // &amp;#39;Matt&amp;#39; 

    let age = 26; 
    console.log(window.age); // undefined
    
5.for 循环中的 let声明
    // 在 let出现之前，for 循环定义的迭代变量会渗透到循环体外部：
        for (var i = 0; i &amp;lt; 5; ++i) &amp;#123; 
             // 循环逻辑 
        &amp;#125; 
    console.log(i); // 5
    
    // 改成使用 let之后，这个问题就消失了，因为迭代变量的作用域仅限于 for 循环块内部：
        for (let i = 0; i &amp;lt; 5; ++i) &amp;#123; 
             // 循环逻辑
        &amp;#125; 
    console.log(i); // ReferenceError: i 没有定义
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2：变量-const&#34;&gt;&lt;a href=&#34;#2：变量-const&#34; class=&#34;headerlink&#34; title=&#34;2：变量 const&#34;&gt;&lt;/a&gt;2：变量 const&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.声明变量时必须同时初始化变量，如果是常量且不能修改,如果是对象则可以修改
2.不允许重复声明
3.声明的作用域也是块
4.不能用 const 来声明迭代变量（因为迭代变量会自增）
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3：解构赋值&#34;&gt;&lt;a href=&#34;#3：解构赋值&#34; class=&#34;headerlink&#34; title=&#34;3：解构赋值&#34;&gt;&lt;/a&gt;3：解构赋值&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.分为数组解构和对象解构，项目中从接口获取的数据可以解构为自己需要的数据，也常用于交换变量值
2.这里面引入了rest参数，用来获取函数的多余参数，这样就不需要使用arguments对象。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4：模板字符串-主要是针对变量&#34;&gt;&lt;a href=&#34;#4：模板字符串-主要是针对变量&#34; class=&#34;headerlink&#34; title=&#34;4：模板字符串(主要是针对变量)&#34;&gt;&lt;/a&gt;4：模板字符串(主要是针对变量)&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;&amp;#123;
    let name = &amp;#39;list&amp;#39;;
    let info = &amp;#39;hello world&amp;#39;;
    let m = `i am $&amp;#123;name&amp;#125;,$&amp;#123;info&amp;#125;`;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5：数组新增的方法&#34;&gt;&lt;a href=&#34;#5：数组新增的方法&#34; class=&#34;headerlink&#34; title=&#34;5：数组新增的方法&#34;&gt;&lt;/a&gt;5：数组新增的方法&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.Array.from()：遍历数组元素，用于将类数组结构转换为数组实例
2.Array.of()：用于将一组参数转换为数组实例
3.Array.fill()：替换元素
4.Array.keys()：返回一个数组，返回的是数组的下标
5.Array.values()：返回一个数组，返回的是数组中的值
6.Array.entries()：返回下标和值
7.Array.copyWithin(起始位置,从第几个数据读取,截止位置)
8.Array.find()：找出第一个符合条件的数组成员
9.Array.findIndex()：找出第一个符合条件的数组成员的下标
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;6：字符串新增的方法&#34;&gt;&lt;a href=&#34;#6：字符串新增的方法&#34; class=&#34;headerlink&#34; title=&#34;6：字符串新增的方法&#34;&gt;&lt;/a&gt;6：字符串新增的方法&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.String.includes(value)：是否包含value值，是的话返回true
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;7：函数新增的方法&#34;&gt;&lt;a href=&#34;#7：函数新增的方法&#34; class=&#34;headerlink&#34; title=&#34;7：函数新增的方法&#34;&gt;&lt;/a&gt;7：函数新增的方法&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.扩展运算符：…[1,2,3] //1,2,3 把数组拆分成了三个值
2.箭头函数：
箭头函数是普通函数的简写，可以更优雅的定义一个函数，和普通函数相比，有以下几点差异：
（1）函数体内的 this 对象，就是定义时所在的对象，而不是使用时所在的对象。
（2）不可以使用 arguments 对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。
（3）不可以使用 yield 命令，因此箭头函数不能用作 Generator 函数。
（4）不可以使用 new 命令，因为：
没有自己的 this，无法调用 call，apply。
没有 prototype 属性 ，而 new 命令在执行时需要将构造函数的 prototype 赋值给新的对象的 proto
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;8：对象新增的方法&#34;&gt;&lt;a href=&#34;#8：对象新增的方法&#34; class=&#34;headerlink&#34; title=&#34;8：对象新增的方法&#34;&gt;&lt;/a&gt;8：对象新增的方法&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.Object.is(value1,value2)：判断两个参数是否相等
2.Object.assign(value1,value2)：浅拷贝，拷贝出来的结果是 [value1,value2]（value1和value2都是对象）
3.扩展运算符：&amp;#123;a,b,…c&amp;#125;=&amp;#123;a:’a’,b:’b’,c:’c’,d:’d’&amp;#125;→c=&amp;#123;c:’c’,d:’d’&amp;#125;
4.for…in循环遍历对象自身的和继承的可枚举属性
5.Object.keys(obj)：返回一个数组，返回的是数组成员的下标
6.Object.getOwnPropertySymbols(obj)：返回的是Symbol定义的值
7.Object.ownKeys(obj)：可以拿到所有的值，包括Symbol定义的和非Symbol定义的
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;9：Symbol用法&#34;&gt;&lt;a href=&#34;#9：Symbol用法&#34; class=&#34;headerlink&#34; title=&#34;9：Symbol用法&#34;&gt;&lt;/a&gt;9：Symbol用法&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.这是ES6新增的数据类型，表示独一无二的值

&amp;#123;
let a1 = Symbol.for(‘a1’)
//后面再对a1赋值也是无效的，a1的值依旧是’a1’
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;10：Set-Map数据结构&#34;&gt;&lt;a href=&#34;#10：Set-Map数据结构&#34; class=&#34;headerlink&#34; title=&#34;10：Set-Map数据结构&#34;&gt;&lt;/a&gt;10：Set-Map数据结构&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.Set本身是一个构造函数，类似于数组，但是里面的值都是唯一的，没有重复的值，所以可以用Set去重

&amp;#123;
    let array = [1,1,2,2,6,5];
    let set = new Set(array);
    console.log(set);  //[1,2,6,5]
&amp;#125;
&amp;#123;
    //接下里介绍几个方法
    let arr = [&amp;#39;add&amp;#39;,&amp;#39;delete&amp;#39;,&amp;#39;clear&amp;#39;,&amp;#39;has&amp;#39;];
    let list = new Set(arr);
    list.has(&amp;#39;add&amp;#39;) //判断是否有该值
    list.delete(&amp;#39;add&amp;#39;);	//、删除该值
    list.clear(); //清空
&amp;#125;


2.Map数据结构类似于对象，也是键值对的集合，但是键的范围不局限与字符
&amp;#123;
    let map = new Map();
    let arr = [&amp;#39;123&amp;#39;];
    map.set(arr,456);
    map.get(arr);  //456
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;11：Proxy&#34;&gt;&lt;a href=&#34;#11：Proxy&#34; class=&#34;headerlink&#34; title=&#34;11：Proxy&#34;&gt;&lt;/a&gt;11：Proxy&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。

2.Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，
因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，
用在这里表示由它来“代理”某些操作，可以译为“代理器”。

var proxy = new Proxy(target, handler);

优点：通过代理，条件与对象本身隔绝，后续代码维护、健壮都很强
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;12：Class的基本用法&#34;&gt;&lt;a href=&#34;#12：Class的基本用法&#34; class=&#34;headerlink&#34; title=&#34;12：Class的基本用法&#34;&gt;&lt;/a&gt;12：Class的基本用法&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.class其实是对function的简化 class的声明

//基本定义和生成实例
class Parent&amp;#123;
    constructor(name)&amp;#123;
        this.name = name;
    &amp;#125;
&amp;#125;
let parent = new Parent(&amp;#39;xiaomao&amp;#39;)
//继承
class Child extends Parent&amp;#123;
    //子类怎么去覆盖父类,this一定要放在super后面
    constructor(name = &amp;#39;child&amp;#39;)&amp;#123;
        super(name);   //若super()，则所有参数都是父类的
        this.type = &amp;#39;child&amp;#39;;   //子类增加的属性
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;13：Promise&#34;&gt;&lt;a href=&#34;#13：Promise&#34; class=&#34;headerlink&#34; title=&#34;13：Promise&#34;&gt;&lt;/a&gt;13：Promise&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;promise实际上解决jquery的ajax回调地域(解决层层嵌套),只是异步编程的一种解决方案
new promise(function(resolve,reject) &amp;#123;
        resolve(&amp;#39;...&amp;#39;)
    &amp;#125; ).then(function(value) &amp;#123;
        console.log(value)
    &amp;#125;).catch(function(error)&amp;#123;
    console.log(error)
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;1：什么是promise&#34;&gt;&lt;a href=&#34;#1：什么是promise&#34; class=&#34;headerlink&#34; title=&#34;1：什么是promise&#34;&gt;&lt;/a&gt;1：什么是promise&lt;/h5&gt;&lt;p&gt;Promise 是异步编程的一种解决方案： 从语法上讲，promise是一个对象，从它可以获取异步操作的消息；从本意上讲，它是承诺，承诺它过一段时间会给你一个结果。 promise有三种状态：**pending(等待态)，fulfiled(成功态)，rejected(失败态)**；状态一旦改变，就不会再变。创造promise实例后，它会立即执行&lt;/p&gt;
&lt;h5 id=&#34;2：promise用来解决什么问题&#34;&gt;&lt;a href=&#34;#2：promise用来解决什么问题&#34; class=&#34;headerlink&#34; title=&#34;2：promise用来解决什么问题&#34;&gt;&lt;/a&gt;2：promise用来解决什么问题&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;// 当参数a大于10且参数fn2是一个方法时 执行fn2
     function fn1(a, fn2)&amp;#123;
        if(a &amp;gt; 10 &amp;amp;&amp;amp; fn2 instanceof Function)&amp;#123;
            fn2()
        &amp;#125;
     &amp;#125;

     fn1(12, ()=&amp;gt;&amp;#123;
         console.log(&amp;#39;this is callback&amp;#39;)
     &amp;#125;)
一般来说我们会碰到的回调嵌套都不会很多，一般就一到两级，但是某些情况下，回调嵌套很多时，代码就会非常繁琐，会给我们的编程带来很多的麻烦，这种情况俗称——回调地狱。

主要用来解决：
1：回调地狱，代码难以维护，常常第一个的函数输出的是第二个函数的输入的这种现象
2：promise可以支持多个并发的请求，获取并发请求中的请求
3：promise可以解决异步问题，本身不能说promise是异步的
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;3：promise的基础用法&#34;&gt;&lt;a href=&#34;#3：promise的基础用法&#34; class=&#34;headerlink&#34; title=&#34;3：promise的基础用法&#34;&gt;&lt;/a&gt;3：promise的基础用法&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1： Promise是一个构造函数，自己身上有all、reject、resolve这几个眼熟的方法，原型上有then、catch等同样很眼熟的方法。

      let p = new Promise((resolve, reject) =&amp;gt; &amp;#123;
          //执行异步操作
          setTimeout(() =&amp;gt; &amp;#123;
              console.log(&amp;#39;执行完成&amp;#39;)
              resolve(&amp;#39;我是成功！！&amp;#39;)
          &amp;#125;, 2000);
      &amp;#125;)
上段代码会直接执行 2秒后输出 &amp;#39;执行完成&amp;#39;

Promise的构造函数接收一个参数：函数，并且这个函数需要传入两个参数：
resolve：异步操作执行成功后的回调函数
reject：异步操作执行失败后的回调函数

2：then 链式操作的用法  
从表面上看，Promise只是能够简化层层回调的写法，而实质上，Promise的精髓是“状态”，用维护状态、传递状态的方式来使得回调函数能够及时调用，它比传递callback函数要简单、灵活的多。所以使用Promise的正确场景是这样的：
      p.then((data) =&amp;gt; &amp;#123;
          console.log(data)
      &amp;#125;)

3：reject的用法 
把Promise的状态置为rejected，这样我们在then中就能捕捉到，然后执行“失败”情况的回调。看下面的代码。
      let p = new Promise((resolve, reject) =&amp;gt; &amp;#123;
          //执行异步操作
          setTimeout(() =&amp;gt; &amp;#123;
              let num = Math.ceil(Math.random()*10) //生成1 - 10的随机数
               if(num &amp;lt;= 5)&amp;#123;
                   resolve(num)
               &amp;#125;else&amp;#123;
                   reject(&amp;#39;数字是大于5的&amp;#39;)
               &amp;#125;
          &amp;#125;, 1000);
      &amp;#125;)

      p.then((data) =&amp;gt; &amp;#123;
          console.log(&amp;#39;resolve&amp;#39;,data)
      &amp;#125;,(err) =&amp;gt; &amp;#123;
          console.log(&amp;#39;rejeced&amp;#39;,err)
      &amp;#125;)
产生以一个随机数，如果大于5就会使用reject  错误(err)输出&amp;#39;数字是大于5&amp;#39;

4：catch的用法 (前面的代码有错误可以报出来，不要promise是无法执行下来的)
我们知道Promise对象除了then方法，还有一个catch方法，它是做什么用的呢？其实它和then的第二个参数一样，用来指定reject的回调。用法是这样：
      let p = new Promise((resolve, reject) =&amp;gt; &amp;#123;
          //执行异步操作
          setTimeout(() =&amp;gt; &amp;#123;
              let num = Math.ceil(Math.random()*10) //生成1 - 10的随机数
               if(num &amp;lt;= 5)&amp;#123;
                   resolve(num)
               &amp;#125;else&amp;#123;
                   reject(&amp;#39;数字是大于5的&amp;#39;)
               &amp;#125;
          &amp;#125;, 1000);
      &amp;#125;)

      p.then((data) =&amp;gt; &amp;#123;
          console.log(&amp;#39;resolve&amp;#39;,data)  // 假设随机数是 3  那么输出 resolve 为 3
          console.log(aaaa)  //aaaa是没有被定义的
      &amp;#125;,(err) =&amp;gt; &amp;#123;
          console.log(&amp;#39;rejeced&amp;#39;,err)
      &amp;#125;).catch((err) =&amp;gt; &amp;#123;
          console.log(&amp;#39;rejeced&amp;#39;,err)  //  这里报错 ： rejeced ReferenceError: aaaa is not defined
      &amp;#125;)
在resolve的回调中，我们console.log(somedata);而aaaa这个变量是没有被定义的。如果我们不用Promise，代码运行到这里就直接在控制台报错了，不往下运行了。
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;4：all的用法&#34;&gt;&lt;a href=&#34;#4：all的用法&#34; class=&#34;headerlink&#34; title=&#34;4：all的用法&#34;&gt;&lt;/a&gt;4：all的用法&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1:
all的用法：谁跑的慢，以谁为准执行回调。all接收一个数组参数，里面的值最终都算返回Promise对象

2:
Promise的all方法提供了并行执行异步操作的能力，并且在所有异步操作执行完后才执行回调。看下面的例子：

        let promise1 = new Promise((resolve, reject) =&amp;gt; &amp;#123;
            setTimeout(() =&amp;gt; &amp;#123;
                var num = Math.ceil(Math.random() * 10); //生成1-10的随机数
                if (num &amp;lt;= 5) &amp;#123;
                    resolve(num);
                &amp;#125;
                else &amp;#123;
                    reject(&amp;#39;数字太大了1&amp;#39;);
                &amp;#125;
            &amp;#125;)
        &amp;#125;)
        let promise2 = new Promise((resolve, reject) =&amp;gt; &amp;#123;
            setTimeout(() =&amp;gt; &amp;#123;
                var num = Math.ceil(Math.random() * 10); //生成1-10的随机数
                if (num &amp;lt;= 5) &amp;#123;
                    resolve(num);
                &amp;#125;
                else &amp;#123;
                    reject(&amp;#39;数字太大了2&amp;#39;);
                &amp;#125;
            &amp;#125;)
        &amp;#125;)
        let promise3 = new Promise((resolve, reject) =&amp;gt; &amp;#123;
            setTimeout(() =&amp;gt; &amp;#123;
                var num = Math.ceil(Math.random() * 10); //生成1-10的随机数
                if (num &amp;lt;= 5) &amp;#123;
                    resolve(num);
                &amp;#125;
                else &amp;#123;
                    reject(&amp;#39;数字太大了3&amp;#39;);
                &amp;#125;
            &amp;#125;)
        &amp;#125;)

        let p = Promise.all([promise1, promise2, promise3])

        p.then(function (res) &amp;#123;
            //三个都成功则成功 res返回 [p1,p2,p3] 结果的数组
            console.log(res)
        &amp;#125;, function (err) &amp;#123;
            //只要有失败，则失败  err 返回在哪个promise失败的回调
            console.log(err)
        &amp;#125;)

有了all，你就可以并行执行多个异步操作，并且在一个回调中处理所有的返回数据，是不是很酷？有一个场景是很适合用这个的，一些游戏类的素材比较多的应用，打开网页时，预先加载需要用到的各种资源如图片、flash以及各种静态文件。所有的都加载完后，我们再进行页面的初始化。
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;5：race的用法&#34;&gt;&lt;a href=&#34;#5：race的用法&#34; class=&#34;headerlink&#34; title=&#34;5：race的用法&#34;&gt;&lt;/a&gt;5：race的用法&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1:race的用法：谁跑的快，以谁为准执行回调

2：race的使用场景：比如我们可以用race给某个异步请求设置超时时间，并且在超时后执行相应的操作，代码如下

        //请求某个图片资源
        function requestImg() &amp;#123;
            var p = new Promise((resolve, reject) =&amp;gt; &amp;#123;
                var img = new Image();
                img.onload = function () &amp;#123;
                    resolve(img);
                &amp;#125;
                img.src = &amp;#39;图片的路径&amp;#39;;
            &amp;#125;);
            return p;
        &amp;#125;
        //延时函数，用于给请求计时
        function timeout() &amp;#123;
            var p = new Promise((resolve, reject) =&amp;gt; &amp;#123;
                setTimeout(() =&amp;gt; &amp;#123;
                    reject(&amp;#39;图片请求超时&amp;#39;);
                &amp;#125;, 5000);
            &amp;#125;);
            return p;
        &amp;#125;
        Promise.race([requestImg(), timeout()]).then((data) =&amp;gt; &amp;#123;
            console.log(data);
        &amp;#125;).catch((err) =&amp;gt; &amp;#123;
            console.log(err);
        &amp;#125;);

requestImg函数会异步请求一张图片，我把地址写为&amp;quot;图片的路径&amp;quot;，所以肯定是无法成功请求到的。timeout函数是一个延时5秒的异步操作。我们把这两个返回Promise对象的函数放进race，于是他俩就会赛跑，如果5秒之内图片请求成功了，那么遍进入then方法，执行正常的流程。如果5秒钟图片还未成功返回，那么timeout就跑赢了，则进入catch，报出“图片请求超时”的信息。
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;6：手写一个promise&#34;&gt;&lt;a href=&#34;#6：手写一个promise&#34; class=&#34;headerlink&#34; title=&#34;6：手写一个promise&#34;&gt;&lt;/a&gt;6：手写一个promise&lt;/h5&gt;&lt;h5 id=&#34;7：promise面试题&#34;&gt;&lt;a href=&#34;#7：promise面试题&#34; class=&#34;headerlink&#34; title=&#34;7：promise面试题&#34;&gt;&lt;/a&gt;7：promise面试题&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.
const promise = new Promise((resolve, reject) =&amp;gt; &amp;#123;
  console.log(1)
  resolve()
  console.log(2)
&amp;#125;)
promise.then(() =&amp;gt; &amp;#123;
  console.log(3)
&amp;#125;)
console.log(4)


输出:  1 2 4 3
解释:  Promise构造函数是同步执行的,promsie.then 中的函数是异步执行的 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;2.
const promise1 = new Promise((resolve, reject) =&amp;gt; &amp;#123;
  setTimeout(() =&amp;gt; &amp;#123;
    resolve(&amp;#39;success&amp;#39;)
  &amp;#125;, 1000)
&amp;#125;)
const promise2 = promise1.then(() =&amp;gt; &amp;#123;
  throw new Error(&amp;#39;error!!!&amp;#39;)
&amp;#125;)

console.log(&amp;#39;promise1&amp;#39;, promise1)
console.log(&amp;#39;promise2&amp;#39;, promise2)

setTimeout(() =&amp;gt; &amp;#123;
  console.log(&amp;#39;promise1&amp;#39;, promise1)
  console.log(&amp;#39;promise2&amp;#39;, promise2)
&amp;#125;, 2000)

输出:
promise1 Promise &amp;#123; &amp;lt;pending&amp;gt; &amp;#125;
promise2 Promise &amp;#123; &amp;lt;pending&amp;gt; &amp;#125;
(node:50928) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: error!!!
(node:50928) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
promise1 Promise &amp;#123; &amp;#39;success&amp;#39; &amp;#125;
promise2 Promise &amp;#123;
  &amp;lt;rejected&amp;gt; Error: error!!!
    at promise.then (...)
    at &amp;lt;anonymous&amp;gt; &amp;#125;

解释：promise 有 3 种状态：pending、fulfilled 或 rejected。状态改变只能是 pending-&amp;gt;fulfilled 或者 pending-&amp;gt;rejected，状态一旦改变则不能再变。上面 promise2 并不是 promise1，而是返回的一个新的 Promise 实例。

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;3.
const promise = new Promise((resolve, reject) =&amp;gt; &amp;#123;
  resolve(&amp;#39;success1&amp;#39;)
  reject(&amp;#39;error&amp;#39;)
  resolve(&amp;#39;success2&amp;#39;)
&amp;#125;)

promise
  .then((res) =&amp;gt; &amp;#123;
    console.log(&amp;#39;then: &amp;#39;, res)
  &amp;#125;)
  .catch((err) =&amp;gt; &amp;#123;
    console.log(&amp;#39;catch: &amp;#39;, err)
  &amp;#125;)

输出: success1
解释：构造函数中的 resolve 或 reject 只有第一次执行有效，多次调用没有任何作用，呼应代码二结论：promise 状态一旦改变则不能再变。
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;4.
Promise.resolve(1)
  .then((res) =&amp;gt; &amp;#123;
    console.log(res)
    return 2
  &amp;#125;)
  .catch((err) =&amp;gt; &amp;#123;
    return 3
  &amp;#125;)
  .then((res) =&amp;gt; &amp;#123;
    console.log(res)
  &amp;#125;)

输出:  1,2

解释：promise 可以链式调用。提起链式调用我们通常会想到通过 return this 实现，不过 Promise 并不是这样实现的。promise 每次调用 .then 或者 .catch 都会返回一个新的 promise，从而实现了链式调用。
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;5.
const promise = new Promise((resolve, reject) =&amp;gt; &amp;#123;
  setTimeout(() =&amp;gt; &amp;#123;
    console.log(&amp;#39;once&amp;#39;)
    resolve(&amp;#39;success&amp;#39;)
  &amp;#125;, 1000)
&amp;#125;)

const start = Date.now()
promise.then((res) =&amp;gt; &amp;#123;
  console.log(res, Date.now() - start)
&amp;#125;)
promise.then((res) =&amp;gt; &amp;#123;
  console.log(res, Date.now() - start)
&amp;#125;)

输出:
once
success 1005
success 1007

解释：promise 的 .then 或者 .catch 可以被调用多次，但这里 Promise 构造函数只执行一次。或者说 promise 内部状态一经改变，并且有了一个值，那么后续每次调用 .then 或者 .catch 都会直接拿到该值
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;6.
Promise.resolve()
  .then(() =&amp;gt; &amp;#123;
    return new Error(&amp;#39;error!!!&amp;#39;)
  &amp;#125;)
  .then((res) =&amp;gt; &amp;#123;
    console.log(&amp;#39;then: &amp;#39;, res)
  &amp;#125;)
  .catch((err) =&amp;gt; &amp;#123;
    console.log(&amp;#39;catch: &amp;#39;, err)
  &amp;#125;)

输出:
then: Error: error!!!
    at Promise.resolve.then (...)
    at ...
                             
解释：.then 或者 .catch 中 return 一个 error 对象并不会抛出错误，所以不会被后续的 .catch 捕获，需要改成其中一种：                                                       
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;7.
const promise = Promise.resolve()
  .then(() =&amp;gt; &amp;#123;
    return promise
  &amp;#125;)
promise.catch(console.error)

输出:
TypeError: Chaining cycle detected for promise #&amp;lt;Promise&amp;gt;
    at &amp;lt;anonymous&amp;gt;
    at process._tickCallback (internal/process/next_tick.js:188:7)
    at Function.Module.runMain (module.js:667:11)
    at startup (bootstrap_node.js:187:16)
    at bootstrap_node.js:607:3

解释：.then 或 .catch 返回的值不能是 promise 本身，否则会造成死循环。类似于：
process.nextTick(function tick () &amp;#123;
  console.log(&amp;#39;tick&amp;#39;)
  process.nextTick(tick)
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;8.
Promise.resolve(1)
  .then(2)
  .then(Promise.resolve(3))
  .then(console.log)

输出: 1

解释：.then 或者 .catch 的参数期望是函数，传入非函数则会发生值穿透。
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;9.
Promise.resolve()
  .then(function success (res) &amp;#123;
    throw new Error(&amp;#39;error&amp;#39;)
  &amp;#125;, function fail1 (e) &amp;#123;
    console.error(&amp;#39;fail1: &amp;#39;, e)
  &amp;#125;)
  .catch(function fail2 (e) &amp;#123;
    console.error(&amp;#39;fail2: &amp;#39;, e)
  &amp;#125;)

输出:
fail2: Error: error
    at success (...)
    at ...
                
解释：.then 可以接收两个参数，第一个是处理成功的函数，第二个是处理错误的函数。.catch 是 .then 第二个参数的简便写法，但是它们用法上有一点需要注意：.then 的第二个处理错误的函数捕获不了第一个处理成功的函数抛出的错误，而后续的 .catch 可以捕获之前的错误。当然以下代码也可以：            
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;10.
process.nextTick(() =&amp;gt; &amp;#123;
  console.log(&amp;#39;nextTick&amp;#39;)
&amp;#125;)
Promise.resolve()
  .then(() =&amp;gt; &amp;#123;
    console.log(&amp;#39;then&amp;#39;)
  &amp;#125;)
setImmediate(() =&amp;gt; &amp;#123;
  console.log(&amp;#39;setImmediate&amp;#39;)
&amp;#125;)
console.log(&amp;#39;end&amp;#39;)

输出:
end
nextTick
then
setImmediate

解释：process.nextTick 和 promise.then 都属于 microtask，而 setImmediate 属于 macrotask，在事件循环的 check 阶段执行。事件循环的每个阶段（macrotask）之间都会执行 microtask，事件循环的开始会先执行一次 microtask。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;14：Iterator和for…of循环&#34;&gt;&lt;a href=&#34;#14：Iterator和for…of循环&#34; class=&#34;headerlink&#34; title=&#34;14：Iterator和for…of循环&#34;&gt;&lt;/a&gt;14：Iterator和for…of循环&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;遍历器（Iterator）就是这样一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。

Iterator 的作用有三个：
一是为各种数据结构，提供一个统一的、简便的访问接口；
二是使得数据结构的成员能够按某种次序排列；
三是 ES6 创造了一种新的遍历命令for…of循环，Iterator 接口主要供for…of消费
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;15：Generator&#34;&gt;&lt;a href=&#34;#15：Generator&#34; class=&#34;headerlink&#34; title=&#34;15：Generator&#34;&gt;&lt;/a&gt;15：Generator&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。

Generator 函数有多种理解角度。语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。

执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。
返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。

形式上，Generator 函数是一个普通函数，但是有两个特征。
一是，function关键字与函数名之间有一个星号；
二是，函数体内部使用yield表达式，定义不同的内部状态（yield在英语里的意思就是“产出”

function* helloWorldGenerator() &amp;#123;
  yield &amp;#39;hello&amp;#39;;
  yield &amp;#39;world&amp;#39;;
  return &amp;#39;ending&amp;#39;;
&amp;#125;
var hw = helloWorldGenerator();

上面代码定义了一个 Generator 函数helloWorldGenerator，它内部有两个yield表达式（hello和world），即该函数有三个状态：hello，world 和 return 语句（结束执行）。

然后，Generator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。
不同的是，调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象，
也就是前面介绍的遍历器对象（Iterator Object）。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;16：Module体系&#34;&gt;&lt;a href=&#34;#16：Module体系&#34; class=&#34;headerlink&#34; title=&#34;16：Module体系&#34;&gt;&lt;/a&gt;16：Module体系&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;
模块功能主要由两个命令构成：
export和import。
export命令用于规定模块的对外接口，
import命令用于输入其他模块提供的功能。
export default&amp;#123;&amp;#125;
为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到export default命令，为模块指定默认输出。

import animal from &amp;#39;./content&amp;#39;
export default &amp;#39;a cat&amp;#39;


import &amp;#123;say.type&amp;#125; from &amp;#39;./content&amp;#39;
import * as content from &amp;#39;./content&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;三：es7新增的特性&#34;&gt;&lt;a href=&#34;#三：es7新增的特性&#34; class=&#34;headerlink&#34; title=&#34;三：es7新增的特性&#34;&gt;&lt;/a&gt;三：es7新增的特性&lt;/h2&gt;&lt;h3 id=&#34;1-数组新增的方法&#34;&gt;&lt;a href=&#34;#1-数组新增的方法&#34; class=&#34;headerlink&#34; title=&#34;1:数组新增的方法&#34;&gt;&lt;/a&gt;1:数组新增的方法&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.Array.includes(value)：是否包含value值，是的话返回true
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;十四：防抖和节流&#34;&gt;&lt;a href=&#34;#十四：防抖和节流&#34; class=&#34;headerlink&#34; title=&#34;十四：防抖和节流&#34;&gt;&lt;/a&gt;十四：防抖和节流&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;防抖的定义:任务频繁触发的情况下，只有触发的间隔超过指定间隔，任务才执行。

案例:方式用户多次点击按钮，监听滚动条滚动,操纵一个小人让他有跳跃的动作，你狂点鼠标，小人狂跳，这就是最直观的抖动现象。

代码实现:
        function debounce(fn, delay) &amp;#123;
            let timer;
            return function () &amp;#123;
                let args = arguments;
                if (timer) &amp;#123;
                    clearTimeout(timer);
                &amp;#125;
                timer = setTimeout(() =&amp;gt; &amp;#123;
                    fn.call(this, args);
                &amp;#125;, delay)
            &amp;#125;
        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;节流的定义:指定时间间隔只执行一次，执行频率不受操作频率影响，但会把所有的都执行完。

案例:节流就像排队，比如我们在车站候车，当听到检票进站的通知，不论你有多紧急，跑得多快，还是得跟着排队，一个个地过闸机口，你的通过速度不可能比闸机口开关的速度更快了。

代码实现:
        function throttle(fn, delay) &amp;#123;
            let flag = true;
            return function () &amp;#123;
                if (flag) &amp;#123;
                    flag = false;
                &amp;#125;
                timer = setTimeout(() =&amp;gt; &amp;#123;
                    fn();
                    flag = true;
                &amp;#125;, delay)
            &amp;#125;
        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/" />
        <category term="Javascript" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Javascript/" />
        <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/" />
        <updated>2021-06-25T08:43:00.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/front-end/Typescript/</id>
        <title>Typescript基础</title>
        <link rel="alternate" href="http://yoursite.com/front-end/Typescript/"/>
        <content type="html"></content>
        <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/" />
        <category term="Typescript" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Typescript/" />
        <category term="Typescript" scheme="http://yoursite.com/tags/Typescript/" />
        <updated>2021-06-25T08:43:00.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/front-end/React/</id>
        <title>React基础</title>
        <link rel="alternate" href="http://yoursite.com/front-end/React/"/>
        <content type="html">&lt;h1 id=&#34;一：React-基础&#34;&gt;&lt;a href=&#34;#一：React-基础&#34; class=&#34;headerlink&#34; title=&#34;一：React 基础&#34;&gt;&lt;/a&gt;一：React 基础&lt;/h1&gt;&lt;h2 id=&#34;1-jsx&#34;&gt;&lt;a href=&#34;#1-jsx&#34; class=&#34;headerlink&#34; title=&#34;1.jsx&#34;&gt;&lt;/a&gt;1.jsx&lt;/h2&gt;&lt;h2 id=&#34;2-虚拟dom&#34;&gt;&lt;a href=&#34;#2-虚拟dom&#34; class=&#34;headerlink&#34; title=&#34;2.虚拟dom&#34;&gt;&lt;/a&gt;2.虚拟dom&lt;/h2&gt;&lt;h1 id=&#34;二：组件化&#34;&gt;&lt;a href=&#34;#二：组件化&#34; class=&#34;headerlink&#34; title=&#34;二：组件化&#34;&gt;&lt;/a&gt;二：组件化&lt;/h1&gt;&lt;h2 id=&#34;1-context&#34;&gt;&lt;a href=&#34;#1-context&#34; class=&#34;headerlink&#34; title=&#34;1.context&#34;&gt;&lt;/a&gt;1.context&lt;/h2&gt;&lt;h2 id=&#34;2-ant-design&#34;&gt;&lt;a href=&#34;#2-ant-design&#34; class=&#34;headerlink&#34; title=&#34;2.ant-design&#34;&gt;&lt;/a&gt;2.ant-design&lt;/h2&gt;&lt;h2 id=&#34;3-高阶组件&#34;&gt;&lt;a href=&#34;#3-高阶组件&#34; class=&#34;headerlink&#34; title=&#34;3.高阶组件&#34;&gt;&lt;/a&gt;3.高阶组件&lt;/h2&gt;&lt;h1 id=&#34;三：react全家桶&#34;&gt;&lt;a href=&#34;#三：react全家桶&#34; class=&#34;headerlink&#34; title=&#34;三：react全家桶&#34;&gt;&lt;/a&gt;三：react全家桶&lt;/h1&gt;&lt;h2 id=&#34;1-redux&#34;&gt;&lt;a href=&#34;#1-redux&#34; class=&#34;headerlink&#34; title=&#34;1.redux&#34;&gt;&lt;/a&gt;1.redux&lt;/h2&gt;&lt;h2 id=&#34;2-react-router&#34;&gt;&lt;a href=&#34;#2-react-router&#34; class=&#34;headerlink&#34; title=&#34;2.react-router&#34;&gt;&lt;/a&gt;2.react-router&lt;/h2&gt;&lt;h2 id=&#34;3-umi&#34;&gt;&lt;a href=&#34;#3-umi&#34; class=&#34;headerlink&#34; title=&#34;3.umi&#34;&gt;&lt;/a&gt;3.umi&lt;/h2&gt;&lt;h2 id=&#34;4-dva&#34;&gt;&lt;a href=&#34;#4-dva&#34; class=&#34;headerlink&#34; title=&#34;4.dva&#34;&gt;&lt;/a&gt;4.dva&lt;/h2&gt;&lt;h1 id=&#34;四：react源码&#34;&gt;&lt;a href=&#34;#四：react源码&#34; class=&#34;headerlink&#34; title=&#34;四：react源码&#34;&gt;&lt;/a&gt;四：react源码&lt;/h1&gt;&lt;h2 id=&#34;1-虚拟dom构建&#34;&gt;&lt;a href=&#34;#1-虚拟dom构建&#34; class=&#34;headerlink&#34; title=&#34;1.虚拟dom构建&#34;&gt;&lt;/a&gt;1.虚拟dom构建&lt;/h2&gt;&lt;h2 id=&#34;2-createElement&#34;&gt;&lt;a href=&#34;#2-createElement&#34; class=&#34;headerlink&#34; title=&#34;2.createElement&#34;&gt;&lt;/a&gt;2.createElement&lt;/h2&gt;&lt;h2 id=&#34;3-Component&#34;&gt;&lt;a href=&#34;#3-Component&#34; class=&#34;headerlink&#34; title=&#34;3.Component&#34;&gt;&lt;/a&gt;3.Component&lt;/h2&gt;&lt;h2 id=&#34;4-rander&#34;&gt;&lt;a href=&#34;#4-rander&#34; class=&#34;headerlink&#34; title=&#34;4.rander&#34;&gt;&lt;/a&gt;4.rander&lt;/h2&gt;&lt;h1 id=&#34;五：react性能优化&#34;&gt;&lt;a href=&#34;#五：react性能优化&#34; class=&#34;headerlink&#34; title=&#34;五：react性能优化&#34;&gt;&lt;/a&gt;五：react性能优化&lt;/h1&gt;&lt;h1 id=&#34;六：服务端渲染SSR&#34;&gt;&lt;a href=&#34;#六：服务端渲染SSR&#34; class=&#34;headerlink&#34; title=&#34;六：服务端渲染SSR&#34;&gt;&lt;/a&gt;六：服务端渲染SSR&lt;/h1&gt;&lt;h2 id=&#34;1-next-js&#34;&gt;&lt;a href=&#34;#1-next-js&#34; class=&#34;headerlink&#34; title=&#34;1.next.js&#34;&gt;&lt;/a&gt;1.next.js&lt;/h2&gt;</content>
        <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/" />
        <category term="React" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/React/" />
        <category term="React" scheme="http://yoursite.com/tags/React/" />
        <updated>2021-06-25T08:43:00.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/front-end/css%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AF%87/</id>
        <title>css性能优化篇</title>
        <link rel="alternate" href="http://yoursite.com/front-end/css%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AF%87/"/>
        <content type="html">&lt;h1 id=&#34;加载性能&#34;&gt;&lt;a href=&#34;#加载性能&#34; class=&#34;headerlink&#34; title=&#34;加载性能&#34;&gt;&lt;/a&gt;加载性能&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;（1）合并和压缩 CSS 文件以减少文件大小。
（2）css单一样式：当需要下边距和左边距的时候，很多时候选择:margin:top 0 bottom 0;但margin-bottom:bottom;margin-left:left;执行的效率更高。
（3）减少使用@import,而建议使用link，因为后者在页面加载时一起加载，前者是等待页面加载完成之后再进行加载。
（4）延迟或异步加载 CSS 文件，特别是对于首屏渲染来说。
（5）使用 CDN（内容分发网络）来加速 CSS 文件的加载。
（6）利用浏览器缓存机制，设置适当的缓存头信息。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;选择器性能&#34;&gt;&lt;a href=&#34;#选择器性能&#34; class=&#34;headerlink&#34; title=&#34;选择器性能&#34;&gt;&lt;/a&gt;选择器性能&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;（1）关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）。CSS选择符是从右到左进行匹配的。当使用后代选择器的时候，浏览器会遍历所有子元素来确定是否是指定的元素等等；
（2）如果规则拥有ID选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们了）。
（3）避免使用通配规则，如*&amp;#123;&amp;#125;计算次数惊人！只对需要用到的元素进行选择。
（4）尽量少的去对标签进行选择，而是用class。
（5）尽量少的去使用后代选择器，降低选择器的权重值。后代选择器的开销是最高的，尽量将选择器的深度降到最低，最高不要超过三层，更多的使用类来关联每一个标签元素。
（6）了解哪些属性是可以通过继承而来的，然后避免对这些属性重复指定规则。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;渲染性能&#34;&gt;&lt;a href=&#34;#渲染性能&#34; class=&#34;headerlink&#34; title=&#34;渲染性能&#34;&gt;&lt;/a&gt;渲染性能&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;（1）慎重使用高性能属性：浮动、定位。
（2）最小化重绘和重排操作，尽量在一次渲染中完成所有样式的修改。
（3）去除空规则：｛｝。空规则的产生原因一般来说是为了预留样式。去除这些空规则无疑能减少css文档体积。
（4）属性值为0时，不加单位。
（5）属性值为浮动小数0.**，可以省略小数点之前的0。
（6）标准化各种浏览器前缀：带浏览器前缀的在前。标准属性在后。
（7）不使用@import前缀，它会影响css的加载速度。
（8）选择器优化嵌套，尽量避免层级过深。
（9）css雪碧图，同一页面相近部分的小图标，方便使用，减少页面的请求次数，但是同时图片本身会变大，使用时，优劣考虑清楚，再使用。
（10）正确使用display的属性，由于display的作用，某些样式组合会无效，徒增样式体积的同时也影响解析性能。
（11）不滥用web字体。对于中文网站来说WebFonts可能很陌生，国外却很流行。web fonts通常体积庞大，而且一些浏览器在下载web fonts时会阻塞页面渲染损伤性能。
（12）使用硬件加速特性（如 transform 和 opacity）来提高动画的性能。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;可维护性、健壮性&#34;&gt;&lt;a href=&#34;#可维护性、健壮性&#34; class=&#34;headerlink&#34; title=&#34;可维护性、健壮性&#34;&gt;&lt;/a&gt;可维护性、健壮性&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;（1）将具有相同属性的样式抽离出来，整合并通过class在页面中进行使用，提高css的可维护性。
（2）样式与内容分离：将css代码定义到外部css中。
（3）使用模块化的 CSS 结构，将样式分成独立的模块或组件。
（4）使用注释和良好的命名规范，使样式易于理解和维护。
（5）遵循代码风格指南和最佳实践，减少冗余和不必要的样式。
（6）使用 CSS 预处理器（如 Sass 或 Less）来提高样式代码的可维护性和重用性。
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/" />
        <category term="css" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/css/" />
        <category term="css" scheme="http://yoursite.com/tags/css/" />
        <updated>2021-06-25T08:43:00.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/front-end/html+css%E9%9D%A2%E8%AF%95/</id>
        <title>css面试</title>
        <link rel="alternate" href="http://yoursite.com/front-end/html+css%E9%9D%A2%E8%AF%95/"/>
        <content type="html">&lt;h1 id=&#34;BFC&#34;&gt;&lt;a href=&#34;#BFC&#34; class=&#34;headerlink&#34; title=&#34;BFC&#34;&gt;&lt;/a&gt;BFC&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;BFC 即 Block Formatting Contexts (块级格式化上下文)，它属于普通流，即：元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。
可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。
只要元素满足下面任一条件即可触发 BFC 特性

body 根元素
浮动元素：float 除 none 以外的值
绝对定位元素：position (absolute、fixed)
display 为 inline-block、table-cells、flex
overflow 除了 visible 以外的值 (hidden、auto、scroll)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;多种方式实现同心圆&#34;&gt;&lt;a href=&#34;#多种方式实现同心圆&#34; class=&#34;headerlink&#34; title=&#34;多种方式实现同心圆&#34;&gt;&lt;/a&gt;多种方式实现同心圆&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;1.  2个view 相对定位 + 绝对定位
2.  2个view  flex布局
3.  1个view  使用伪元素
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;介绍一下-CSS-的盒子模型？&#34;&gt;&lt;a href=&#34;#介绍一下-CSS-的盒子模型？&#34; class=&#34;headerlink&#34; title=&#34;介绍一下 CSS 的盒子模型？&#34;&gt;&lt;/a&gt;介绍一下 CSS 的盒子模型？&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;有两种， IE 盒子模型、W3C 盒子模型；
盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；
区 别： IE 的 content 部分把 border 和 padding 计算了进去;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;css-选择器优先级？&#34;&gt;&lt;a href=&#34;#css-选择器优先级？&#34; class=&#34;headerlink&#34; title=&#34;css 选择器优先级？&#34;&gt;&lt;/a&gt;css 选择器优先级？&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;!important &amp;gt; 行内样式（比重1000）&amp;gt; ID 选择器（比重100） &amp;gt; 类选择器（比重10） &amp;gt; 标签（比重1） &amp;gt; 通配符 &amp;gt; 继承 &amp;gt; 浏览器默认属性
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;垂直居中几种方式？&#34;&gt;&lt;a href=&#34;#垂直居中几种方式？&#34; class=&#34;headerlink&#34; title=&#34;垂直居中几种方式？&#34;&gt;&lt;/a&gt;垂直居中几种方式？&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;1.单行文本: line-height = height
2.图片: vertical-align: middle;
3.absolute 定位: top: 50%;left: 50%;transform: translate(-50%, -50%);
4.flex:display:flex;justify-content: center;  align-items: center
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;简明说一下-CSS-link-与-import-的区别和用法？&#34;&gt;&lt;a href=&#34;#简明说一下-CSS-link-与-import-的区别和用法？&#34; class=&#34;headerlink&#34; title=&#34;简明说一下 CSS link 与 @import 的区别和用法？&#34;&gt;&lt;/a&gt;简明说一下 CSS link 与 @import 的区别和用法？&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;link 是 XHTML 标签，除了加载CSS外，还可以定义 RSS 等其他事务；@import 属于 CSS 范畴，只能加载 CSS。
link 引用 CSS 时，在页面载入时同时加载；@import 需要页面网页完全载入以后加载。
link 是 XHTML 标签，无兼容问题；@import 是在 CSS2.1 提出的，低版本的浏览器不支持。
link 支持使用 Javascript 控制 DOM 去改变样式；而@import不支持。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;rgba和opacity的透明效果有什么不同？&#34;&gt;&lt;a href=&#34;#rgba和opacity的透明效果有什么不同？&#34; class=&#34;headerlink&#34; title=&#34;rgba和opacity的透明效果有什么不同？&#34;&gt;&lt;/a&gt;rgba和opacity的透明效果有什么不同？&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;opacity 会继承父元素的 opacity 属性，而 RGBA 设置的元素的后代元素不会继承不透明属性。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;display-none和visibility-hidden的区别？&#34;&gt;&lt;a href=&#34;#display-none和visibility-hidden的区别？&#34; class=&#34;headerlink&#34; title=&#34;display:none和visibility:hidden的区别？&#34;&gt;&lt;/a&gt;display:none和visibility:hidden的区别？&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;display:none 隐藏对应的元素，在文档布局中不再给它分配空间，它各边的元素会合拢，就当他从来不存在。
visibility:hidden 隐藏对应的元素，但是在文档布局中仍保留原来的空间。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;position的值，-relative和absolute分别是相对于谁进行定位的？&#34;&gt;&lt;a href=&#34;#position的值，-relative和absolute分别是相对于谁进行定位的？&#34; class=&#34;headerlink&#34; title=&#34;position的值， relative和absolute分别是相对于谁进行定位的？&#34;&gt;&lt;/a&gt;position的值， relative和absolute分别是相对于谁进行定位的？&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;relative:相对定位，相对于自己本身在正常文档流中的位置进行定位。
absolute:生成绝对定位，相对于最近一级定位不为static的父元素进行定位。
fixed: （老版本IE不支持）生成绝对定位，相对于浏览器窗口或者frame进行定位。
static:默认值，没有定位，元素出现在正常的文档流中。
sticky:生成粘性定位的元素，容器的位置根据正常文档流计算得出。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;画一条0-5px的直线？&#34;&gt;&lt;a href=&#34;#画一条0-5px的直线？&#34; class=&#34;headerlink&#34; title=&#34;画一条0.5px的直线？&#34;&gt;&lt;/a&gt;画一条0.5px的直线？&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;考查的是css3的transform

height: 1px;
transform: scale(0.5);
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;calc-support-media各自的含义及用法？&#34;&gt;&lt;a href=&#34;#calc-support-media各自的含义及用法？&#34; class=&#34;headerlink&#34; title=&#34;calc, support, media各自的含义及用法？&#34;&gt;&lt;/a&gt;calc, support, media各自的含义及用法？&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;@support 主要是用于检测浏览器是否支持CSS的某个属性，其实就是条件判断，如果支持某个属性，你可以写一套样式，如果不支持某个属性，你也可以提供另外一套样式作为替补。
calc() 函数用于动态计算长度值。 calc()函数支持 “+”, “-”, “*”, “/” 运算；
@media 查询，你可以针对不同的媒体类型定义不同的样式。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;1rem、1em、1vh、1px各自代表的含义？&#34;&gt;&lt;a href=&#34;#1rem、1em、1vh、1px各自代表的含义？&#34; class=&#34;headerlink&#34; title=&#34;1rem、1em、1vh、1px各自代表的含义？&#34;&gt;&lt;/a&gt;1rem、1em、1vh、1px各自代表的含义？&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;
1.rem
rem是全部的长度都相对于根元素元素。通常做法是给html元素设置一个字体大小，然后其他元素的长度单位就为rem。
    
2. em
子元素字体大小的em是相对于父元素字体大小
元素的width/height/padding/margin用em的话是相对于该元素的font-size
vw/vh
全称是 Viewport Width 和 Viewport Height，视窗的宽度和高度，相当于 屏幕宽度和高度的 1%，不过，处理宽度的时候%单位更合适，处理高度的 话 vh 单位更好。
    
3. px
px像素（Pixel）。相对长度单位。像素px是相对于显示器屏幕分辨率而言的。
一般电脑的分辨率有&amp;#123;19201024&amp;#125;等不同的分辨率
19201024 前者是屏幕宽度总共有1920个像素,后者则是高度为1024个像素
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;css画一个三角形？&#34;&gt;&lt;a href=&#34;#css画一个三角形？&#34; class=&#34;headerlink&#34; title=&#34;css画一个三角形？&#34;&gt;&lt;/a&gt;css画一个三角形？&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;css&#34;&gt;.a &amp;#123;
    width: 0;
    height: 0;
    border-width: 100px;
    border-style: solid;
    border-color: transparent #0099CC transparent transparent;
    transform: rotate(90deg); /*顺时针旋转90°*/
&amp;#125;
&amp;lt;div class=&amp;quot;a&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;HTML5里面都新增了那些新特性？&#34;&gt;&lt;a href=&#34;#HTML5里面都新增了那些新特性？&#34; class=&#34;headerlink&#34; title=&#34;HTML5里面都新增了那些新特性？&#34;&gt;&lt;/a&gt;HTML5里面都新增了那些新特性？&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;1. HTML5新的语义标签

article 独立的内容。
aside 侧边栏。
header 头部。
nav 导航。
section 文档中的节。
footer 页脚。

2. 画布(Canvas) API
3. 地理(Geolocation) API
4. 本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；
5. sessionStorage 的数据在浏览器关闭后自动删除
6. 新的技术webworker, websocket, Geolocation
7. 拖拽释放(Drag and drop) API
8. 音频、视频API(audio,video)
9. 表单控件，calendar、date、time、email、url、searc
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;CSS3-里面都新增了那些新特性？&#34;&gt;&lt;a href=&#34;#CSS3-里面都新增了那些新特性？&#34; class=&#34;headerlink&#34; title=&#34;CSS3 里面都新增了那些新特性？&#34;&gt;&lt;/a&gt;CSS3 里面都新增了那些新特性？&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;
1. 发展历史：CSS于1996年发布，而CSS3是CSS的第三个主要版本，于2001年开始提出，但其功能逐渐得到实现并得以广泛支持直到近年来。

2. 模块化：CSS3采用了模块化的方式来组织样式属性。每个模块专注于特定的功能，例如布局、动画、字体等。这使得开发人员可以根据需要选择特定的模块进行应用，而不需要引入整个CSS3规范。

3. 新增功能：CSS3引入了许多新特性和功能，如圆角边框、阴影、渐变、过渡、动画、媒体查询、弹性盒子布局、网格布局等。这些功能扩展了网页设计师的能力，使其能够创建更丰富、更交互性的用户界面。

4. 浏览器兼容性：传统的CSS规范在不同浏览器上的兼容性并不一致，需要使用特定的浏览器前缀进行适配。然而，CSS3的很多功能已经得到了主流浏览器的广泛支持，因此在一定程度上减少了兼容性的问题。
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/" />
        <category term="css" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/css/" />
        <category term="css" scheme="http://yoursite.com/tags/css/" />
        <updated>2021-06-25T08:43:00.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/front-end/nodejs/</id>
        <title>Nodejs基础</title>
        <link rel="alternate" href="http://yoursite.com/front-end/nodejs/"/>
        <content type="html">&lt;h1 id=&#34;一：nodejs-基础&#34;&gt;&lt;a href=&#34;#一：nodejs-基础&#34; class=&#34;headerlink&#34; title=&#34;一：nodejs 基础&#34;&gt;&lt;/a&gt;一：nodejs 基础&lt;/h1&gt;&lt;h2 id=&#34;1-异步&#34;&gt;&lt;a href=&#34;#1-异步&#34; class=&#34;headerlink&#34; title=&#34;1.异步&#34;&gt;&lt;/a&gt;1.异步&lt;/h2&gt;&lt;h2 id=&#34;2-io&#34;&gt;&lt;a href=&#34;#2-io&#34; class=&#34;headerlink&#34; title=&#34;2.io&#34;&gt;&lt;/a&gt;2.io&lt;/h2&gt;&lt;h2 id=&#34;3-fs&#34;&gt;&lt;a href=&#34;#3-fs&#34; class=&#34;headerlink&#34; title=&#34;3.fs&#34;&gt;&lt;/a&gt;3.fs&lt;/h2&gt;&lt;h1 id=&#34;二：nodeweb开发&#34;&gt;&lt;a href=&#34;#二：nodeweb开发&#34; class=&#34;headerlink&#34; title=&#34;二：nodeweb开发&#34;&gt;&lt;/a&gt;二：nodeweb开发&lt;/h1&gt;&lt;h2 id=&#34;1-koa2&#34;&gt;&lt;a href=&#34;#1-koa2&#34; class=&#34;headerlink&#34; title=&#34;1.koa2&#34;&gt;&lt;/a&gt;1.koa2&lt;/h2&gt;&lt;h2 id=&#34;2-router&#34;&gt;&lt;a href=&#34;#2-router&#34; class=&#34;headerlink&#34; title=&#34;2.router&#34;&gt;&lt;/a&gt;2.router&lt;/h2&gt;&lt;h2 id=&#34;3-eggjs&#34;&gt;&lt;a href=&#34;#3-eggjs&#34; class=&#34;headerlink&#34; title=&#34;3.eggjs&#34;&gt;&lt;/a&gt;3.eggjs&lt;/h2&gt;&lt;h1 id=&#34;三：鉴权&#34;&gt;&lt;a href=&#34;#三：鉴权&#34; class=&#34;headerlink&#34; title=&#34;三：鉴权&#34;&gt;&lt;/a&gt;三：鉴权&lt;/h1&gt;&lt;h2 id=&#34;1-cookie&#34;&gt;&lt;a href=&#34;#1-cookie&#34; class=&#34;headerlink&#34; title=&#34;1.cookie&#34;&gt;&lt;/a&gt;1.cookie&lt;/h2&gt;&lt;h2 id=&#34;2-jwt&#34;&gt;&lt;a href=&#34;#2-jwt&#34; class=&#34;headerlink&#34; title=&#34;2.jwt&#34;&gt;&lt;/a&gt;2.jwt&lt;/h2&gt;&lt;h2 id=&#34;3-oauth&#34;&gt;&lt;a href=&#34;#3-oauth&#34; class=&#34;headerlink&#34; title=&#34;3.oauth&#34;&gt;&lt;/a&gt;3.oauth&lt;/h2&gt;&lt;h1 id=&#34;四：数据库&#34;&gt;&lt;a href=&#34;#四：数据库&#34; class=&#34;headerlink&#34; title=&#34;四：数据库&#34;&gt;&lt;/a&gt;四：数据库&lt;/h1&gt;&lt;h2 id=&#34;1-mysql&#34;&gt;&lt;a href=&#34;#1-mysql&#34; class=&#34;headerlink&#34; title=&#34;1.mysql&#34;&gt;&lt;/a&gt;1.mysql&lt;/h2&gt;&lt;h2 id=&#34;2-redis&#34;&gt;&lt;a href=&#34;#2-redis&#34; class=&#34;headerlink&#34; title=&#34;2.redis&#34;&gt;&lt;/a&gt;2.redis&lt;/h2&gt;&lt;h2 id=&#34;3-mongodb&#34;&gt;&lt;a href=&#34;#3-mongodb&#34; class=&#34;headerlink&#34; title=&#34;3.mongodb&#34;&gt;&lt;/a&gt;3.mongodb&lt;/h2&gt;&lt;h1 id=&#34;五：中间件&#34;&gt;&lt;a href=&#34;#五：中间件&#34; class=&#34;headerlink&#34; title=&#34;五：中间件&#34;&gt;&lt;/a&gt;五：中间件&lt;/h1&gt;&lt;h1 id=&#34;六：部署发布&#34;&gt;&lt;a href=&#34;#六：部署发布&#34; class=&#34;headerlink&#34; title=&#34;六：部署发布&#34;&gt;&lt;/a&gt;六：部署发布&lt;/h1&gt;&lt;h2 id=&#34;1-PM2&#34;&gt;&lt;a href=&#34;#1-PM2&#34; class=&#34;headerlink&#34; title=&#34;1.PM2&#34;&gt;&lt;/a&gt;1.PM2&lt;/h2&gt;&lt;h2 id=&#34;2-nginx&#34;&gt;&lt;a href=&#34;#2-nginx&#34; class=&#34;headerlink&#34; title=&#34;2.nginx&#34;&gt;&lt;/a&gt;2.nginx&lt;/h2&gt;&lt;h2 id=&#34;3-docker&#34;&gt;&lt;a href=&#34;#3-docker&#34; class=&#34;headerlink&#34; title=&#34;3.docker&#34;&gt;&lt;/a&gt;3.docker&lt;/h2&gt;</content>
        <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/" />
        <category term="Nodejs" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Nodejs/" />
        <category term="Nodejs" scheme="http://yoursite.com/tags/Nodejs/" />
        <updated>2021-06-25T08:43:00.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/front-end/javascript%E9%9D%A2%E8%AF%95/</id>
        <title>js面试</title>
        <link rel="alternate" href="http://yoursite.com/front-end/javascript%E9%9D%A2%E8%AF%95/"/>
        <content type="html">&lt;h2 id=&#34;1-JS-数据类型&#34;&gt;&lt;a href=&#34;#1-JS-数据类型&#34; class=&#34;headerlink&#34; title=&#34;1. JS 数据类型 ?&#34;&gt;&lt;/a&gt;1. JS 数据类型 ?&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.数字（Number）：表示数值，包括整数和浮点数。例如：42, 3.14。

2.字符串（String）：表示文本数据，用于存储和操作字符序列。字符串可以使用单引号或双引号括起来。例如：&amp;#39;Hello&amp;#39;, &amp;quot;World&amp;quot;。

3.布尔值（Boolean）：表示逻辑值，只有两个取值：true 和 false。布尔值常用于条件判断和逻辑运算。

4.空值（Null）：表示空值或不存在的对象。当变量被赋值为 null 时，表示该变量没有任何值。

5.未定义（Undefined）：表示变量声明了但未赋值。如果一个变量没有初始化，它的值就是 undefined。

6.符号（Symbol）：ES6 引入的新数据类型，表示独一无二的值。符号通常用作对象属性的键。

除了这些基本数据类型，JavaScript 还提供了一种复杂类型：

7.对象（Object）：表示复合值，可包含多个键值对。键是字符串或符号，值可以是任意类型。对象是 JavaScript 中最常见的数据类型之一，例如数组、函数等都是对象。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-判断一个值是什么类型有哪些方法？&#34;&gt;&lt;a href=&#34;#2-判断一个值是什么类型有哪些方法？&#34; class=&#34;headerlink&#34; title=&#34;2. 判断一个值是什么类型有哪些方法？&#34;&gt;&lt;/a&gt;2. 判断一个值是什么类型有哪些方法？&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;typeof 操作符：typeof 操作符用于检查一个值的类型。它返回一个表示该值类型的字符串。常见的返回值包括 &amp;quot;number&amp;quot;、&amp;quot;string&amp;quot;、&amp;quot;boolean&amp;quot;、&amp;quot;object&amp;quot;、&amp;quot;function&amp;quot;、&amp;quot;undefined&amp;quot;、&amp;quot;symbol&amp;quot;。例如：
javascript
typeof 42; // &amp;quot;number&amp;quot;
typeof &amp;quot;Hello&amp;quot;; // &amp;quot;string&amp;quot;
typeof true; // &amp;quot;boolean&amp;quot;
typeof undefined; // &amp;quot;undefined&amp;quot;
typeof null; // &amp;quot;object&amp;quot;（注意这是一个历史遗留问题）
typeof Symbol(&amp;quot;symbol&amp;quot;); // &amp;quot;symbol&amp;quot;
typeof &amp;#123;&amp;#125;; // &amp;quot;object&amp;quot;
typeof []; // &amp;quot;object&amp;quot;
typeof function() &amp;#123;&amp;#125;; // &amp;quot;function&amp;quot;



instanceof 操作符：instanceof 操作符用于检查一个对象是否属于某个构造函数的实例。它返回一个布尔值。例如：
javascript
var arr = [];
arr instanceof Array; // true
arr instanceof Object; // true，因为 Array 是 Object 的派生类

var date = new Date();
date instanceof Date; // true
date instanceof Object; // true，因为 Date 是 Object 的派生类


constructor 属性：constructor 属性是对象的内置属性，指向创建该对象的构造函数。可以通过比较对象的 constructor 属性与预期构造函数来判断对象的类型。例如：
javascript
var num = 42;
num.constructor === Number; // true

var str = &amp;quot;Hello&amp;quot;;
str.constructor === String; // true

var bool = true;
bool.constructor === Boolean; // true



Object.prototype.toString：Object 的原型对象上具有 toString 方法，可以通过调用该方法来获取一个值的类型字符串。例如：
javascript
var obj = &amp;#123;&amp;#125;;
Object.prototype.toString.call(obj); // &amp;quot;[object Object]&amp;quot;

var arr = [];
Object.prototype.toString.call(arr); // &amp;quot;[object Array]&amp;quot;

var date = new Date();
Object.prototype.toString.call(date); // &amp;quot;[object Date]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-null-和-undefined-的区别？&#34;&gt;&lt;a href=&#34;#3-null-和-undefined-的区别？&#34; class=&#34;headerlink&#34; title=&#34;3. null 和 undefined 的区别？&#34;&gt;&lt;/a&gt;3. null 和 undefined 的区别？&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;undefined 通常表示缺少预期的值或变量尚未初始化。它是一个全局对象的属性，也可以通过声明变量但不进行赋值来获得该值。

null 表示明确地指定一个变量为空值，一般用于表示对象或变量没有有效的值。它是一个关键字，不是全局对象的属性。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-怎么判断一个变量arr的话是否为数组（此题用-typeof-不行）？&#34;&gt;&lt;a href=&#34;#4-怎么判断一个变量arr的话是否为数组（此题用-typeof-不行）？&#34; class=&#34;headerlink&#34; title=&#34;4. 怎么判断一个变量arr的话是否为数组（此题用 typeof 不行）？&#34;&gt;&lt;/a&gt;4. 怎么判断一个变量arr的话是否为数组（此题用 typeof 不行）？&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;如果你不想使用 typeof 来判断一个变量是否为数组，可以使用 Array.isArray() 方法。这个方法会检查给定的值是否为一个数组，并返回一个布尔值。

以下是一个示例：

javascript
var arr = [1, 2, 3];
console.log(Array.isArray(arr)); // 输出 true

var obj = &amp;#123;&amp;#125;;
console.log(Array.isArray(obj)); // 输出 false
在上述示例中，Array.isArray() 方法被用来检查变量 arr 是否为数组。如果 arr 是一个数组，则返回 true；否则，返回 false。

如果需要兼容老版本的浏览器，可以使用以下代码来实现类似的功能：

javascript
function isArray(arr) &amp;#123;
  return Object.prototype.toString.call(arr) === &amp;#39;[object Array]&amp;#39;;
&amp;#125;

var arr = [1, 2, 3];
console.log(isArray(arr)); // 输出 true

var obj = &amp;#123;&amp;#125;;
console.log(isArray(obj)); // 输出 false
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;5-“-x3D-x3D-x3D-”、“-x3D-x3D-”的区别？&#34;&gt;&lt;a href=&#34;#5-“-x3D-x3D-x3D-”、“-x3D-x3D-”的区别？&#34; class=&#34;headerlink&#34; title=&#34;5. “ &amp;#x3D;&amp;#x3D;&amp;#x3D;”、“ &amp;#x3D;&amp;#x3D;”的区别？&#34;&gt;&lt;/a&gt;5. “ &amp;#x3D;&amp;#x3D;&amp;#x3D;”、“ &amp;#x3D;&amp;#x3D;”的区别？&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;==，当且仅当两个运算数相等时，它返回 true，即不检查数据类型
===，只有在无需类型转换运算数就相等的情况下，才返回 true，需要检查数据类型
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;6-“eval是做什么的？&#34;&gt;&lt;a href=&#34;#6-“eval是做什么的？&#34; class=&#34;headerlink&#34; title=&#34;6. “eval是做什么的？&#34;&gt;&lt;/a&gt;6. “eval是做什么的？&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;它的功能是把对应的字符串解析成 JS 代码并运行；
应该避免使用 eval，不安全，非常耗性能（2次，一次解析成 js 语句，一次执行）。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;7-箭头函数有哪些特点？&#34;&gt;&lt;a href=&#34;#7-箭头函数有哪些特点？&#34; class=&#34;headerlink&#34; title=&#34;7. 箭头函数有哪些特点？&#34;&gt;&lt;/a&gt;7. 箭头函数有哪些特点？&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;不需要function关键字来创建函数
省略return关键字
改变this指向
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;8-var、let、const-区别？&#34;&gt;&lt;a href=&#34;#8-var、let、const-区别？&#34; class=&#34;headerlink&#34; title=&#34;8. var、let、const 区别？&#34;&gt;&lt;/a&gt;8. var、let、const 区别？&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;var具有函数作用域，变量提升，并且可以重复声明。
let和const具有块级作用域，没有变量提升，而且不允许重复声明（在同一个作用域内）。
let声明的变量可重新赋值，而const声明的变量是常量，不可重新赋值。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;9-new操作符具体干了什么呢？&#34;&gt;&lt;a href=&#34;#9-new操作符具体干了什么呢？&#34; class=&#34;headerlink&#34; title=&#34;9. new操作符具体干了什么呢？&#34;&gt;&lt;/a&gt;9. new操作符具体干了什么呢？&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。
2、属性和方法被加入到 this 引用的对象中。
3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;10-JSON-的了解？&#34;&gt;&lt;a href=&#34;#10-JSON-的了解？&#34; class=&#34;headerlink&#34; title=&#34;10. JSON 的了解？&#34;&gt;&lt;/a&gt;10. JSON 的了解？&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。
它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;11-document-write-和-innerHTML-的区别？&#34;&gt;&lt;a href=&#34;#11-document-write-和-innerHTML-的区别？&#34; class=&#34;headerlink&#34; title=&#34;11. document.write 和 innerHTML 的区别？&#34;&gt;&lt;/a&gt;11. document.write 和 innerHTML 的区别？&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;document.write 只能重绘整个页面
innerHTML 可以重绘页面的一部分
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;12-ajax过程？&#34;&gt;&lt;a href=&#34;#12-ajax过程？&#34; class=&#34;headerlink&#34; title=&#34;12. ajax过程？&#34;&gt;&lt;/a&gt;12. ajax过程？&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象.
(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.
(3)设置响应HTTP请求状态变化的函数.
(4)发送HTTP请求.
(5)获取异步调用返回的数据.
(6)使用JavaScript和DOM实现局部刷新.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;13-请解释一下-JavaScript-的同源策略？&#34;&gt;&lt;a href=&#34;#13-请解释一下-JavaScript-的同源策略？&#34; class=&#34;headerlink&#34; title=&#34;13. 请解释一下 JavaScript 的同源策略？&#34;&gt;&lt;/a&gt;13. 请解释一下 JavaScript 的同源策略？&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;概念:同源策略是客户端脚本（尤其是Netscape Navigator2.0，其目的是防止某个文档或脚本从多个不同源装载。
这里的同源策略指的是：协议，域名，端口相同，同源策略是一种安全协议。
指一段脚本只能读取来自同一来源的窗口和文档的属性。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;14-介绍一下闭包和闭包常用场景？&#34;&gt;&lt;a href=&#34;#14-介绍一下闭包和闭包常用场景？&#34; class=&#34;headerlink&#34; title=&#34;14. 介绍一下闭包和闭包常用场景？&#34;&gt;&lt;/a&gt;14. 介绍一下闭包和闭包常用场景？&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;闭包是指有权访问另一个函数作用域中的变量的函数，创建闭包常见方式，就是在一个函数的内部创建另一个函数
使用闭包主要为了设计私有的方法和变量，闭包的优点是可以避免变量的污染，缺点是闭包会常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。在js中，函数即闭包，只有函数才会产生作用域的概念。
闭包有三个特性：
函数嵌套函数
函数内部可以引用外部的参数和变量
参数和变量不会被垃圾回收机制回收
应用场景，设置私有变量的方法
不适用场景：返回闭包的函数是个非常大的函数
闭包的缺点就是常驻内存，会增大内存使用量，使用不当会造成内存泄漏
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;15-javascript的内存-垃圾-回收机制？&#34;&gt;&lt;a href=&#34;#15-javascript的内存-垃圾-回收机制？&#34; class=&#34;headerlink&#34; title=&#34;15. javascript的内存(垃圾)回收机制？&#34;&gt;&lt;/a&gt;15. javascript的内存(垃圾)回收机制？&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;垃圾回收器会每隔一段时间找出那些不再使用的内存，然后为其释放内存
一般使用标记清除方法(mark and sweep), 当变量进入环境标记为进入环境，离开环境标记为离开环境
垃圾回收器会在运行的时候给存储在内存中的所有变量加上标记，然后去掉环境中的变量以及被环境中变量所引用的变量（闭包），在这些完成之后仍存在标记的就是要删除的变量了
还有引用计数方法(reference counting), 在低版本IE中经常会出现内存泄露，很多时候就是因为其采用引用计数方式进行垃圾回收。引用计数的策略是跟踪记录每个值被使用的次数，当声明了一个 变量并将一个引用类型赋值给该变量的时候这个值的引用次数就加1，如果该变量的值变成了另外一个，则这个值得引用次数减1，当这个值的引用次数变为0的时 候，说明没有变量在使用，这个值没法被访问了，因此可以将其占用的空间回收，这样垃圾回收器会在运行的时候清理掉引用次数为0的值占用的空间。
在IE中虽然JavaScript对象通过标记清除的方式进行垃圾回收，但BOM与DOM对象却是通过引用计数回收垃圾的， 也就是说只要涉及BOM及DOM就会出现循环引用问题。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;16-JavaScript原型，原型链-有什么特点？&#34;&gt;&lt;a href=&#34;#16-JavaScript原型，原型链-有什么特点？&#34; class=&#34;headerlink&#34; title=&#34;16. JavaScript原型，原型链 ? 有什么特点？&#34;&gt;&lt;/a&gt;16. JavaScript原型，原型链 ? 有什么特点？&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;17-事件队列（宏任务微任务）&#34;&gt;&lt;a href=&#34;#17-事件队列（宏任务微任务）&#34; class=&#34;headerlink&#34; title=&#34;17. 事件队列（宏任务微任务）&#34;&gt;&lt;/a&gt;17. 事件队列（宏任务微任务）&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;微任务和宏任务的本质区别。&#34;&gt;可以分为微任务（micro task）队列和宏任务（macro task）队列。

微任务一般比宏任务先执行，并且微任务队列只有一个，宏任务队列可能有多个。另外我们常见的点击和键盘等事件也属于宏任务。

下面我们看一下常见宏任务和常见微任务。

常见宏任务：
setTimeout()
setInterval()
setImmediate()
常见微任务：

promise.then()、promise.catch()
new MutaionObserver()
process.nextTick()


微任务和宏任务的本质区别。

宏任务特征：有明确的异步任务需要执行和回调；需要其他异步线程支持。
微任务特征：没有明确的异步任务需要执行，只有回调；不需要其他异步线程支持。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;19-async-x2F-await&#34;&gt;&lt;a href=&#34;#19-async-x2F-await&#34; class=&#34;headerlink&#34; title=&#34;19. async&amp;#x2F;await&#34;&gt;&lt;/a&gt;19. async&amp;#x2F;await&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;async 是一个通过异步执行并隐式返回 Promise 作为结果的函数。是Generator函数的语法糖，并对Generator函数进行了改进。
改进：

内置执行器，无需手动执行 next() 方法。
更好的语义
更广的适用性：co模块约定，yield命令后面只能是 Thunk 函数或 Promise 对象，而async函数的await命令后面，可以是 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时会自动转成立即 resolved 的 Promise 对象）。
返回值是 Promise，比 Generator 函数返回的 Iterator 对象方便，可以直接使用 then() 方法进行调用。
async 隐式返回 Promise 作为结果的函数，那么可以简单理解为，await后面的函数执行完毕时，await会产生一个微任务(Promise.then是微任务)。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;20-JavaScript-是单线程的，浏览器是多进程的&#34;&gt;&lt;a href=&#34;#20-JavaScript-是单线程的，浏览器是多进程的&#34; class=&#34;headerlink&#34; title=&#34;20. JavaScript 是单线程的，浏览器是多进程的&#34;&gt;&lt;/a&gt;20. JavaScript 是单线程的，浏览器是多进程的&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;每打开一个新网页就会创建一个渲染进程
渲染进程是多线程的
负责页面渲染的 GUI 渲染线程
负责JavaScript的执行的 JavaScript 引擎线程，
负责浏览器事件循环的事件触发线程，注意这不归 JavaScript 引擎线程管
负责定时器的定时触发器线程，setTimeout 中低于 4ms 的时间间隔算为4ms
负责XMLHttpRequest的异步 http 请求线程
GUI 渲染线程与 JavaScript 引擎线程是互斥的
单线程JavaScript是因为避免 DOM 渲染的冲突，web worker 支持多线程，但是 web worker 不能访问 window 对象，document 对象等。
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/" />
        <category term="Javascript" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Javascript/" />
        <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/" />
        <updated>2021-06-25T08:43:00.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/front-end/uniapp/</id>
        <title>uniapp基础原理</title>
        <link rel="alternate" href="http://yoursite.com/front-end/uniapp/"/>
        <content type="html"></content>
        <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/" />
        <category term="uniapp" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/uniapp/" />
        <category term="uniapp" scheme="http://yoursite.com/tags/uniapp/" />
        <updated>2021-06-25T08:43:00.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/front-end/vue%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80/</id>
        <title>vue常用基础</title>
        <link rel="alternate" href="http://yoursite.com/front-end/vue%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80/"/>
        <content type="html">&lt;p&gt;vue系列基础到原理.&lt;/p&gt;
&lt;h1 id=&#34;一：Vue基础&#34;&gt;&lt;a href=&#34;#一：Vue基础&#34; class=&#34;headerlink&#34; title=&#34;一：Vue基础&#34;&gt;&lt;/a&gt;一：Vue基础&lt;/h1&gt;&lt;h2 id=&#34;1：vue生命周期和生命周期钩子函数？&#34;&gt;&lt;a href=&#34;#1：vue生命周期和生命周期钩子函数？&#34; class=&#34;headerlink&#34; title=&#34;1：vue生命周期和生命周期钩子函数？&#34;&gt;&lt;/a&gt;1：vue生命周期和生命周期钩子函数？&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;beforecreated&lt;/strong&gt;：在实例初始化之后，el 和 data 并未初始化（这个时期，this变量还不能使用，在data下的数据，和methods下的方法，watcher中的事件都不能获得到；）&lt;br&gt;&lt;strong&gt;created&lt;/strong&gt;:完成了 data 数据的初始化，el没有（这个时候可以操作vue实例中的数据和各种方法，但是还不能对”dom”节点进行操作；）&lt;br&gt;&lt;strong&gt;beforeMount&lt;/strong&gt;：完成了 el 和 data 初始化这里的el是虚拟的dom；&lt;br&gt;&lt;strong&gt;mounted&lt;/strong&gt; ：完成挂载，在这发起后端请求，拿回数据，配合路由钩子做一些事情（挂载完毕，这时dom节点被渲染到文档内，一些需要dom的操作在此时才能正常进行），定义定时器&lt;br&gt;&lt;strong&gt;beforeUpdate&lt;/strong&gt;：&lt;strong&gt;数据是新的，但是页面是旧的&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;update&lt;/strong&gt;：数据和页面保持同步了，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;activited&lt;/strong&gt;：keep-alive 专属，组件被激活时调用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;activited&lt;/strong&gt;：keep-alive 专属，组件被销毁时调用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;beforeDestory&lt;/strong&gt;： 你确认删除定时器吗？&lt;br&gt;&lt;strong&gt;destoryed&lt;/strong&gt; ：当前组件已被删除，(其实就是页面的退出)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A、什么是vue生命周期？&lt;/strong&gt;&lt;br&gt;Vue 实例从创建到销毁的过程，就是生命周期。也就是从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。&lt;br&gt;&lt;strong&gt;B、vue生命周期的作用是什么？&lt;/strong&gt;&lt;br&gt;它的生命周期有多个事件钩子,让我们在控制整个Vue实例的过程时更容易形成好的逻辑。&lt;br&gt;&lt;strong&gt;C、vue生命周期总共有几个阶段？&lt;/strong&gt;&lt;br&gt;它可以总共分为8个阶段：创建前&amp;#x2F;后, 载入前&amp;#x2F;后,更新前&amp;#x2F;后,销毁前&amp;#x2F;销毁后&lt;br&gt;&lt;strong&gt;D、第一次页面加载会触发哪几个钩子？&lt;/strong&gt;&lt;br&gt;第一次页面加载时会触发 beforeCreate, created, beforeMount, mounted 这几个钩子&lt;br&gt;&lt;strong&gt;E、DOM 渲染在 哪个周期中就已经完成？&lt;/strong&gt;&lt;br&gt;DOM 渲染在 mounted 中就已经完成了。&lt;br&gt;&lt;strong&gt;F、简单描述每个周期具体适合哪些场景？&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.beforecreate:可以在加个loading事件，在加载实例是触发
2.created:初始化完成时的事件写在这里，如在这结束loading事件，异步请求也适宜在这里调用
3.mounted:异步请求，启动定时器，绑定自定义事件，订阅消息
4.updated:如果对数据统一处理
5.beforeDestroy:清除定时器，解绑自定义事件，取消订阅,一般不再这里在操作数据，即使操作了，页面也不会更新了
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2：v-show与v-if的区别&#34;&gt;&lt;a href=&#34;#2：v-show与v-if的区别&#34; class=&#34;headerlink&#34; title=&#34;2：v-show与v-if的区别&#34;&gt;&lt;/a&gt;2：v-show与v-if的区别&lt;/h2&gt;&lt;p&gt;v-show是css切换，v-if是完整的销毁和重新创建&lt;br&gt;使用频繁切换时用v-show,运行时较少改变时用v-if&lt;br&gt;V-if&amp;#x3D;’false’v-if是条件渲染，当false的时候不会渲染&lt;br&gt;使用v-if的时候，如果值为false，那么页面将不会有这个html标签生成&lt;br&gt;v-show则是不管值是为true还是false，html元素都会存在，只是css中的display显示或隐藏&lt;br&gt;v-show 仅仅控制元素的显示方式，将 display 属性在 block 和 none 来回切换；而v-if会控制这个 DOM 节点的存在与否。当我们需要经常切换某个元素的显示&amp;#x2F;隐藏时，使用v-show会更加节省性能上的开销；当只需要一次显示或隐藏时，使用v-if更加合理。&lt;/p&gt;
&lt;h2 id=&#34;3：开发中常用的指令有哪些&#34;&gt;&lt;a href=&#34;#3：开发中常用的指令有哪些&#34; class=&#34;headerlink&#34; title=&#34;3：开发中常用的指令有哪些?&#34;&gt;&lt;/a&gt;3：开发中常用的指令有哪些?&lt;/h2&gt;&lt;p&gt;v-model:一般用在表达输入，很轻松的实现表单控件和数据的双向绑定&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;v-html：更新元素的innerHTML

&amp;lt;p v-html=&amp;quot;msg&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;

var vm = new Vue(&amp;#123;
            el : &amp;quot;#app&amp;quot;,
            data : &amp;#123;
                msg : &amp;quot;&amp;lt;h1&amp;gt;这是一个h1元素内容&amp;lt;/h1&amp;gt;&amp;quot;
            &amp;#125;
        &amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;v-show与v-if：条件渲染，注意二者区别&lt;br&gt;v-on:click:可以简写为@click,@绑定一个事件。如果事件触发了，就可以指定事件的处理函数&lt;br&gt;v-for：基于源数据多次渲染元素或模板&lt;br&gt;v-bind:当表达式的值改变时，将其产生的连带影响，响应式地作用于DOM语法&lt;br&gt;v-bind:title&amp;#x3D;”msg”简写：    :title&amp;#x3D;”msg”&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;v-clock解决页面闪烁问题

如果网速慢，而该标签内容是变量没有请求响应回来的时候，页面上先不显示该标签（vue给该标签加了css样式），当响应回来的时候改标签默认将css样式去除。此指令可以解决使用插值表达式页面闪烁问题

将该指令加在html标签中时，可以在该文件中加style属性为display：none，例子如下：

&amp;lt;div class=&amp;quot;#app&amp;quot; v-cloak&amp;gt;
    &amp;lt;p&amp;gt;&amp;#123;&amp;#123;name&amp;#125;&amp;#125;&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;

[v-cloak] &amp;#123;
    display: none;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4：绑定class的数组用法&#34;&gt;&lt;a href=&#34;#4：绑定class的数组用法&#34; class=&#34;headerlink&#34; title=&#34;4：绑定class的数组用法&#34;&gt;&lt;/a&gt;4：绑定class的数组用法&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.对象方法v-bind:class=&amp;quot;&amp;#123;&amp;#39;orange&amp;#39;:isRipe, &amp;#39;green&amp;#39;:isNotRipe&amp;#125;”

:class=&amp;quot;tindex == index ? &amp;#39;aaa&amp;#39;:&amp;#39;bbb&amp;#39;&amp;quot;

2.数组方法v-bind:class=&amp;quot;[class1,class2]&amp;quot;


3.行内v-bind:style=&amp;quot;&amp;#123;color:color,fontSize:fontSize+&amp;#39;px&amp;#39;&amp;#125;”
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;5：计算属性和methods&#34;&gt;&lt;a href=&#34;#5：计算属性和methods&#34; class=&#34;headerlink&#34; title=&#34;5：计算属性和methods&#34;&gt;&lt;/a&gt;5：计算属性和methods&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;computed:&amp;#123;
    fullName:&amp;#123;
        //get有什么作用? 当有人读取实例(data)上的数据时候,get就会被调用，返回值可以是data上的值
        //get什么时候调用? 1.初次读取时，2.所依赖的数据发生变化的时候
        get()&amp;#123;  //fullName被读取时调用
            return this.firstName
        &amp;#125;,
        //set什么时候调用? 当fullName被修改时
        set(value)&amp;#123;	//fullName被修改时调用 
                //非必须写
            console.log(&amp;#39;修改fullName后的值&amp;#39;,value)	
        &amp;#125;
    &amp;#125;
    //简写方式
    fullNamejianxie()&amp;#123;
        return this.firstName  + &amp;#39;jianxie&amp;#39;
    &amp;#125;
&amp;#125;

1.定义:要用的属性存在，要通过已有的属性计算而来
2.计算属性的底层借助Object.defineProperty()方法提供gettter/setter
3.get函数什么时候调用?
     (1).初次读取时
     (2).所依赖的数据发生变化的时
4.优势:与methods实现相比，内部有缓存机制(复用),效率更高,调试方便
5.备注:
     (1).计算属性最终会出现在vm(实例)上，直接读取即可
     (2).如果计算属性被修改，那必须写set去响应数据，且set中要引起计算时依赖的数据发送变化
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;6：computed-计算属性-和watch-监听-的对比&#34;&gt;&lt;a href=&#34;#6：computed-计算属性-和watch-监听-的对比&#34; class=&#34;headerlink&#34; title=&#34;6：computed(计算属性)和watch(监听)的对比&#34;&gt;&lt;/a&gt;6：computed(计算属性)和watch(监听)的对比&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;computed&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;
computed是计算属性，也就是计算值，它更多用于计算值的场景
computed具有缓存性，computed的值在getter执行后是会缓存的，只有在它依赖的属性值改变之后，下一次获取computed的值时重新调用对应的getter来计算
computed适用于计算比较消耗性能的计算场景
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;watch&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;&amp;lt;template&amp;gt;
    &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
        &amp;lt;!-- 1.监听实例上的基础数据类型 --&amp;gt;
        &amp;lt;button @click=&amp;quot;isHot = !isHot&amp;quot;&amp;gt;&amp;#123;&amp;#123;isHot&amp;#125;&amp;#125;&amp;lt;/button&amp;gt;

        &amp;lt;hr&amp;gt;

        &amp;lt;!-- 2.监听引用类型的数据 --&amp;gt;
        &amp;lt;button @click=&amp;quot;obj.age++&amp;quot;&amp;gt;&amp;#123;&amp;#123;obj.age&amp;#125;&amp;#125;&amp;lt;/button&amp;gt;
        
        &amp;lt;hr&amp;gt;

        &amp;lt;!-- 3.修改对象类型的数据变成字符串 --&amp;gt;
        &amp;lt;button @click=&amp;quot;obj = &amp;#39;变成其他数据类型了&amp;#39;&amp;quot;&amp;gt;&amp;#123;&amp;#123;obj&amp;#125;&amp;#125;&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
    export default &amp;#123;
        name: &amp;#39;index&amp;#39;,
        data() &amp;#123;
            return &amp;#123;
                isHot : true,
                obj :&amp;#123;
                    name: &amp;#39;js&amp;#39;,
                    age : 18
                &amp;#125;   
            &amp;#125;
        &amp;#125;,
        watch:&amp;#123;
            isHot:&amp;#123;
                immediate : true, //初始化的时候，让handler调用一下
                handler(newValue,oldValue)&amp;#123; //handle什么时候调用? isHot发送变化时候
                    console.log(&amp;#39;isHot被修改了&amp;#39;,newValue,oldValue)
                &amp;#125;
            &amp;#125;,
            // &amp;#39;obj.age&amp;#39; :&amp;#123; 
            //      handler(newValue,oldValue)&amp;#123; 
            //         console.log(&amp;#39;age被修改了&amp;#39;,newValue,oldValue)
            //     &amp;#125;
            //      //监视多级结构中某个属性的变化(不建议这么写，如果有很多个值呢？)
            // &amp;#125;,
            // obj:&amp;#123;
            //     //这么写即使是age的值发送改变，也不会有任何操作。
            //     //因为此时监视的是 obj下的整个对象,除非对象变成其他类型的数据才会触发
            //     handler(newValue,oldValue)&amp;#123; 
            //         console.log(&amp;#39;obj被修改了&amp;#39;,newValue,oldValue)
            //     &amp;#125;
            // &amp;#125;,
            obj:&amp;#123;
                //深度监视 
                //不管是obj的数据类型变了，还是里面的值变了
                deep : true,
                handler(newValue,oldValue)&amp;#123;
                      console.log(&amp;#39;obj被修改了&amp;#39;,newValue,oldValue)
                &amp;#125;
            &amp;#125;,
            // 简写方式 =&amp;gt;
            // 什么时候的时候才能简写?   只需要用到handler的时候
            isHot(newValue,oldValue)&amp;#123;
                console.log(&amp;#39;isHot被修改了&amp;#39;,newValue,oldValue)  
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;lt;/script&amp;gt;
&amp;lt;style lang=&amp;quot;less&amp;quot;&amp;gt;
        .container&amp;#123;
            width: 100VW;
            height: 100VH;
        &amp;#125;
&amp;lt;/style&amp;gt;


1.watch可以监听异步任务,计算属性无法开启异步任务
&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
    &amp;lt;button @click=&amp;quot;obj = &amp;#39;变成其他数据类型了&amp;#39;&amp;quot;&amp;gt;&amp;#123;&amp;#123; obj &amp;#125;&amp;#125;&amp;lt;/button&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;#123;&amp;#123; ahhh &amp;#125;&amp;#125;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
export default &amp;#123;
  name: &amp;quot;index&amp;quot;,
  data() &amp;#123;
    return &amp;#123;
      ahhh: 1,
      obj: &amp;#123;
        name: &amp;quot;js&amp;quot;,
        age: 18,
      &amp;#125;,
    &amp;#125;;
  &amp;#125;,
  watch: &amp;#123;
    obj: &amp;#123;
      deep: true,
      handler(newValue, oldValue) &amp;#123;
        console.log(&amp;quot;obj被修改了&amp;quot;, newValue, oldValue);
        setTimeout(() =&amp;gt; &amp;#123;  
            //这里注意要用箭头函数(this会一层一层往外找)，不能使用普通函数（this执行windows）
            //开启异步任务
          console.log(&amp;quot;this&amp;quot;, this);
          this.ahhh += 1;
        &amp;#125;, 1000);
      &amp;#125;,
    &amp;#125;,
  &amp;#125;,
&amp;#125;;
&amp;lt;/script&amp;gt;
&amp;lt;style lang=&amp;quot;less&amp;quot;&amp;gt;
.container &amp;#123;
  width: 100vw;
  height: 100vh;
&amp;#125;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;7：vue组件的scoped属性的作用&#34;&gt;&lt;a href=&#34;#7：vue组件的scoped属性的作用&#34; class=&#34;headerlink&#34; title=&#34;7：vue组件的scoped属性的作用&#34;&gt;&lt;/a&gt;7：vue组件的scoped属性的作用&lt;/h2&gt;&lt;p&gt;在style标签上添加scoped属性，以表示它的样式作用于当下的模块，很好的实现了样式私有化的目的；&lt;br&gt;但是也得慎用：样式不易（可）修改，而很多时候，我们是需要对公共组件的样式做微调的；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决办法：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;①：使用混合型的css样式：（混合使用全局跟本地的样式） &amp;lt;style&amp;gt; /* 全局样式 */ &amp;lt;/style&amp;gt;&amp;lt;style scoped&amp;gt; /* 本地样式 */ &amp;lt;/style&amp;gt;
②：深度作用选择器（&amp;gt;&amp;gt;&amp;gt;）如果你希望 scoped 样式中的一个选择器能够作用得“更深”，例如影响子组件，你可以使用 &amp;gt;&amp;gt;&amp;gt; 操作符：
&amp;lt;style scoped&amp;gt;
    .a &amp;gt;&amp;gt;&amp;gt; .b &amp;#123; /* ... */ &amp;#125; &amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;8：vue常用修饰符&#34;&gt;&lt;a href=&#34;#8：vue常用修饰符&#34; class=&#34;headerlink&#34; title=&#34;8：vue常用修饰符&#34;&gt;&lt;/a&gt;8：vue常用修饰符&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;修饰符分为：一般修饰符，事件修身符，按键、系统&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;①一般修饰符&lt;/strong&gt;&lt;br&gt;.lazy：v-model 在每次 input 事件触发后将输入框的值与数据进行同步 。你可以添加 lazy 修饰符，从而转变为使用 change 事件进行同步&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;&amp;lt;input v-model.lazy=&amp;quot;msg&amp;quot; &amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;.number&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;&amp;lt;input v-model.number=&amp;quot;age&amp;quot; type=&amp;quot;number&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;.trim&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.如果要自动过滤用户输入的首尾空白字符 &amp;lt;input v-model.trim=&amp;#39;trim&amp;#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;② 事件修饰符&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1. 阻止单击事件继续传播 
&amp;lt;a v-on:click.stop=&amp;quot;doThis&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;  

2.提交事件不再重载页面
&amp;lt;form v-on:submit.prevent=&amp;quot;onSubmit&amp;quot;&amp;gt;&amp;lt;/form&amp;gt; 

3.添加事件监听器时使用事件捕获模式(即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理)
&amp;lt;div v-on:click.capture=&amp;quot;doThis&amp;quot;&amp;gt;...&amp;lt;/div&amp;gt;   

4.只当在 event.target 是当前元素自身时触发处理函数(即事件不是从内部元素触发的)
&amp;lt;div v-on:click.self=&amp;quot;doThat&amp;quot;&amp;gt;...&amp;lt;/div&amp;gt; 

5.点击事件将只会触发一次 
&amp;lt;a v-on:click.once=&amp;quot;doThis&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;  

6.vue组件添加事件
&amp;lt;Tabber @click.native=&amp;quot;doThis&amp;quot;&amp;gt;&amp;lt;/Tabbar&amp;gt; 

7.修饰符可以串联
&amp;lt;a v-on:click.stop.prevent=&amp;quot;doThat&amp;quot;&amp;gt;&amp;lt;/a&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;③按键修饰符&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;全部的按键别名:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;.enter
.tab
.delete (捕获“删除”和“退格”键)
.esc
.space
.up
.down
.left
.right
.ctrl
.alt
.shift
.meta
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;&amp;lt;input v-on:keyup.enter=&amp;quot;submit&amp;quot;&amp;gt; 或者 &amp;lt;input @keyup.enter=&amp;quot;submit&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;④系统修饰键 （可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器）&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;.ctrl
.alt
.shift
.meta
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;&amp;lt;input @keyup.alt.67=&amp;quot;clear&amp;quot;&amp;gt; 或者 &amp;lt;div @click.ctrl=&amp;quot;doSomething&amp;quot;&amp;gt;Do something&amp;lt;/div&amp;gt;&amp;lt;!-- Ctrl + Click --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;9：v-on可以监听多个事件处理吗？（可以的）&#34;&gt;&lt;a href=&#34;#9：v-on可以监听多个事件处理吗？（可以的）&#34; class=&#34;headerlink&#34; title=&#34;9：v-on可以监听多个事件处理吗？（可以的）&#34;&gt;&lt;/a&gt;9：v-on可以监听多个事件处理吗？（可以的）&lt;/h2&gt;&lt;p&gt;一个元素绑定多个事件的两种写法，一个事件绑定多个函数的两种写法，修饰符的使用。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;&amp;lt;a style=&amp;quot;cursor:default&amp;quot; v-on=&amp;#39;&amp;#123;click:DoSomething,mouseleave:MouseLeave&amp;#125;&amp;#39;&amp;gt;doSomething&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在method方法里面分别写两个事件；&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;&amp;lt;button @click=&amp;quot;a(),b()&amp;quot;&amp;gt;点我ab&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;10：vue事件中使用event对象&#34;&gt;&lt;a href=&#34;#10：vue事件中使用event对象&#34; class=&#34;headerlink&#34; title=&#34;10：vue事件中使用event对象&#34;&gt;&lt;/a&gt;10：vue事件中使用event对象&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;&amp;lt;template&amp;gt;
    //不加括号的的时候，直接拿到event对象
&amp;lt;button @click=&amp;quot;btn&amp;quot;&amp;gt;点击&amp;lt;/button&amp;gt;  
&amp;lt;/template&amp;gt;

btn(value)&amp;#123;
    console.log(&amp;#39;value&amp;#39;,value)	
&amp;#125;



//现在的需求是点击事件直接传值过来，但是也要event对象
&amp;lt;template&amp;gt;
    //加了括号
&amp;lt;button @click=&amp;quot;btn($event,1,2)&amp;quot;&amp;gt;点击&amp;lt;/button&amp;gt;  
&amp;lt;/template&amp;gt;

btn(value,...a)&amp;#123;
    console.log(&amp;#39;value&amp;#39;,value)
    console.log(&amp;#39;a&amp;#39;,a)  // [1,2]
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;11：nextTick&#34;&gt;&lt;a href=&#34;#11：nextTick&#34; class=&#34;headerlink&#34; title=&#34;11：nextTick&#34;&gt;&lt;/a&gt;11：nextTick&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;语法：&lt;code&gt;this.$nextTick(回调函数)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;作用：在下一次 DOM 更新结束后执行其指定的回调。&lt;/li&gt;
&lt;li&gt;什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;**比如你想让一个dom元素显示**，然后下一步去获取这个元素的offsetWidth，最后你获取到的会是0。
openSubmenu() &amp;#123;
    this.show = true //获取不到宽度
    this.$nextTick(() =&amp;gt; 
      //这里才可以 let w = this.$refs.submenu.offsetWidth;
   &amp;#125;)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;13：Vue组件间传递数据的方式&#34;&gt;&lt;a href=&#34;#13：Vue组件间传递数据的方式&#34; class=&#34;headerlink&#34; title=&#34;13：Vue组件间传递数据的方式&#34;&gt;&lt;/a&gt;13：Vue组件间传递数据的方式&lt;/h2&gt;&lt;h3 id=&#34;1-props配置项-父传子-or-子传父&#34;&gt;&lt;a href=&#34;#1-props配置项-父传子-or-子传父&#34; class=&#34;headerlink&#34; title=&#34;1.props配置项(父传子 or 子传父)&#34;&gt;&lt;/a&gt;1.props配置项(父传子 or 子传父)&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;功能：让组件接收外部传过来的数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;传递数据：&lt;code&gt;&amp;lt;Demo name=&amp;quot;xxx&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接收数据：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;第一种方式（只接收）：&lt;code&gt;props:[&amp;#39;name&amp;#39;] &lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二种方式（限制类型）：&lt;code&gt;props:&amp;#123;name:String&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第三种方式（限制类型、限制必要性、指定默认值）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;props:&amp;#123;
    name:&amp;#123;
    type:String, //类型
    required:true, //必要性
    default:&amp;#39;老王&amp;#39; //默认值
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2-组件的自定义事件-子传父&#34;&gt;&lt;a href=&#34;#2-组件的自定义事件-子传父&#34; class=&#34;headerlink&#34; title=&#34;2.组件的自定义事件(子传父)&#34;&gt;&lt;/a&gt;2.组件的自定义事件(子传父)&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;一种组件间通信的方式，适用于：&lt;strong style=&#34;color:red&#34;&gt;子组件 &amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;gt; 父组件&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（&lt;span style=&#34;color:red&#34;&gt;事件的回调在A中&lt;/span&gt;）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;绑定自定义事件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;第一种方式，在父组件中：&lt;code&gt;&amp;lt;Demo @dataarr=&amp;quot;test&amp;quot;/&amp;gt;&lt;/code&gt;  或 &lt;code&gt;&amp;lt;Demo v-on:dataarr=&amp;quot;test&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二种方式，在父组件中：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;&amp;lt;Demo ref=&amp;quot;demo&amp;quot;/&amp;gt;
......
mounted()&amp;#123;
   this.$refs.xxx.$on(&amp;#39;dataarr&amp;#39;,this.test)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若想让自定义事件只能触发一次，可以使用&lt;code&gt;once&lt;/code&gt;修饰符，或&lt;code&gt;$once&lt;/code&gt;方法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;触发自定义事件：&lt;code&gt;this.$emit(&amp;#39;dataarr&amp;#39;,数据)&lt;/code&gt;		&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解绑自定义事件&lt;code&gt;this.$off(&amp;#39;dataarr&amp;#39;)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;组件上也可以绑定原生DOM事件，需要使用&lt;code&gt;native&lt;/code&gt;修饰符。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注意：通过&lt;code&gt;this.$refs.xxx.$on(&amp;#39;dataarr&amp;#39;,回调)&lt;/code&gt;绑定自定义事件时，回调&lt;span style=&#34;color:red&#34;&gt;要么配置在methods中&lt;/span&gt;，&lt;span style=&#34;color:red&#34;&gt;要么用箭头函数&lt;/span&gt;，否则this指向会出问题！&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3-全局事件总线（GlobalEventBus）&#34;&gt;&lt;a href=&#34;#3-全局事件总线（GlobalEventBus）&#34; class=&#34;headerlink&#34; title=&#34;3.全局事件总线（GlobalEventBus）&#34;&gt;&lt;/a&gt;3.全局事件总线（GlobalEventBus）&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;一种组件间通信的方式，适用于&lt;span style=&#34;color:red&#34;&gt;任意组件间通信&lt;/span&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装全局事件总线：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;new Vue(&amp;#123;
    ......
    beforeCreate() &amp;#123;
        Vue.prototype.$bus = this //安装全局事件总线，$bus就是当前应用的vm
    &amp;#125;,
    ......
&amp;#125;) 
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用事件总线：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的&lt;span style=&#34;color:red&#34;&gt;回调留在A组件自身。&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;methods()&amp;#123;
  demo(data)&amp;#123;......&amp;#125;
&amp;#125;
......
mounted() &amp;#123;
  this.$bus.$on(&amp;#39;xxxx&amp;#39;,this.demo)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提供数据：&lt;code&gt;this.$bus.$emit(&amp;#39;xxxx&amp;#39;,数据)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最好在beforeDestroy钩子中，用$off去解绑&lt;span style=&#34;color:red&#34;&gt;当前组件所用到的&lt;/span&gt;事件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;4-消息订阅与发布（pubsub）&#34;&gt;&lt;a href=&#34;#4-消息订阅与发布（pubsub）&#34; class=&#34;headerlink&#34; title=&#34;4.消息订阅与发布（pubsub）&#34;&gt;&lt;/a&gt;4.消息订阅与发布（pubsub）&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;一种组件间通信的方式，适用于&lt;span style=&#34;color:red&#34;&gt;任意组件间通信&lt;/span&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装pubsub：&lt;code&gt;npm i pubsub-js&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;引入: &lt;code&gt;import pubsub from &amp;#39;pubsub-js&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的&lt;span style=&#34;color:red&#34;&gt;回调留在A组件自身。&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;methods()&amp;#123;
  demo(data)&amp;#123;......&amp;#125;
&amp;#125;
......
mounted() &amp;#123;
  this.pid = pubsub.subscribe(&amp;#39;xxx&amp;#39;,this.demo) //订阅消息
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提供数据：&lt;code&gt;pubsub.publish(&amp;#39;xxx&amp;#39;,数据)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最好在beforeDestroy钩子中，用&lt;code&gt;PubSub.unsubscribe(pid)&lt;/code&gt;去&lt;span style=&#34;color:red&#34;&gt;取消订阅。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;5：prvide-amp-inject&#34;&gt;&lt;a href=&#34;#5：prvide-amp-inject&#34; class=&#34;headerlink&#34; title=&#34;5：prvide &amp;amp; inject&#34;&gt;&lt;/a&gt;5：prvide &amp;amp; inject&lt;/h3&gt;&lt;h3 id=&#34;6：整合&#34;&gt;&lt;a href=&#34;#6：整合&#34; class=&#34;headerlink&#34; title=&#34;6：整合&#34;&gt;&lt;/a&gt;6：整合&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;Vue 组件间通信只要指以下 3 类通信：父子组件通信、隔代组件通信、兄弟组件通信，下面我们分别介绍每种通信方式且会说明此种方法可适用于哪类组件间通信。
（1）props / $emit 适用 父子组件通信

这种方法是 Vue 组件的基础，相信大部分同学耳闻能详，所以此处就不举例展开介绍。
（2）ref 与 $parent / $children适用 父子组件通信

ref：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例
$parent / $children：访问父 / 子实例
（3）EventBus （$emit / $on）适用于 父子、隔代、兄弟组件通信

这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子、隔代、兄弟组件。
（4）$attrs/$listeners适用于 隔代组件通信

$attrs：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 ( class 和 style 除外 )。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 ( class 和 style 除外 )，并且可以通过 v-bind=&amp;quot;$attrs&amp;quot; 传入内部组件。通常配合 inheritAttrs 选项一起使用。
$listeners：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=&amp;quot;$listeners&amp;quot; 传入内部组件
（5）provide / inject适用于 隔代组件通信

祖先组件中通过 provider 来提供变量，然后在子孙组件中通过 inject 来注入变量。provide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。
（6）Vuex适用于 父子、隔代、兄弟组件通信

Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。
Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。
改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;

//父组件需要拿到子组件的数据和实例
父组件调用子组件的方法 :this.$refs.yeluosen.childMethod()

//子组件拿到父组件的实例 (可以处理父组件分数据和调用父组件的方法)
 this.$parent
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;14：vue更新响应式的缺陷和-set的使用&#34;&gt;&lt;a href=&#34;#14：vue更新响应式的缺陷和-set的使用&#34; class=&#34;headerlink&#34; title=&#34;14：vue更新响应式的缺陷和$set的使用&#34;&gt;&lt;/a&gt;14：vue更新响应式的缺陷和$set的使用&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
    &amp;lt;ul&amp;gt;
      &amp;lt;li v-for=&amp;quot;(item, index) in person&amp;quot; :key=&amp;quot;index&amp;quot;&amp;gt;
        &amp;#123;&amp;#123; item &amp;#125;&amp;#125;
      &amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
    &amp;lt;button @click=&amp;quot;addsex&amp;quot;&amp;gt;手动点击给对象添加属性&amp;lt;/button&amp;gt;

    &amp;lt;hr /&amp;gt;

    &amp;lt;ul&amp;gt;
      &amp;lt;li v-for=&amp;quot;(item, index) in hobby&amp;quot; :key=&amp;quot;index&amp;quot;&amp;gt;
        &amp;#123;&amp;#123; item &amp;#125;&amp;#125;
      &amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
    &amp;lt;button @click=&amp;quot;addhobby&amp;quot;&amp;gt;手动点击给数组修改属性&amp;lt;/button&amp;gt;

  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
export default &amp;#123;
  name: &amp;quot;index&amp;quot;,
  data() &amp;#123;
    return &amp;#123;
      person: &amp;#123;
        name: &amp;quot;jack&amp;quot;,
        age: 18,
      &amp;#125;,
      hobby: [&amp;quot;抽烟&amp;quot;, &amp;quot;喝酒&amp;quot;, &amp;quot;烫头&amp;quot;],
      persons: [
        &amp;#123; name: &amp;quot;gsq&amp;quot;, age: 18 ,status : false &amp;#125;,
        &amp;#123; name: &amp;quot;gsq02&amp;quot;, age: 19,status : false &amp;#125;,
        &amp;#123; name: &amp;quot;gsq03&amp;quot;, age: 20,status : false &amp;#125;,
      ],
    &amp;#125;;
  &amp;#125;,
  methods: &amp;#123;
    addsex() &amp;#123;
      // 对象不能这么添加
      // this.person.sex = &amp;#39;男&amp;#39;

      //正确写法
      this.$set(this.person, &amp;quot;sex&amp;quot;, &amp;quot;男&amp;quot;)
    &amp;#125;,
    addhobby()&amp;#123;
      // 必须使用响应式的数组方法可以更新/或者使用this.$set
      // 哪些数组是相应式的？
      // push,pop,shift,unshift,splice,sort,reverse
        // this.hobby.splice(0,1,&amp;#39;哈哈&amp;#39;)

      // 或者使用
      this.$set(this.hobby,0,&amp;#39;哈哈&amp;#39;)  
    &amp;#125;
  &amp;#125;,
&amp;#125;;
&amp;lt;/script&amp;gt;
&amp;lt;style lang=&amp;quot;less&amp;quot;&amp;gt;
.container &amp;#123;
  width: 100vw;
  height: 100vh;
&amp;#125;
&amp;lt;/style&amp;gt;


Vue监视数据的原理：
1. vue会监视data中所有层次的数据。

2. 如何监测对象中的数据？
通过setter实现监视，且要在new Vue时就传入要监测的数据。
    (1).对象中后追加的属性，Vue默认不做响应式处理
    (2).如需给后添加的属性做响应式，请使用如下API：
        Vue.set(target，propertyName/index，value) 或 
        vm.$set(target，propertyName/index，value)

3. 如何监测数组中的数据？
通过包裹数组更新元素的方法实现，本质就是做了两件事：
    (1).调用原生对应的方法对数组进行更新。
    (2).重新解析模板，进而更新页面。

4.在Vue修改数组中的某个元素一定要用如下方法：
    1.使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()
    2.Vue.set() 或 vm.$set()

特别注意：Vue.set() 和 vm.$set() 不能给vm 或 vm的根数据对象 添加属性！！！
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;15：Vue获取dom元素节点并操作元素的样式&#34;&gt;&lt;a href=&#34;#15：Vue获取dom元素节点并操作元素的样式&#34; class=&#34;headerlink&#34; title=&#34;15：Vue获取dom元素节点并操作元素的样式&#34;&gt;&lt;/a&gt;15：Vue获取dom元素节点并操作元素的样式&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;$refs 获取的是组件对象
$el 获取的是dom节点

1.获取到元素节点(这里通过this.$refs获取元素节点)
this.$refs.xxxxx.$el
2.操作元素的样式
this.$refs.num1Underline.$el.style.transform = &amp;#39;scaleX(1)&amp;#39;

这种方法需要注意的是$el 用于获取vue挂载的实例的dom对象，如果不添加$el则获取不到style的属性值，会打印 TypeError: Cannot read property &amp;#39;style&amp;#39; of undefined 错误，这个错误大家一定都很熟悉，是类型错误，没有访问到dom元素
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;16：forceUpdate&#34;&gt;&lt;a href=&#34;#16：forceUpdate&#34; class=&#34;headerlink&#34; title=&#34;16：forceUpdate&#34;&gt;&lt;/a&gt;16：forceUpdate&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;//数据更新后，组件没更新。使用这个方法强制刷新组件
this.$forceUpdate();
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;17：mixin-混入&#34;&gt;&lt;a href=&#34;#17：mixin-混入&#34; class=&#34;headerlink&#34; title=&#34;17：mixin(混入)&#34;&gt;&lt;/a&gt;17：mixin(混入)&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1. 功能：可以把多个组件共用的配置提取成一个混入对象

2. 使用方式：

   第一步定义混合：
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;   {&lt;br&gt;       data(){….},&lt;br&gt;       methods:{….}&lt;br&gt;       ….&lt;br&gt;   }&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
第二步使用混入：

​	全局混入：```Vue.mixin(xxx)```
​	局部混入：```mixins:[&amp;#39;xxx&amp;#39;]	```
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;18：插件&#34;&gt;&lt;a href=&#34;#18：插件&#34; class=&#34;headerlink&#34; title=&#34;18：插件&#34;&gt;&lt;/a&gt;18：插件&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1. 功能：用于增强Vue

2. 本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。

3. 定义插件：
   对象.install = function (Vue, options) &amp;#123;
       // 1. 添加全局过滤器
       Vue.filter(....)
   
       // 2. 添加全局指令
       Vue.directive(....)
   
       // 3. 配置全局混入(合)
       Vue.mixin(....)
   
       // 4. 添加实例方法
       Vue.prototype.$myMethod = function () &amp;#123;...&amp;#125;
       Vue.prototype.$myProperty = xxxx
   &amp;#125;

4. 使用插件：Vue.use()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;19：插槽&#34;&gt;&lt;a href=&#34;#19：插槽&#34; class=&#34;headerlink&#34; title=&#34;19：插槽&#34;&gt;&lt;/a&gt;19：插槽&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 &lt;strong style=&#34;color:red&#34;&gt;父组件 &amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;gt; 子组件&lt;/strong&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分类：默认插槽、具名插槽、作用域插槽&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;默认插槽：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;vue&#34;&gt;父组件中：
        &amp;lt;Category&amp;gt;
           &amp;lt;div&amp;gt;html结构1&amp;lt;/div&amp;gt;
        &amp;lt;/Category&amp;gt;
子组件中：
        &amp;lt;template&amp;gt;
            &amp;lt;div&amp;gt;
               &amp;lt;!-- 定义插槽 --&amp;gt;
               &amp;lt;slot&amp;gt;插槽默认内容...&amp;lt;/slot&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;具名插槽：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;vue&#34;&gt;父组件中：
        &amp;lt;Category&amp;gt;
            &amp;lt;template slot=&amp;quot;center&amp;quot;&amp;gt;
              &amp;lt;div&amp;gt;html结构1&amp;lt;/div&amp;gt;
            &amp;lt;/template&amp;gt;

            &amp;lt;template v-slot:footer&amp;gt;
               &amp;lt;div&amp;gt;html结构2&amp;lt;/div&amp;gt;
            &amp;lt;/template&amp;gt;
        &amp;lt;/Category&amp;gt;
子组件中：
        &amp;lt;template&amp;gt;
            &amp;lt;div&amp;gt;
               &amp;lt;!-- 定义插槽 --&amp;gt;
               &amp;lt;slot name=&amp;quot;center&amp;quot;&amp;gt;插槽默认内容...&amp;lt;/slot&amp;gt;
               &amp;lt;slot name=&amp;quot;footer&amp;quot;&amp;gt;插槽默认内容...&amp;lt;/slot&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;作用域插槽：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;理解：&lt;span style=&#34;color:red&#34;&gt;数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。&lt;/span&gt;（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;具体编码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;vue&#34;&gt;父组件中：
        &amp;lt;Category&amp;gt;
            &amp;lt;template scope=&amp;quot;scopeData&amp;quot;&amp;gt;
                &amp;lt;!-- 生成的是ul列表 --&amp;gt;
                &amp;lt;ul&amp;gt;
                    &amp;lt;li v-for=&amp;quot;g in scopeData.games&amp;quot; :key=&amp;quot;g&amp;quot;&amp;gt;&amp;#123;&amp;#123;g&amp;#125;&amp;#125;&amp;lt;/li&amp;gt;
                &amp;lt;/ul&amp;gt;
            &amp;lt;/template&amp;gt;
        &amp;lt;/Category&amp;gt;

        &amp;lt;Category&amp;gt;
            &amp;lt;template slot-scope=&amp;quot;scopeData&amp;quot;&amp;gt;
                &amp;lt;!-- 生成的是h4标题 --&amp;gt;
                &amp;lt;h4 v-for=&amp;quot;g in scopeData.games&amp;quot; :key=&amp;quot;g&amp;quot;&amp;gt;&amp;#123;&amp;#123;g&amp;#125;&amp;#125;&amp;lt;/h4&amp;gt;
            &amp;lt;/template&amp;gt;
        &amp;lt;/Category&amp;gt;
子组件中：
        &amp;lt;template&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;slot :games=&amp;quot;games&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/template&amp;gt;
        
        &amp;lt;script&amp;gt;
            export default &amp;#123;
                name:&amp;#39;Category&amp;#39;,
                props:[&amp;#39;title&amp;#39;],
                //数据在子组件自身
                data() &amp;#123;
                    return &amp;#123;
                        games:[&amp;#39;红色警戒&amp;#39;,&amp;#39;穿越火线&amp;#39;,&amp;#39;劲舞团&amp;#39;,&amp;#39;超级玛丽&amp;#39;]
                    &amp;#125;
                &amp;#125;,
            &amp;#125;
        &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;20-vue-生命周期执行顺序-父子组件&#34;&gt;&lt;a href=&#34;#20-vue-生命周期执行顺序-父子组件&#34; class=&#34;headerlink&#34; title=&#34;20: vue 生命周期执行顺序(父子组件)&#34;&gt;&lt;/a&gt;20: vue 生命周期执行顺序(父子组件)&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.加载渲染过程：
父beforecreate -&amp;gt; 父created -&amp;gt; 父beforemount -&amp;gt; 父mounted -&amp;gt; 子created -&amp;gt; 子beforemount
-&amp;gt;  子mounted -&amp;gt; 父mounted

2.子组件更新过程：
父beforeUpdate -&amp;gt; 子beforeUpdate -&amp;gt; 子updated -&amp;gt; 父updated

3.父组件更新过程：
父beforeUpdate -&amp;gt; 父updated

4.销毁过程：
父beforedestroy -&amp;gt; 子beforedestroy -&amp;gt; 子destroy  -&amp;gt; 父destroy 



页面第一次加在会触发beforecreate，created，beforemount，mounted。

 拓展:如果有缓存keep-alive。那么还会触发actived钩子，退出时触发deactived。后续再进入只会触发actived钩子了。所以说频繁触发的函数放在active里面，执行一次的放在mounted里面。

父子组件生命周期的触发顺序是:参考洋葱模型。

先是父组件的生命周期beforecreate，created，beforemount，子组件beforecreate，created，beforemount，子组件的mounted，父组件的mounted。因为要再父组件渲染前把子组件的数据渲染到父组件里面，所以在父组件dom挂载前mounted渲染前，先加载子组件的生命周期。

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;21-谈谈你对-keep-alive-的了解？&#34;&gt;&lt;a href=&#34;#21-谈谈你对-keep-alive-的了解？&#34; class=&#34;headerlink&#34; title=&#34;21. 谈谈你对 keep-alive 的了解？&#34;&gt;&lt;/a&gt;21. 谈谈你对 keep-alive 的了解？&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，避免重新渲染 ，其有以下特性：

一般结合路由和动态组件一起使用，用于缓存组件；
提供 include 和 exclude 属性，两者都支持字符串或正则表达式， include 表示只有名称匹配的组件会被缓存，exclude 表示任何名称匹配的组件都不会被缓存 ，其中 exclude 的优先级比 include 高；
对应两个钩子函数 activated 和 deactivated ，当组件被激活时，触发钩子函数 activated，当组件被移除时，触发钩子函数 deactivated。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;二：Vue-Router&#34;&gt;&lt;a href=&#34;#二：Vue-Router&#34; class=&#34;headerlink&#34; title=&#34;二：Vue-Router&#34;&gt;&lt;/a&gt;二：Vue-Router&lt;/h1&gt;&lt;h2 id=&#34;1-基本使用&#34;&gt;&lt;a href=&#34;#1-基本使用&#34; class=&#34;headerlink&#34; title=&#34;1.基本使用&#34;&gt;&lt;/a&gt;1.基本使用&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装vue-router，命令：&lt;code&gt;npm i vue-router&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;应用插件：&lt;code&gt;Vue.use(VueRouter)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编写router配置项:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;//引入VueRouter
import VueRouter from &amp;#39;vue-router&amp;#39;
//引入Luyou 组件
import About from &amp;#39;../components/About&amp;#39;
import Home from &amp;#39;../components/Home&amp;#39;

//创建router实例对象，去管理一组一组的路由规则
const router = new VueRouter(&amp;#123;
    routes:[
        &amp;#123;
            path:&amp;#39;/about&amp;#39;,
            component:About
        &amp;#125;,
        &amp;#123;
            path:&amp;#39;/home&amp;#39;,
            component:Home
        &amp;#125;
    ]
&amp;#125;)

//暴露router
export default router
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实现切换（active-class可配置高亮样式）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;vue&#34;&gt;&amp;lt;router-link active-class=&amp;quot;active&amp;quot; to=&amp;quot;/about&amp;quot;&amp;gt;About&amp;lt;/router-link&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;指定展示位置&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;vue&#34;&gt;&amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-几个注意点&#34;&gt;&lt;a href=&#34;#2-几个注意点&#34; class=&#34;headerlink&#34; title=&#34;2.几个注意点&#34;&gt;&lt;/a&gt;2.几个注意点&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;路由组件通常存放在&lt;code&gt;pages&lt;/code&gt;文件夹，一般组件通常存放在&lt;code&gt;components&lt;/code&gt;文件夹。&lt;/li&gt;
&lt;li&gt;通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。&lt;/li&gt;
&lt;li&gt;每个组件都有自己的&lt;code&gt;$route&lt;/code&gt;属性，里面存储着自己的路由信息。&lt;/li&gt;
&lt;li&gt;整个应用只有一个router，可以通过组件的&lt;code&gt;$router&lt;/code&gt;属性获取到。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3-多级路由（多级路由）&#34;&gt;&lt;a href=&#34;#3-多级路由（多级路由）&#34; class=&#34;headerlink&#34; title=&#34;3.多级路由（多级路由）&#34;&gt;&lt;/a&gt;3.多级路由（多级路由）&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;配置路由规则，使用children配置项：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;routes:[
    &amp;#123;
        path:&amp;#39;/about&amp;#39;,
        component:About,
    &amp;#125;,
    &amp;#123;
        path:&amp;#39;/home&amp;#39;,
        component:Home,
        children:[ //通过children配置子级路由
            &amp;#123;
                path:&amp;#39;news&amp;#39;, //此处一定不要写：/news
                component:News
            &amp;#125;,
            &amp;#123;
                path:&amp;#39;message&amp;#39;,//此处一定不要写：/message
                component:Message
            &amp;#125;
        ]
    &amp;#125;
]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;跳转（要写完整路径）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;vue&#34;&gt;&amp;lt;router-link to=&amp;quot;/home/news&amp;quot;&amp;gt;News&amp;lt;/router-link&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-路由的query参数&#34;&gt;&lt;a href=&#34;#4-路由的query参数&#34; class=&#34;headerlink&#34; title=&#34;4.路由的query参数&#34;&gt;&lt;/a&gt;4.路由的query参数&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;传递参数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;vue&#34;&gt;&amp;lt;!-- 跳转并携带query参数，to的字符串写法 --&amp;gt;
&amp;lt;router-link :to=&amp;quot;/home/message/detail?id=666&amp;amp;title=你好&amp;quot;&amp;gt;跳转&amp;lt;/router-link&amp;gt;
                
&amp;lt;!-- 跳转并携带query参数，to的对象写法 --&amp;gt;
&amp;lt;router-link 
    :to=&amp;quot;&amp;#123;
        path:&amp;#39;/home/message/detail&amp;#39;,
        query:&amp;#123;
           id:666,
            title:&amp;#39;你好&amp;#39;
        &amp;#125;
    &amp;#125;&amp;quot;
&amp;gt;跳转&amp;lt;/router-link&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接收参数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;$route.query.id
$route.query.title
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;5-命名路由&#34;&gt;&lt;a href=&#34;#5-命名路由&#34; class=&#34;headerlink&#34; title=&#34;5.命名路由&#34;&gt;&lt;/a&gt;5.命名路由&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;作用：可以简化路由的跳转。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何使用&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;给路由命名：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;&amp;#123;
    path:&amp;#39;/demo&amp;#39;,
    component:Demo,
    children:[
        &amp;#123;
            path:&amp;#39;test&amp;#39;,
            component:Test,
            children:[
                &amp;#123;
                    name:&amp;#39;hello&amp;#39; //给路由命名
                    path:&amp;#39;welcome&amp;#39;,
                    component:Hello,
                &amp;#125;
            ]
        &amp;#125;
    ]
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;简化跳转：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;vue&#34;&gt;&amp;lt;!--简化前，需要写完整的路径 --&amp;gt;
&amp;lt;router-link to=&amp;quot;/demo/test/welcome&amp;quot;&amp;gt;跳转&amp;lt;/router-link&amp;gt;

&amp;lt;!--简化后，直接通过名字跳转 --&amp;gt;
&amp;lt;router-link :to=&amp;quot;&amp;#123;name:&amp;#39;hello&amp;#39;&amp;#125;&amp;quot;&amp;gt;跳转&amp;lt;/router-link&amp;gt;

&amp;lt;!--简化写法配合传递参数 --&amp;gt;
&amp;lt;router-link 
    :to=&amp;quot;&amp;#123;
        name:&amp;#39;hello&amp;#39;,
        query:&amp;#123;
           id:666,
            title:&amp;#39;你好&amp;#39;
        &amp;#125;
    &amp;#125;&amp;quot;
&amp;gt;跳转&amp;lt;/router-link&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;6-路由的params参数&#34;&gt;&lt;a href=&#34;#6-路由的params参数&#34; class=&#34;headerlink&#34; title=&#34;6.路由的params参数&#34;&gt;&lt;/a&gt;6.路由的params参数&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;配置路由，声明接收params参数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;&amp;#123;
    path:&amp;#39;/home&amp;#39;,
    component:Home,
    children:[
        &amp;#123;
            path:&amp;#39;news&amp;#39;,
            component:News
        &amp;#125;,
        &amp;#123;
            component:Message,
            children:[
                &amp;#123;
                    name:&amp;#39;xiangqing&amp;#39;,
                    path:&amp;#39;detail/:id/:title&amp;#39;, //使用占位符声明接收params参数
                    component:Detail
                &amp;#125;
            ]
        &amp;#125;
    ]
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;传递参数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;vue&#34;&gt;&amp;lt;!-- 跳转并携带params参数，to的字符串写法 --&amp;gt;
&amp;lt;router-link :to=&amp;quot;/home/message/detail/666/你好&amp;quot;&amp;gt;跳转&amp;lt;/router-link&amp;gt;
                
&amp;lt;!-- 跳转并携带params参数，to的对象写法 --&amp;gt;
&amp;lt;router-link 
    :to=&amp;quot;&amp;#123;
        name:&amp;#39;xiangqing&amp;#39;,
        params:&amp;#123;
           id:666,
            title:&amp;#39;你好&amp;#39;
        &amp;#125;
    &amp;#125;&amp;quot;
&amp;gt;跳转&amp;lt;/router-link&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接收参数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;$route.params.id
$route.params.title
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;7-路由的props配置&#34;&gt;&lt;a href=&#34;#7-路由的props配置&#34; class=&#34;headerlink&#34; title=&#34;7.路由的props配置&#34;&gt;&lt;/a&gt;7.路由的props配置&lt;/h2&gt;&lt;p&gt;​	作用：让路由组件更方便的收到参数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;&amp;#123;
    name:&amp;#39;xiangqing&amp;#39;,
    path:&amp;#39;detail/:id&amp;#39;,
    component:Detail,

    //第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件
    // props:&amp;#123;a:900&amp;#125;

    //第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件
    // props:true
    
    //第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件
    props(route)&amp;#123;
        return &amp;#123;
            id:route.query.id,
            title:route.query.title
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;8-lt-router-link-gt-的replace属性&#34;&gt;&lt;a href=&#34;#8-lt-router-link-gt-的replace属性&#34; class=&#34;headerlink&#34; title=&#34;8.&amp;lt;router-link&amp;gt;的replace属性&#34;&gt;&lt;/a&gt;8.&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt;的replace属性&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;作用：控制路由跳转时操作浏览器历史记录的模式&lt;/li&gt;
&lt;li&gt;浏览器的历史记录有两种写入方式：分别为&lt;code&gt;push&lt;/code&gt;和&lt;code&gt;replace&lt;/code&gt;，&lt;code&gt;push&lt;/code&gt;是追加历史记录，&lt;code&gt;replace&lt;/code&gt;是替换当前记录。路由跳转时候默认为&lt;code&gt;push&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如何开启&lt;code&gt;replace&lt;/code&gt;模式：&lt;code&gt;&amp;lt;router-link replace .......&amp;gt;News&amp;lt;/router-link&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;9-编程式路由导航&#34;&gt;&lt;a href=&#34;#9-编程式路由导航&#34; class=&#34;headerlink&#34; title=&#34;9.编程式路由导航&#34;&gt;&lt;/a&gt;9.编程式路由导航&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;作用：不借助&lt;code&gt;&amp;lt;router-link&amp;gt; &lt;/code&gt;实现路由跳转，让路由跳转更加灵活&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;具体编码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;//$router的两个API
this.$router.push(&amp;#123;
    name:&amp;#39;xiangqing&amp;#39;,
        params:&amp;#123;
            id:xxx,
            title:xxx
        &amp;#125;
&amp;#125;)

this.$router.replace(&amp;#123;
    name:&amp;#39;xiangqing&amp;#39;,
        params:&amp;#123;
            id:xxx,
            title:xxx
        &amp;#125;
&amp;#125;)
this.$router.forward() //前进
this.$router.back() //后退
this.$router.go() //可前进也可后退
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;10-缓存路由组件&#34;&gt;&lt;a href=&#34;#10-缓存路由组件&#34; class=&#34;headerlink&#34; title=&#34;10.缓存路由组件&#34;&gt;&lt;/a&gt;10.缓存路由组件&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;作用：让不展示的路由组件保持挂载，不被销毁。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;具体编码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;vue&#34;&gt;&amp;lt;keep-alive include=&amp;quot;News&amp;quot;&amp;gt; 
    &amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt;
&amp;lt;/keep-alive&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;11-两个新的生命周期钩子&#34;&gt;&lt;a href=&#34;#11-两个新的生命周期钩子&#34; class=&#34;headerlink&#34; title=&#34;11.两个新的生命周期钩子&#34;&gt;&lt;/a&gt;11.两个新的生命周期钩子&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;具体名字：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;activated&lt;/code&gt;路由组件被激活时触发。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deactivated&lt;/code&gt;路由组件失活时触发。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;&amp;lt;keep-alive&amp;gt;
  &amp;lt;component&amp;gt;
    &amp;lt;!-- 该组件将被缓存！ --&amp;gt;
  &amp;lt;/component&amp;gt;
&amp;lt;/keep-alive&amp;gt;
如果只想 router-view 里面某个组件被缓存


export default [
  &amp;#123;
    path: &amp;#39;/&amp;#39;,
    name: &amp;#39;home&amp;#39;,
    component: Home,
    meta: &amp;#123;
      keepAlive: true // 需要被缓存
    &amp;#125;
  &amp;#125;, &amp;#123;
    path: &amp;#39;/:id&amp;#39;,
    name: &amp;#39;edit&amp;#39;,
    component: Edit,
    meta: &amp;#123;
      keepAlive: false // 不需要被缓存
    &amp;#125;
  &amp;#125;
]
&amp;lt;keep-alive&amp;gt;
    &amp;lt;router-view v-if=&amp;quot;$route.meta.keepAlive&amp;quot;&amp;gt;
        &amp;lt;!-- 这里是会被缓存的视图组件，比如 Home！ --&amp;gt;
    &amp;lt;/router-view&amp;gt;
&amp;lt;/keep-alive&amp;gt;
 
&amp;lt;router-view v-if=&amp;quot;!$route.meta.keepAlive&amp;quot;&amp;gt;
    &amp;lt;!-- 这里是不被缓存的视图组件，比如 Edit！ --&amp;gt;
&amp;lt;/router-view&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;12-路由守卫&#34;&gt;&lt;a href=&#34;#12-路由守卫&#34; class=&#34;headerlink&#34; title=&#34;12.路由守卫&#34;&gt;&lt;/a&gt;12.路由守卫&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;作用：对路由进行权限控制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分类：全局守卫、独享守卫、组件内守卫&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;全局守卫:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;//全局前置守卫：初始化时执行、每次路由切换前执行
router.beforeEach((to,from,next)=&amp;gt;&amp;#123;
    console.log(&amp;#39;beforeEach&amp;#39;,to,from)
    if(to.meta.isAuth)&amp;#123; //判断当前路由是否需要进行权限控制
        if(localStorage.getItem(&amp;#39;school&amp;#39;) === &amp;#39;atguigu&amp;#39;)&amp;#123; //权限控制的具体规则
            next() //放行
        &amp;#125;else&amp;#123;
            alert(&amp;#39;暂无权限查看&amp;#39;)
            // next(&amp;#123;name:&amp;#39;guanyu&amp;#39;&amp;#125;)
        &amp;#125;
    &amp;#125;else&amp;#123;
        next() //放行
    &amp;#125;
&amp;#125;)

//全局后置守卫：初始化时执行、每次路由切换后执行
router.afterEach((to,from)=&amp;gt;&amp;#123;
    console.log(&amp;#39;afterEach&amp;#39;,to,from)
    if(to.meta.title)&amp;#123; 
        document.title = to.meta.title //修改网页的title
    &amp;#125;else&amp;#123;
        document.title = &amp;#39;vue_test&amp;#39;
    &amp;#125;
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;独享守卫:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;beforeEnter(to,from,next)&amp;#123;
    console.log(&amp;#39;beforeEnter&amp;#39;,to,from)
    if(to.meta.isAuth)&amp;#123; //判断当前路由是否需要进行权限控制
        if(localStorage.getItem(&amp;#39;school&amp;#39;) === &amp;#39;atguigu&amp;#39;)&amp;#123;
            next()
        &amp;#125;else&amp;#123;
            alert(&amp;#39;暂无权限查看&amp;#39;)
            // next(&amp;#123;name:&amp;#39;guanyu&amp;#39;&amp;#125;)
        &amp;#125;
    &amp;#125;else&amp;#123;
        next()
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;组件内守卫：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;//进入守卫：通过路由规则，进入该组件时被调用
beforeRouteEnter (to, from, next) &amp;#123;
&amp;#125;,
//离开守卫：通过路由规则，离开该组件时被调用
beforeRouteLeave (to, from, next) &amp;#123;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;13-vue-router实现路由懒加载（-动态加载路由-）&#34;&gt;&lt;a href=&#34;#13-vue-router实现路由懒加载（-动态加载路由-）&#34; class=&#34;headerlink&#34; title=&#34;13.vue-router实现路由懒加载（ 动态加载路由 ）&#34;&gt;&lt;/a&gt;13.vue-router实现路由懒加载（ 动态加载路由 ）&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;import Vue from &amp;#39;vue&amp;#39;
import VueRouter from &amp;#39;vue-router&amp;#39;

Vue.use(VueRouter)

const routes = [
  &amp;#123;
    path: &amp;#39;/&amp;#39;,
    name: &amp;#39;Home&amp;#39;,
    component: () =&amp;gt; import( &amp;#39;../views/Home.vue&amp;#39;)   //使用import的方式导入组件
  &amp;#125;,
  &amp;#123;
    path: &amp;#39;/about&amp;#39;,
    name: &amp;#39;About&amp;#39;,
    component: () =&amp;gt; import( &amp;#39;../views/About.vue&amp;#39;)
  &amp;#125;
]

const router = new VueRouter(&amp;#123;
  mode: &amp;#39;history&amp;#39;,
  base: process.env.BASE_URL,
  routes
&amp;#125;)

export default router
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;14-vue-router如何响应-路由参数-的变化？&#34;&gt;&lt;a href=&#34;#14-vue-router如何响应-路由参数-的变化？&#34; class=&#34;headerlink&#34; title=&#34;14.vue-router如何响应 路由参数 的变化？&#34;&gt;&lt;/a&gt;14.vue-router如何响应 路由参数 的变化？&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;原来的组件实例会被复用。这也意味着组件的生命周期钩子不会再被调用。你可以简单地 watch (监测变化) $route 对象：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;const User = &amp;#123;
  template: &amp;#39;...&amp;#39;,
  watch: &amp;#123;
    &amp;#39;$route&amp;#39; (to, from) &amp;#123;
      // 对路由变化作出响应...
    &amp;#125;
  &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;15-route和-router的区别是什么&#34;&gt;&lt;a href=&#34;#15-route和-router的区别是什么&#34; class=&#34;headerlink&#34; title=&#34;15.$route和$router的区别是什么&#34;&gt;&lt;/a&gt;15.$route和$router的区别是什么&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;$route为当前router跳转当前路由组件里可获取name、path、query、params等

$router为VueRouter实例，想要导航到不同URL，则使用$router.push方法
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;16-hash和history的区别&#34;&gt;&lt;a href=&#34;#16-hash和history的区别&#34; class=&#34;headerlink&#34; title=&#34;16.hash和history的区别&#34;&gt;&lt;/a&gt;16.hash和history的区别&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;hash模式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;地址中永远带着#号，不美观 。&lt;/li&gt;
&lt;li&gt;若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。&lt;/li&gt;
&lt;li&gt;兼容性较好。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;history模式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;地址干净，美观 。&lt;/li&gt;
&lt;li&gt;兼容性和hash模式相比略差。&lt;/li&gt;
&lt;li&gt;应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;17-路由鉴权&#34;&gt;&lt;a href=&#34;#17-路由鉴权&#34; class=&#34;headerlink&#34; title=&#34;17.路由鉴权&#34;&gt;&lt;/a&gt;17.路由鉴权&lt;/h2&gt;&lt;h2 id=&#34;18-vue-router-路由模式有几种？&#34;&gt;&lt;a href=&#34;#18-vue-router-路由模式有几种？&#34; class=&#34;headerlink&#34; title=&#34;18.vue-router 路由模式有几种？&#34;&gt;&lt;/a&gt;18.vue-router 路由模式有几种？&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;vue-router 有 3 种路由模式：hash、history、abstract，对应的源码如下所示：

switch (mode) &amp;#123;
  case &amp;#39;history&amp;#39;:
    this.history = new HTML5History(this, options.base)
    break
  case &amp;#39;hash&amp;#39;:
    this.history = new HashHistory(this, options.base, this.fallback)
    break
  case &amp;#39;abstract&amp;#39;:
    this.history = new AbstractHistory(this, options.base)
    break
  default:
    if (process.env.NODE_ENV !== &amp;#39;production&amp;#39;) &amp;#123;
      assert(false, `invalid mode: $&amp;#123;mode&amp;#125;`)
    &amp;#125;
&amp;#125;

其中，3 种路由模式的说明如下：

hash: 使用 URL hash 值来作路由。支持所有浏览器，包括不支持 HTML5 History Api 的浏览器；
history : 依赖 HTML5 History API 和服务器配置。具体可以查看 HTML5 History 模式；
abstract : 支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;19-能说下-vue-router-中常用的-hash-和-history-路由模式实现原理吗？&#34;&gt;&lt;a href=&#34;#19-能说下-vue-router-中常用的-hash-和-history-路由模式实现原理吗？&#34; class=&#34;headerlink&#34; title=&#34;19. 能说下 vue-router 中常用的 hash 和 history 路由模式实现原理吗？&#34;&gt;&lt;/a&gt;19. 能说下 vue-router 中常用的 hash 和 history 路由模式实现原理吗？&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;（1）hash 模式的实现原理
早期的前端路由的实现就是基于 location.hash 来实现的。其实现原理很简单，location.hash 的值就是 URL 中 # 后面的内容。比如下面这个网站，它的 location.hash 的值为 ‘#search’：
https://www.word.com#search
hash 路由模式的实现主要是基于下面几个特性：

URL 中 hash 值只是客户端的一种状态，也就是说当向服务器端发出请求时，hash 部分不会被发送；
hash 值的改变，都会在浏览器的访问历史中增加一个记录。因此我们能通过浏览器的回退、前进按钮控制hash 的切换；
可以通过 a 标签，并设置 href 属性，当用户点击这个标签后，URL 的 hash 值会发生改变；或者使用 JavaScript 来对 loaction.hash 进行赋值，改变 URL 的 hash 值；
我们可以使用 hashchange 事件来监听 hash 值的变化，从而对页面进行跳转（渲染）。


（2）history 模式的实现原理
HTML5 提供了 History API 来实现 URL 的变化。其中做最主要的 API 有以下两个：history.pushState() 和 history.repalceState()。这两个 API 可以在不进行刷新的情况下，操作浏览器的历史纪录。
唯一不同的是，前者是新增一个历史记录，后者是直接替换当前的历史记录，如下所示：
window.history.pushState(null, null, path);
window.history.replaceState(null, null, path);
history 路由模式的实现主要基于存在下面几个特性：

pushState 和 repalceState 两个 API 来操作实现 URL 的变化 ；
我们可以使用 popstate 事件来监听 url 的变化，从而对页面进行跳转（渲染）；
history.pushState() 或 history.replaceState() 不会触发 popstate 事件，这时我们需要手动触发页面跳转（渲染）。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;三：Vuex&#34;&gt;&lt;a href=&#34;#三：Vuex&#34; class=&#34;headerlink&#34; title=&#34;三：Vuex&#34;&gt;&lt;/a&gt;三：Vuex&lt;/h1&gt;&lt;h2 id=&#34;1-概念&#34;&gt;&lt;a href=&#34;#1-概念&#34; class=&#34;headerlink&#34; title=&#34;1.概念&#34;&gt;&lt;/a&gt;1.概念&lt;/h2&gt;&lt;p&gt;​		在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读&amp;#x2F;写），也是一种组件间通信的方式，且适用于任意组件间通信。&lt;/p&gt;
&lt;h2 id=&#34;2-何时使用？&#34;&gt;&lt;a href=&#34;#2-何时使用？&#34; class=&#34;headerlink&#34; title=&#34;2.何时使用？&#34;&gt;&lt;/a&gt;2.何时使用？&lt;/h2&gt;&lt;p&gt;​		多个组件需要共享数据时，音乐播放、登录状态、加入购物车&lt;/p&gt;
&lt;h2 id=&#34;3-搭建vuex环境&#34;&gt;&lt;a href=&#34;#3-搭建vuex环境&#34; class=&#34;headerlink&#34; title=&#34;3.搭建vuex环境&#34;&gt;&lt;/a&gt;3.搭建vuex环境&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建文件：&lt;code&gt;src/store/index.js&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;//引入Vue核心库
import Vue from &amp;#39;vue&amp;#39;
//引入Vuex
import Vuex from &amp;#39;vuex&amp;#39;
//应用Vuex插件
Vue.use(Vuex)

//准备actions对象——响应组件中用户的动作
const actions = &amp;#123;&amp;#125;
//准备mutations对象——修改state中的数据
const mutations = &amp;#123;&amp;#125;
//准备state对象——保存具体的数据
const state = &amp;#123;&amp;#125;

//创建并暴露store
export default new Vuex.Store(&amp;#123;
    actions,
    mutations,
    state
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在&lt;code&gt;main.js&lt;/code&gt;中创建vm时传入&lt;code&gt;store&lt;/code&gt;配置项&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;......
//引入store
import store from &amp;#39;./store&amp;#39;
......

//创建vm
new Vue(&amp;#123;
    el:&amp;#39;#app&amp;#39;,
    render: h =&amp;gt; h(App),
    store
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-基本使用&#34;&gt;&lt;a href=&#34;#4-基本使用&#34; class=&#34;headerlink&#34; title=&#34;4.基本使用&#34;&gt;&lt;/a&gt;4.基本使用&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;初始化数据、配置&lt;code&gt;actions&lt;/code&gt;、配置&lt;code&gt;mutations&lt;/code&gt;，操作文件&lt;code&gt;store.js&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;//引入Vue核心库
import Vue from &amp;#39;vue&amp;#39;
//引入Vuex
import Vuex from &amp;#39;vuex&amp;#39;
//引用Vuex
Vue.use(Vuex)

const actions = &amp;#123;
    //响应组件中加的动作
    jia(context,value)&amp;#123;
        // console.log(&amp;#39;actions中的jia被调用了&amp;#39;,miniStore,value)
        context.commit(&amp;#39;JIA&amp;#39;,value)
    &amp;#125;,
&amp;#125;

const mutations = &amp;#123;
    //执行加
    JIA(state,value)&amp;#123;
        // console.log(&amp;#39;mutations中的JIA被调用了&amp;#39;,state,value)
        state.sum += value
    &amp;#125;
&amp;#125;

//初始化数据
const state = &amp;#123;
   sum:0
&amp;#125;

//创建并暴露store
export default new Vuex.Store(&amp;#123;
    actions,
    mutations,
    state,
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;组件中读取vuex中的数据：&lt;code&gt;$store.state.sum&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;组件中修改vuex中的数据：&lt;code&gt;$store.dispatch(&amp;#39;action中的方法名&amp;#39;,数据)&lt;/code&gt; 或 &lt;code&gt;$store.commit(&amp;#39;mutations中的方法名&amp;#39;,数据)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写&lt;code&gt;dispatch&lt;/code&gt;，直接编写&lt;code&gt;commit&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;5-getters的使用&#34;&gt;&lt;a href=&#34;#5-getters的使用&#34; class=&#34;headerlink&#34; title=&#34;5.getters的使用&#34;&gt;&lt;/a&gt;5.getters的使用&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在&lt;code&gt;store.js&lt;/code&gt;中追加&lt;code&gt;getters&lt;/code&gt;配置&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;......

const getters = &amp;#123;
    bigSum(state)&amp;#123;
        return state.sum * 10
    &amp;#125;
&amp;#125;

//创建并暴露store
export default new Vuex.Store(&amp;#123;
    ......
    getters
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;组件中读取数据：&lt;code&gt;$store.getters.bigSum&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;6-四个map方法的使用&#34;&gt;&lt;a href=&#34;#6-四个map方法的使用&#34; class=&#34;headerlink&#34; title=&#34;6.四个map方法的使用&#34;&gt;&lt;/a&gt;6.四个map方法的使用&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;mapState方法：&lt;/strong&gt;用于帮助我们映射&lt;code&gt;state&lt;/code&gt;中的数据为计算属性&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;computed: &amp;#123;
    //借助mapState生成计算属性：sum、school、subject（对象写法）
     ...mapState(&amp;#123;sum:&amp;#39;sum&amp;#39;,school:&amp;#39;school&amp;#39;,subject:&amp;#39;subject&amp;#39;&amp;#125;),
         
    //借助mapState生成计算属性：sum、school、subject（数组写法）
    ...mapState([&amp;#39;sum&amp;#39;,&amp;#39;school&amp;#39;,&amp;#39;subject&amp;#39;]),
&amp;#125;,
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;mapGetters方法：&lt;/strong&gt;用于帮助我们映射&lt;code&gt;getters&lt;/code&gt;中的数据为计算属性&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;computed: &amp;#123;
    //借助mapGetters生成计算属性：bigSum（对象写法）
    ...mapGetters(&amp;#123;bigSum:&amp;#39;bigSum&amp;#39;&amp;#125;),

    //借助mapGetters生成计算属性：bigSum（数组写法）
    ...mapGetters([&amp;#39;bigSum&amp;#39;])
&amp;#125;,
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;mapActions方法：&lt;/strong&gt;用于帮助我们生成与&lt;code&gt;actions&lt;/code&gt;对话的方法，即：包含&lt;code&gt;$store.dispatch(xxx)&lt;/code&gt;的函数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;methods:&amp;#123;
    //靠mapActions生成：incrementOdd、incrementWait（对象形式）
    ...mapActions(&amp;#123;incrementOdd:&amp;#39;jiaOdd&amp;#39;,incrementWait:&amp;#39;jiaWait&amp;#39;&amp;#125;)

    //靠mapActions生成：incrementOdd、incrementWait（数组形式）
    ...mapActions([&amp;#39;jiaOdd&amp;#39;,&amp;#39;jiaWait&amp;#39;])
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;mapMutations方法：&lt;/strong&gt;用于帮助我们生成与&lt;code&gt;mutations&lt;/code&gt;对话的方法，即：包含&lt;code&gt;$store.commit(xxx)&lt;/code&gt;的函数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;methods:&amp;#123;
    //靠mapActions生成：increment、decrement（对象形式）
    ...mapMutations(&amp;#123;increment:&amp;#39;JIA&amp;#39;,decrement:&amp;#39;JIAN&amp;#39;&amp;#125;),
    
    //靠mapMutations生成：JIA、JIAN（对象形式）
    ...mapMutations([&amp;#39;JIA&amp;#39;,&amp;#39;JIAN&amp;#39;]),
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;7-模块化-命名空间&#34;&gt;&lt;a href=&#34;#7-模块化-命名空间&#34; class=&#34;headerlink&#34; title=&#34;7.模块化+命名空间&#34;&gt;&lt;/a&gt;7.模块化+命名空间&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;目的：让代码更好维护，让多种数据分类更加明确。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改&lt;code&gt;store.js&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;const countAbout = &amp;#123;
  namespaced:true,//开启命名空间
  state:&amp;#123;x:1&amp;#125;,
  mutations: &amp;#123; ... &amp;#125;,
  actions: &amp;#123; ... &amp;#125;,
  getters: &amp;#123;
    bigSum(state)&amp;#123;
       return state.sum * 10
    &amp;#125;
  &amp;#125;
&amp;#125;

const personAbout = &amp;#123;
  namespaced:true,//开启命名空间
  state:&amp;#123; ... &amp;#125;,
  mutations: &amp;#123; ... &amp;#125;,
  actions: &amp;#123; ... &amp;#125;
&amp;#125;

const store = new Vuex.Store(&amp;#123;
  modules: &amp;#123;
    countAbout,
    personAbout
  &amp;#125;
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;开启命名空间后，组件中读取state数据：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;//方式一：自己直接读取
this.$store.state.personAbout.list
//方式二：借助mapState读取：
...mapState(&amp;#39;countAbout&amp;#39;,[&amp;#39;sum&amp;#39;,&amp;#39;school&amp;#39;,&amp;#39;subject&amp;#39;]),
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;开启命名空间后，组件中读取getters数据：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;//方式一：自己直接读取
this.$store.getters[&amp;#39;personAbout/firstPersonName&amp;#39;]
//方式二：借助mapGetters读取：
...mapGetters(&amp;#39;countAbout&amp;#39;,[&amp;#39;bigSum&amp;#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;开启命名空间后，组件中调用dispatch&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;//方式一：自己直接dispatch
this.$store.dispatch(&amp;#39;personAbout/addPersonWang&amp;#39;,person)
//方式二：借助mapActions：
...mapActions(&amp;#39;countAbout&amp;#39;,&amp;#123;incrementOdd:&amp;#39;jiaOdd&amp;#39;,incrementWait:&amp;#39;jiaWait&amp;#39;&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;开启命名空间后，组件中调用commit&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;//方式一：自己直接commit
this.$store.commit(&amp;#39;personAbout/ADD_PERSON&amp;#39;,person)
//方式二：借助mapMutations：
...mapMutations(&amp;#39;countAbout&amp;#39;,&amp;#123;increment:&amp;#39;JIA&amp;#39;,decrement:&amp;#39;JIAN&amp;#39;&amp;#125;),
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;8：Vuex-state数据的双向绑定&#34;&gt;&lt;a href=&#34;#8：Vuex-state数据的双向绑定&#34; class=&#34;headerlink&#34; title=&#34;8：Vuex state数据的双向绑定&#34;&gt;&lt;/a&gt;8：Vuex state数据的双向绑定&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;// 在从组件的computed中
computed: &amp;#123;
    user: &amp;#123;
        get() &amp;#123;
          return this.$store.state.user
        &amp;#125;,
        set(v) &amp;#123;
          // 使用vuex中的mutations中定义好的方法来改变
          this.$store.commit(&amp;#39;USER&amp;#39;, v)
        &amp;#125;
    &amp;#125;&amp;lt;br&amp;gt;&amp;#125;&amp;lt;br&amp;gt;// 在组件中就可以使用
     
        
        
&amp;lt;input v-modle=&amp;quot;user&amp;quot; /&amp;gt;        
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;9-相关文档-写的比较好的文档&#34;&gt;&lt;a href=&#34;#9-相关文档-写的比较好的文档&#34; class=&#34;headerlink&#34; title=&#34;9.相关文档(写的比较好的文档)&#34;&gt;&lt;/a&gt;9.相关文档(写的比较好的文档)&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;https://zhuanlan.zhihu.com/p/78981485
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;10-简要概括vuex&#34;&gt;&lt;a href=&#34;#10-简要概括vuex&#34; class=&#34;headerlink&#34; title=&#34;10.简要概括vuex&#34;&gt;&lt;/a&gt;10.简要概括vuex&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;主要包括以下几个模块：

State =&amp;gt; 基本数据，定义了应用状态的数据结构，可以在这里设置默认的初始状态。
Getter =&amp;gt; 从基本数据派生的数据，允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。
Mutation =&amp;gt; 是唯一更改 store 中状态的方法，且必须是同步函数。
Action =&amp;gt; 像一个装饰器，包裹mutations，使之可以异步。用于提交 mutation，而不是直接变更状态，可以包含任意异步操作。
Module =&amp;gt; 模块化Vuex，允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;四：Vue中的开发经验&#34;&gt;&lt;a href=&#34;#四：Vue中的开发经验&#34; class=&#34;headerlink&#34; title=&#34;四：Vue中的开发经验&#34;&gt;&lt;/a&gt;四：Vue中的开发经验&lt;/h1&gt;&lt;h2 id=&#34;1：搭建Vue脚手架（vue-cli）并创建一个项目&#34;&gt;&lt;a href=&#34;#1：搭建Vue脚手架（vue-cli）并创建一个项目&#34; class=&#34;headerlink&#34; title=&#34;1：搭建Vue脚手架（vue-cli）并创建一个项目&#34;&gt;&lt;/a&gt;1：搭建Vue脚手架（vue-cli）并创建一个项目&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.安装node.js环境
      [官网下载地址](https://nodejs.org/en/download/)
               一路安装完成后 打开cmd  
               输入 node -v
               输入 npm -v
               如果能看到node和npm的版本号了，说明已经安装成功

               
               
2.安装vue-cli
               有npm和cnpm两种方式，网上都说cnpm好些，所以我也用的cnpm安装，
               首先利用淘宝镜像安装cnpm      
               npm install cnpm -g --registry=https://registry.npm.taobao.org       
               安装完成
               输入 cnpm -v
  
               
               
3.然后全局安装 vue-cli
               输入指令 cnpm install -g vue-cli
               这个命令只需要运行一次就可以了。安装上之后，以后就不用安装了。
               查看vue版本号
               vue -V    //注：V是大写字母V

               如果提示“无法识别 ‘vue’ ” ，有可能是 npm 版本过低，需要手动更新npm的版本号，这也是上面说的为什么要保证npm版本号高的原因，npm的版本可以手动升级更新，没记错的话应该是               
               npm install -g npm
               
 
               
               
4.使用vue-cli来创建一个基于 webpack 模板的新项目               
               创建
               cmd利用cd指令进入到保存项目的文件夹下，然后输入命令           
               输入 vue init webpack

5.安装项目所需要的依赖               
                   进入新建的项目文件夹下，就是上头有一些文件的里面，输入命令
                输入 指令 cnpm install

6.运行项目
               根据你package.json里的配置里的指令
               一般情况下都是 npm run dev
               
7.打包资源上线
               根据你package.json里的配置里的指令
               一般情况下都是 npm run build
                   
8.具体创建项目 博客地址
               https://www.cnblogs.com/coober/p/10875647.html
               
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2：关于不同版本的Vue&#34;&gt;&lt;a href=&#34;#2：关于不同版本的Vue&#34; class=&#34;headerlink&#34; title=&#34;2：关于不同版本的Vue&#34;&gt;&lt;/a&gt;2：关于不同版本的Vue&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;vue.js与vue.runtime.xxx.js的区别：&lt;ol&gt;
&lt;li&gt;vue.js是完整版的Vue，包含：核心功能 + 模板解析器。&lt;/li&gt;
&lt;li&gt;vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;因为vue.runtime.xxx.js没有模板解析器，所以不能使用template这个配置项，需要使用render函数接收到的createElement函数去指定具体内容。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3：vue-config-js配置文件&#34;&gt;&lt;a href=&#34;#3：vue-config-js配置文件&#34; class=&#34;headerlink&#34; title=&#34;3：vue.config.js配置文件&#34;&gt;&lt;/a&gt;3：vue.config.js配置文件&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;使用vue inspect &amp;gt; output.js可以查看到Vue脚手架的默认配置。&lt;/li&gt;
&lt;li&gt;使用vue.config.js可以对脚手架进行个性化定制，详情见：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jbGkudnVlanMub3JnL3po&#34;&gt;https://cli.vuejs.org/zh&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2：vue中如何编写可复用的组件？&#34;&gt;&lt;a href=&#34;#2：vue中如何编写可复用的组件？&#34; class=&#34;headerlink&#34; title=&#34;2：vue中如何编写可复用的组件？&#34;&gt;&lt;/a&gt;2：vue中如何编写可复用的组件？&lt;/h2&gt;&lt;p&gt;①创建组件页面eg Toast.vue；&lt;br&gt;②用Vue.extend()扩展一个组件构造器,再通过实例化组件构造器,就可创造出可复用的组件&lt;br&gt;③将toast组件挂载到新创建的div上；&lt;br&gt;④把toast组件的dom添加到body里；&lt;br&gt;⑤修改优化达到动态控制页面显示文字跟显示时间；&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;
import Vue from &amp;#39;vue&amp;#39;; 
import Toast from &amp;#39;@/components/Toast&amp;#39;;     //引入组件
let ToastConstructor  = Vue.extend(Toast) // 返回一个“扩展实例构造器”
 
let myToast = (text,duration)=&amp;gt;&amp;#123;
    let toastDom = new ToastConstructor(&amp;#123;
        el:document.createElement(&amp;#39;div&amp;#39;)    //将toast组件挂载到新创建的div上
    &amp;#125;)
    document.body.appendChild( toastDom.$el )   //把toast组件的dom添加到body里
    
    toastDom.text = text;
    toastDom.duration = duration;
 
    // 在指定 duration 之后让 toast消失
    setTimeout(()=&amp;gt;&amp;#123;
        toastDom.isShow = false;  
    &amp;#125;, toastDom.duration);
&amp;#125;
export default myToast;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;点击查看 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTYzODQ1L2FydGljbGUvZGV0YWlscy83NzUyNDkzNA==&#34;&gt;https://blog.csdn.net/qq_38563845/article/details/77524934&lt;/span&gt; &lt;/p&gt;
&lt;h2 id=&#34;3：vue父组件向子组件传对象，不实时更新解决&#34;&gt;&lt;a href=&#34;#3：vue父组件向子组件传对象，不实时更新解决&#34; class=&#34;headerlink&#34; title=&#34;3：vue父组件向子组件传对象，不实时更新解决&#34;&gt;&lt;/a&gt;3：vue父组件向子组件传对象，不实时更新解决&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;思路1：就是让利用v-if的重新渲染机制

1.首先考虑的就是手动刷了，给组件加个v-if=”someShow“;

//  这是组件上写法 ：&amp;lt;my-component v-if=&amp;quot;someShow&amp;quot;&amp;gt;&amp;lt;/my-component&amp;gt;
 
// 下边写在父组件的methods里
refesh:function()&amp;#123;
    this.someShow=false;
    var _this=this;
    this.$nextTick(function()&amp;#123;
        _this.someShow = true;
    &amp;#125;)
  
&amp;#125;
// $nextTick
// $nextTick 是在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后使用 $nextTick，则可以在回调中获取更新后的 DOM  这样重新渲染就会是最新数据了




思路2：利用watch监听

在子组件中监听你要的数据，当然别监听对象，监听了不一定好使。亲测不好使，测过好使的，可以给我留言。


data:function()&amp;#123;
    return &amp;#123;
        title:&amp;quot;&amp;quot;,
        content:&amp;quot;&amp;quot;,
        btn:&amp;quot;&amp;quot;
    &amp;#125;
&amp;#125;,   
methods:&amp;#123;
        changeTitle:function()&amp;#123;
            this.title=this.listTitle;
            // 这里的每次变化了就复制给组件上的变量，视图也就更改了			
        &amp;#125;,
        changeList:function()&amp;#123;
            this.content=this.listList;
        &amp;#125;,
        changeBtn:function()&amp;#123;
            this.btn=this.listBtn;
        &amp;#125;
    &amp;#125;,
watch:&amp;#123;
        listTitle:&amp;quot;changeTitle&amp;quot;,
        listList:&amp;quot;changeList&amp;quot;,
        listBtn:&amp;quot;changeBtn&amp;quot;
        // 冒号前边这个就是从父组件传过来的，后边的就是变化了的监听函数
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4：is的用法（用于动态组件且基于-DOM-内模板的限制来工作。）&#34;&gt;&lt;a href=&#34;#4：is的用法（用于动态组件且基于-DOM-内模板的限制来工作。）&#34; class=&#34;headerlink&#34; title=&#34;4：is的用法（用于动态组件且基于 DOM 内模板的限制来工作。）&#34;&gt;&lt;/a&gt;4：is的用法（用于动态组件且基于 DOM 内模板的限制来工作。）&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;is用来动态切换组件，DOM模板解析&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;&amp;lt;table&amp;gt; &amp;lt;tr is=&amp;quot;my-row&amp;quot;&amp;gt;&amp;lt;/tr&amp;gt; &amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;5：vue脚手架配置代理&#34;&gt;&lt;a href=&#34;#5：vue脚手架配置代理&#34; class=&#34;headerlink&#34; title=&#34;5：vue脚手架配置代理&#34;&gt;&lt;/a&gt;5：vue脚手架配置代理&lt;/h2&gt;&lt;h3 id=&#34;方法一&#34;&gt;&lt;a href=&#34;#方法一&#34; class=&#34;headerlink&#34; title=&#34;方法一&#34;&gt;&lt;/a&gt;方法一&lt;/h3&gt;&lt;p&gt;​	在vue.config.js中添加如下配置：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;devServer:&amp;#123;
  proxy:&amp;quot;http://localhost:5000&amp;quot;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;优点：配置简单，请求资源时直接发给前端（8080）即可。&lt;/li&gt;
&lt;li&gt;缺点：不能配置多个代理，不能灵活的控制请求是否走代理。&lt;/li&gt;
&lt;li&gt;工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;方法二&#34;&gt;&lt;a href=&#34;#方法二&#34; class=&#34;headerlink&#34; title=&#34;方法二&#34;&gt;&lt;/a&gt;方法二&lt;/h3&gt;&lt;p&gt;​	编写vue.config.js配置具体代理规则：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;js&#34;&gt;module.exports = &amp;#123;
    devServer: &amp;#123;
      proxy: &amp;#123;
      &amp;#39;/api1&amp;#39;: &amp;#123;// 匹配所有以 &amp;#39;/api1&amp;#39;开头的请求路径
        target: &amp;#39;http://localhost:5000&amp;#39;,// 代理目标的基础路径
        changeOrigin: true,
        pathRewrite: &amp;#123;&amp;#39;^/api1&amp;#39;: &amp;#39;&amp;#39;&amp;#125;
      &amp;#125;,
      &amp;#39;/api2&amp;#39;: &amp;#123;// 匹配所有以 &amp;#39;/api2&amp;#39;开头的请求路径
        target: &amp;#39;http://localhost:5001&amp;#39;,// 代理目标的基础路径
        changeOrigin: true,
        pathRewrite: &amp;#123;&amp;#39;^/api2&amp;#39;: &amp;#39;&amp;#39;&amp;#125;
      &amp;#125;
    &amp;#125;
  &amp;#125;
&amp;#125;
/*
   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000
   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080
   changeOrigin默认值为true
*/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;优点：可以配置多个代理，且可以灵活的控制请求是否走代理。&lt;/li&gt;
&lt;li&gt;缺点：配置略微繁琐，请求资源时必须加前缀。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;五：Vue源码原理&#34;&gt;&lt;a href=&#34;#五：Vue源码原理&#34; class=&#34;headerlink&#34; title=&#34;五：Vue源码原理&#34;&gt;&lt;/a&gt;五：Vue源码原理&lt;/h1&gt;&lt;h2 id=&#34;1：vue-js2-x的两个核心是什么-数据驱动、组件系统。&#34;&gt;&lt;a href=&#34;#1：vue-js2-x的两个核心是什么-数据驱动、组件系统。&#34; class=&#34;headerlink&#34; title=&#34;1：vue.js2.x的两个核心是什么(数据驱动、组件系统。)&#34;&gt;&lt;/a&gt;1：vue.js2.x的两个核心是什么(数据驱动、组件系统。)&lt;/h2&gt;&lt;p&gt;数据驱动:Object.defineProperty和存储器属性: getter和setter（所以只兼容IE9及以上版本），可称为基于依赖收集的观测机制,核心是VM，即ViewModel，保证数据和视图的一致性。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;            let number = 18
            let person = &amp;#123;
                name : &amp;#39;jack&amp;#39;,
                sex : &amp;#39;男&amp;#39;
            &amp;#125;

            Object.defineProperty(person,&amp;#39;age&amp;#39;,&amp;#123;
                // value : 18,
                // enumerable : true, //控制熟悉是否可以枚举，默认值是false
                // writable : true, //控制熟悉是否可以被修改，默认值是false
                // configurable : true, //控制属性是否可以被删除,默认值是false

                //当有人读取person的age属性时，get函数(getter)就会被调用,且返回值就是age的值
                get()&amp;#123;
                    console.log(&amp;#39;有人读取了age&amp;#39;)
                    return number
                &amp;#125;,

                //当有人修改person的age属性时，set函数(setter)就会被调用,且会收到修改的具体值
                set(value)&amp;#123;
                    console.log(`有人修改了age，值为:$&amp;#123;value&amp;#125;`)
                    number = value
                &amp;#125;

            &amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;组件系统:&lt;/p&gt;
&lt;h2 id=&#34;2：VUE数据代理的原理&#34;&gt;&lt;a href=&#34;#2：VUE数据代理的原理&#34; class=&#34;headerlink&#34; title=&#34;2：VUE数据代理的原理&#34;&gt;&lt;/a&gt;2：VUE数据代理的原理&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;通过一个对象代理对另一个对象中的属性的操作(读写)
let obj = &amp;#123;x:100&amp;#125;
let obj2 = &amp;#123;y:200&amp;#125;

Object.defineProperty(obj2,&amp;#39;x&amp;#39;,&amp;#123;
    get()&amp;#123;
        return obj.x
    &amp;#125;,
    set()&amp;#123;
        obj.x = value
    &amp;#125;
&amp;#125;)


1.Vue中的数据代理：
    通过vm对象代理data对象中的数据(读/写)
2.Vue中数据代理的好处：
    更加方便的操作data中的数据
3.基本原理
    通过Object.defineProperty()把data对象中所有属性添加到vm上
    为每一个添加到vm上的属性，都指定一个getter/setter
    在getter/setter内部去操作(读/写)data中对应的属性
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3：Vue-组件中-data-为什么必须是函数&#34;&gt;&lt;a href=&#34;#3：Vue-组件中-data-为什么必须是函数&#34; class=&#34;headerlink&#34; title=&#34;3：Vue 组件中 data 为什么必须是函数&#34;&gt;&lt;/a&gt;3：Vue 组件中 data 为什么必须是函数&lt;/h2&gt;&lt;p&gt;vue组件中data值不能为对象，因为对象是引用类型，组件可能会被多个实例同时引用。&lt;br&gt;如果data值为对象，将导致多个实例共享一个对象，其中一个组件改变data属性值，其它实例也会受到影响。&lt;/p&gt;
&lt;h2 id=&#34;4：Vue双向绑定的原理&#34;&gt;&lt;a href=&#34;#4：Vue双向绑定的原理&#34; class=&#34;headerlink&#34; title=&#34;4：Vue双向绑定的原理&#34;&gt;&lt;/a&gt;4：Vue双向绑定的原理&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;如果被问到 Vue 怎么实现数据双向绑定，大家肯定都会回答 通过 Object.defineProperty() 对数据进行劫持，但是 Object.defineProperty() 只能对属性进行数据劫持，不能对整个对象进行劫持。
同理无法对数组进行劫持，但是我们在使用 Vue 框架中都知道，Vue 能检测到对象和数组（部分方法的操作）的变化，那它是怎么实现的呢？我们查看相关代码如下：

  /**
   * Observe a list of Array items.
   */
  observeArray (items: Array&amp;lt;any&amp;gt;) &amp;#123;
    for (let i = 0, l = items.length; i &amp;lt; l; i++) &amp;#123;
      observe(items[i])  // observe 功能为监测数据的变化
    &amp;#125;
  &amp;#125;

  /**
   * 对属性进行递归遍历
   */
  let childOb = !shallow &amp;amp;&amp;amp; observe(val) // observe 功能为监测数据的变化

  通过以上 Vue 源码部分查看，我们就能知道 Vue 框架是通过遍历数组 和递归遍历对象，从而达到利用 Object.defineProperty() 也能对对象和数组（部分方法的操作）进行监听。
  
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;5：Vue的diff算法（列表渲染key的作用和原理）&#34;&gt;&lt;a href=&#34;#5：Vue的diff算法（列表渲染key的作用和原理）&#34; class=&#34;headerlink&#34; title=&#34;5：Vue的diff算法（列表渲染key的作用和原理）&#34;&gt;&lt;/a&gt;5：Vue的diff算法（列表渲染key的作用和原理）&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.虚拟DOM中key的作用:
key是虚拟DOM对象的标识，当状态中的数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】
随后，Vue进行【新的虚拟DOM】与【旧的虚拟DOM】的差异比较，比较规则如下

2.对比规则:
(1).旧虚拟DOM中找到了与新虚拟DOM相同的key:
    1.若虚拟DOM中的内容没变，直接使用之前的真实DOM！
    2.若虚拟DOM中的内容变了，则生成新的真实DOM，随后替换掉页面中之前的真实DOM
(2).旧虚拟DOM中未找到与新虚拟DOM相同的key
    1.创建新的真实DOM，随后渲染到页面

3.用index作为key可能会引发的问题:
    1.若对数据进行，逆序添加，逆序删除等破坏顺寻操作：
        会产生没有必要的真实DOM更新 =&amp;gt; 界面效果没问题，但是效率低
    2.如果结构中还有包含输入类的DOM：
        会产生错误DOM更新 =&amp;gt; 界面有问题

4.开发中如何选择key?:
    1.最好使用每条数据的唯一标识作为key,比如id,手机号，身份证号，学号等唯一值
    2.如果不存在对数据的逆序添加，逆序删除等破坏性顺序操作，仅用于渲染列表展示，使用index作为key是没问题的
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;6：Vue是怎么检测数据的改变的原理&#34;&gt;&lt;a href=&#34;#6：Vue是怎么检测数据的改变的原理&#34; class=&#34;headerlink&#34; title=&#34;6：Vue是怎么检测数据的改变的原理&#34;&gt;&lt;/a&gt;6：Vue是怎么检测数据的改变的原理&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;let data = &amp;#123;
    name :&amp;#39;jack&amp;#39;,
    age : 18
&amp;#125;

//创建一个监视的实例对象，用于监视data中属性的变化
const obs = new Observer(data)

//准备一个vm实例对象
let vm = &amp;#123;&amp;#125;
vm._data = data = obs

function Observer(obj)&amp;#123;
    //汇总对象中所有属性形成的数组
    const keys = Object.keys(obj)
    //遍历
    keys.forEach((k)=&amp;gt;&amp;#123;
        Object.defineProperty(this,k,&amp;#123;
            get()&amp;#123;
                return obj[k]
            &amp;#125;,
            set(val)&amp;#123;
                console.log(`$&amp;#123;k&amp;#125;被改了，我要去解析模板了，生成虚拟DOM`)
                obj[k] = val
            &amp;#125;
        &amp;#125;)
    &amp;#125;)
&amp;#125;  
//自己实现的基本的原理，只是对第一层的基本数据类型进行检测。无法检测到里面的

Vue的底层对data中的对象数据检测进行了递归，所以都能检测到，
数组里的对象数据没有检测
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;7-v-model-的原理？&#34;&gt;&lt;a href=&#34;#7-v-model-的原理？&#34; class=&#34;headerlink&#34; title=&#34;7. v-model 的原理？&#34;&gt;&lt;/a&gt;7. v-model 的原理？&lt;/h2&gt;&lt;h2 id=&#34;8-使用过-Vue-SSR-吗？说说-SSR？&#34;&gt;&lt;a href=&#34;#8-使用过-Vue-SSR-吗？说说-SSR？&#34; class=&#34;headerlink&#34; title=&#34;8.使用过 Vue SSR 吗？说说 SSR？&#34;&gt;&lt;/a&gt;8.使用过 Vue SSR 吗？说说 SSR？&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;Vue.js 是构建客户端应用程序的框架。默认情况下，可以在浏览器中输出 Vue 组件，进行生成 DOM 和操作 DOM。然而，也可以将同一个组件渲染为服务端的 HTML 字符串，将它们直接发送到浏览器，最后将这些静态标记&amp;quot;激活&amp;quot;为客户端上完全可交互的应用程序。
即：SSR大致的意思就是vue在客户端将标签渲染成的整个 html 片段的工作在服务端完成，服务端形成的html 片段直接返回给客户端这个过程就叫做服务端渲染。
服务端渲染 SSR 的优缺点如下：

（1）服务端渲染的优点：
更好的 SEO：因为 SPA 页面的内容是通过 Ajax 获取，而搜索引擎爬取工具并不会等待 Ajax 异步完成后再抓取页面内容，所以在 SPA 中是抓取不到页面通过 Ajax 获取到的内容；而 SSR 是直接由服务端返回已经渲染好的页面（数据已经包含在页面中），所以搜索引擎爬取工具可以抓取渲染好的页面；
更快的内容到达时间（首屏加载更快）：SPA 会等待所有 Vue 编译后的 js 文件都下载完成后，才开始进行页面的渲染，文件下载等需要一定的时间等，所以首屏渲染需要一定的时间；SSR 直接由服务端渲染好页面直接返回显示，无需等待下载 js 文件及再去渲染等，所以 SSR 有更快的内容到达时间；
（2) 服务端渲染的缺点：
更多的开发条件限制：例如服务端渲染只支持 beforCreate 和 created 两个钩子函数，这会导致一些外部扩展库需要特殊处理，才能在服务端渲染应用程序中运行；并且与可以部署在任何静态文件服务器上的完全静态单页面应用程序 SPA 不同，服务端渲染应用程序，需要处于 Node.js server 运行环境；
更多的服务器负载：在 Node.js 中渲染完整的应用程序，显然会比仅仅提供静态文件的 server 更加大量占用CPU 资源 (CPU-intensive - CPU 密集)，因此如果你预料在高流量环境 ( high traffic ) 下使用，请准备相应的服务器负载，并明智地采用缓存策略。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;9-Vue-框架怎么实现对象和数组的监听？&#34;&gt;&lt;a href=&#34;#9-Vue-框架怎么实现对象和数组的监听？&#34; class=&#34;headerlink&#34; title=&#34;9. Vue 框架怎么实现对象和数组的监听？&#34;&gt;&lt;/a&gt;9. Vue 框架怎么实现对象和数组的监听？&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;Vue 数据双向绑定主要是指：数据变化更新视图，视图变化更新数据。
即：

输入框内容变化时，Data 中的数据同步变化。即 View =&amp;gt; Data 的变化。
Data 中的数据变化时，文本节点的内容同步变化。即 Data =&amp;gt; View 的变化。
其中，View 变化更新 Data ，可以通过事件监听的方式来实现，所以 Vue 的数据双向绑定的工作主要是如何根据 Data 变化更新 View。
Vue 主要通过以下 4 个步骤来实现数据双向绑定的：

实现一个监听器 Observer：对数据对象进行遍历，包括子属性对象的属性，利用 Object.defineProperty() 对属性都加上 setter 和 getter。这样的话，给这个对象的某个值赋值，就会触发 setter，那么就能监听到了数据变化。
实现一个解析器 Compile：解析 Vue 模板指令，将模板中的变量都替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，调用更新函数进行数据更新。
实现一个订阅者 Watcher：Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁 ，主要的任务是订阅 Observer 中的属性值变化的消息，当收到属性值变化的消息时，触发解析器 Compile 中对应的更新函数。
实现一个订阅器 Dep：订阅器采用 发布-订阅 设计模式，用来收集订阅者 Watcher，对监听器 Observer 和 订阅者 Watcher 进行统一管理。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;10-Vue-怎么用-vm-set-解决对象新增属性不能响应的问题-？&#34;&gt;&lt;a href=&#34;#10-Vue-怎么用-vm-set-解决对象新增属性不能响应的问题-？&#34; class=&#34;headerlink&#34; title=&#34;10. Vue 怎么用 vm.$set() 解决对象新增属性不能响应的问题 ？&#34;&gt;&lt;/a&gt;10. Vue 怎么用 vm.$set() 解决对象新增属性不能响应的问题 ？&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;受现代 JavaScript 的限制 ，Vue 无法检测到对象属性的添加或删除。
由于 Vue 会在初始化实例时对属性执行 getter/setter 转化，所以属性必须在 data 对象上存在才能让 Vue 将它转换为响应式的。
但是 Vue 提供了 Vue.set (object, propertyName, value) / vm.$set (object, propertyName, value)来实现为对象添加响应式属性，那框架本身是如何实现的呢？

我们查看对应的 Vue 源码：vue/src/core/instance/index.js

export function set (target: Array&amp;lt;any&amp;gt; | Object, key: any, val: any): any &amp;#123;
  // target 为数组
  if (Array.isArray(target) &amp;amp;&amp;amp; isValidArrayIndex(key)) &amp;#123;
    // 修改数组的长度, 避免索引&amp;gt;数组长度导致splcie()执行有误
    target.length = Math.max(target.length, key)
    // 利用数组的splice变异方法触发响应式
    target.splice(key, 1, val)
    return val
  &amp;#125;
  // key 已经存在，直接修改属性值
  if (key in target &amp;amp;&amp;amp; !(key in Object.prototype)) &amp;#123;
    target[key] = val
    return val
  &amp;#125;
  const ob = (target: any).__ob__
  // target 本身就不是响应式数据, 直接赋值
  if (!ob) &amp;#123;
    target[key] = val
    return val
  &amp;#125;
  // 对属性进行响应式处理
  defineReactive(ob.value, key, val)
  ob.dep.notify()
  return val
&amp;#125;


我们阅读以上源码可知，vm.$set 的实现原理是：

如果目标是数组，直接使用数组的 splice 方法触发相应式；
如果目标是对象，会先判读属性是否存在、对象是否是响应式，最终如果要对属性进行响应式处理，则是通过调用 defineReactive 方法进行响应式处理（ defineReactive 方法就是 Vue 在初始化对象时，给对象属性采用 Object.defineProperty 动态添加 getter 和 setter 的功能所调用的方法）
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;11-虚拟-DOM-的优缺点？&#34;&gt;&lt;a href=&#34;#11-虚拟-DOM-的优缺点？&#34; class=&#34;headerlink&#34; title=&#34;11. 虚拟 DOM 的优缺点？&#34;&gt;&lt;/a&gt;11. 虚拟 DOM 的优缺点？&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;优点：

保证性能下限： 框架的虚拟 DOM 需要适配任何上层 API 可能产生的操作，它的一些 DOM 操作的实现必须是普适的，所以它的性能并不是最优的；但是比起粗暴的 DOM 操作性能要好很多，因此框架的虚拟 DOM 至少可以保证在你不需要手动优化的情况下，依然可以提供还不错的性能，即保证性能的下限；
无需手动操作 DOM： 我们不再需要手动去操作 DOM，只需要写好 View-Model 的代码逻辑，框架会根据虚拟 DOM 和 数据双向绑定，帮我们以可预期的方式更新视图，极大提高我们的开发效率；
跨平台： 虚拟 DOM 本质上是 JavaScript 对象,而 DOM 与平台强相关，相比之下虚拟 DOM 可以进行更方便地跨平台操作，例如服务器渲染、weex 开发等等。

缺点:

无法进行极致优化： 虽然虚拟 DOM + 合理的优化，足以应对绝大部分应用的性能需求，但在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;12-虚拟-DOM-实现原理？&#34;&gt;&lt;a href=&#34;#12-虚拟-DOM-实现原理？&#34; class=&#34;headerlink&#34; title=&#34;12. 虚拟 DOM 实现原理？&#34;&gt;&lt;/a&gt;12. 虚拟 DOM 实现原理？&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;虚拟 DOM 的实现原理主要包括以下 3 部分：

用 JavaScript 对象模拟真实 DOM 树，对真实 DOM 进行抽象；
diff 算法 — 比较两棵虚拟 DOM 树的差异；
pach 算法 — 将两个虚拟 DOM 对象的差异应用到真正的 DOM 树。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;13-Vue-中的-key-有什么作用？&#34;&gt;&lt;a href=&#34;#13-Vue-中的-key-有什么作用？&#34; class=&#34;headerlink&#34; title=&#34;13. Vue 中的 key 有什么作用？&#34;&gt;&lt;/a&gt;13. Vue 中的 key 有什么作用？&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速。
Vue 的 diff 过程可以概括为：oldCh 和 newCh 各有两个头尾的变量 oldStartIndex、oldEndIndex 和 newStartIndex、newEndIndex，它们会新节点和旧节点会进行两两对比，即一共有4种比较方式：newStartIndex 和oldStartIndex 、newEndIndex 和 oldEndIndex 、newStartIndex 和 oldEndIndex 、newEndIndex 和 oldStartIndex，如果以上 4 种比较都没匹配，如果设置了key，就会用 key 再进行比较，在比较的过程中，遍历会往中间靠，一旦 StartIdx &amp;gt; EndIdx 表明 oldCh 和 newCh 至少有一个已经遍历完了，就会结束比较。
所以 Vue 中 key 的作用是：key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速!

更准确：因为带 key 就不是就地复用了，在 sameNode 函数 a.key === b.key 对比中可以避免就地复用的情况。所以会更加准确。
更快速：利用 key 的唯一性生成 map 对象来获取对应节点，比遍历方式更快，源码如下：


function createKeyToOldIdx (children, beginIdx, endIdx) &amp;#123;
  let i, key
  const map = &amp;#123;&amp;#125;
  for (i = beginIdx; i &amp;lt;= endIdx; ++i) &amp;#123;
    key = children[i].key
    if (isDef(key)) map[key] = i
  &amp;#125;
  return map
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;14-你有对-Vue-项目进行哪些优化？&#34;&gt;&lt;a href=&#34;#14-你有对-Vue-项目进行哪些优化？&#34; class=&#34;headerlink&#34; title=&#34;14. 你有对 Vue 项目进行哪些优化？&#34;&gt;&lt;/a&gt;14. 你有对 Vue 项目进行哪些优化？&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;（1）代码层面的优化

v-if 和 v-show 区分使用场景
computed 和 watch 区分使用场景
v-for 遍历必须为 item 添加 key，且避免同时使用 v-if
长列表性能优化
事件的销毁
图片资源懒加载
路由懒加载
第三方插件的按需引入
优化无限列表性能
服务端渲染 SSR or 预渲染
（2）Webpack 层面的优化

Webpack 对图片进行压缩
减少 ES6 转为 ES5 的冗余代码
提取公共代码
模板预编译
提取组件的 CSS
优化 SourceMap
构建结果输出分析
Vue 项目的编译优化

（3）基础的 Web 技术的优化

开启 gzip 压缩
浏览器缓存
CDN 的使用
使用 Chrome Performance 查找性能瓶颈
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;15-对于-vue3-0-特性你有什么了解的吗？&#34;&gt;&lt;a href=&#34;#15-对于-vue3-0-特性你有什么了解的吗？&#34; class=&#34;headerlink&#34; title=&#34;15. 对于 vue3.0 特性你有什么了解的吗？&#34;&gt;&lt;/a&gt;15. 对于 vue3.0 特性你有什么了解的吗？&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;Vue 3.0 的目标是让 Vue 核心变得更小、更快、更强大，因此 Vue 3.0 增加以下这些新特性：

（1）监测机制的改变
3.0 将带来基于代理 Proxy 的 observer 实现，提供全语言覆盖的反应性跟踪。这消除了 Vue 2 当中基于 Object.defineProperty 的实现所存在的很多限制：

只能监测属性，不能监测对象
检测属性的添加和删除；
检测数组索引和长度的变更；
支持 Map、Set、WeakMap 和 WeakSet。
新的 observer 还提供了以下特性：

用于创建 observable 的公开 API。这为中小规模场景提供了简单轻量级的跨组件状态管理解决方案。
默认采用惰性观察。在 2.x 中，不管反应式数据有多大，都会在启动时被观察到。如果你的数据集很大，这可能会在应用启动时带来明显的开销。在 3.x 中，只观察用于渲染应用程序最初可见部分的数据。
更精确的变更通知。在 2.x 中，通过 Vue.set 强制添加新属性将导致依赖于该对象的 watcher 收到变更通知。在 3.x 中，只有依赖于特定属性的 watcher 才会收到通知。
不可变的 observable：我们可以创建值的“不可变”版本（即使是嵌套属性），除非系统在内部暂时将其“解禁”。这个机制可用于冻结 prop 传递或 Vuex 状态树以外的变化。
更好的调试功能：我们可以使用新的 renderTracked 和 renderTriggered 钩子精确地跟踪组件在什么时候以及为什么重新渲染。
（2）模板
模板方面没有大的变更，只改了作用域插槽，2.x 的机制导致作用域插槽变了，父组件会重新渲染，而 3.0 把作用域插槽改成了函数的方式，这样只会影响子组件的重新渲染，提升了渲染的性能。
同时，对于 render 函数的方面，vue3.0 也会进行一系列更改来方便习惯直接使用 api 来生成 vdom 。

（3）对象式的组件声明方式
vue2.x 中的组件是通过声明的方式传入一系列 option，和 TypeScript 的结合需要通过一些装饰器的方式来做，虽然能实现功能，但是比较麻烦。
3.0 修改了组件的声明方式，改成了类式的写法，这样使得和 TypeScript 的结合变得很容易。
此外，vue 的源码也改用了 TypeScript 来写。其实当代码的功能复杂之后，必须有一个静态类型系统来做一些辅助管理。
现在 vue3.0 也全面改用 TypeScript 来重写了，更是使得对外暴露的 api 更容易结合 TypeScript。静态类型系统对于复杂代码的维护确实很有必要。

（4）其它方面的更改
vue3.0 的改变是全面的，上面只涉及到主要的 3 个方面，还有一些其他的更改：

支持自定义渲染器，从而使得 weex 可以通过自定义渲染器的方式来扩展，而不是直接 fork 源码来改的方式。
支持 Fragment（多个根节点）和 Protal（在 dom 其他部分渲染组建内容）组件，针对一些特殊的场景做了处理。
基于 treeshaking 优化，提供了更多的内置功能。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;16-响应式原理（变化侦测）&#34;&gt;&lt;a href=&#34;#16-响应式原理（变化侦测）&#34; class=&#34;headerlink&#34; title=&#34;16. 响应式原理（变化侦测）&#34;&gt;&lt;/a&gt;16. 响应式原理（变化侦测）&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;使用发布订阅模式将数据劫持和模板编译结合，实现双向绑定&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1、observer: 封装 Object.defineProperty 方法用来劫持对象属性的getter和setter，以此来追踪数据变化。

2、读取数据时触发getter来收集依赖(Watcher)到Dep。
3、修改数据时触发setter，并遍历依赖列表，通知所有相关依赖（Watcher）
4、Dep 类为依赖找一个存储依赖的地方，用来收集和管理依赖，在getter中收集，在setter中通知。
5、Watcher 类就是收集的依赖，实际上是一个订阅器，Watcher会将自己的实例赋值给window.target（全局变量）上，然后去主动访问属性，触发属性的getter，getter中会将此Watcher收集到Dep中，Watcher的update方法会在Dep的通知方法中被调用，触发更新。
6、Observer 类用来将一个对象的所有属性和子属性都变成响应式的，通过递归调用defineReactive来实现。
7、由于无法侦测对象上新增/删除属性，所以提供 $set 和 $delete API5。

28. Object.defineProperty怎么用， 三个参数？，有什么作用啊？
Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。



   obj：需要定义属性的对象
     prop：需要定义的属性
     &amp;#123;&amp;#125;：要定义或修改的属性描述符。
         value: &amp;quot;18&amp;quot;,         // 设置默认值 （与 get() 互斥）
         enumerable: true,    //这一句控制属性可以枚举 enumerable 改为true 就可以参与遍历了   默认值false
         writable: true,      // 该属性是否可写   默认值false （与 set() 互斥）
         configurable: true,  // 该属性是否可被删除   默认值false
          get // 当有人读取 prop 的时候  get函数就会调用,并且返回就是 sss 的值
          set // 当有人修改 prop 的时候  set函数就会调用, 有个参数这个参数就是修改后的值
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;17-vue2和vue3的响应式原理都有什么区别呢？&#34;&gt;&lt;a href=&#34;#17-vue2和vue3的响应式原理都有什么区别呢？&#34; class=&#34;headerlink&#34; title=&#34;17. vue2和vue3的响应式原理都有什么区别呢？&#34;&gt;&lt;/a&gt;17. vue2和vue3的响应式原理都有什么区别呢？&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;vue2 用的是 Object.defindProperty 但是vue3用的是Proxy

Object.defindProperty 缺点：

一次只能对一个属性进行监听，需要遍历来对所有属性监听
对于对象的新增属性，需要手动监听
对于数组通过push、unshift方法增加的元素，也无法监听
Proxy就没有这个问题，可以监听整个对象的数据变化，所以用vue3.0会用Proxy代替definedProperty。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;18-Vue-模板编译原理&#34;&gt;&lt;a href=&#34;#18-Vue-模板编译原理&#34; class=&#34;headerlink&#34; title=&#34;18. Vue 模板编译原理&#34;&gt;&lt;/a&gt;18. Vue 模板编译原理&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;模板字符串 转换成 element AST（解析器）
Vue-loader 切割解析 .vue 文件（parseHTML按标签以出栈入栈形式切割（自闭合不入栈直接处理），出栈时维护父子关系）生成 AST（抽象语法树）

使用大量正则匹配开始结束标签，while指针定位解析位置，

对 AST 进行静态节点标记，主要用来做虚拟DOM的渲染优化（优化器）
在dom更新时不需 diff 静态节点。

使用 element AST 生成 render 函数代码字符串（代码生成器）
Vue-template-compiler再解析成render（可执行函数字符串-with(this)=&amp;gt;&amp;#123;return _c(‘div’)&amp;#125;），new Function 生成函数，传递给组件的 render

在组件渲染的时候直接调用 render 即可
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;19-Vue原理总结&#34;&gt;&lt;a href=&#34;#19-Vue原理总结&#34; class=&#34;headerlink&#34; title=&#34;19. Vue原理总结&#34;&gt;&lt;/a&gt;19. Vue原理总结&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;【模板编译】将template模板，经过编译系统后生成VNode，（模板字符串→AST→Render函数）

【渲染】然后再通过渲染系统来将VNode生成真实DOM（document.createElement &amp;amp;&amp;amp; Mount挂载到真实DOM节点上）

【响应式】通过响应式系统对数据进行监听，当数据发生改变时，触发依赖项（组件）

【Diff &amp;amp; Patch】组件内收到通知后，会通过diff算法对比VNode的变化，尽可能复用代码，找出最小差异，保证性能消耗最小。

【渲染】拿到需要新增/删除/修改的VNode后，逐一去操作真实DOM进行修改（通过选择器选择到对应真实DOM节点进行修改）
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;六：对Vue的理解&#34;&gt;&lt;a href=&#34;#六：对Vue的理解&#34; class=&#34;headerlink&#34; title=&#34;六：对Vue的理解&#34;&gt;&lt;/a&gt;六：对Vue的理解&lt;/h1&gt;&lt;h2 id=&#34;1：谈谈对MVVM的理解&#34;&gt;&lt;a href=&#34;#1：谈谈对MVVM的理解&#34; class=&#34;headerlink&#34; title=&#34;1：谈谈对MVVM的理解&#34;&gt;&lt;/a&gt;1：谈谈对MVVM的理解&lt;/h2&gt;&lt;p&gt;M-model，model代表数据模型，也可以在model中定义数据修改和操作的业务逻辑&lt;/p&gt;
&lt;p&gt;V-view,view代表UI组件，它负责将数据模型转化为UI展现出来&lt;/p&gt;
&lt;p&gt;VM-viewmodel,viewmodel监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步view和model的对象，连接model和view&lt;/p&gt;
&lt;h2 id=&#34;2：vue是渐进式的框架的理解：-主张最少-没有多做职责之外的事&#34;&gt;&lt;a href=&#34;#2：vue是渐进式的框架的理解：-主张最少-没有多做职责之外的事&#34; class=&#34;headerlink&#34; title=&#34;2：vue是渐进式的框架的理解：(主张最少,没有多做职责之外的事)&#34;&gt;&lt;/a&gt;2：vue是渐进式的框架的理解：(主张最少,没有多做职责之外的事)&lt;/h2&gt;&lt;p&gt;Vue的核心的功能，是一个视图模板引擎，但这不是说Vue就不能成为一个框架。如下图所示，这里包含了Vue的所有部件，在声明式渲染（视图模板引擎）的基础上，我们可以通过添加组件系统、客户端路由、大规模状态管理来构建一个完整的框架。更重要的是，这些功能相互独立，你可以在核心功能的基础上任意选用其他的部件，不一定要全部整合在一起。可以看到，所说的“渐进式”，其实就是Vue的使用方式，同时也体现了Vue的设计的理念&lt;br&gt;在我看来，渐进式代表的含义是：主张最少。视图模板引擎&lt;br&gt;每个框架都不可避免会有自己的一些特点，从而会对使用者有一定的要求，这些要求就是主张，主张有强有弱，它的强势程度会影响在业务开发中的使用方式。&lt;br&gt;比如说，Angular，它两个版本都是强主张的，如果你用它，必须接受以下东西：&lt;br&gt;必须使用它的模块机制- 必须使用它的依赖注入- 必须使用它的特殊形式定义组件（这一点每个视图框架都有，难以避免）&lt;br&gt;所以Angular是带有比较强的排它性的，如果你的应用不是从头开始，而是要不断考虑是否跟其他东西集成，这些主张会带来一些困扰。&lt;br&gt;Vue可能有些方面是不如React，不如Angular，但它是渐进的，没有强主张，你可以在原有大系统的上面，把一两个组件改用它实现，当jQuery用；也可以整个用它全家桶开发，当Angular用；还可以用它的视图，搭配你自己设计的整个下层用。也可以函数式，都可以，它只是个轻量视图而已，只做了自己该做的事，没有做不该做的事，仅此而已。&lt;br&gt;&lt;strong&gt;渐进式的含义，我的理解是：没有多做职责之外的事。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;3：SPA-单页面应用及其优缺点&#34;&gt;&lt;a href=&#34;#3：SPA-单页面应用及其优缺点&#34; class=&#34;headerlink&#34; title=&#34;3：SPA 单页面应用及其优缺点&#34;&gt;&lt;/a&gt;3：SPA 单页面应用及其优缺点&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不支持低版本的浏览器，最低只支持到IE9；&lt;br&gt;不利于SEO的优化（如果要支持SEO，建议通过服务端来进行渲染组件）；&lt;br&gt;第一次加载首页耗时相对长一些；&lt;br&gt;不可以使用浏览器的导航按钮需要自行实现前进、后退。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;无刷新体验,提升了用户体验；&lt;br&gt;前端开发不再以页面为单位，更多地采用组件化的思想，代码结构和组织方式更加规范化，便于修改和调整；&lt;br&gt;API 共享，同一套后端程序代码不用修改就可以用于Web界面、手机、平板等多种客户端&lt;br&gt;用户体验好、快，内容的改变不需要重新加载整个页面。&lt;/p&gt;
&lt;h2 id=&#34;4：怎样理解-Vue-的单向数据流？&#34;&gt;&lt;a href=&#34;#4：怎样理解-Vue-的单向数据流？&#34; class=&#34;headerlink&#34; title=&#34;4：怎样理解 Vue 的单向数据流？&#34;&gt;&lt;/a&gt;4：怎样理解 Vue 的单向数据流？&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。
这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。
额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。
这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。
子组件想修改时，只能通过 $emit 派发一个自定义事件，父组件接收到后，由父组件修改。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;七：Vue3扩展&#34;&gt;&lt;a href=&#34;#七：Vue3扩展&#34; class=&#34;headerlink&#34; title=&#34;七：Vue3扩展&#34;&gt;&lt;/a&gt;七：Vue3扩展&lt;/h1&gt;&lt;h2 id=&#34;1-VUE3简介&#34;&gt;&lt;a href=&#34;#1-VUE3简介&#34; class=&#34;headerlink&#34; title=&#34;1.VUE3简介&#34;&gt;&lt;/a&gt;1.VUE3简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;2020年9月18日，Vue.js发布3.0版本，代号 One Piece(海贼王)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-Vue3带来了什么&#34;&gt;&lt;a href=&#34;#2-Vue3带来了什么&#34; class=&#34;headerlink&#34; title=&#34;2.Vue3带来了什么&#34;&gt;&lt;/a&gt;2.Vue3带来了什么&lt;/h2&gt;&lt;p&gt;1.性能的提升&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.打包大小减少41%
2.初次渲染快55%,更新渲染快33%
3.内存减少54%   
...    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2.源码的升级&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;使用Proxy代替defineProperty实现响应式
重写虚拟DOM的实现和Tree-Shaking
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.拥抱TypeScript&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;Vue3可以更好的支持TypeScript
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4.新的特性&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.Composition API(组合API)
    steup配置
    ref与reactive
    watch与watchEffect
    provide与inject
    ...
2.新的内置组件
    Fragment
    Teleport
    Suspense
3.其他改变
    新的生命周期钩子
    data选项应始终被声明为一个函数
    移除keyCode支持作为v-on的修饰符
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-创建Vue3-0工程&#34;&gt;&lt;a href=&#34;#3-创建Vue3-0工程&#34; class=&#34;headerlink&#34; title=&#34;3.创建Vue3.0工程&#34;&gt;&lt;/a&gt;3.创建Vue3.0工程&lt;/h2&gt;&lt;h3 id=&#34;1-使用vue-cli创建&#34;&gt;&lt;a href=&#34;#1-使用vue-cli创建&#34; class=&#34;headerlink&#34; title=&#34;1.使用vue-cli创建&#34;&gt;&lt;/a&gt;1.使用vue-cli创建&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上
vue --version  或者 vue -V
## 安装或者升级你的@vue/cli
npm install -g @vue/cli
## 创建
vue create vue-text   /或者使用 node自带的(如果升级不了@vue/cli)    npx @vue/cli create my-app
## 启动
cd vue-text
npm run serve
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-使用vite创建&#34;&gt;&lt;a href=&#34;#2-使用vite创建&#34; class=&#34;headerlink&#34; title=&#34;2.使用vite创建&#34;&gt;&lt;/a&gt;2.使用vite创建&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;## 什么是vite?   
新一代前端构建工具
## 优势
1.开发环境中,无需打包操作，可快速的冷启动
2.轻量快速的热重载(HMR)
3.真正的按需编译，不再等待整个应用编译完成
## 创建工程
npm init  vite-app &amp;lt;project-name&amp;gt;
## 进入工程目录
cd &amp;lt;project-name&amp;gt;
## 安装依赖
npm install
## 运行
npm run dev
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-常用Composition-API&#34;&gt;&lt;a href=&#34;#4-常用Composition-API&#34; class=&#34;headerlink&#34; title=&#34;4.常用Composition API&#34;&gt;&lt;/a&gt;4.常用Composition API&lt;/h2&gt;&lt;h3 id=&#34;1-拉开序幕的setup&#34;&gt;&lt;a href=&#34;#1-拉开序幕的setup&#34; class=&#34;headerlink&#34; title=&#34;1.拉开序幕的setup&#34;&gt;&lt;/a&gt;1.拉开序幕的setup&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.理解：vue3.0中的一个新的配置项。值为一个函数
2.setups是所有Composition API(组合api) “表演的舞台”
3.组件中所有用到的：数据，方法等等。均要配置在setup中
4.setup函数的两种返回值：
    1.若返回一个对象，则对象中的属性，方法，在模板中直接使用
    2.若返回画一个渲染函数，则可以自定义渲染内容(了解即可)
5.注意点
    1.尽量不要与Vue2.x配置混用
    2.但在setup中不能访问到Vue2.x配置(data,methsds,computed...)
    3.如果重名，setup优先
    
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-ref函数&#34;&gt;&lt;a href=&#34;#2-ref函数&#34; class=&#34;headerlink&#34; title=&#34;2.ref函数&#34;&gt;&lt;/a&gt;2.ref函数&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.作用：定义一个响应式的数据
2.语法 ： const xxx = ref(initValue)
    1.创建一个响应式的数据的引用对象
    2.js操作数据
    3.模板中读取数据：不需要  .value  直接 &amp;lt;div&amp;gt;&amp;#123;&amp;#123;xxx&amp;#125;&amp;#125;&amp;lt;div/&amp;gt;
3.备注：
    1.接收数据可以是基本类型，也可以是对象类型
    2.基本类型的数据：响应式依然是靠Object.defineProperty() 的get和set
    3.对象类型的数据： 内部求助了Vue3.0中的一个新的函数  - reactive
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-reactive&#34;&gt;&lt;a href=&#34;#3-reactive&#34; class=&#34;headerlink&#34; title=&#34;3.reactive&#34;&gt;&lt;/a&gt;3.reactive&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.作用：定义一个对象类型的响应式数据(基本类型别用它，用ref函数)
2.语法 const 代理对象  = reactive(被代理对象)接收一个对象或者数组,返回一个代理器对象(proxy对象)
3.reactive定义的响应数据是深层次的
4.内部基于ES6的proxy，通过代理对象对原数据内部数据都是响应式的
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;八：vue3-X脚手架相关&#34;&gt;&lt;a href=&#34;#八：vue3-X脚手架相关&#34; class=&#34;headerlink&#34; title=&#34;八：vue3.X脚手架相关&#34;&gt;&lt;/a&gt;八：vue3.X脚手架相关&lt;/h1&gt;&lt;h3 id=&#34;1-shims-vue-d-ts-文件的作用&#34;&gt;&lt;a href=&#34;#1-shims-vue-d-ts-文件的作用&#34; class=&#34;headerlink&#34; title=&#34;1.shims-vue.d.ts  文件的作用&#34;&gt;&lt;/a&gt;1.shims-vue.d.ts  文件的作用&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;/**
 * shims-vue.d.ts的作用
 * 为了 typescript 做的适配定义文件，因为.vue 文件不是一个常规的文件类型，ts 是不能理解 vue 文件是干嘛的，
 * 加这一段是是告诉 ts，vue 文件是这种类型的。
 * 可以把这一段删除，会发现 import 的所有 vue 类型的文件都会报错。
 */

declare module &amp;#39;*.vue&amp;#39; &amp;#123; //declare声明宣告， 声明一个ambient module(即:没有内部实现的 module声明) 
  import Vue from &amp;#39;vue&amp;#39;
  export default Vue
&amp;#125;

declare module &amp;#39;vue-echarts&amp;#39;  // 引入vue-echarts

&amp;lt;script lang=&amp;quot;ts&amp;quot;&amp;gt;
    /* eslint-disable @typescript-eslint/camelcase */
    import &amp;#123; Vue, Component, Watch &amp;#125; from &amp;#39;vue-property-decorator&amp;#39;
    import ECharts from &amp;#39;vue-echarts&amp;#39; //报错,按上面的方法在shims-vue.d.ts文件中引入即可
    import &amp;#39;echarts/lib/chart/line&amp;#39;
    import &amp;#39;echarts/lib/chart/pie&amp;#39;
    import &amp;#39;echarts/lib/component/tooltip&amp;#39;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;八：vue-性能优化&#34;&gt;&lt;a href=&#34;#八：vue-性能优化&#34; class=&#34;headerlink&#34; title=&#34;八：vue 性能优化&#34;&gt;&lt;/a&gt;八：vue 性能优化&lt;/h1&gt;&lt;h2 id=&#34;1-SSR&#34;&gt;&lt;a href=&#34;#1-SSR&#34; class=&#34;headerlink&#34; title=&#34;1.SSR&#34;&gt;&lt;/a&gt;1.SSR&lt;/h2&gt;&lt;h2 id=&#34;2-同构&#34;&gt;&lt;a href=&#34;#2-同构&#34; class=&#34;headerlink&#34; title=&#34;2.同构&#34;&gt;&lt;/a&gt;2.同构&lt;/h2&gt;&lt;h2 id=&#34;3-常见性能优化策略&#34;&gt;&lt;a href=&#34;#3-常见性能优化策略&#34; class=&#34;headerlink&#34; title=&#34;3.常见性能优化策略&#34;&gt;&lt;/a&gt;3.常见性能优化策略&lt;/h2&gt;&lt;h1 id=&#34;九：自动化测试&#34;&gt;&lt;a href=&#34;#九：自动化测试&#34; class=&#34;headerlink&#34; title=&#34;九：自动化测试&#34;&gt;&lt;/a&gt;九：自动化测试&lt;/h1&gt;&lt;h2 id=&#34;1-单元测试&#34;&gt;&lt;a href=&#34;#1-单元测试&#34; class=&#34;headerlink&#34; title=&#34;1.单元测试&#34;&gt;&lt;/a&gt;1.单元测试&lt;/h2&gt;&lt;h2 id=&#34;2-E2E测试&#34;&gt;&lt;a href=&#34;#2-E2E测试&#34; class=&#34;headerlink&#34; title=&#34;2.E2E测试&#34;&gt;&lt;/a&gt;2.E2E测试&lt;/h2&gt;</content>
        <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/" />
        <category term="Vue" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue/" />
        <category term="Vue" scheme="http://yoursite.com/tags/Vue/" />
        <updated>2021-06-25T08:43:00.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/front-end/web%E5%AE%89%E5%85%A8/</id>
        <title>web安全</title>
        <link rel="alternate" href="http://yoursite.com/front-end/web%E5%AE%89%E5%85%A8/"/>
        <content type="html">&lt;h1 id=&#34;XSS（跨站脚本攻击）：&#34;&gt;&lt;a href=&#34;#XSS（跨站脚本攻击）：&#34; class=&#34;headerlink&#34; title=&#34;XSS（跨站脚本攻击）：&#34;&gt;&lt;/a&gt;XSS（跨站脚本攻击）：&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;使用合适的编码和转义方式来处理输入和输出的数据。
对用户输入进行验证和过滤，避免将恶意脚本插入到页面中。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;CSRF（跨站请求伪造）：&#34;&gt;&lt;a href=&#34;#CSRF（跨站请求伪造）：&#34; class=&#34;headerlink&#34; title=&#34;CSRF（跨站请求伪造）：&#34;&gt;&lt;/a&gt;CSRF（跨站请求伪造）：&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;在关键操作上使用随机生成的令牌（CSRF Token），并验证该令牌的合法性。
设置合适的 SameSite Cookie 属性，限制跨站点访问。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;点击劫持（Clickjacking）：&#34;&gt;&lt;a href=&#34;#点击劫持（Clickjacking）：&#34; class=&#34;headerlink&#34; title=&#34;点击劫持（Clickjacking）：&#34;&gt;&lt;/a&gt;点击劫持（Clickjacking）：&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;使用 X-Frame-Options 或 Content-Security-Policy 来限制页面被嵌套到其他网站的情况。
可以使用 JavaScript 检测页面是否在 iframe 中展示，并弹出警告或拒绝加载。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;密码安全：&#34;&gt;&lt;a href=&#34;#密码安全：&#34; class=&#34;headerlink&#34; title=&#34;密码安全：&#34;&gt;&lt;/a&gt;密码安全：&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;采用密码哈希算法（如 bcrypt）对用户密码进行加密存储，避免明文存储。
强制要求用户设置强密码，并进行密码策略的验证（如长度、大小写字母、特殊字符等）。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;客户端数据验证和过滤：&#34;&gt;&lt;a href=&#34;#客户端数据验证和过滤：&#34; class=&#34;headerlink&#34; title=&#34;客户端数据验证和过滤：&#34;&gt;&lt;/a&gt;客户端数据验证和过滤：&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;不要依赖前端验证，一定要在后端进行数据验证和过滤。
对客户端输入的数据进行严格验证，避免恶意输入和攻击。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;安全更新和依赖管理：&#34;&gt;&lt;a href=&#34;#安全更新和依赖管理：&#34; class=&#34;headerlink&#34; title=&#34;安全更新和依赖管理：&#34;&gt;&lt;/a&gt;安全更新和依赖管理：&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;及时更新和升级前端框架、库和依赖，以获取最新的安全修复和补丁。
定期审查和监控项目的依赖项，确保没有包含已知的漏洞和安全问题。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;HTTPS-的使用：&#34;&gt;&lt;a href=&#34;#HTTPS-的使用：&#34; class=&#34;headerlink&#34; title=&#34;HTTPS 的使用：&#34;&gt;&lt;/a&gt;HTTPS 的使用：&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;在页面上使用 HTTPS 协议来加密数据传输，防止数据被窃取和篡改。
配置合适的 TLS/SSL 加密套件和证书，确保通信的安全性。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;安全审计和日志记录：&#34;&gt;&lt;a href=&#34;#安全审计和日志记录：&#34; class=&#34;headerlink&#34; title=&#34;安全审计和日志记录：&#34;&gt;&lt;/a&gt;安全审计和日志记录：&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;记录用户操作日志，追溯异常行为和安全事件。
定期进行安全审计，检查应用程序的漏洞和安全风险。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;输入验证与过滤：&#34;&gt;&lt;a href=&#34;#输入验证与过滤：&#34; class=&#34;headerlink&#34; title=&#34;输入验证与过滤：&#34;&gt;&lt;/a&gt;输入验证与过滤：&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;对用户输入进行验证和过滤，确保只接受预期的合法输入。
使用白名单过滤，而不是黑名单过滤，避免遗漏恶意输入。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;安全的跨域资源共享（CORS）配置：&#34;&gt;&lt;a href=&#34;#安全的跨域资源共享（CORS）配置：&#34; class=&#34;headerlink&#34; title=&#34;安全的跨域资源共享（CORS）配置：&#34;&gt;&lt;/a&gt;安全的跨域资源共享（CORS）配置：&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;配置合适的 CORS 头信息，限制跨域请求的访问权限。
设置合理的源和目标组合，防止未经授权的访问和信息泄露。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;客户端存储的安全性：&#34;&gt;&lt;a href=&#34;#客户端存储的安全性：&#34; class=&#34;headerlink&#34; title=&#34;客户端存储的安全性：&#34;&gt;&lt;/a&gt;客户端存储的安全性：&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;避免在客户端存储敏感信息，如密码、令牌等。
使用合适的存储机制，如浏览器提供的 localStorage 或 sessionStorage，加密存储敏感数据。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;CDN-安全：&#34;&gt;&lt;a href=&#34;#CDN-安全：&#34; class=&#34;headerlink&#34; title=&#34;CDN 安全：&#34;&gt;&lt;/a&gt;CDN 安全：&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;如果使用内容分发网络（CDN），确保从可信任的来源获取资源并验证其完整性。
配置适当的安全头部，如 Content Security Policy (CSP)。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;防御点击劫持：&#34;&gt;&lt;a href=&#34;#防御点击劫持：&#34; class=&#34;headerlink&#34; title=&#34;防御点击劫持：&#34;&gt;&lt;/a&gt;防御点击劫持：&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;通过在响应头中设置 X-Frame-Options 或 Content-Security-Policy，限制页面被嵌套到其他网站的情况。
对于现代浏览器，可以使用 Frame-ancestors CSP 指令来进一步控制允许嵌套页面的来源。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;定期安全审查和漏洞扫描：&#34;&gt;&lt;a href=&#34;#定期安全审查和漏洞扫描：&#34; class=&#34;headerlink&#34; title=&#34;定期安全审查和漏洞扫描：&#34;&gt;&lt;/a&gt;定期安全审查和漏洞扫描：&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;定期进行安全审查，检查代码中的潜在漏洞和安全隐患。
使用自动化工具进行漏洞扫描和代码静态分析，及时发现可能存在的安全问题。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;消息传递的安全性：&#34;&gt;&lt;a href=&#34;#消息传递的安全性：&#34; class=&#34;headerlink&#34; title=&#34;消息传递的安全性：&#34;&gt;&lt;/a&gt;消息传递的安全性：&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;对于敏感信息的传递，尽量使用加密算法加密数据。
避免将敏感信息直接传递给前端，而是在后端进行敏感信息的处理和加密。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;防御代码注入攻击：&#34;&gt;&lt;a href=&#34;#防御代码注入攻击：&#34; class=&#34;headerlink&#34; title=&#34;防御代码注入攻击：&#34;&gt;&lt;/a&gt;防御代码注入攻击：&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;避免在前端中执行不受信任的代码。
不要将用户输入直接拼接到代码字符串中，以防止代码注入攻击。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;防御文件上传漏洞：&#34;&gt;&lt;a href=&#34;#防御文件上传漏洞：&#34; class=&#34;headerlink&#34; title=&#34;防御文件上传漏洞：&#34;&gt;&lt;/a&gt;防御文件上传漏洞：&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;对用户上传的文件进行严格的验证和过滤，并使用独立的文件存储来避免安全问题。
验证文件类型、大小和内容，确保只接受合法和安全的文件。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;安全的第三方组件和库：&#34;&gt;&lt;a href=&#34;#安全的第三方组件和库：&#34; class=&#34;headerlink&#34; title=&#34;安全的第三方组件和库：&#34;&gt;&lt;/a&gt;安全的第三方组件和库：&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;在使用第三方组件和库时，选择经过广泛审查和更新的可信来源。
定期更新和升级第三方组件，以获取最新的安全修复和功能改进。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;保护敏感信息：&#34;&gt;&lt;a href=&#34;#保护敏感信息：&#34; class=&#34;headerlink&#34; title=&#34;保护敏感信息：&#34;&gt;&lt;/a&gt;保护敏感信息：&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;不要将敏感信息直接存储在前端，如密码、密钥等。
使用加密算法对敏感信息进行加密，并在后端进行处理和存储。
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/" />
        <category term="web安全" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/web%E5%AE%89%E5%85%A8/" />
        <category term="web安全" scheme="http://yoursite.com/tags/web%E5%AE%89%E5%85%A8/" />
        <updated>2021-06-25T08:43:00.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/front-end/webpack%E9%9D%A2%E8%AF%95/</id>
        <title>webpack面试</title>
        <link rel="alternate" href="http://yoursite.com/front-end/webpack%E9%9D%A2%E8%AF%95/"/>
        <content type="html">&lt;h1 id=&#34;谈谈你对Webpack的理解（Webpack是什么？）&#34;&gt;&lt;a href=&#34;#谈谈你对Webpack的理解（Webpack是什么？）&#34; class=&#34;headerlink&#34; title=&#34;谈谈你对Webpack的理解（Webpack是什么？）&#34;&gt;&lt;/a&gt;谈谈你对Webpack的理解（Webpack是什么？）&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;Webpack 是一个 静态模块打包器，可以分析各个模块的依赖关系，项目中的所有资源皆为模块，通过分析模块间的依赖关系，在其内部递归构建出一个依赖关系图，其中包含应用程序需要的每个模块，然后将这些模块打包成一个或多个 bundle。最终编绎输出模块为 HTML、JavaScript、CSS 以及各种静态文件（图片、字体等）。

webpack 就像一条生产线,要经过一系列处理流程(loader)后才能将源文件转换成输出结果。 这条生产线上的每个处理流程的职责都是单一的,多个流程之间有存在依赖关系,只有完成当前处理后才能交给下一个流程去处理。
插件就像是一个插入到生产线中的一个功能,在特定的时机对生产线上的资源做处理。 webpack 在运行过程中会广播事件,插件只需要监听它所关心的事件,就能加入到这条生产线中,去改变生产线的运作。

webpack的主要作用如下：
模块打包 可以将不同模块的文件打包整合在一起，并且保证它们之间的引用正确，执行有序。利用打包我们就可以在开发的时候根据我们自己的业务自由划分文件模块，保证项目结构的清晰和可读性。
编译兼容 在前端的“上古时期”，手写一堆浏览器兼容代码一直是令前端工程师头皮发麻的事情，而在今天这个问题被大大的弱化了，通过webpack的Loader机制，不仅仅可以帮助我们对代码做polyfill，还可以编译转换诸如.less，.vue，.jsx这类在浏览器无法识别的格式文件，让我们在开发的时候可以使用新特性和新语法做开发，提高开发效率。
能力扩展 通过webpack的Plugin机制，我们在实现模块化打包和编译兼容的基础上，可以进一步实现诸如按需加载，代码压缩等一系列功能，帮助我们进一步提高自动化程度，工程效率以及打包输出的质量。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;Webpack的打包过程-x2F-打包原理-x2F-构建流程？&#34;&gt;&lt;a href=&#34;#Webpack的打包过程-x2F-打包原理-x2F-构建流程？&#34; class=&#34;headerlink&#34; title=&#34;Webpack的打包过程&amp;#x2F;打包原理&amp;#x2F;构建流程？&#34;&gt;&lt;/a&gt;Webpack的打包过程&amp;#x2F;打包原理&amp;#x2F;构建流程？&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;初始化：启动构建，读取与合并配置参数，加载plugin,实例化Compiler
编译：从Entry出发，针对每个Module串行调用对应的Loader去翻译文件中的内容，再找到该Module依赖的Module，递归的进行编译处理
输出：将编译后的Module组合成Chunk,将Chunk转换成文件，输出到文件系统中



细节：

Webpack CLI 通过 yargs模块解析 CLI 参数，并转化为配置对象option（单入口：Object，多入口：Array），调用 webpack(option) 创建 compiler 对象。

如果有 option.plugin，则遍历调用plugin.apply()来注册 plugin，

判断是否开启了 watch，如果开启则调用 compiler.watch，否则调用 compiler.run，开始构建。

创建 Compilation 对象来收集全部资源和信息，然后触发 make 钩子。

make阶段从入口开始递归所有依赖，

每次遍历时调用对应Loader翻译文件中内容，然后生成AST，遍历AST找到下个依赖继续递归，

根据入口和模块之间关系组装chunk，输出到dist中的一个文件内。

在以上过程中，webpack会在特定的时间点（使用tapable模块）广播特定的事件，插件监听事件并执行相应的逻辑，并且插件可以调用webpack提供的api改变webpack的运行结果
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;loader的作用&#34;&gt;&lt;a href=&#34;#loader的作用&#34; class=&#34;headerlink&#34; title=&#34;loader的作用&#34;&gt;&lt;/a&gt;loader的作用&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;webpack中的loader是一个函数，主要为了实现源码的转换，所以loader函数会以源码作为参数，比如，将ES6转换为ES5，将less转换为css，然后再将css转换为js，以便能嵌入到html文件中。

默认情况下，webpack只支持对js和json文件进行打包，但是像css、html、png等其他类型的文件，webpack则无能为力。因此，就需要配置相应的loader进行文件内容的解析转换。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;有哪些常见的Loader？他们是解决什么问题的？&#34;&gt;&lt;a href=&#34;#有哪些常见的Loader？他们是解决什么问题的？&#34; class=&#34;headerlink&#34; title=&#34;有哪些常见的Loader？他们是解决什么问题的？&#34;&gt;&lt;/a&gt;有哪些常见的Loader？他们是解决什么问题的？&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;image-loader：加载并且压缩图片文件。
less-loader：加载并编译 LESS 文件。
sass-loader：加载并编译 SASS/SCSS 文件。
css-loader：加载 CSS，支持模块化、压缩、文件导入等特性，使用css-loader必须要配合使用style-loader。
style-loader：用于将 CSS 编译完成的样式，挂载到页面的 style 标签上。需要注意 loader 执行顺序，style-loader 要放在第一位，loader 都是从后往前执行。
babel-loader：把 ES6 转换成 ES5
postcss-loader：扩展 CSS 语法，使用下一代 CSS，可以配合 autoprefixer 插件自动补齐 CSS3 前缀。
eslint-loader：通过 ESLint 检查 JavaScript 代码。
vue-loader：加载并编译 Vue 组件。
file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件 (处理图片和字体)
url-loader：与 file-loader 类似，区别是用户可以设置一个阈值，大于阈值会交给 file-loader 处理，小于阈值时返回文件 base64 形式编码 (处理图片和字体)。
source-map-loader：加载额外的 Source Map 文件，以方便断点调试。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;plugin的作用&#34;&gt;&lt;a href=&#34;#plugin的作用&#34; class=&#34;headerlink&#34; title=&#34;plugin的作用&#34;&gt;&lt;/a&gt;plugin的作用&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;plugin是一个类，类中有一个apply()方法，主要用于Plugin的安装，可以在其中监听一些来自编译器发出的事件，在合适的时机做一些事情。

webpack中的plugin赋予其各种灵活的功能，例如打包优化、资源管理、环境变量注入等，它们会运行在webpack的不同阶段（钩子 / 生命周期），贯穿了webpack整个编译周期。目的在于「解决 loader 无法实现的其他事」。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;有哪些常见的Plugin？他们是解决什么问题的？&#34;&gt;&lt;a href=&#34;#有哪些常见的Plugin？他们是解决什么问题的？&#34; class=&#34;headerlink&#34; title=&#34;有哪些常见的Plugin？他们是解决什么问题的？&#34;&gt;&lt;/a&gt;有哪些常见的Plugin？他们是解决什么问题的？&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;html-webpack-plugin：可以复制一个有结构的html文件，并自动引入打包输出的所有资源（JS/CSS）
clean-webpack-plugin：重新打包自动清空 dist 目录
mini-css-extract-plugin：提取 js 中的 css 成单独文件
optimize-css-assets-webpack-plugin：压缩css
uglifyjs-webpack-plugin：压缩js
commons-chunk-plugin：提取公共代码
define-plugin：定义环境变量
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;Webpack中Loader和Plugin的区别&#34;&gt;&lt;a href=&#34;#Webpack中Loader和Plugin的区别&#34; class=&#34;headerlink&#34; title=&#34;Webpack中Loader和Plugin的区别&#34;&gt;&lt;/a&gt;Webpack中Loader和Plugin的区别&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;
运行时机
1.loader运行在编译阶段
2.plugins 在整个周期都起作用

使用方式
Loader:1.下载 2.使用
Plugin:1.下载 2.引用 3.使用

loader是文件加载器，能够加载资源文件，并对这些文件进行一些处理，诸如编译、压缩等，最终一起打包到指定的文件中；plugin赋予了webpack各种灵活的功能，例如打包优化、资源管理、环境变量注入等，目的是解决 loader无法实现的其他事。

在运行时机上，loader 运行在打包文件之前；plugin则是在整个编译周期都起作用。

在配置上，loader在module.rules中配置，作为模块的解析规则，类型为数组。每一项都是一个 Object，内部包含了 test(类型文件)、loader、options (参数)等属性；plugin在 plugins中单独配置，类型为数组，每一项是一个 plugin 的实例，参数都通过构造函数传入。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;webpack的热更新是如何做到的？说明其原理？&#34;&gt;&lt;a href=&#34;#webpack的热更新是如何做到的？说明其原理？&#34; class=&#34;headerlink&#34; title=&#34;webpack的热更新是如何做到的？说明其原理？&#34;&gt;&lt;/a&gt;webpack的热更新是如何做到的？说明其原理？&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;热更新的核心就是客户端从服务端拉去更新后的文件，准确的说是 chunk diff (chunk 需要更新的部分)，实际上webpack-dev-server与浏览器之间维护了一个websocket，当本地资源发生变化时，webpack-dev-server会向浏览器推送更新，并带上构建时的hash，让客户端与上一次资源进行对比。客户端对比出差异后会向webpack-dev-server发起 Ajax 请求来获取更改内容(文件列表、hash)，这样客户端就可以再借助这些信息继续向webpack-dev-server发起 jsonp 请求获取该chunk的增量更新。

后续的部分(拿到增量更新之后如何处理？哪些状态该保留？哪些又需要更新？)由HotModulePlugin 来完成，提供了相关 API 以供开发者针对自身场景进行处理，像react-hot-loader和vue-loader都是借助这些 API 实现热更新。

详细：
1、在 webpack 的 watch 模式下，文件系统中某一个文件发生修改，webpack 监听到文件变化，根据配置文件对模块重新编译打包，并将打包后的代码通过简单的 JavaScript 对象保存在内存中。
2、webpack-dev-server 和 webpack 之间的接口交互，而在这一步，主要是 dev-server 的中间件webpack-dev-middleware 和 webpack 之间的交互，webpack-dev-middleware 调用 webpack 暴露的 API对代码变化进行监控，并且告诉 webpack，将代码打包到内存中。
3、webpack-dev-server 对文件变化的一个监控，这一步不同于第一步，并不是监控代码变化重新打包。当我们在配置文件中配置了devServer.watchContentBase 为 true 的时候，Server 会监听这些配置文件夹中静态文件的变化，变化后会通知浏览器端对应用进行 live reload。注意，这儿是浏览器刷新，和 HMR 是两个概念
4、webpack-dev-server 代码的工作，该步骤主要是通过 sockjs（webpack-dev-server 的依赖）在浏览器端和服务端之间建立一个 websocket 长连接，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，
同时也包括第三步中 Server 监听静态文件变化的信息。浏览器端根据这些 socket 消息进行不同的操作。当然服务端传递的最主要信息还是新模块的 hash 值，后面的步骤根据这一 hash 值来进行模块热替换。
webpack-dev-server/client 端并不能够请求更新的代码，也不会执行热更模块操作，而把这些工作又交回给了 webpack，webpack/hot/dev-server 的工作就是根据 webpack-dev-server/client 传给它的信息以及 dev-server 的配置决定是刷新浏览器呢还是进行模块热更新。当然如果仅仅是刷新浏览器，也就没有后面那些步骤了。HotModuleReplacement.runtime 是客户端 HMR 的中枢，它接收到上一步传递给他的新模块的 hash 值，它通过 JsonpMainTemplate.runtime 向 server 端发送 Ajax 请求，服务端返回一个 json，该 json 包含了所有要更新的模块的 hash 值，获取到更新列表后，该模块再次通过 jsonp 请求，获取到最新的模块代码。
5、决定 HMR 成功与否的关键步骤，在该步骤中，HotModulePlugin 将会对新旧模块进行对比，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引用。最后一步，当 HMR 失败后，回退到 live reload 操作，也就是进行浏览器刷新来获取最新打包代码。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;如何解决循环依赖问题&#34;&gt;&lt;a href=&#34;#如何解决循环依赖问题&#34; class=&#34;headerlink&#34; title=&#34;如何解决循环依赖问题&#34;&gt;&lt;/a&gt;如何解决循环依赖问题&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;
Webpack 中将 require 替换为 webpack_require，会根据 moduleId 到 installedModules 找是否加载过，加载过则直接返回之前的 export，不会重复加载。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;如何提高Webpack构建速度&#34;&gt;&lt;a href=&#34;#如何提高Webpack构建速度&#34; class=&#34;headerlink&#34; title=&#34;如何提高Webpack构建速度&#34;&gt;&lt;/a&gt;如何提高Webpack构建速度&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1. 代码压缩

JS 压缩
webpack 4.0默认在生产环境的时候是支持代码压缩的，即mode=production模式下。实际上webpack 4.0默认是使用terser-webpack-plugin这个压缩插件，在此之前是使用 uglifyjs-webpack-plugin，两者的区别是后者对 ES6 的压缩不是很好，同时我们可以开启 parallel参数，使用多进程压缩，加快压缩。
CSS 压缩
CSS 压缩通常是去除无用的空格等，因为很难去修改选择器、属性的名称、值等。可以使用另外一个插件：css-minimizer-webpack-plugin。
HTML 压缩
使用HtmlWebpackPlugin插件来生成 HTML 的模板时候，通过配置属性minify进行 html 优化。

module.exports = &amp;#123;
plugin:[
  new HtmlwebpackPlugin(&amp;#123;
    minify:&amp;#123;
      minifyCSS: false, // 是否压缩css
      collapseWhitespace: false, // 是否折叠空格
      removeComments: true // 是否移除注释
    &amp;#125;
  &amp;#125;)
  ]
&amp;#125;

2. 图片压缩

配置image-webpack-loader

3. Tree Shaking

Tree Shaking是一个术语，在计算机中表示消除死代码，依赖于 ES Module 的静态语法分析（不执行任何的代码，可以明确知道模块的依赖关系）。在webpack实现Tree shaking有两种方案：

usedExports：通过标记某些函数是否被使用，之后通过 Terser 来进行优化的
module.exports = &amp;#123;
    ...
    
    optimization:&amp;#123;
        usedExports
    &amp;#125;
  &amp;#125;
使用之后，没被用上的代码在webpack打包中会加入unused harmony export mul注释，用来告知Terser在优化时，可以删除掉这段代码。

sideEffects：跳过整个模块/文件，直接查看该文件是否有副作用

sideEffects用于告知webpack compiler哪些模块时有副作用，配置方法是在package.json中设置sideEffects属性。如果sideEffects设置为false，就是告知webpack可以安全的删除未用到的exports。如果有些文件需要保留，可以设置为数组的形式，如：

&amp;quot;sideEffecis&amp;quot;:[
    &amp;quot;./src/util/format.js&amp;quot;,
    &amp;quot;*.css&amp;quot; // 所有的css文件
]

4. 缩小打包域
排除webpack不需要解析的模块，即在使用loader的时候，在尽量少的模块中去使用。可以借助 include和exclude这两个参数，规定loader只在那些模块应用和在哪些模块不应用。

5. 减少 ES6 转为 ES5 的冗余代码
使用bable-plugin-transform-runtime插件

6. 提取公共代码
通过配置CommonsChunkPlugin插件，将多个页面的公共代码抽离成单独的文件

7. 其他
组件懒加载、路由懒加载、开启gzip、公共的第三方包上cdn、配置cache缓存Loader对文件的编译副本、配置resolve提高文件的搜索速度（@: src）

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;webpack和vite的区别&#34;&gt;&lt;a href=&#34;#webpack和vite的区别&#34; class=&#34;headerlink&#34; title=&#34;webpack和vite的区别&#34;&gt;&lt;/a&gt;webpack和vite的区别&lt;/h1&gt;&lt;p&gt;工具本身定位不同&lt;br&gt;webpack是底层的东西，vite则是更上层的工具。webpack是配置化，灵活度极高的工具，vite是开箱即用，使用更简单的工具&lt;br&gt;原理不同&lt;br&gt;webpack是bundle，自己实现了一套模块导入导出机制。vite是利用浏览器的esm能力，是bundless。&lt;br&gt;优缺点&lt;br&gt;vite开箱即用，更加简单，基于浏览器esm，使得hmr更加优秀，达到极速的效果；webpack更加灵活，api以及插件生态更加丰富。&lt;br&gt;webpack先打包，再启动服务器，请求服务器时直接给予打包后的结果；vite直接启动服务器，请求哪个模块再对哪个模块进行实时编译。&lt;/p&gt;
&lt;p&gt;1.webpack常见配置&lt;/p&gt;
&lt;p&gt;2.webpack性能优化&lt;/p&gt;
&lt;p&gt;3.手写webpack&lt;/p&gt;
&lt;p&gt;4.实现自己地vue-cli&lt;/p&gt;
&lt;p&gt;5.剖析vue-cli&lt;/p&gt;
&lt;h1 id=&#34;webpack性能优化&#34;&gt;&lt;a href=&#34;#webpack性能优化&#34; class=&#34;headerlink&#34; title=&#34;webpack性能优化&#34;&gt;&lt;/a&gt;webpack性能优化&lt;/h1&gt;&lt;p&gt;* 开发环境性能优化&lt;/p&gt;
&lt;p&gt;* 生产环境性能优化&lt;/p&gt;
&lt;h1 id=&#34;开发环境性能优化&#34;&gt;&lt;a href=&#34;#开发环境性能优化&#34; class=&#34;headerlink&#34; title=&#34;开发环境性能优化&#34;&gt;&lt;/a&gt;开发环境性能优化&lt;/h1&gt;&lt;p&gt;* 优化打包构建速度&lt;/p&gt;
&lt;p&gt; * HMR&lt;/p&gt;
&lt;p&gt;* 优化代码调试&lt;/p&gt;
&lt;p&gt; * source-map&lt;/p&gt;
&lt;h1 id=&#34;生产环境性能优化&#34;&gt;&lt;a href=&#34;#生产环境性能优化&#34; class=&#34;headerlink&#34; title=&#34;生产环境性能优化&#34;&gt;&lt;/a&gt;生产环境性能优化&lt;/h1&gt;&lt;p&gt;* 优化打包构建速度&lt;/p&gt;
&lt;p&gt; * oneOf&lt;/p&gt;
&lt;p&gt; * babel缓存&lt;/p&gt;
&lt;p&gt; * 多进程打包&lt;/p&gt;
&lt;p&gt; * externals&lt;/p&gt;
&lt;p&gt; * dll&lt;/p&gt;
&lt;p&gt;* 优化代码运行的性能&lt;/p&gt;
&lt;p&gt; * 缓存(hash-chunkhash-contenthash)&lt;/p&gt;
&lt;p&gt; * tree shaking&lt;/p&gt;
&lt;p&gt; * code split&lt;/p&gt;
&lt;p&gt; * 懒加载&amp;#x2F;预加载&lt;/p&gt;
&lt;p&gt; * pwa&lt;/p&gt;
</content>
        <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/" />
        <category term="前端工程化" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/" />
        <category term="webpack" scheme="http://yoursite.com/tags/webpack/" />
        <updated>2021-06-25T08:43:00.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/front-end/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%A6%96%E5%B1%8F%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</id>
        <title>小程序首屏性能优化</title>
        <link rel="alternate" href="http://yoursite.com/front-end/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%A6%96%E5%B1%8F%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
        <content type="html">&lt;h1 id=&#34;一：优化的核心&#34;&gt;&lt;a href=&#34;#一：优化的核心&#34; class=&#34;headerlink&#34; title=&#34;一：优化的核心&#34;&gt;&lt;/a&gt;一：优化的核心&lt;/h1&gt;&lt;h2 id=&#34;一：关于耗时&#34;&gt;&lt;a href=&#34;#一：关于耗时&#34; class=&#34;headerlink&#34; title=&#34;一：关于耗时&#34;&gt;&lt;/a&gt;一：关于耗时&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1. 首屏耗时与用户设备、所在网络环境、程序代码有很大关系。线上环境有2/3的运气成分。

2. 理论上相同地域访问 https 比访问 ip 慢，但小程序要求必须使用 https。

3. 小程序启动时由微信加载代码包，与服务域名无关，进入页面后才会发起首次网络请求，某些用户环境出现 ERR_CONNECTION_RESET，导致上报的 API 接口及首屏耗时因网络不通畅爆表
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;二：前端性能监控（RUM）-接入&#34;&gt;&lt;a href=&#34;#二：前端性能监控（RUM）-接入&#34; class=&#34;headerlink&#34; title=&#34;二：前端性能监控（RUM） 接入&#34;&gt;&lt;/a&gt;二：前端性能监控（RUM） 接入&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;RUM 是腾讯提供的一款前端监控方案，只需在控制台上创建业务系统和应用，获取上报 ID；通过安装 npm 依赖配置 JSON 就可以实现测速和日志的收集。

注意：在小程序中，要按照小程序规则开启 NPM 构建。
必须将  https://aegis.qq.com  添加到 request 合法域名中，否则 RUM 控制台中没有正式版本的数据。一般会在 devTools 中开启忽略合法域名校验，为了方便开发调试调用开发环境，而忽略这个配置。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;三：图片资源&#34;&gt;&lt;a href=&#34;#三：图片资源&#34; class=&#34;headerlink&#34; title=&#34;三：图片资源&#34;&gt;&lt;/a&gt;三：图片资源&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;常见图片可以采用JPG、PNG、WEBP、雪碧图或字体图标实现，可搜索到的描述大概都是不同格式适用的不同场景，以及从占用带宽上的描述。

1.首先要选择合适的图片格式
1.1照片图片使用 webP。
1.2复杂的图形使用 PNG 或 JPG，看哪个格式的文件小。
1.3有透明度的图形使用 PNG 或 webP。
1.4可能缩放的图形、图标等使用 SVG。
1.5动态图尽量不使用 GIF，无法使用 CSS 的用视频替代。

2.在小程序中，只有网络图片且在基础库高于 2.9.0 的微信上可以使用 webp ，目前绝大多数的微信用户基础库以及高于 2.16.0版本库，因此
可以对互联网图片转换为 webp  格式，减小网络加载耗时。

3.目前没有查到关于这几种方式显示图片资源的页面渲染耗时分析。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;四：JS-优化&#34;&gt;&lt;a href=&#34;#四：JS-优化&#34; class=&#34;headerlink&#34; title=&#34;四：JS 优化&#34;&gt;&lt;/a&gt;四：JS 优化&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.首先排查在主线程上不要使用同步方法，减小主线程阻塞。
2.开启小程序中的代码按需注入，避免没有使用的代码注入到小程序运行环境中，影响注入耗时和内存占用。
3.生产环境去掉不必要的日志打印
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;五：CSS-优化&#34;&gt;&lt;a href=&#34;#五：CSS-优化&#34; class=&#34;headerlink&#34; title=&#34;五：CSS 优化&#34;&gt;&lt;/a&gt;五：CSS 优化&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;因为构建 CSSOM 树时会阻塞页面的解析，因此需要：

1.删除没有使用的 CSS 代码
2.减小 CSS 文件大小，如 #FFFFFF -&amp;gt; #FFF ， 0px -&amp;gt; 0，不要使用 Base64 编码的图片。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;二：具体的优化方法&#34;&gt;&lt;a href=&#34;#二：具体的优化方法&#34; class=&#34;headerlink&#34; title=&#34;二：具体的优化方法&#34;&gt;&lt;/a&gt;二：具体的优化方法&lt;/h1&gt;&lt;h2 id=&#34;一：资源优化&#34;&gt;&lt;a href=&#34;#一：资源优化&#34; class=&#34;headerlink&#34; title=&#34;一：资源优化&#34;&gt;&lt;/a&gt;一：资源优化&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;资源优化
1. 按照页面访问的频次，将图片资源分成常用的和不常用的，将常用的放入小程序代码包通过本地加载，将不常用的转换成 webp 放到服务器。

2. 减小代码包体积：压缩代码包中的图片资源，对 PNG 格式的透明图设置更少的颜色数；通过依赖分析，更换体积更小的 markdown 渲染依赖。从 1M+下降到280K+。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;二：网络优化&#34;&gt;&lt;a href=&#34;#二：网络优化&#34; class=&#34;headerlink&#34; title=&#34;二：网络优化&#34;&gt;&lt;/a&gt;二：网络优化&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;
 网络优化
1. 由于只有一台华北地区的服务器，为解决不同地域和运营商的访问速度，开启全站动态加速。通过某测速网站看到可解析到70+个独立 IP，并且不同地区的用户会访问到同运营商较近的 IP，然后由 DCDN 通过内部线路转发用户到服务器的请求。

2. 通过分析，首次请求时需要进行域名的解析和建连，后续的请求会复用该链路，解析和 SSL 等时间为0。通过某测速网站可看到平均响应时间在 0.3s，考虑到链路复用，网络请求时间会在 60ms 左右。

3. 对不经常变更且频繁访问的接口，在 DCDN 中设置静态缓存，并触发接口预热，将接口的响应缓存到 DCDN 的二级节点上。这样用户发起这些请求时，直接由 DCDN 做出应答而不回源到真实服务器处理。

4. 在服务端和客户端开启 http/2 协议支持。由于小程序中无高并发请求，自测没有明显改善。

5. 对超过 1kb 的响应体开启 gzip 压缩。

6. 对服务端的图片等静态资源设置浏览器缓存。

7. 由于小程序不像 BAT 这么大用户量和高频的访问，根据 DNS 的解析机制，各地运营商如果有缓存 DNS的解析结果就不会向跟 DNS 进行解析，利用网站测速提供的服务，发送 GET 测速，让各地运营商缓存 DNS 结果。

8. 开启 OCSP Stapling，提高证书的校验性能。

9. 小程序使用中，服务端会调用 api.weixin.qq.com 换取用户的 openid，通过调用微信公众平台接口获取该域名的各个 ip 地址，在服务器执行 ping 命令，找到最快的一个ip，写入host文件。从 40ms 降低到 28.8ms。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;三：代码编写&#34;&gt;&lt;a href=&#34;#三：代码编写&#34; class=&#34;headerlink&#34; title=&#34;三：代码编写&#34;&gt;&lt;/a&gt;三：代码编写&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;代码编写
1. 代码中对图片标签开启懒加载。

2. 减小冗余的 &amp;lt;view&amp;gt; 层次嵌套。

3. 为 data 赋初始值，避免在网络请求结束后赋值引起页面元素的位置变动。

4. 开启代码的按需注入

5. 采用 DCDN 后，各地域各运营商的绝大部分网络请求会在 0.3s 内到达，因此删除了网络请求起止的 loading 浮层动画。

6. 原来为了真机调试方便，把网络请求、自定义组件的响应等打印到了 vConsole 中。目前线上生产环境删除了所有的日志打印。

7. 删除了部分无用的 css 代码。优化的部分 css 样式的选择器。

8. 亲测使用骨架屏只会让人感觉页面非白屏了，但会增加首屏的时间。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;四：业务逻辑&#34;&gt;&lt;a href=&#34;#四：业务逻辑&#34; class=&#34;headerlink&#34; title=&#34;四：业务逻辑&#34;&gt;&lt;/a&gt;四：业务逻辑&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1. 所有新用户（首次访问）最初进入小程序时，页面和 data 中的数据都是一样的。将这些数据作为 data 的默认值（这里是把请求数据放在vue(cteated) uniapp(onLoad) ），直接显示出来，网络请求到达后，由于 data 内容不变，不会发生页面的重新渲染。

2. 用户使用程序后，将从网络请求中获取的用户数据存储到 storage 中。

3. 对于长列表改为数据分页加载。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;支付宝小程序&#34;&gt;&lt;a href=&#34;#支付宝小程序&#34; class=&#34;headerlink&#34; title=&#34;支付宝小程序&#34;&gt;&lt;/a&gt;支付宝小程序&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;
核心要优化的东西：

1.由于网络问题存在，所以这点应该去减少包的加载大小
 1.1 图片等一些文件的大小
 1.2 最后是分包 ,但是2M以内，其实分包没有实际的意义
 
2.js 和 css 的优化 
 
更多的优化渠道：
    
3.支付宝小程序内有相关的检测能力工具

4.支付宝有性能研究群对接

可以研究的方向：

5.有些机型是存在打不开的情况的，并非所有的都是网络造成的问题

6.每个机型的启动首屏加载时间都是不同的， 可以认为中高端手机启动时间就是小于低端手机

7.小程序打开就涉及内存，平均每个页面需要的内存在250 - 450之间
当前页面内存的大小，直接影响下一个页面打开的时间
 7.1 某些手机的打开内存固定超过某个值 就会显示过高的
 
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;小程序性能&#34;&gt;&lt;a href=&#34;#小程序性能&#34; class=&#34;headerlink&#34; title=&#34;小程序性能&#34;&gt;&lt;/a&gt;小程序性能&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.vuex 对启动耗时的影响
2.mixins 对启动耗时的影响
    vuex mixins 对启动耗时的影响和业务代码一致；比如：业务侧，在小程序启动阶段执行了大量、繁重的业务逻辑 会造成启动耗时过长，如果这部分业务逻辑是在 vuex mixins 也会造成启动耗时增长。

3.子组件中的请求是从onReady 加载完再去调用请求的，所以是否组件中不要使用请求?  
  
4.挂载到原型上的东西 ,每次生成的页面都会执行这个数据 , 这里的影响多大?
   
5.有没有根据包大小计算出来的 平均启动时间/加载耗时   
    1.计算最佳收益点
    2.其实这里想表达的是否2M 和 1.5M的包下载时间的差距是否几乎不计?

6.从小程序加载流程上来讲，对于首次打开小程序用户，会去下载包，包大会造成下载时间变长（在相同网络条件下）；影响启动耗时的直接因素：
● 平台：不同的平台下（安卓、IOS）设备性能、操作系统、框架实现、优化方案存在较大的差异，启动耗时也存在较大的差异。只有分平台比较启动耗时（包括各阶段耗时）才有意义；
    1.怎么做到只是针对某个机型去判断?
    2.是不是要去处理慢的机型呢? 怎么处理是个问题
● 下载比例及大小：代码包下载和更新都会显著影响小程序启动耗时，在其他流程耗时稳定的情况下，下载比例升高会影响大盘启动耗时。
● 入口页面：不同页面启动时，根据所在分包的不同，需要下载的代码包数量和大小和代码注入量都存在差异。不同页面渲染耗时也存在差异。
● 机型分布：启动耗时和设备性能有较强关联，不同小程序或使用场景用户群体的差异可能导致机型分布的差异，进而影响大盘启动耗时。
● 网络环境：网络环境主要影响网络请求的耗时，如小程序信息获取、代码包下载等。
间接因素：
● 场景/访问来源：不同场景下，用户访问的页面不同，新用户比例也有差异，对启动耗时会有一定影响。此外，用户访问的目的性和自身的等待意愿也有差异，也会影响打开率。
    1.这里可能存在有些页面分享进来的，但是这个页面其实是不允许直接进入的，可能会造成某些问题导致的耗时
    2.进入的页面不是首页，这是一种什么场景?
● 首次访问用户比例：用户首次访问小程序时，需要完整的进行小程序信息准备、代码包下载的流程，代码缓存也需要重新生成，启动耗时会比非首次访问高。
● 小程序版本更新：小程序版本更新时，用户需要更新小程序信息和代码包，代码缓存也需要重新生成，启动耗时会出现上涨。
    1.这个其实就是每次更新版本对启动时长的影响，特别是发布灰度的时候
    2.一段时间不发新版本,启动时间会降低。这里其实说明我们登报的人，他存在多次进来看的情况（这个是肯定的）


    
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/" />
        <category term="小程序" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%B0%8F%E7%A8%8B%E5%BA%8F/" />
        <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/" />
        <updated>2021-06-25T08:43:00.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/front-end/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7vue%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95/</id>
        <title>微信公众号vue实现登录</title>
        <link rel="alternate" href="http://yoursite.com/front-end/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7vue%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95/"/>
        <content type="html">&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;
1. 在Vue项目中安装并引入微信 JS-SDK库（jweixin.js）。
npm install weixin-js-sdk
引入 import wx from &amp;#39;weixin-js-sdk&amp;#39;;

2. 在Vue的组件中，创建一个用于授权登录的按钮，并定义触发登录的方法。
&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;button @click=&amp;quot;wechatLogin&amp;quot;&amp;gt;微信登录&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

methods: &amp;#123;
  wechatLogin() &amp;#123;
    // 微信公众号授权登录的逻辑
  &amp;#125;
&amp;#125;

3. 在微信授权登录的方法内部，进行微信 JS-SDK的初始化和授权登录操作。
// 引入后端提供的获取微信 JS-SDK配置的接口
import &amp;#123; getWechatConfig &amp;#125; from &amp;#39;@/api/wechat&amp;#39;; // 替换成实际的接口路径

methods: &amp;#123;
  async wechatLogin() &amp;#123;
    const config = await getWechatConfig(); // 调用后端接口获取微信 JS-SDK的配置信息
    wx.config(&amp;#123;
      debug: false,
      appId: config.appId,
      timestamp: config.timestamp,
      nonceStr: config.nonceStr,
      signature: config.signature,
      jsApiList: [&amp;#39;checkJsApi&amp;#39;, &amp;#39;authorize&amp;#39;] // 需要使用的微信 API 列表
    &amp;#125;);

    wx.error(function(res) &amp;#123;
      // 初始化失败的处理逻辑
      console.error(&amp;#39;微信 JS-SDK初始化失败:&amp;#39;, res);
    &amp;#125;);

    const vm = this;
    wx.ready(function() &amp;#123;
      // 在这里执行授权登录操作
      wx.authorize(&amp;#123;
        scope: &amp;#39;snsapi_base&amp;#39;,
        success: function(res) &amp;#123;
          // 用户同意授权，可以获取到用户的基本信息
          const code = res.code; // 获取到授权登录的code
          // 在这里可以将code发送到服务器进行进一步处理
          console.log(&amp;#39;授权登录成功，code:&amp;#39;, code);
        &amp;#125;,
        fail: function(res) &amp;#123;
          // 用户拒绝授权或授权失败
          console.log(&amp;#39;授权登录失败:&amp;#39;, res);
        &amp;#125;
      &amp;#125;);
    &amp;#125;);
  &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/" />
        <category term="微信公众号" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/" />
        <category term="微信公众号" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/" />
        <updated>2021-06-25T08:43:00.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/front-end/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7html%20js%20%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95/</id>
        <title>微信公众号html js 实现登录</title>
        <link rel="alternate" href="http://yoursite.com/front-end/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7html%20js%20%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95/"/>
        <content type="html">&lt;pre&gt;&lt;code class=&#34;JavaScript&#34;&gt;1. 在微信公众平台上创建并配置好您的公众号，获取到相应的开发者ID（AppID）和密钥（AppSecret）。

2. 在您的网页中引入微信 JS-SDK，以便与微信进行交互。可以使用以下 JS 代码进行引入：
script src=&amp;quot;http://res.wx.qq.com/open/js/jweixin-1.6.0.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;


3. 初始化微信 JS-SDK，设置相关配置信息，并在初始化完成后执行授权登录操作。可以使用以下 JS 代码进行初始化和授权登录操作：
wx.config(&amp;#123;
    appId: &amp;#39;YOUR_APP_ID&amp;#39;,
    timestamp: &amp;#39;TIMESTAMP&amp;#39;,
    nonceStr: &amp;#39;NONCE_STR&amp;#39;,
    signature: &amp;#39;SIGNATURE&amp;#39;,
    jsApiList: [&amp;#39;checkJsApi&amp;#39;, &amp;#39;chooseWXPay&amp;#39;, &amp;#39;openLocation&amp;#39;, &amp;#39;scanQRCode&amp;#39;, &amp;#39;authorize&amp;#39;] // 需要使用的微信 API 列表
&amp;#125;);

wx.ready(function() &amp;#123;
    // 在这里执行授权登录操作
    wx.authorize(&amp;#123;
        scope: &amp;#39;snsapi_base&amp;#39;,
        success: function(res) &amp;#123;
            // 用户同意授权，可以获取到用户的基本信息
            var code = res.code; // 获取到授权登录的code
            // 在这里可以将code发送到服务器进行进一步处理
        &amp;#125;,
        fail: function(res) &amp;#123;
            // 用户拒绝授权或授权失败
            console.log(res);
        &amp;#125;
    &amp;#125;);
&amp;#125;);

请将 YOUR_APP_ID 替换为您的公众号的开发者ID，TIMESTAMP、NONCE_STR 和 SIGNATURE 替换为相应的值，这些信息可以通过后台服务器签名获取。


4. 根据需要进行进一步的处理。在获得用户授权登录的code后，您可以将其发送到后台服务器，通过调用微信提供的接口来获取用户的详细信息或执行其他操作。

&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/" />
        <category term="微信公众号" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/" />
        <category term="微信公众号" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/" />
        <updated>2021-06-25T08:43:00.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/front-end/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</id>
        <title>前端性能优化</title>
        <link rel="alternate" href="http://yoursite.com/front-end/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
        <content type="html">&lt;h2 id=&#34;一：前端性能优化方向&#34;&gt;&lt;a href=&#34;#一：前端性能优化方向&#34; class=&#34;headerlink&#34; title=&#34;一：前端性能优化方向&#34;&gt;&lt;/a&gt;一：前端性能优化方向&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.加载性能:如何更快地把资源从服务器中拉到浏览器，如 http 与资源体积的各种优化，都是旨在加载性能的提升。
2.渲染性能:如何更快的把资源在浏览器上进行渲染。如减少重排重绘，rIC 等都是旨在渲染性能的提升。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;二：核心性能指标与-Performance-API&#34;&gt;&lt;a href=&#34;#二：核心性能指标与-Performance-API&#34; class=&#34;headerlink&#34; title=&#34;二：核心性能指标与 Performance API&#34;&gt;&lt;/a&gt;二：核心性能指标与 Performance API&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;LCP: 加载性能。最大内容绘制应在 2.5s 内完成。
FID: 交互性能。首次输入延迟应在 100ms 内完成。
CLS: 页面稳定性。累积布局偏移，需手动计算，CLS 应保持在 0.1 以下。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;三：计算与收集&#34;&gt;&lt;a href=&#34;#三：计算与收集&#34; class=&#34;headerlink&#34; title=&#34;三：计算与收集&#34;&gt;&lt;/a&gt;三：计算与收集&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;当收集浏览器端每个用户核心性能指标时，可通过 web-vitals 收集并通过 sendBeacon (opens new window)上报到打点系统。

import &amp;#123; getCLS, getFID, getLCP &amp;#125; from &amp;#39;web-vitals&amp;#39;

function sendToAnalytics(metric) &amp;#123;
  const body = JSON.stringify(metric);
  navigator.sendBeacon(&amp;#39;/analytics&amp;#39;, body))
&amp;#125;

getCLS(sendToAnalytics);
getFID(sendToAnalytics);
getLCP(sendToAnalytics);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;四：更快的传输&#34;&gt;&lt;a href=&#34;#四：更快的传输&#34; class=&#34;headerlink&#34; title=&#34;四：更快的传输&#34;&gt;&lt;/a&gt;四：更快的传输&lt;/h2&gt;&lt;h3 id=&#34;1：CDN&#34;&gt;&lt;a href=&#34;#1：CDN&#34; class=&#34;headerlink&#34; title=&#34;1：CDN&#34;&gt;&lt;/a&gt;1：CDN&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;将资源分发到 CDN 的边缘网络节点，使用户可就近获取所需内容，大幅减小了光纤传输距离，使全球各地用户打开网站都拥有良好的网络体验。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pbWcuYWxpY2RuLmNvbS9pbWdleHRyYS9pNC9PMUNOMDFaRTNQdEcyMkVvTU55QXY5TF8hITYwMDAwMDAwMDcwODktMi10cHMtMTUzMC0xMTQwLnBuZw==&#34;&gt;图片演示链接&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;2：http2&#34;&gt;&lt;a href=&#34;#2：http2&#34; class=&#34;headerlink&#34; title=&#34;2：http2&#34;&gt;&lt;/a&gt;2：http2&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;http2 的诸多特性决定了它更快的传输速度。

1.多路复用，在浏览器可并行发送 N 条请求。
2.首部压缩，更小的负载体积。
3.请求优先级，更快的关键请求
目前，网站已大多上了 http2，可在控制台面板进行查看。


由于 http2 可并行请求，解决了 http1.1 线头阻塞的问题，以下几个性能优化点将会过时

资源合并。如 https://shanyue.tech/assets??index.js,interview.js,report.js
域名分片。
雪碧图。将无数小图片合并成单个大图片。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3NoZnNoYW55dWUvYXNzZXRzQG1hc3Rlci9zcmMvaDIuNzU4MmE0ZnZ0eDAwLnBuZw==&#34;&gt;图片演示链接&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;3：充分利用-HTTP-缓存&#34;&gt;&lt;a href=&#34;#3：充分利用-HTTP-缓存&#34; class=&#34;headerlink&#34; title=&#34;3：充分利用 HTTP 缓存&#34;&gt;&lt;/a&gt;3：充分利用 HTTP 缓存&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;更好的资源缓存策略，对于 CDN 来讲可减少回源次数，对于浏览器而言可减少请求发送次数。无论哪一点，对于二次网站访问都具有更好的访问体验。

一:缓存策略
  1.强缓存: 打包后带有 hash 值的资源 (如 /build/a3b4c8a8.js)
  2.协商缓存: 打包后不带有 hash 值的资源 (如 /index.html)
二:分包加载 (Bundle Spliting)
  1.避免一行代码修改导致整个 bundle 的缓存失效
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4：减少-HTTP-请求及负载&#34;&gt;&lt;a href=&#34;#4：减少-HTTP-请求及负载&#34; class=&#34;headerlink&#34; title=&#34;4：减少 HTTP 请求及负载&#34;&gt;&lt;/a&gt;4：减少 HTTP 请求及负载&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;对一个网站的资源进行压缩优化，从而达到减少 HTTP 负载的目的。

js/css/image 等常规资源体积优化，这是一个大话题，再以下分别讨论
1.小图片优化，将小图片内联为 Data URI，减小请求数量
2.图片懒加载
3.新的 API: IntersectionObserver API
4.新的属性: loading=lazy
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;五：更小的体积&#34;&gt;&lt;a href=&#34;#五：更小的体积&#34; class=&#34;headerlink&#34; title=&#34;五：更小的体积&#34;&gt;&lt;/a&gt;五：更小的体积&lt;/h2&gt;&lt;h3 id=&#34;1：gzip-x2F-brotli&#34;&gt;&lt;a href=&#34;#1：gzip-x2F-brotli&#34; class=&#34;headerlink&#34; title=&#34;1：gzip&amp;#x2F;brotli&#34;&gt;&lt;/a&gt;1：gzip&amp;#x2F;brotli&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;对 JS、CSS、HTML 等文本资源均有效，但是对图片效果不大。

gzip 通过 LZ77 算法与 Huffman 编码来压缩文件，重复度越高的文件可压缩的空间就越大。
brotli 通过变种的 LZ77 算法、Huffman 编码及二阶文本建模来压缩文件，更先进的压缩算法，比 gzip 有更高的性能及压缩率
可在浏览器的 Content-Encoding 响应头查看该网站是否开启了压缩算法，目前知乎、掘金等已全面开启了 brotli 压缩。



# Request Header
Accept-Encoding: gzip, deflate, br

# gzip
Content-Encoding: gzip

# gzip
Content-Encoding: br
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2：压缩混淆工具&#34;&gt;&lt;a href=&#34;#2：压缩混淆工具&#34; class=&#34;headerlink&#34; title=&#34;2：压缩混淆工具&#34;&gt;&lt;/a&gt;2：压缩混淆工具&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.Terser (opens new window)是 Javascript 资源压缩混淆的神器。

它可以根据以下策略进行压缩处理:

长变量名替换短变量
删除空格换行符
预计算: const a = 24 * 60 * 60 * 1000 -&amp;gt; const a = 86400000
移除无法被执行的代码·
移除无用的变量及函数
可在 Terser Repl (opens new window)在线查看代码压缩效果。


2.swc (opens new window)是另外一个用以压缩 Javascript 的工具，它拥有与 terser 相同的 API，由于它是由 rust 所写，因此它拥有更高的性能。


3.html-minifier-terser (opens new window)用以压缩 HTML 的工具
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3NoZnNoYW55dWUvYXNzZXRzQG1hc3Rlci9zcmMvdGVyc2VyLjFiYjFzNXYzdHQ0dy5wbmc=&#34;&gt;图片演示链接&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;3：更小的-Javascript&#34;&gt;&lt;a href=&#34;#3：更小的-Javascript&#34; class=&#34;headerlink&#34; title=&#34;3：更小的 Javascript&#34;&gt;&lt;/a&gt;3：更小的 Javascript&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;关于更小的 Javascript，上边已总结了两条:

gzip/brotli
terser (minify)
还有以下几点可以考虑考虑:

路由懒加载，无需加载整个应用的资源
Tree Shaking: 无用导出将在生产环境进行删除
browserlist/babel: 及时更新 browserlist，将会产生更小的垫片体积
再补充一个问题:

如何分析并优化当前项目的 Javascript 体积？如果使用 webpack 那就简单很多。

使用 webpack-bundle-analyze 分析打包体积
对一些库替换为更小体积的库，如 moment -&amp;gt; dayjs
对一些库进行按需加载，如 import lodash -&amp;gt; import lodash/get
对一些库使用支持 Tree Shaking，如 import lodash -&amp;gt; import lodash-es
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4：更小的图片&#34;&gt;&lt;a href=&#34;#4：更小的图片&#34; class=&#34;headerlink&#34; title=&#34;4：更小的图片&#34;&gt;&lt;/a&gt;4：更小的图片&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;在前端发展的现在，webp 普遍比 jpeg/png 更小，而 avif 又比 webp 小一个级别

为了无缝兼容，可选择 picture/source 进行回退处理
&amp;lt;picture&amp;gt;
  &amp;lt;source srcset=&amp;quot;img/photo.avif&amp;quot; type=&amp;quot;image/avif&amp;quot;&amp;gt;
  &amp;lt;source srcset=&amp;quot;img/photo.webp&amp;quot; type=&amp;quot;image/webp&amp;quot;&amp;gt;
  &amp;lt;img src=&amp;quot;img/photo.jpg&amp;quot; width=&amp;quot;360&amp;quot; height=&amp;quot;240&amp;quot;&amp;gt;
&amp;lt;/picture&amp;gt;

1.更合适的尺寸: 当页面仅需显示 100px/100px 大小图片时，对图片进行压缩到 100px/100px
2.更合适的压缩: 可对前端图片进行适当压缩，如通过 sharp 等
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;六：渲染优化&#34;&gt;&lt;a href=&#34;#六：渲染优化&#34; class=&#34;headerlink&#34; title=&#34;六：渲染优化&#34;&gt;&lt;/a&gt;六：渲染优化&lt;/h2&gt;&lt;h3 id=&#34;1：关键渲染路径&#34;&gt;&lt;a href=&#34;#1：关键渲染路径&#34; class=&#34;headerlink&#34; title=&#34;1：关键渲染路径&#34;&gt;&lt;/a&gt;1：关键渲染路径&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;以下五个步骤为关键渲染路径

1.HTML -&amp;gt; DOM，将 html 解析为 DOM
2.CSS -&amp;gt; CSSOM，将 CSS 解析为 CSSOM
3.DOM/CSSOM -&amp;gt; Render Tree，将 DOM 与 CSSOM 合并成渲染树
4.RenderTree -&amp;gt; Layout，确定渲染树中每个节点的位置信息
5.Layout -&amp;gt; Paint，将每个节点渲染在浏览器中
渲染的优化很大程度上是对关键渲染路径进行优化。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2：preload-x2F-prefetch&#34;&gt;&lt;a href=&#34;#2：preload-x2F-prefetch&#34; class=&#34;headerlink&#34; title=&#34;2：preload&amp;#x2F;prefetch&#34;&gt;&lt;/a&gt;2：preload&amp;#x2F;prefetch&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;preload/prefetch 可控制 HTTP 优先级，从而达到关键请求更快响应的目的。

&amp;lt;link rel=&amp;quot;prefetch&amp;quot; href=&amp;quot;style.css&amp;quot; as=&amp;quot;style&amp;quot;&amp;gt;
&amp;lt;link rel=&amp;quot;preload&amp;quot; href=&amp;quot;main.js&amp;quot; as=&amp;quot;script&amp;quot;&amp;gt;
1.preload 加载当前路由必需资源，优先级高。一般对于 Bundle Spliting 资源与 Code Spliting 资源做 preload
2.prefetch 优先级低，在浏览器 idle 状态时加载资源。一般用以加载其它路由资源，如当页面出现 Link，可 prefetch 当前 Link 的路由资源。（next.js 默认会对 link 做懒加载+prefetch，即当某条 Link 出现页面中，即自动 prefetch 该 Link 指向的路由资源
捎带说一下 dns-prefetch，可对主机地址的 DNS 进行预解析。

&amp;lt;link rel=&amp;quot;dns-prefetch&amp;quot; href=&amp;quot;//shanyue.tech&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3：防抖与节流&#34;&gt;&lt;a href=&#34;#3：防抖与节流&#34; class=&#34;headerlink&#34; title=&#34;3：防抖与节流&#34;&gt;&lt;/a&gt;3：防抖与节流&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.防抖：防止抖动，单位时间内事件触发会被重置，避免事件被误伤触发多次。代码实现重在清零 clearTimeout。防抖可以比作等电梯，只要有一个人进来，就需要再等一会儿。业务场景有避免登录按钮多次点击的重复提交。

2.节流：控制流量，单位时间内事件只能触发一次，与服务器端的限流 (Rate Limit) 类似。代码实现重在开锁关锁 timer=timeout; timer=null。节流可以比作过红绿灯，每等一个红灯时间就可以过一批。


无论是防抖还是节流都可以大幅度减少渲染次数，在 React 中还可以使用 use-debounce 之类的 hooks 避免重新渲染。

import React, &amp;#123; useState &amp;#125; from &amp;#39;react&amp;#39;;
import &amp;#123; useDebounce &amp;#125; from &amp;#39;use-debounce&amp;#39;;

export default function Input() &amp;#123;
  const [text, setText] = useState(&amp;#39;Hello&amp;#39;);
  // 一秒钟渲染一次，大大降低了重新渲染的频率
  const [value] = useDebounce(text, 1000);

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;input
        defaultValue=&amp;#123;&amp;#39;Hello&amp;#39;&amp;#125;
        onChange=&amp;#123;(e) =&amp;gt; &amp;#123;
          setText(e.target.value);
        &amp;#125;&amp;#125;
      /&amp;gt;
      &amp;lt;p&amp;gt;Actual value: &amp;#123;text&amp;#125;&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Debounce value: &amp;#123;value&amp;#125;&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  );
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4：虚拟列表优化&#34;&gt;&lt;a href=&#34;#4：虚拟列表优化&#34; class=&#34;headerlink&#34; title=&#34;4：虚拟列表优化&#34;&gt;&lt;/a&gt;4：虚拟列表优化&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;这又是一个老生常谈的话题，一般在视口内维护一个虚拟列表(仅渲染十几条条数据左右)，监听视口位置变化，从而对视口内的虚拟列表进行控制。

在 React 中可采用以下库:

react-virtualized(opens new window)
react-window
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5：请求及资源缓存&#34;&gt;&lt;a href=&#34;#5：请求及资源缓存&#34; class=&#34;headerlink&#34; title=&#34;5：请求及资源缓存&#34;&gt;&lt;/a&gt;5：请求及资源缓存&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;在一些前端系统中，当加载页面时会发送请求，路由切换出去再切换回来时又会重新发送请求，每次请求完成后会对页面重新渲染。

然而这些重新请求再大多数时是没有必要的，合理地对 API 进行缓存将达到优化渲染的目的。

1.对每一条 GET API 添加 key
2.根据 key 控制该 API 缓存，重复发生请求时将从缓存中取得

function Example() &amp;#123;
  // 设置缓存的 Key 为 Users:10086
  const &amp;#123; isLoading, data &amp;#125; = useQuery([&amp;#39;users&amp;#39;, userId], () =&amp;gt; fetchUserById(userId))
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;七：Web-Worker&#34;&gt;&lt;a href=&#34;#七：Web-Worker&#34; class=&#34;headerlink&#34; title=&#34;七：Web Worker&#34;&gt;&lt;/a&gt;七：Web Worker&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;试举一例:

在纯浏览器中，如何实现高性能的实时代码编译及转换？

1.Babel Repl(opens new window)
如果纯碎使用传统的 Javascript 实现，将会耗时过多阻塞主线程，有可能导致页面卡顿。

如果使用 Web Worker 交由额外的线程来做这件事，将会高效很多，基本上所有在浏览器端进行代码编译的功能都由 Web Worker 实现。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;八：WASM&#34;&gt;&lt;a href=&#34;#八：WASM&#34; class=&#34;headerlink&#34; title=&#34;八：WASM&#34;&gt;&lt;/a&gt;八：WASM&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.JS 性能低下
2.C++/Rust 高性能
3.使用 C++/Rust 编写代码，然后在 Javascript 环境运行
试举一例:

在纯浏览器中，如何实现高性能的图片压缩？

基本上很难做到，Javascript 的性能与生态决定了实现图片压缩的艰难。

而借助于 WASM 就相当于借用了其它语言的生态。

1.libavif (opens new window): C语言写的 avif 解码编码库
2.libwebp (opens new window): C语言写的 webp 解码编码库
3.mozjpeg (opens new window): C语言写的 jpeg 解码编码库
4.oxipng (opens new window): Rust语言写的 png 优化库
而由于 WASM，完全可以把这些其它语言的生态移植到浏览器中，从而实现一个高性能的离线式的图片压缩工具。

如果想了解这种的工具，请看看 squoosh
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/" />
        <category term="前端性能优化" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/" />
        <category term="前端性能优化" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/" />
        <updated>2021-06-25T08:43:00.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/front-end/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E9%9D%A2%E8%AF%95/</id>
        <title>前端性能优化三大方向</title>
        <link rel="alternate" href="http://yoursite.com/front-end/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E9%9D%A2%E8%AF%95/"/>
        <content type="html">&lt;h1 id=&#34;浏览器缓存优化&#34;&gt;&lt;a href=&#34;#浏览器缓存优化&#34; class=&#34;headerlink&#34; title=&#34;浏览器缓存优化&#34;&gt;&lt;/a&gt;浏览器缓存优化&lt;/h1&gt;&lt;p&gt;为了让浏览器缓存发挥最大作用，该策略尽量遵循以下五点就能发挥浏览器缓存最大作用。&lt;/p&gt;
&lt;p&gt;「考虑拒绝一切缓存策略」：Cache-Control:no-store&lt;br&gt;「考虑资源是否每次向服务器请求」：Cache-Control:no-cache&lt;br&gt;「考虑资源是否被代理服务器缓存」：Cache-Control:public&amp;#x2F;private&lt;br&gt;「考虑资源过期时间」：Expires:t&amp;#x2F;Cache-Control:max-age&amp;#x3D;t,s-maxage&amp;#x3D;t&lt;br&gt;「考虑协商缓存」：Last-Modified&amp;#x2F;Etag&lt;br&gt;缓存策略通过设置HTTP报文实现，在形式上分为&lt;strong&gt;「强缓存&amp;#x2F;强制缓存」和「协商缓存&amp;#x2F;对比缓存」&lt;/strong&gt;。为了方便对比，笔者将某些细节使用图例展示，相信你有更好的理解。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/80c0b755bd4f4b7f8cc4f9447f1a1bde.png#pic_center&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/0bfe2b2f1ea54e1aa6bf08d2c932ca0a.png#pic_center&#34;&gt;&lt;/p&gt;
&lt;p&gt;整个缓存策略机制很明了，先走强缓存，若命中失败才走协商缓存。若命中强缓存，直接使用强缓存；若未命中强缓存，发送请求到服务器检查是否命中协商缓存；若命中协商缓存，服务器返回304通知浏览器使用本地缓存，否则返回最新资源。&lt;/p&gt;
&lt;p&gt;有两种较常用的应用场景值得使用缓存策略一试，当然更多应用场景都可根据项目需求制定。&lt;/p&gt;
&lt;p&gt;「频繁变动资源」：设置Cache-Control:no-cache，使浏览器每次都发送请求到服务器，配合Last-Modified&amp;#x2F;ETag验证资源是否有效&lt;br&gt;「不常变化资源」：设置Cache-Control:max-age&amp;#x3D;31536000，对文件名哈希处理，当代码修改后生成新的文件名，当HTML文件引入文件名发生改变才会下载最新文件&lt;/p&gt;
&lt;h1 id=&#34;渲染层面性能优化&#34;&gt;&lt;a href=&#34;#渲染层面性能优化&#34; class=&#34;headerlink&#34; title=&#34;渲染层面性能优化&#34;&gt;&lt;/a&gt;渲染层面性能优化&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;「渲染层面」&lt;/strong&gt;的性能优化，无疑是如何让代码解析更好执行更快。因此笔者从以下五方面做出建议。&lt;/p&gt;
&lt;p&gt;「CSS策略」：基于CSS规则&lt;br&gt;「DOM策略」：基于DOM操作&lt;br&gt;「阻塞策略」：基于脚本加载&lt;br&gt;「回流重绘策略」：基于回流重绘&lt;br&gt;「异步更新策略」：基于异步更新&lt;br&gt;上述五方面都是编写代码时完成，充满在整个项目流程的开发阶段里。因此在开发阶段需时刻注意以下涉及到的每一点，养成良好的开发习惯，性能优化也自然而然被使用上了。&lt;/p&gt;
&lt;p&gt;渲染层面的性能优化更多表现在编码细节上，而并非实体代码。简单来说就是遵循某些编码规则，才能将渲染层面的性能优化发挥到最大作用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;「回流重绘策略」&lt;/strong&gt;在渲染层面的性能优化里占比较重，也是最常规的性能优化之一。上年笔者发布的掘金小册《玩转CSS的艺术之美》使用一整章讲解回流重绘，本章已开通试读，更多细节请戳这里。&lt;/p&gt;
&lt;p&gt;CSS策略&lt;br&gt;避免出现超过三层的嵌套规则&lt;br&gt;避免为ID选择器添加多余选择器&lt;br&gt;避免使用标签选择器代替类选择器&lt;br&gt;避免使用通配选择器，只对目标节点声明规则&lt;br&gt;避免重复匹配重复定义，关注可继承属性&lt;br&gt;DOM策略&lt;br&gt;缓存DOM计算属性&lt;br&gt;避免过多DOM操作&lt;br&gt;使用DOMFragment缓存批量化DOM操作&lt;br&gt;阻塞策略&lt;br&gt;脚本与DOM&amp;#x2F;其它脚本的依赖关系很强：对&lt;script&gt;设置defer&lt;br&gt;脚本与DOM/其它脚本的依赖关系不强：对&lt;script&gt;设置async&lt;br&gt;回流重绘策略&lt;br&gt;缓存DOM计算属性&lt;br&gt;使用类合并样式，避免逐条改变样式&lt;br&gt;使用display控制DOM显隐，将DOM离线化&lt;br&gt;异步更新策略&lt;br&gt;在异步任务中修改DOM时把其包装成微任务&lt;/p&gt;
&lt;h1 id=&#34;性能优化六大指标&#34;&gt;&lt;a href=&#34;#性能优化六大指标&#34; class=&#34;headerlink&#34; title=&#34;性能优化六大指标&#34;&gt;&lt;/a&gt;性能优化六大指标&lt;/h1&gt;&lt;p&gt;六大指标基本囊括大部分性能优化细节，可作为九大策略的补充。笔者根据每条性能优化建议的特征将指标划分为以下六方面。&lt;/p&gt;
&lt;p&gt;「加载优化」：资源在加载时可做的性能优化&lt;br&gt;「执行优化」：资源在执行时可做的性能优化&lt;br&gt;「渲染优化」：资源在渲染时可做的性能优化&lt;br&gt;「样式优化」：样式在编码时可做的性能优化&lt;br&gt;「脚本优化」：脚本在编码时可做的性能优化&lt;br&gt;「V8引擎优化」：针对V8引擎特征可做的性能优化&lt;/p&gt;
</content>
        <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/" />
        <category term="前端性能优化" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/" />
        <category term="前端性能优化" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/" />
        <updated>2021-06-25T08:43:00.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/front-end/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3/</id>
        <title>浏览器相关知识</title>
        <link rel="alternate" href="http://yoursite.com/front-end/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3/"/>
        <content type="html">&lt;h1 id=&#34;常见的浏览器内核有哪些？&#34;&gt;&lt;a href=&#34;#常见的浏览器内核有哪些？&#34; class=&#34;headerlink&#34; title=&#34;常见的浏览器内核有哪些？&#34;&gt;&lt;/a&gt;常见的浏览器内核有哪些？&lt;/h1&gt;&lt;p&gt;主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。&lt;br&gt;渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。&lt;br&gt;JS引擎则：解析和执行javascript来实现网页的动态效果。&lt;br&gt;最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。&lt;br&gt;常见内核&lt;br&gt;Trident 内核：IE, MaxThon, TT, The World, 360, 搜狗浏览器等。[又称 MSHTML]&lt;br&gt;Gecko 内核：Netscape6 及以上版本，FF, MozillaSuite &amp;#x2F; SeaMonkey 等&lt;br&gt;Presto 内核：Opera7 及以上。 [Opera内核原为：Presto，现为：Blink;]&lt;br&gt;Webkit 内核：Safari, Chrome等。 [ Chrome的：Blink（WebKit 的分支）]&lt;/p&gt;
&lt;h1 id=&#34;网页前端性能优化的方式有哪些？&#34;&gt;&lt;a href=&#34;#网页前端性能优化的方式有哪些？&#34; class=&#34;headerlink&#34; title=&#34;网页前端性能优化的方式有哪些？&#34;&gt;&lt;/a&gt;网页前端性能优化的方式有哪些？&lt;/h1&gt;&lt;p&gt;1.压缩 css, js, 图片&lt;br&gt;2.减少 http 请求次数， 合并 css、js 、合并图片（雪碧图）&lt;br&gt;3.使用 CDN&lt;br&gt;4.减少 dom 元素数量&lt;br&gt;5.图片懒加载&lt;br&gt;6.静态资源另外用无 cookie 的域名&lt;br&gt;7.减少 dom 的访问（缓存 dom）&lt;br&gt;8.巧用事件委托&lt;br&gt;9.样式表置顶、脚本置低&lt;/p&gt;
&lt;h1 id=&#34;网页从输入网址到渲染完成经历了哪些过程？&#34;&gt;&lt;a href=&#34;#网页从输入网址到渲染完成经历了哪些过程？&#34; class=&#34;headerlink&#34; title=&#34;网页从输入网址到渲染完成经历了哪些过程？&#34;&gt;&lt;/a&gt;网页从输入网址到渲染完成经历了哪些过程？&lt;/h1&gt;&lt;p&gt;大致可以分为如下7步：&lt;/p&gt;
&lt;p&gt;输入网址；&lt;br&gt;发送到DNS服务器，并获取域名对应的web服务器对应的ip地址；&lt;br&gt;与web服务器建立TCP连接；&lt;br&gt;浏览器向web服务器发送http请求；&lt;br&gt;web服务器响应请求，并返回指定url的数据（或错误信息，或重定向的新的url地址）；&lt;br&gt;浏览器下载web服务器返回的数据及解析html源文件；&lt;br&gt;生成DOM树，解析css和js，渲染页面，直至显示完成；&lt;/p&gt;
&lt;h1 id=&#34;线程与进程的区别？&#34;&gt;&lt;a href=&#34;#线程与进程的区别？&#34; class=&#34;headerlink&#34; title=&#34;线程与进程的区别？&#34;&gt;&lt;/a&gt;线程与进程的区别？&lt;/h1&gt;&lt;p&gt;一个程序至少有一个进程,一个进程至少有一个线程.&lt;br&gt;线程的划分尺度小于进程，使得多线程程序的并发性高。&lt;br&gt;另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。&lt;br&gt;线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。&lt;br&gt;从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。&lt;/p&gt;
&lt;h1 id=&#34;HTTP常见的状态码？&#34;&gt;&lt;a href=&#34;#HTTP常见的状态码？&#34; class=&#34;headerlink&#34; title=&#34;HTTP常见的状态码？&#34;&gt;&lt;/a&gt;HTTP常见的状态码？&lt;/h1&gt;&lt;p&gt;100 Continue 继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息&lt;br&gt;200 OK 正常返回信息&lt;br&gt;201 Created 请求成功并且服务器创建了新的资源&lt;br&gt;202 Accepted 服务器已接受请求，但尚未处理&lt;br&gt;301 Moved Permanently 请求的网页已永久移动到新位置。&lt;br&gt;302 Found 临时性重定向。&lt;br&gt;303 See Other 临时性重定向，且总是使用 GET 请求新的 URI。&lt;br&gt;304 Not Modified 自从上次请求后，请求的网页未修改过。&lt;br&gt;400 Bad Request 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。&lt;br&gt;401 Unauthorized 请求未授权。&lt;br&gt;403 Forbidden 禁止访问。&lt;br&gt;404 Not Found 找不到如何与 URI 相匹配的资源。&lt;br&gt;500 Internal Server Error 最常见的服务器端错误。&lt;br&gt;503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。&lt;/p&gt;
&lt;h1 id=&#34;图片懒加载？&#34;&gt;&lt;a href=&#34;#图片懒加载？&#34; class=&#34;headerlink&#34; title=&#34;图片懒加载？&#34;&gt;&lt;/a&gt;图片懒加载？&lt;/h1&gt;&lt;p&gt;当页面滚动的时间被触发 -&amp;gt; 执行加载图片操作 -&amp;gt; 判断图片是否在可视区域内 -&amp;gt; 在，则动态将data-src的值赋予该图片&lt;/p&gt;
&lt;h1 id=&#34;移动端性能优化？&#34;&gt;&lt;a href=&#34;#移动端性能优化？&#34; class=&#34;headerlink&#34; title=&#34;移动端性能优化？&#34;&gt;&lt;/a&gt;移动端性能优化？&lt;/h1&gt;&lt;p&gt;尽量使用css3动画，开启硬件加速&lt;br&gt;适当使用touch时间代替click时间&lt;br&gt;避免使用css3渐变阴影效果&lt;br&gt;可以用transform: translateZ(0) 来开启硬件加速&lt;br&gt;不滥用float。float在渲染时计算量比较大，尽量减少使用&lt;br&gt;不滥用web字体。web字体需要下载，解析，重绘当前页面&lt;br&gt;合理使用requestAnimationFrame动画代替setTimeout&lt;br&gt;css中的属性（css3 transitions、css3 3D transforms、opacity、webGL、video）会触发GUP渲染，耗电&lt;/p&gt;
&lt;h1 id=&#34;TCP-传输的三次握手、四次挥手策略&#34;&gt;&lt;a href=&#34;#TCP-传输的三次握手、四次挥手策略&#34; class=&#34;headerlink&#34; title=&#34;TCP 传输的三次握手、四次挥手策略&#34;&gt;&lt;/a&gt;TCP 传输的三次握手、四次挥手策略&lt;/h1&gt;&lt;p&gt;三次握手：&lt;br&gt;为了准确无误地吧数据送达目标处，TCP协议采用了三次握手策略。用TCP协议把数据包送出去后，TCP不会对传送后的情况置之不理，他一定会向对方确认是否送达，握手过程中使用TCP的标志：SYN和ACK&lt;br&gt;发送端首先发送一个带SYN的标志的数据包给对方&lt;br&gt;接收端收到后，回传一个带有SYN&amp;#x2F;ACK标志的数据包以示传达确认信息&lt;br&gt;最后，发送端再回传一个带ACK的标志的数据包，代表“握手”结束&lt;br&gt;如在握手过程中某个阶段莫明中断，TCP协议会再次以相同的顺序发送相同的数据包&lt;/p&gt;
&lt;p&gt;断开一个TCP连接需要“四次挥手”&lt;br&gt;第一次挥手：主动关闭方发送一个FIN，用来关注主动方到被动关闭方的数据传送，也即是主动关闭方告诫被动关闭方：我已经不会再给你发数据了（在FIN包之前发送的数据，如果没有收到对应的ACK确认报文，主动关闭方依然会重发这些数据）。但是，此时主动关闭方还可以接受数据&lt;br&gt;第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号收到序号 +1（与SYN相同，一个 FIN占用一个序号）&lt;br&gt;第三次挥手：被动关闭方发送一个 FIN。用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会给你发送数据了&lt;br&gt;第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手&lt;/p&gt;
&lt;h1 id=&#34;HTTP-和-HTTPS，为什么HTTPS安全？&#34;&gt;&lt;a href=&#34;#HTTP-和-HTTPS，为什么HTTPS安全？&#34; class=&#34;headerlink&#34; title=&#34;HTTP 和 HTTPS，为什么HTTPS安全？&#34;&gt;&lt;/a&gt;HTTP 和 HTTPS，为什么HTTPS安全？&lt;/h1&gt;&lt;p&gt;HTTP协议通常承载与 TCP协议之上，在HTTP和TCP之间添加一个安全协议层（SSL或TSL），这个时候，就成了我们常说的HTTPS&lt;br&gt;默认HTTP的端口号为80，HTTPS的端口号为443&lt;br&gt;因为网络请求需要中间有很多的服务器路由的转发，中间的节点都可能篡改信息，而如果使用HTTPS，密钥在你和终点站才有，https之所有说比http安全，是因为他利用ssl&amp;#x2F;tls协议传输。包含证书，流量转发，负载均衡，页面适配，浏览器适配，refer传递等，保障了传输过程的安全性&lt;/p&gt;
&lt;h1 id=&#34;axios和fetch区别对比&#34;&gt;&lt;a href=&#34;#axios和fetch区别对比&#34; class=&#34;headerlink&#34; title=&#34;axios和fetch区别对比&#34;&gt;&lt;/a&gt;axios和fetch区别对比&lt;/h1&gt;&lt;p&gt;axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，本质上也是对原生XHR的封装，只不过它是Promise的实现版本，符合最新的ES规范，它本身具有以下特征&lt;/p&gt;
&lt;p&gt;从浏览器中创建 XMLHttpRequest&lt;br&gt;支持 Promise API&lt;br&gt;客户端支持防止CSRF&lt;br&gt;提供了一些并发请求的接口（重要，方便了很多的操作）&lt;br&gt;从 node.js 创建 http 请求&lt;br&gt;拦截请求和响应&lt;br&gt;转换请求和响应数据&lt;br&gt;取消请求&lt;br&gt;自动转换JSON数据&lt;br&gt;fetch优势：&lt;/p&gt;
&lt;p&gt;语法简洁，更加语义化&lt;br&gt;基于标准 Promise 实现，支持 async&amp;#x2F;await&lt;br&gt;同构方便，使用 isomorphic-fetch&lt;br&gt;更加底层，提供的API丰富（request, response）&lt;br&gt;脱离了XHR，是ES规范里新的实现方式&lt;br&gt;fetch存在问题&lt;/p&gt;
&lt;p&gt;fetch是一个低层次的API，你可以把它考虑成原生的XHR，所以使用起来并不是那么舒服，需要进行封装。&lt;br&gt;fetch只对网络请求报错，对400，500都当做成功的请求，服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。&lt;br&gt;fetch默认不会带cookie，需要添加配置项： fetch(url, {credentials: ‘include’})&lt;br&gt;fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费&lt;br&gt;fetch没有办法原生监测请求的进度，而XHR可以&lt;/p&gt;
</content>
        <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/" />
        <category term="浏览器" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%B5%8F%E8%A7%88%E5%99%A8/" />
        <category term="浏览器" scheme="http://yoursite.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/" />
        <updated>2021-06-25T08:43:00.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/front-end/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/</id>
        <title>移动端相关适配方案</title>
        <link rel="alternate" href="http://yoursite.com/front-end/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/"/>
        <content type="html">&lt;h1 id=&#34;参考文档&#34;&gt;&lt;a href=&#34;#参考文档&#34; class=&#34;headerlink&#34; title=&#34;参考文档&#34;&gt;&lt;/a&gt;参考文档&lt;/h1&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM0MDAzMTQvYXJ0aWNsZS9kZXRhaWxzLzEyNTQ4ODM3Ng==&#34;&gt;https://blog.csdn.net/u013400314/article/details/125488376&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81MjU1NTIyNDg=&#34;&gt;https://zhuanlan.zhihu.com/p/525552248&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/" />
        <category term="移动端适配" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/" />
        <category term="移动端适配" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/" />
        <updated>2021-06-25T08:43:00.000Z</updated>
    </entry>
    <entry>
        <id>http://yoursite.com/front-end/%E8%AE%B0%E4%B8%80%E6%AC%A1vue%E8%BD%ACuniapp/</id>
        <title>记一次vue转uniapp</title>
        <link rel="alternate" href="http://yoursite.com/front-end/%E8%AE%B0%E4%B8%80%E6%AC%A1vue%E8%BD%ACuniapp/"/>
        <content type="html">&lt;h1 id=&#34;vue的相关标签怎么转&#34;&gt;&lt;a href=&#34;#vue的相关标签怎么转&#34; class=&#34;headerlink&#34; title=&#34;vue的相关标签怎么转?&#34;&gt;&lt;/a&gt;vue的相关标签怎么转?&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;div  header main section -&amp;gt; view
span -&amp;gt; text
ul li -&amp;gt; view ?  这个还不太确定，这个只要有样式类的情况下直接改
img -&amp;gt; image   这里注意的是转成uniapp的image标签要把宽高都设置一下  
    
总结为只要有class类的情况下，基本上都是用的view
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;#字体处理： px 转 rpx  2倍化怎么处理？ 全局样式怎么转化?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;uniapp有个&amp;lt;page-meta :root-font-size=&amp;quot;&amp;#39;12px&amp;#39;&amp;quot;/&amp;gt;
1rem 就是12px

现在某个页面盒子得大小是22px  但是实际我需要得大小是44px  
so  在不改变前面数字得情况下，

1rem = 2px


但是这个是有一定缺陷的，浏览器里最小的字体是12px ,如果字体大小已经写死的情况下就不能用了   
so  其实还有一个办法，直接全局替换px 为 px * 2  
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;对于已经使用axios写得api接口，怎么快速转化成uniapp的请求方式&#34;&gt;&lt;a href=&#34;#对于已经使用axios写得api接口，怎么快速转化成uniapp的请求方式&#34; class=&#34;headerlink&#34; title=&#34;对于已经使用axios写得api接口，怎么快速转化成uniapp的请求方式&#34;&gt;&lt;/a&gt;对于已经使用axios写得api接口，怎么快速转化成uniapp的请求方式&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;针对当前的项目，进行对函数导出和数据传入进行分布封装

import config from &amp;quot;@/config/index.js&amp;quot;
import store from &amp;#39;@/store/index.js&amp;#39;;

export const requestApi = (options) =&amp;gt; &amp;#123;

    const ppsessid = store.state.user.ppSessId
    const sessid = store.state.user.sessId
    const cid = store.state.env.cid

    const publicHeaders = &amp;#123;
        &amp;quot;Content-Type&amp;quot;: &amp;quot;application/json&amp;quot;,
        &amp;#39;Accept&amp;#39;: &amp;#39;application/json&amp;#39;,
        &amp;#39;X-Yf-CID&amp;#39;: cid,
        &amp;#39;X-Yf-PPSessid&amp;#39; : ppsessid,
        &amp;#39;X-Yf-Sessid&amp;#39; : sessid
    &amp;#125;
    return (function() &amp;#123;
        let &amp;#123;
            url,
            method,
            params,
            data
        &amp;#125; = options
        // console.log(&amp;#39;options&amp;#39;, options)
        return new Promise((resolve, reject) =&amp;gt; &amp;#123;
            uni.request(&amp;#123;
                url: config.url.devServer + url,
                method: method || &amp;#39;GET&amp;#39;,
                header: publicHeaders,
                data: data || params,
                success: (res) =&amp;gt; &amp;#123;
                    resolve(res);
                &amp;#125;,
                fail: (err) =&amp;gt; &amp;#123;
                    reject(err);
                &amp;#125;
            &amp;#125;)
        &amp;#125;);
    &amp;#125;)(options)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;vue中的good-storage-unaiapp的替代方案&#34;&gt;&lt;a href=&#34;#vue中的good-storage-unaiapp的替代方案&#34; class=&#34;headerlink&#34; title=&#34;vue中的good-storage    unaiapp的替代方案&#34;&gt;&lt;/a&gt;vue中的good-storage    unaiapp的替代方案&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;这个js库其实就是一个操作缓存的库

自己封装一个简单的对象即可解决

let storage = &amp;#123;&amp;#125;
storage.get = function(options) &amp;#123;
    uni.getStorageSync(options)
&amp;#125;
storage.set = function(options) &amp;#123;
    uni.setStorageSync(options)
&amp;#125;
storage.remove = function(options) &amp;#123;
    uni.removeStorageSync(options)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;vue中的相关跳转&#34;&gt;&lt;a href=&#34;#vue中的相关跳转&#34; class=&#34;headerlink&#34; title=&#34;vue中的相关跳转&#34;&gt;&lt;/a&gt;vue中的相关跳转&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;1.封装vue的原型对象。这个是最方便的，但是需要适配一些东西，? 可以试一下。

2.
push -&amp;gt; navigateTo  
replace -&amp;gt; redirectTo


back  -&amp;gt; 
    
    let pages = getCurrentPages(); // 当前页面
                    let beforePage = pages[pages.length - 2]; // 上一页
                    uni.navigateBack(&amp;#123;
                        success: function() &amp;#123;
                            beforePage.onLoad(); // 执行上一页的onLoad方法
                        &amp;#125;
                    &amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;怎么快速的处理css样式完成转化&#34;&gt;&lt;a href=&#34;#怎么快速的处理css样式完成转化&#34; class=&#34;headerlink&#34; title=&#34;怎么快速的处理css样式完成转化&#34;&gt;&lt;/a&gt;怎么快速的处理css样式完成转化&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;采取   
1.就地取材
2.转vue标签为类

举个例子。 比如当前的页面p 标签哟样式，就直接，吧类名变成p ,然后p标签改为view
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;路由相关&#34;&gt;&lt;a href=&#34;#路由相关&#34; class=&#34;headerlink&#34; title=&#34;路由相关&#34;&gt;&lt;/a&gt;路由相关&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;this.$route.query.canshu1  
    就是在 onload 里接收 options 里接收canshu1  
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;记一次ui-li-scss-转化的过程&#34;&gt;&lt;a href=&#34;#记一次ui-li-scss-转化的过程&#34; class=&#34;headerlink&#34; title=&#34;记一次ui li  scss 转化的过程&#34;&gt;&lt;/a&gt;记一次ui li  scss 转化的过程&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;
*****转化之前

&amp;lt;ul&amp;gt;
    &amp;lt;template v-if=&amp;quot;currentSku.coupon &amp;amp;&amp;amp; currentSku.coupon.length&amp;quot;&amp;gt;
        &amp;lt;li class=&amp;quot;has-coupon&amp;quot; v-for=&amp;quot;(item, index) in currentSku.coupon.slice(0, 2)&amp;quot;
        :key=&amp;quot;index&amp;quot;&amp;gt;&amp;#123;&amp;#123;item.title&amp;#125;&amp;#125;&amp;lt;/li&amp;gt;
    &amp;lt;/template&amp;gt;
    &amp;lt;li v-else&amp;gt;暂无优惠券&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

.goods-tickets &amp;#123;
        ul &amp;#123;
          display: flex;
          li &amp;#123;
            color: #378BF7;
            &amp;amp;.has-coupon &amp;#123;
              display: flex;
              align-items: center;
              height: 20px * 2;
              font-size: 12px * 2;
              padding: 0 9px * 2;
              margin-right: 6px * 2;
              background-color: #378BF7;
              background-repeat: no-repeat;
              position: relative;
              overflow: hidden;
              color: #FFFFFF;
              &amp;amp;:last-child &amp;#123;
                margin-right: 0;
              &amp;#125;
              &amp;amp;:before, &amp;amp;:after &amp;#123;
                content: &amp;#39;&amp;#39;;
                display: block;
                position: absolute;
                width: 8px * 2;
                height: 8px * 2;
                background-color: #FFF;
                border-radius: 50%;
                top: 50%;
                transform: translateY(-50%);
              &amp;#125;
              &amp;amp;:before &amp;#123;
                left: -4px * 2;
              &amp;#125;
              &amp;amp;:after &amp;#123;
                right: -4px * 2;
              &amp;#125;
            &amp;#125;
          &amp;#125;
        &amp;#125;
      &amp;#125;


 *****转化过后

&amp;lt;view class=&amp;quot;ul222&amp;quot;&amp;gt;
    &amp;lt;template v-if=&amp;quot;currentSku.coupon &amp;amp;&amp;amp; currentSku.coupon.length&amp;quot;&amp;gt;
        &amp;lt;view class=&amp;quot;has-coupon&amp;quot; v-for=&amp;quot;(item, index) in currentSku.coupon.slice(0, 2)&amp;quot;
        :key=&amp;quot;index&amp;quot;&amp;gt;&amp;#123;&amp;#123;item.title&amp;#125;&amp;#125;&amp;lt;/view&amp;gt;
    &amp;lt;/template&amp;gt;
    &amp;lt;view v-else&amp;gt;暂无优惠券&amp;lt;/view&amp;gt;
&amp;lt;/view&amp;gt;


 .goods-tickets &amp;#123;
        .ul222 &amp;#123;
          display: flex;
          view &amp;#123;
            color: #378BF7;
            &amp;amp;.has-coupon &amp;#123;
              display: flex;
              align-items: center;
              height: 20px * 2;
              font-size: 12px * 2;
              padding: 0 9px * 2;
              margin-right: 6px * 2;
              background-color: #378BF7;
              background-repeat: no-repeat;
              position: relative;
              overflow: hidden;
              color: #FFFFFF;
              &amp;amp;:last-child &amp;#123;
                margin-right: 0;
              &amp;#125;
              &amp;amp;:before, &amp;amp;:after &amp;#123;
                content: &amp;#39;&amp;#39;;
                display: block;
                position: absolute;
                width: 8px * 2;
                height: 8px * 2;
                background-color: #FFF;
                border-radius: 50%;
                top: 50%;
                transform: translateY(-50%);
              &amp;#125;
              &amp;amp;:before &amp;#123;
                left: -4px * 2;
              &amp;#125;
              &amp;amp;:after &amp;#123;
                right: -4px * 2;
              &amp;#125;
            &amp;#125;
          &amp;#125;
        &amp;#125;
      &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;uniapp的图片路径相关问题&#34;&gt;&lt;a href=&#34;#uniapp的图片路径相关问题&#34; class=&#34;headerlink&#34; title=&#34;uniapp的图片路径相关问题&#34;&gt;&lt;/a&gt;uniapp的图片路径相关问题&lt;/h1&gt;&lt;p&gt;编译成H5 的时候图片在哪里都无所谓&lt;/p&gt;
&lt;p&gt;编译成小程序 的时候图片必须要在 static 下&lt;/p&gt;
&lt;h1 id=&#34;分包应该在项目改写之前&#34;&gt;&lt;a href=&#34;#分包应该在项目改写之前&#34; class=&#34;headerlink&#34; title=&#34;分包应该在项目改写之前&#34;&gt;&lt;/a&gt;分包应该在项目改写之前&lt;/h1&gt;&lt;p&gt;不然后面又得改写跳转路径&lt;/p&gt;
</content>
        <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/" />
        <category term="大前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%A4%A7%E5%89%8D%E7%AB%AF/" />
        <category term="uniapp" scheme="http://yoursite.com/tags/uniapp/" />
        <updated>2021-06-25T08:43:00.000Z</updated>
    </entry>
</feed>
