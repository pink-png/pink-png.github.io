{
    "version": "https://jsonfeed.org/version/1",
    "title": "死肥宅",
    "subtitle": "肥宅快乐水",
    "icon": "http://yoursite.com/images/favicon.ico",
    "description": "双马尾の罪",
    "home_page_url": "http://yoursite.com",
    "items": [
        {
            "id": "http://yoursite.com/front-end/Jquery/",
            "url": "http://yoursite.com/front-end/Jquery/",
            "title": "Jquery基础",
            "date_published": "2021-06-25T08:43:00.000Z",
            "content_html": "",
            "tags": [
                "前端开发",
                "Jquery",
                "Jquery"
            ]
        },
        {
            "id": "http://yoursite.com/front-end/React/",
            "url": "http://yoursite.com/front-end/React/",
            "title": "React基础",
            "date_published": "2021-06-25T08:43:00.000Z",
            "content_html": "<h1 id=\"一react-基础\"><a class=\"anchor\" href=\"#一react-基础\">#</a> 一：React 基础</h1>\n<h2 id=\"1jsx\"><a class=\"anchor\" href=\"#1jsx\">#</a> 1.jsx</h2>\n<h2 id=\"2虚拟dom\"><a class=\"anchor\" href=\"#2虚拟dom\">#</a> 2. 虚拟 dom</h2>\n<h1 id=\"二组件化\"><a class=\"anchor\" href=\"#二组件化\">#</a> 二：组件化</h1>\n<h2 id=\"1context\"><a class=\"anchor\" href=\"#1context\">#</a> 1.context</h2>\n<h2 id=\"2ant-design\"><a class=\"anchor\" href=\"#2ant-design\">#</a> 2.ant-design</h2>\n<h2 id=\"3高阶组件\"><a class=\"anchor\" href=\"#3高阶组件\">#</a> 3. 高阶组件</h2>\n<h1 id=\"三react全家桶\"><a class=\"anchor\" href=\"#三react全家桶\">#</a> 三：react 全家桶</h1>\n<h2 id=\"1redux\"><a class=\"anchor\" href=\"#1redux\">#</a> 1.redux</h2>\n<h2 id=\"2react-router\"><a class=\"anchor\" href=\"#2react-router\">#</a> 2.react-router</h2>\n<h2 id=\"3umi\"><a class=\"anchor\" href=\"#3umi\">#</a> 3.umi</h2>\n<h2 id=\"4dva\"><a class=\"anchor\" href=\"#4dva\">#</a> 4.dva</h2>\n<h1 id=\"四react源码\"><a class=\"anchor\" href=\"#四react源码\">#</a> 四：react 源码</h1>\n<h2 id=\"1虚拟dom构建\"><a class=\"anchor\" href=\"#1虚拟dom构建\">#</a> 1. 虚拟 dom 构建</h2>\n<h2 id=\"2createelement\"><a class=\"anchor\" href=\"#2createelement\">#</a> 2.createElement</h2>\n<h2 id=\"3component\"><a class=\"anchor\" href=\"#3component\">#</a> 3.Component</h2>\n<h2 id=\"4rander\"><a class=\"anchor\" href=\"#4rander\">#</a> 4.rander</h2>\n<h1 id=\"五react性能优化\"><a class=\"anchor\" href=\"#五react性能优化\">#</a> 五：react 性能优化</h1>\n<h1 id=\"六服务端渲染ssr\"><a class=\"anchor\" href=\"#六服务端渲染ssr\">#</a> 六：服务端渲染 SSR</h1>\n<h2 id=\"1nextjs\"><a class=\"anchor\" href=\"#1nextjs\">#</a> 1.next.js</h2>\n",
            "tags": [
                "前端开发",
                "React",
                "React"
            ]
        },
        {
            "id": "http://yoursite.com/front-end/Typescript/",
            "url": "http://yoursite.com/front-end/Typescript/",
            "title": "Typescript基础",
            "date_published": "2021-06-25T08:43:00.000Z",
            "content_html": "",
            "tags": [
                "前端开发",
                "Typescript",
                "Typescript"
            ]
        },
        {
            "id": "http://yoursite.com/front-end/JavaScript%E8%BF%90%E7%94%A8/",
            "url": "http://yoursite.com/front-end/JavaScript%E8%BF%90%E7%94%A8/",
            "title": "js运用",
            "date_published": "2021-06-25T08:43:00.000Z",
            "content_html": "<h1 id=\"一什么是javascript\"><a class=\"anchor\" href=\"#一什么是javascript\">#</a> 一：什么是 JavaScript</h1>\n<h2 id=\"1发展历史\"><a class=\"anchor\" href=\"#1发展历史\">#</a> 1. 发展历史</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1995</span>年 JavaScript <span class=\"token number\">1.0</span> 问世 它的主要用途是代替 Perl 等服务器端语言处理输入验证</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1997</span>年 javascript <span class=\"token number\">1.1</span> 作为提案被提交给欧洲计算机制造商协会（Ecma）<span class=\"token constant\">TC39</span> 委员会他们花了数月时间打造出 <span class=\"token constant\">ECMA</span><span class=\"token operator\">-</span><span class=\"token number\">262</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1998</span>年 国际标准化组织（<span class=\"token constant\">ISO</span>）和国际电工委员会（<span class=\"token constant\">IEC</span>）也将 ECMAScript 采纳为标准  自此以后，各家浏览器均以 ECMAScript 作为自己 JavaScript 实现的依据，虽然具体实现各有不同。</pre></td></tr></table></figure><h2 id=\"2javascript的构成\"><a class=\"anchor\" href=\"#2javascript的构成\">#</a> 2.javascript 的构成</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>核心（ECMAScript）    </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span>文档对象模型（<span class=\"token constant\">DOM</span>）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3.</span>浏览器对象模型（<span class=\"token constant\">BOM</span>）</pre></td></tr></table></figure><h1 id=\"一数据类型以及相应的操作\"><a class=\"anchor\" href=\"#一数据类型以及相应的操作\">#</a> 一：数据类型以及相应的操作</h1>\n<h5 id=\"2关于array处理数据的方法总结\"><a class=\"anchor\" href=\"#2关于array处理数据的方法总结\">#</a> 2：关于 Array 处理数据的方法总结</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 敲重点 1：创建数组的方式有 2 种，一种是构造函数的方式 一个是字面量的方式，最好使用字面量的方式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 因为不管 Array 或者 String 本身也是构造函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        Array <span class=\"token operator\">=</span> String<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">let</span> aa <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>aa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//string</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">let</span> bb <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[1,2,3,4]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 敲重点 2：ECMAScript 的数组每个槽位可以存储任意类型的数据，而且 ECMAScript 数组也是动态大小的，会随着数据的添加自动增长</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">obj1</span><span class=\"token operator\">:</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">obj2</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 敲重点 3：数组排列位置</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 使用 for 循环打乱位数组置</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">var</span> Arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">67</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">121</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">randArr</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">var</span> iRand <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">var</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>iRand<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>iRand<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 使用 sort 方法错误打乱位数组置</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        arr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span> <span class=\"token operator\">-</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">//reverse () 方法是倒序交换位置 会改变原来的数组</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t    <span class=\"token keyword\">let</span> newarr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newarr <span class=\"token operator\">===</span> arr<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 利用 sort () 对数组对象某个值进行升序排序</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string-property property\">'a'</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">'b'</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string-property property\">'a'</span><span class=\"token operator\">:</span> <span class=\"token number\">466</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">'b'</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string-property property\">'a'</span><span class=\"token operator\">:</span> <span class=\"token number\">623</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">'b'</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string-property property\">'a'</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">'b'</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string-property property\">'a'</span><span class=\"token operator\">:</span> <span class=\"token number\">67</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">'b'</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">creatCompare</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">propertyName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 根据哪个属性值排序</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj1<span class=\"token punctuation\">,</span> obj2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token comment\">// 对象两两比较</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token keyword\">let</span> value1 <span class=\"token operator\">=</span> obj1<span class=\"token punctuation\">[</span>propertyName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token keyword\">let</span> value2 <span class=\"token operator\">=</span> obj2<span class=\"token punctuation\">[</span>propertyName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value1 <span class=\"token operator\">&lt;</span> value2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value1 <span class=\"token operator\">></span> value2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">let</span> newarr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token function\">creatCompare</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newarr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\">// 敲重点 4：数组的转换方法</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\">// 数组转成字符串</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">let</span> color <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pink'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// green,red,pink</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// green,red,pink</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'|'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// green|red|pink</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\">// 以下这种方法只能转成以逗号分隔的字符串</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token keyword\">let</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// red,blue,green</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// red,blue,green</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// red,blue,green\t\t</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token comment\">// 扩展：字符串转数组</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'|'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'|'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//['green','red','pink']</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\">// 敲重点 5：栈方法</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 向数组末尾添加 5</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">let</span> poparr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 取得数组末尾的值，并且删除</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//[1,2,3,4]</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token comment\">// 敲重点 6：队列方法</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>       \t<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>       \t<span class=\"token keyword\">let</span> shiftarr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除数组第一项并取得</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>       \tarr<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 向数组第一项添加</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>       \tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1,2,3,4]</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token comment\">// 敲重点 7：数组相关的操作方法</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token comment\">// 拼接 2 个数组  返回一个新的数组，不改变原来的数组</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">let</span> zenarr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>zenarr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 3, 4, 5, 6, 7, 8]</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token comment\">//concat 方法不传参数对数组进行第一层的深拷贝</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t<span class=\"token keyword\">let</span> newarr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token comment\">// 数组截取    遵循左包，右不包</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    \tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//[2,3,4]</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    \tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//[3,4]</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    \tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//[3,4] </span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token comment\">//slice 方法不传参数对数组进行第一层深拷贝</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    \t<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    \t<span class=\"token keyword\">let</span> slicearr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    \tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>slicearr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 返回跟原来一样的新数组   [1,2,3,4]</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token comment\">// 敲重点 8：数组增删改</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    \t<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token comment\">// 删除    </span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    \tarr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 传入 2 个参数，第一个数数组开始位置，第二个是删除的数量</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    \tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>   <span class=\"token comment\">//[1,3,4] </span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token comment\">// 插入</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    \tarr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 传入 3 个参数  第一个参数是开始位置，第二个是要删除的数量，要插入的元素   </span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    \tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token comment\">//[1,2,3,4]</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token comment\">// 替换</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    \tarr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 方法同插入  ，在序列为 3 的位置后面，删除 0 个，添加 4，5，6</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    \tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token comment\">//[1, 2, 3, 4, 5, 6, 4]</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre><span class=\"token comment\">// 敲重点 9：搜索和位置方法</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"141\"></td><td><pre><span class=\"token comment\">//indexOf 从索为 0 开始搜索   </span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token comment\">//lastIndexOf 从最后一项开始搜索</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token keyword\">let</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Nicholas\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>        <span class=\"token keyword\">let</span> people <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Nicholas\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>        <span class=\"token keyword\">let</span> morePeople <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>person<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -1</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>morePeople<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>morePeople<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre></pre></td></tr><tr><td data-num=\"158\"></td><td><pre></pre></td></tr><tr><td data-num=\"159\"></td><td><pre><span class=\"token comment\">// 使用 includes () 方法判断数组里有无某数据  </span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\t      <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fruit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>            <span class=\"token keyword\">const</span> redFruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'strawberry'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cherry'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cranberries'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>redFruits<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'存在'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不存在'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre></pre></td></tr><tr><td data-num=\"169\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre></pre></td></tr><tr><td data-num=\"171\"></td><td><pre><span class=\"token comment\">// 敲重点 10：断言函数的运用</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre><span class=\"token comment\">// 找到匹配项后，这两个方法都不再继续搜索。 </span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre><span class=\"token comment\">// 可以说是查询判断里性能最好的方法</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>        <span class=\"token keyword\">const</span> people <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>                <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Matt\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>                <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">27</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>                <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Nicholas\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>                <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">29</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> element<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>        <span class=\"token comment\">// &#123;name: \"Matt\", age: 27&#125;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> element<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>        <span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre></pre></td></tr><tr><td data-num=\"189\"></td><td><pre></pre></td></tr><tr><td data-num=\"190\"></td><td><pre><span class=\"token comment\">// 其实也可以当做循环使用</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>        <span class=\"token keyword\">const</span> evens <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>        evens<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"196\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>            <span class=\"token keyword\">return</span> element <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre><span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre><span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre><span class=\"token comment\">// [2, 4, 6]</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre><span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre><span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre><span class=\"token comment\">// [2, 4, 6]</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre></pre></td></tr><tr><td data-num=\"206\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre></pre></td></tr><tr><td data-num=\"208\"></td><td><pre><span class=\"token comment\">// 敲重点 11：迭代方法</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：对数组每一项都运行传入的函数，如果对每一项函数都返回 <span class=\"token boolean\">true</span>，则这个方法返回 <span class=\"token boolean\">true</span>。</pre></td></tr><tr><td data-num=\"210\"></td><td><pre><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：对数组每一项都运行传入的函数，函数返回 <span class=\"token boolean\">true</span> 的项会组成数组之后返回。</pre></td></tr><tr><td data-num=\"211\"></td><td><pre><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：对数组每一项都运行传入的函数，没有返回值。</pre></td></tr><tr><td data-num=\"212\"></td><td><pre><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：对数组每一项都运行传入的函数，返回由每次函数调用的结果构成的数组。</pre></td></tr><tr><td data-num=\"213\"></td><td><pre><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：对数组每一项都运行传入的函数，如果有一项函数返回 <span class=\"token boolean\">true</span>，则这个方法返回 <span class=\"token boolean\">true</span>。</pre></td></tr><tr><td data-num=\"214\"></td><td><pre>这些方法都不改变调用它们的数组。</pre></td></tr><tr><td data-num=\"215\"></td><td><pre></pre></td></tr><tr><td data-num=\"216\"></td><td><pre><span class=\"token comment\">//map 方法每次要主动定义返回项</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>            <span class=\"token keyword\">let</span> newobjarr <span class=\"token operator\">=</span>  objarr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>                item<span class=\"token punctuation\">.</span>a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>                item<span class=\"token punctuation\">.</span>b <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span>item<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span><span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span>item<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>     </pre></td></tr><tr><td data-num=\"223\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newobjarr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre></pre></td></tr><tr><td data-num=\"225\"></td><td><pre><span class=\"token comment\">// 敲重点 12：归并方法</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"228\"></td><td><pre></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>\t\t<span class=\"token comment\">// 每一项都加 1</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>\t\t<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>        <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span>cur</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>prev<span class=\"token punctuation\">,</span>cur <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre></pre></td></tr><tr><td data-num=\"235\"></td><td><pre></pre></td></tr><tr><td data-num=\"236\"></td><td><pre></pre></td></tr><tr><td data-num=\"237\"></td><td><pre></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>        <span class=\"token comment\">// 数组求和</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>        <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>            <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>            <span class=\"token literal-property property\">sex</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>            <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>            <span class=\"token literal-property property\">sex</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>            <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>            <span class=\"token literal-property property\">sex</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>        <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>            <span class=\"token keyword\">return</span> prev <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">.</span>id</pre></td></tr><tr><td data-num=\"252\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre></pre></td></tr><tr><td data-num=\"254\"></td><td><pre></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>        <span class=\"token comment\">// 计算数组每个元素出现的次数</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>        <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>        <span class=\"token keyword\">const</span> rescount <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token keyword\">in</span> prev<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>                prev<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre>                prev<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>            <span class=\"token keyword\">return</span> prev</pre></td></tr><tr><td data-num=\"264\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"266\"></td><td><pre>        <span class=\"token comment\">// 取出最大值</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>         <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span>cur</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre>           <span class=\"token keyword\">return</span> prev <span class=\"token operator\">&lt;=</span> cur <span class=\"token operator\">?</span> prev <span class=\"token operator\">=</span> cur <span class=\"token operator\">:</span> prev <span class=\"token operator\">=</span> prev</pre></td></tr><tr><td data-num=\"269\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre></pre></td></tr><tr><td data-num=\"271\"></td><td><pre></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>        <span class=\"token comment\">// 数组去重</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>        <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span>cur</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>prev<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>prev<span class=\"token punctuation\">,</span>cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> prev</pre></td></tr><tr><td data-num=\"275\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre></pre></td></tr><tr><td data-num=\"277\"></td><td><pre></pre></td></tr><tr><td data-num=\"278\"></td><td><pre>        <span class=\"token comment\">// 将二维数组转化为一维</span></pre></td></tr><tr><td data-num=\"279\"></td><td><pre>        <span class=\"token keyword\">const</span> arrer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>        <span class=\"token keyword\">const</span> arrerres <span class=\"token operator\">=</span> arrer<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span> cur</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre>            <span class=\"token keyword\">return</span> prev<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre></pre></td></tr><tr><td data-num=\"284\"></td><td><pre></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>        <span class=\"token comment\">// 将多维数组转化为一维</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre>        <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">newArr</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre>            <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pre<span class=\"token punctuation\">,</span> cur</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> pre<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">newArr</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre></pre></td></tr><tr><td data-num=\"291\"></td><td><pre><span class=\"token function\">reduceRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre></pre></td></tr><tr><td data-num=\"293\"></td><td><pre></pre></td></tr><tr><td data-num=\"294\"></td><td><pre></pre></td></tr><tr><td data-num=\"295\"></td><td><pre></pre></td></tr><tr><td data-num=\"296\"></td><td><pre><span class=\"token comment\">//12. 某些方法调用用会修改自身的数组？</span></pre></td></tr><tr><td data-num=\"297\"></td><td><pre>  push</pre></td></tr><tr><td data-num=\"298\"></td><td><pre>  pop</pre></td></tr><tr><td data-num=\"299\"></td><td><pre>  shift</pre></td></tr><tr><td data-num=\"300\"></td><td><pre>  unshift</pre></td></tr><tr><td data-num=\"301\"></td><td><pre>  splice</pre></td></tr><tr><td data-num=\"302\"></td><td><pre>  sort</pre></td></tr><tr><td data-num=\"303\"></td><td><pre>  reverse</pre></td></tr></table></figure><h5 id=\"3关于string包装类型处理数据的总结\"><a class=\"anchor\" href=\"#3关于string包装类型处理数据的总结\">#</a> 3：关于 String 包装类型处理数据的总结</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> mseesage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mseesage<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 返回字符串的长度  5</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mseesage<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 返回某个索引值  h</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mseesage<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 字符编码  h 的字符编码是 108</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">3.1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 字符串拼接  不改变原来的字符串， 返回一个新的字符串</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> stringvalue<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 可以接受多个参数，用逗号分开</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//  hello world</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stringvalue<span class=\"token punctuation\">)</span> <span class=\"token comment\">//hello  </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 采用 加号 +  实现快速拼接</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token string\">'world'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// hello</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">//hello world </span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token number\">3.2</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 字符串提取</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">let</span> stringvalue <span class=\"token operator\">=</span> <span class=\"token string\">'hello world'</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"lo world\"</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"lo world\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"lo world\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"lo w\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"lo w\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"lo worl\" </span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">//clice 单个参数是 左不包后面全要 (]        2 个参数是 左不包，后包  (]</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">//substring 单个参数是 左不包后面全要 (]         2 个参数是 左包，后包   []</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">//substr 单个参数是 左包后面全要  []           2 个参数是 左包，第二个参数是截取个数  []</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token number\">3.3</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">// 字符串位置方法</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">let</span> stringvalue <span class=\"token operator\">=</span> <span class=\"token string\">'hello world'</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stringvalue<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"o\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stringvalue<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"o\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 7 </span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">//indexOd 和 lastIndexOf 的区别就是前者是从前面开始寻找，后者是从后面开始寻找</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 传入第二个参数的时候，</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"o\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 7</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"o\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4 </span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">// 第二个参数代表从哪个序列开始寻找</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">// 寻找某段字符串里的某个字符，并全部记录它的序列位置</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">let</span> stringValue <span class=\"token operator\">=</span> <span class=\"token string\">\"Lorem ipsum dolor sit amet, consectetur adipisicing elit\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">let</span> positions <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">let</span> pos <span class=\"token operator\">=</span> stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"e\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            positions<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            pos <span class=\"token operator\">=</span> stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> pos <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>positions<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// [3,24,32,35,52]</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token number\">3.4</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\">// 查看字符串里是否包含某个 字符串 或者字符</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">// 有三种方法可以判断  </span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"foobarbaz\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"baz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qux\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token comment\">//startsWith () 检查开始于索引 0 的匹配项 </span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\">//endsWith () 检查开始于索引 (string.length - substring.length) 的匹配项</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token comment\">//includes () 检查整个字符串</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token comment\">// 基本就是使用 includes 就完事了</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token number\">3.5</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token comment\">//trim () 删除 2 边空格    原字符串不受到影响 返回一个新的字符串</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">let</span> stringValue <span class=\"token operator\">=</span> <span class=\"token string\">\" hello world \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token keyword\">let</span> trimmedStringValue <span class=\"token operator\">=</span> stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \" hello world \"</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>trimmedStringValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"hello world\" </span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token comment\">// 扩展：</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token comment\">//trimLeft () 和 trimRight () 方法分别用于从字符串开始和末尾清理空格符。</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token number\">3.6</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token comment\">//repeat ()  复制多次字符串 原字符串不受影响  返回一个新的字符串</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token keyword\">let</span> stringvalue <span class=\"token operator\">=</span> <span class=\"token string\">'ha'</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stringvalue<span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">' yyyy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token comment\">// hahahahahahahahahahahaha yyyy</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token number\">3.7</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre> <span class=\"token comment\">//padStart () 和 padEnd () 方法会复制字符串，如果小于指定长度，则在相应一边填充字符，直至</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token comment\">// 满足长度条件。这两个方法的第一个参数是长度，第二个参数是可选的填充字符串，默认为空格</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token number\">3.8</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token comment\">// 字符串迭代与解构简单的运用，原理参考 js 高程</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'asddd'</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>str<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//[\"a\", \"s\", \"d\", \"d\", \"d\"]</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token number\">3.9</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token comment\">// 字符串大小转换</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token keyword\">let</span> stringValue <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"HELLO WORLD\"</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"HELLO WORLD\"</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"hello world\"</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"hello world\" </span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token comment\">/* 原来就有的是 toUpperCase 和 toLowerCase ，但是在很多地区，地区特定的方法与通用的方法是一样的。但在少数语言中（如土耳其语），Unicode 大小写转换需应用特殊规则，要使用地区特定的方法才能实现正确转换。*/</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token comment\">// 推荐使用 toLocaleUpperCase 和 toLocaleLowerCase</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token comment\">// 记忆方法是一个是 Up 是向上 就是放大</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre><span class=\"token number\">3.10</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token comment\">// 字符串替换  简单用法   </span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        <span class=\"token keyword\">let</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"cat, bat, sat, fat\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"at\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ond\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"cond, bat, sat, fat\"  </span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t\t<span class=\"token comment\">// 配合正则表达式的高级用法</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        result <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">a t</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ond\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"cond, bond, sond, fond\" </span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token number\">3.11</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre><span class=\"token comment\">// 计算输入的字符个数</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>         <span class=\"token function\">getByteLen</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>              <span class=\"token keyword\">var</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>              <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> val<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>                <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> val<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[^\\x00-\\xff]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">gi</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>                  len <span class=\"token operator\">+=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>                  len <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>              <span class=\"token keyword\">return</span> len</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token number\">3.12</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token comment\">// 实现方法为将字符串按某个字符切割成若干个字符串，并以数组形式返回</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"abc,abcd,aaa\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        ss <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 在每个逗号 (,) 处进行分解  [\"abc\", \"abcd\", \"aaa\"]</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        <span class=\"token keyword\">var</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        ss1 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//[\"h\", \"e\", \"l\", \"l\", \"o\", \"w\", \"o\", \"r\", \"l\", \"d\"]</span></pre></td></tr></table></figure><h5 id=\"4关于number包装类型的处理\"><a class=\"anchor\" href=\"#4关于number包装类型的处理\">#</a> 4：关于 Number 包装类型的处理</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> num1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.4545</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">let</span> num2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//10.45  // 表示返回 2 位小数，采用 4 舍 5 入</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num2<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//10.00</span></pre></td></tr></table></figure><h5 id=\"5关于date时间处理\"><a class=\"anchor\" href=\"#5关于date时间处理\">#</a> 5：关于 Date 时间处理</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建时间类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">let</span> time <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Sat Nov 14 2020 15:51:41 GMT+0800 (中国标准时间)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用 Date.parse 这个方法可以将其转化成 13 位的时间戳</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 填入时间戳，得出天 / 时 / 分</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">DateDifference</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">faultDate<span class=\"token punctuation\">,</span> completeTime</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          <span class=\"token comment\">// let d1 = new Date(faultDate);</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          <span class=\"token comment\">// let d2 = new Date(completeTime);</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token keyword\">var</span> stime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>faultDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          <span class=\"token keyword\">var</span> etime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>completeTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token keyword\">var</span> usedTime <span class=\"token operator\">=</span> etime <span class=\"token operator\">-</span> stime<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 两个时间戳相差的毫秒数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token keyword\">var</span> days <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>usedTime <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">3600</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token comment\">// 计算出小时数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token keyword\">var</span> leave1 <span class=\"token operator\">=</span> usedTime <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">3600</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 计算天数后剩余的毫秒数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token keyword\">var</span> hours <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>leave1 <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3600</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token comment\">// 计算相差分钟数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token keyword\">var</span> leave2 <span class=\"token operator\">=</span> leave1 <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3600</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 计算小时数后剩余的毫秒数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          <span class=\"token keyword\">var</span> minutes <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>leave2 <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token keyword\">var</span> time <span class=\"token operator\">=</span> days <span class=\"token operator\">+</span> <span class=\"token string\">\"天\"</span> <span class=\"token operator\">+</span> hours <span class=\"token operator\">+</span> <span class=\"token string\">\"时\"</span> <span class=\"token operator\">+</span> minutes <span class=\"token operator\">+</span> <span class=\"token string\">\"分\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token comment\">//   var time = days;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          <span class=\"token keyword\">return</span> time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 使用方法</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token function\">DateDifference</span><span class=\"token punctuation\">(</span><span class=\"token number\">1597800343</span><span class=\"token punctuation\">,</span><span class=\"token number\">1697900343</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 时间戳转时间格式</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token function\">getdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>           <span class=\"token keyword\">var</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>           y <span class=\"token operator\">=</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>           m <span class=\"token operator\">=</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>           d <span class=\"token operator\">=</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>           <span class=\"token keyword\">return</span> y <span class=\"token operator\">+</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token operator\">?</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> m <span class=\"token operator\">:</span> m<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token operator\">?</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> d <span class=\"token operator\">:</span> d<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span>                             now<span class=\"token punctuation\">.</span><span class=\"token function\">toTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"6关于math内置对象的处理\"><a class=\"anchor\" href=\"#6关于math内置对象的处理\">#</a> 6：关于 Math 内置对象的处理</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">2.1</span>：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//Math 对象属性  例如 Math.E  (自然对数的基数 e 的值)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2.2</span>：\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 最大最小值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         <span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token keyword\">let</span> min <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//7</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//1 </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 可以传入数组</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">let</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">let</span> maxarr <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>maxarr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">2.3</span>：</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 舍入方法</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token number\">25.9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 26</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token number\">25.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 26</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token number\">25.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 26</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token number\">25.9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 26</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token number\">25.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 26</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token number\">25.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 25</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">fround</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0.4000000059604645</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">fround</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0.5</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">fround</span><span class=\"token punctuation\">(</span><span class=\"token number\">25.9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 25.899999618530273</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">25.9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 25</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">25.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 25</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">25.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 25 </span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">//Math.ceil () 方法始终向上舍入为最接近的整数</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">//Math.floor () 方法始终向下舍入为最接近的整数</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">//Math.round () 方法执行四舍五入</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">//Math.fround () 方法返回数值最接近的单精度（32 位）浮点值表示</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token number\">2.4</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">// 随机数</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>         <span class=\"token keyword\">let</span> round <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 返回一个 0-1 范围内的随机数（0.9356889462950324），其中包含 0 但是不包含 1</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token number\">2.4</span><span class=\"token number\">.1</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">// 返回一个 [a,b] 中的随机数</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token keyword\">let</span> bb <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>b <span class=\"token operator\">+</span> a<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"7数据类型检测\"><a class=\"anchor\" href=\"#7数据类型检测\">#</a> 7：数据类型检测</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">typeof</span>  <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">instanceof</span>  <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token function\">constructor</span>  <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1</span>：在<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">JavaScript</span><span class=\"token template-punctuation string\">`</span></span>里使用<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">typeof</span><span class=\"token template-punctuation string\">`</span></span>判断数据类型，只能区分<span class=\"token operator\">**</span>基本类型<span class=\"token operator\">**</span>，即：<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">number</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">string</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">undefined</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">boolean</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">object</span><span class=\"token template-punctuation string\">`</span></span>。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2</span>：对于<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">null</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">array</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">function</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">object</span><span class=\"token template-punctuation string\">`</span></span>来说，使用<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">typeof</span><span class=\"token template-punctuation string\">`</span></span>都会统一返回<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">object</span><span class=\"token template-punctuation string\">`</span></span>字符串。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">3</span>：要想区分对象、数组、函数、单纯使用<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">typeof</span><span class=\"token template-punctuation string\">`</span></span>是不行的。在<span class=\"token constant\">JS</span>中，可以通过<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Object.prototype.toString.call()</span><span class=\"token template-punctuation string\">`</span></span>方法，判断某个对象之属于哪种内置类型。分为<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">null</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">string</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">boolean</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">number</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">undefined</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">array</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">function</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">object</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">date</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">math</span><span class=\"token template-punctuation string\">`</span></span>。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">4</span>：constructor 本来是用于标识对象类型的。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">5</span>：一般认为 <span class=\"token keyword\">instanceof</span> 操作符是确定对象类型 更可靠的方式。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">let</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">)</span>   <span class=\"token comment\">//object</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span> <span class=\"token comment\">//ƒ Object() &#123; [native code] &#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [object Number]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [object Object]</span></pre></td></tr></table></figure><h5 id=\"8深浅拷贝\"><a class=\"anchor\" href=\"#8深浅拷贝\">#</a> 8：深浅拷贝</h5>\n<p>1：深浅拷贝的区别</p>\n<p>首先要知道一点的就是，JavaScript 的数据类型的分为基本数据类型和引用类型，</p>\n<p>对于基本数据类型的拷贝，并没有深浅拷贝的区别，我们所说的深浅拷贝都是对于<strong>引用数据类型</strong>而言的</p>\n<p><strong>浅拷贝的概念</strong></p>\n<p>浅拷贝的意思就是只复制引用，而未复制真正的值。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义一个数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token comment\">// 定义一个对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">d</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">dd</span><span class=\"token operator\">:</span><span class=\"token string\">'dd'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token comment\">// 赋值这个数组给另一个变量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token keyword\">let</span> clonearr <span class=\"token operator\">=</span> arr</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token comment\">// 赋值这个数组给另一个对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token keyword\">let</span> cloneobj <span class=\"token operator\">=</span> obj </pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 打印一下拷贝的数据，嗯，是个原本来的一样的</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>clonearr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1,2,3,4,5]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>cloneobj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// &#123;a:'a',b:'b',c:Array[3],d:&#123;dd:'dd'&#125;&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 这个时候操作来了，我们给这个克隆的数组添加数据 克隆的对象也修改数据</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        clonearr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        cloneobj<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">aa</span><span class=\"token operator\">:</span><span class=\"token string\">'aa'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 打印 2 个数组   发现 arr 是和修改过的 clonearr 是一样的</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// [1,2,3,4,5,6]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>clonearr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1,2,3,4,5,6]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 打印 2 个对象   发现 obj 是和修改过的 cloneobj 是一样的</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;a:&#123;aa:'aa'&#125;,b:'b',c:Array[3],d:&#123;dd:'dd'&#125;&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>cloneobj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;a:&#123;aa:'aa'&#125;,b:'b',c:Array[3],d:&#123;dd:'dd'&#125;&#125;</span></pre></td></tr></table></figure><h6 id=\"1深拷贝有哪些方式\"><a class=\"anchor\" href=\"#1深拷贝有哪些方式\">#</a> 1：深拷贝有哪些方式？</h6>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>深拷贝就是对目标的完全拷贝，不像浅拷贝那样只是复制了一层引用，就连值也都复制了。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>只要进行了深拷贝，它们老死不相往来，谁也不会影响谁。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>目前实现深拷贝的方法不多，主要是两种：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">1.</span> 利用 <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">JSON</span><span class=\"token template-punctuation string\">`</span></span> 对象中的 <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">parse</span><span class=\"token template-punctuation string\">`</span></span> 和 <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">stringify</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">2.</span> 利用递归来实现每一层都重新创建对象并赋值</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">JSON.stringify</span><span class=\"token template-punctuation string\">`</span></span> 是将一个 <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">JavaScript</span><span class=\"token template-punctuation string\">`</span></span> 值转成一个 <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">JSON</span><span class=\"token template-punctuation string\">`</span></span> 字符串。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">JSON.parse</span><span class=\"token template-punctuation string\">`</span></span> 是将一个 <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">JSON</span><span class=\"token template-punctuation string\">`</span></span> 字符串转成一个 <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">JavaScript</span><span class=\"token template-punctuation string\">`</span></span> 值或对象。</pre></td></tr></table></figure><p><strong>使用 JSON.stringify (obj) 的缺点</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>确实是深拷贝，也很方便。但是，这个方法只能适用于一些简单的情况。比如下面这样的一个对象就不适用：   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>          <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'gsq'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>          <span class=\"token function-variable function\">hello</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>              console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gsq'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">const</span> cloneobj <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// &#123;name: \"gsq\", hello: ƒ&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>cloneobj<span class=\"token punctuation\">)</span> <span class=\"token comment\">//  &#123;name: \"gsq\"&#125;</span></pre></td></tr></table></figure><p><strong>注意</strong>：使用 JSON.parse (JSON.stringify (obj)) 进行深拷贝 对    <code>undefined</code> 、 <code>function</code> 、 <code>symbol</code>  会在转换过程中被忽略。。。</p>\n<p><strong>递归的方法</strong></p>\n<p>递归的思想就很简单了，就是对每一层的数据都实现一次  <code>创建对象-&gt;对象赋值</code>  的操作，简单粗暴上代码：</p>\n<p><strong>这种方式就不存在 <code>undefined</code> 、 <code>function</code> 、 <code>symbol</code>  被忽略了</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">deepClone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">source</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> targetObj <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Array <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 判断复制的目标是数组还是对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> keys <span class=\"token keyword\">in</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 遍历目标</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">[</span>keys<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> source<span class=\"token punctuation\">[</span>keys<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 如果值是对象，就递归一下</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        targetObj<span class=\"token punctuation\">[</span>keys<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> source<span class=\"token punctuation\">[</span>keys<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Array <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        targetObj<span class=\"token punctuation\">[</span>keys<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">deepClone</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">[</span>keys<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 如果不是，就直接赋值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        targetObj<span class=\"token punctuation\">[</span>keys<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> source<span class=\"token punctuation\">[</span>keys<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> targetObj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h6 id=\"2浅拷贝有哪些方式\"><a class=\"anchor\" href=\"#2浅拷贝有哪些方式\">#</a> 2：浅拷贝有哪些方式</h6>\n<p>1：concat</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">const</span> clonearr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr <span class=\"token operator\">===</span> clonearr<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false</span></pre></td></tr></table></figure><p>2：slice</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> arr2 <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr1 <span class=\"token operator\">===</span> arr2<span class=\"token punctuation\">)</span> <span class=\"token comment\">//false</span></pre></td></tr></table></figure><p>3：es6 之   <code>Object.assign()</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string-property property\">'a'</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">'b'</span> <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> cloneobj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj <span class=\"token operator\">===</span> cloneobj<span class=\"token punctuation\">)</span> <span class=\"token comment\">//false</span></pre></td></tr></table></figure><p>4：es6 扩展运算符 ...</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">let</span> clonearr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr <span class=\"token operator\">===</span> clonearr<span class=\"token punctuation\">)</span> <span class=\"token comment\">//false</span></pre></td></tr></table></figure><p>5：es6 from 方法</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> a1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">const</span> a2 <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a1 <span class=\"token operator\">===</span> a2<span class=\"token punctuation\">)</span> <span class=\"token comment\">//false</span></pre></td></tr></table></figure><p>6：使用 map 方法</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">let</span> clonearr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr <span class=\"token operator\">===</span> clonearr<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>7：自定义函数浅拷贝</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">shallowClone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">source</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> targetObj <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Array <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 判断复制的目标是数组还是对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> keys <span class=\"token keyword\">in</span> source<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 遍历目标</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      targetObj<span class=\"token punctuation\">[</span>keys<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> source<span class=\"token punctuation\">[</span>keys<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> targetObj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>总结</strong>：</p>\n<ol>\n<li>赋值运算符  <code>=</code>  实现的是浅拷贝，只拷贝对象的引用值；</li>\n<li>JavaScript 中数组和对象自带的拷贝方法都是 “首层深拷贝”；</li>\n<li><code>JSON.stringify</code>  实现的是深拷贝，但是对目标对象有要求，转化的值不能是 <code>function</code> ， <code>undefined</code> ， <code>symbol</code>  ；</li>\n<li>若想真正意义上的深拷贝，请递归。</li>\n</ol>\n<h1 id=\"二作用域以及变量\"><a class=\"anchor\" href=\"#二作用域以及变量\">#</a> 二：作用域以及变量</h1>\n<h5 id=\"2变量声明提升\"><a class=\"anchor\" href=\"#2变量声明提升\">#</a> 2：变量声明提升</h5>\n<p><strong>只有 var 会存在变量提升</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       a <span class=\"token operator\">=</span> b <span class=\"token operator\">=</span> c <span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 相当于  a = c    b = c</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">//4</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">//4</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\">//4</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> b <span class=\"token operator\">=</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\">//4</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>foo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 输出什么？</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>解析过程：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//1: 首先会预解析 ：注意函数比变量优先级高</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">var</span> foo<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 这里此时 foo 没有被赋值 是 undefined</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>foo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//!undefined == true</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">var</span> foo<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                foo <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">// 到这里后 foo 被赋值为 10</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">var</span> foo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        foo <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 10</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">456</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>解析过程：</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">//1: 首先会预解析 ：注意函数比变量优先级高</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 执行 f2 函数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">var</span> num<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明 num</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            num <span class=\"token operator\">=</span> <span class=\"token number\">456</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 赋值 456</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 执行 f1 函数 。传入 num 的值 456 ，打印 456</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">var</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        num <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>           <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>解析过程：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//  1: 预解析</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">var</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 执行 fn 函数  因为作用域链是从里往外查询</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 分别输出 cba 直接在 c 这一行报错</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 原因:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">//js 是解释型语言，执行一行解释一行，发现报错就停止执行</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 因为作用域链是从里往外查询 此时输出 cba 的环境已经是最大的 windows 环境了</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>           <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> b <span class=\"token operator\">=</span> c <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>解析过程：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         <span class=\"token comment\">//1: 预解析</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token keyword\">function</span> <span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>             <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>             b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>             c <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">// 对于局部函数变量里面没有声明 var 的变量  都是全局变量</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//1 </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Uncaught ReferenceError: a is not defined</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">function</span> <span class=\"token function\">fnSon</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token function\">fnSon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>解析过程：</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 预解析</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">function</span> <span class=\"token function\">fnSon</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//a 没有定义 var 是全局变量</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 直接得到当前作用域的值 3</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 跟 fnSon 函数同一作用预的变量 a</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//a 赋值 2</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token function\">fnSon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 此时 fnSon 并未传入参数 a , 直接执行 fnSon </span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 得到当前作用域的值 2</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 直接得到全局变量 1</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 执行 fn 函数 </span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'呵呵'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                a <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'哈哈'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token literal-property property\">解析过程</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 预解析</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'呵呵'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 注意啦：打印不存在变量提升</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                a <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 全局变量 a</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'哈哈'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 哈哈</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 取得当前同级作用域的 4 </span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 函数 a // 此时函数 a 取代了 a 函数</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>解析过程：</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 预解析</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">var</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        value <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">var</span> value<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//undefined</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//!undnefined  = true</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                value <span class=\"token operator\">=</span> <span class=\"token string\">'function'</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>       </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 此处调用函数依次弹出 \"undefined\", \"function\"</span></pre></td></tr></table></figure><h5 id=\"3作用域链\"><a class=\"anchor\" href=\"#3作用域链\">#</a> 3：作用域链</h5>\n<p>作用域分为<strong>全局作用域</strong>和<strong>函数作用域</strong></p>\n<table>\n<thead>\n<tr>\n<th>作用域</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>函数作用域</td>\n<td>在固定的代码片段才能被访问</td>\n</tr>\n<tr>\n<td>全局作用域</td>\n<td>代码在程序的任何地方都能被访问，window 对象的内置属性都拥有全局作用域。</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 全局作用域</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//fn 作用域</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> d <span class=\"token operator\">=</span> <span class=\"token number\">4000</span>  <span class=\"token comment\">//bar 作用域</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>作用域特点：</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>作用域有上下级关系，上下级关系的确定就看函数是在哪个作用域下创建的。如上，fn作用域下创建了bar函数，那么“fn作用域”就是“bar作用域”的上级。   </pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>作用域用处：</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>变量取值：</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>到创建 这个变量 的函数的作用域中取值</pre></td></tr></table></figure><p>作用域链</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 10</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">1</span>：一般情况下，变量取值到 创建 这个变量 的函数的作用域中取值。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">2</span>：但是如果在当前作用域中没有查到值，就会向上级作用域去查，直到查到全局作用域，这么一个查找过程形成的链条就叫做作用域链。</pre></td></tr></table></figure><h5 id=\"4闭包closure\"><a class=\"anchor\" href=\"#4闭包closure\">#</a> 4：闭包（closure）</h5>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>特点</td>\n<td>1：外部访问函数内部变成可能（我们知道作用域链，是只能里面一层一层访问到外面，但是，外部不能访问内部）2：局部变量常驻在内存中  3：可以避免使用全局变量，防止全局变量污染  4：缺点是会造成内存泄漏（有一块内存空间长期被占用，而不被释放）</td>\n</tr>\n<tr>\n<td>概念</td>\n<td>** 闭包函数：** 声明在一个函数中的函数，叫做闭包函数。** 闭包：** 内部函数总是可以访问其所在的外部函数中声明的参数和变量，即使在其外部函数被返回（寿命终结）了之后。</td>\n</tr>\n</tbody>\n</table>\n<p>闭包的创建</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>example <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">funA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//funA 的活动对象之中；</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// 匿名函数的活动对象；</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">funA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//10</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>example <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">outerFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">function</span> <span class=\"token function\">innerFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> innerFn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">var</span> inner <span class=\"token operator\">=</span> <span class=\"token function\">outerFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 每次外部函数执行的时候，都会开辟一块内存空间，外部函数的地址不同，都会重新创建一个新的地址</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">var</span> inner2 <span class=\"token operator\">=</span> <span class=\"token function\">outerFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">inner2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">inner2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">inner2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//1 2 3 1 2 3</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>example <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">outerFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">function</span> <span class=\"token function\">innnerFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> innnerFn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">var</span> inner1 <span class=\"token operator\">=</span> <span class=\"token function\">outerFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">var</span> inner2 <span class=\"token operator\">=</span> <span class=\"token function\">outerFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">inner1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">inner2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 同一个地址变量每调用一次  i+1 </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">inner1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">inner2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//1 2 3 4</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>example <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token operator\">++</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//4   </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//4 </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 并没有创建地址变量去保存</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>example <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">outerFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">function</span> <span class=\"token function\">innnerFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> innnerFn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">var</span> inner1 <span class=\"token operator\">=</span> <span class=\"token function\">outerFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">var</span> inner2 <span class=\"token operator\">=</span> <span class=\"token function\">outerFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">inner1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">inner2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">inner1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">inner2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//1 1 2 2</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>example <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// 自调用函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">var</span> m <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">function</span> <span class=\"token function\">getM</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> m<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">function</span> <span class=\"token function\">seta</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            window<span class=\"token punctuation\">.</span>g <span class=\"token operator\">=</span> getM<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//window 是最高级的对象  添加 windows 下一个 g 的一个键值  值为 getM</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            window<span class=\"token punctuation\">.</span>f <span class=\"token operator\">=</span> seta<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//100  闭包找到的是同一地址中父级函数中对应变量最终的值</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>example <span class=\"token number\">7</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 函数的赋值是引用类型的</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//1 </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//2</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>example <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">var</span> t1 <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//1 </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//2 </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//3</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>example <span class=\"token number\">9</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">tmp</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">+</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            tmp<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toString</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//6</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>example <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">var</span> lis <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> lis<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                lis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 事件处理函数中闭包的写法</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>example <span class=\"token number\">11</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">var</span> m2 <span class=\"token operator\">=</span> <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">m2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">m2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//3</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">m2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//4</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token comment\">// 一个是有变量地址的，一个是没有的 ，有的才会保存</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>example <span class=\"token number\">12</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">var</span> fn <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">return</span> fn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//11</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//12</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>example <span class=\"token number\">13</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">love1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">223</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">me1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> me1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">var</span> loveme1 <span class=\"token operator\">=</span> <span class=\"token function\">love1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">loveme1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 输出 224</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>预解析：</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">love1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">var</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">var</span> me1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token function-variable function\">me1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            num <span class=\"token operator\">=</span> <span class=\"token number\">233</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            num <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">return</span> me1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">var</span> loveme1 <span class=\"token operator\">=</span> <span class=\"token function\">love1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">loveme1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 输出 224</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>example <span class=\"token number\">14</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">,</span> o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token function-variable function\">fun</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">m</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//undefined</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        a<span class=\"token punctuation\">.</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//0  </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        a<span class=\"token punctuation\">.</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//0  </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        a<span class=\"token punctuation\">.</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//0  </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//undefined  0  1  2</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        c<span class=\"token punctuation\">.</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        c<span class=\"token punctuation\">.</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//undefined  0  1  1</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>example <span class=\"token number\">15</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">//5 5 5 5 5</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>example <span class=\"token number\">16</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                        <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">//0 1 2 3 4</span></pre></td></tr></table></figure><h1 id=\"三javascript创建对象\"><a class=\"anchor\" href=\"#三javascript创建对象\">#</a> 三：JavaScript 创建对象</h1>\n<h5 id=\"1js创建对象的几种方式的优缺点\"><a class=\"anchor\" href=\"#1js创建对象的几种方式的优缺点\">#</a> 1：js 创建对象的几种方式的优缺点</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token operator\">:</span>工厂模式</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">createPerson</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> job</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            o<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            o<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            o<span class=\"token punctuation\">.</span>job <span class=\"token operator\">=</span> job<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            o<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">let</span> person1 <span class=\"token operator\">=</span> <span class=\"token function\">createPerson</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nicholas\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Software Engineer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">let</span> person2 <span class=\"token operator\">=</span> <span class=\"token function\">createPerson</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Greg\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Doctor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">.</span>isPrototypeOf <span class=\"token operator\">==</span> person2<span class=\"token punctuation\">.</span>isPrototypeOf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 敲重点一：</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>这里，函数 <span class=\"token function\">createPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>接收 <span class=\"token number\">3</span> 个参数，根据这几个参数构建了一个包含 Person 信息的对象。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>可以用不同的参数多次调用这个函数，每次都会返回包含 <span class=\"token number\">3</span> 个属性和 <span class=\"token number\">1</span> 个方法的对象。这种工厂模式虽</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>然可以解决创建多个类似对象的问题，但没有解决对象标识问题（即新创建的对象是什么类型）。</pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">2</span><span class=\"token operator\">:</span>构造函数模式</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> job</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>job <span class=\"token operator\">=</span> job<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">let</span> person1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nicholas\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Software Engineer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">let</span> person2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Greg\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Doctor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        person1<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Nicholas</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        person2<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Greg </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">.</span>isPrototypeOf <span class=\"token operator\">==</span> person2<span class=\"token punctuation\">.</span>isPrototypeOf<span class=\"token punctuation\">)</span> <span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">.</span>sayName <span class=\"token operator\">==</span> person2<span class=\"token punctuation\">.</span>sayName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//false    </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 敲重点一：</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">实际上，Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>内部的代码跟 <span class=\"token function\">createPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>基本是一样的，只是有如下区别。</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">1</span><span class=\"token operator\">:</span> 没有显式地创建对象没有 <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token number\">2</span><span class=\"token operator\">:</span> 属性和方法直接赋值给了 <span class=\"token keyword\">this</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token number\">3</span><span class=\"token operator\">:</span> 没有 <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 敲重点二：</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>构造函数名称的首字母都是要大写的，非构造函数则以小写字母开头。</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>有助于在 ECMAScript 中区分构造函数和普通函数。毕竟 ECMAScript 的构造函数就是能创建对象的函数。</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 敲重点三：</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>要创建 Person 的实例，应使用 <span class=\"token keyword\">new</span> 操作符。以这种方式调用构造函数会执行如下操作。</pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token number\">1</span><span class=\"token operator\">:</span> 在内存中创建一个新对象。</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token number\">2</span><span class=\"token operator\">:</span> 这个新对象内部的<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Prototype<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>特性被赋值为构造函数的 prototype 属性。</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token number\">3</span><span class=\"token operator\">:</span> 构造函数内部的 <span class=\"token keyword\">this</span> 被赋值为这个新对象（即 <span class=\"token keyword\">this</span> 指向新对象）。</pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token number\">4</span><span class=\"token operator\">:</span> 执行构造函数内部的代码（给新对象添加属性）。</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token number\">5</span><span class=\"token operator\">:</span> 如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的新对象。</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">// 敲重点四：</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>person1 和 person2 分别保存着 Person 的不同实例。这两个对象都有一个 constructor 属性指向 Person，</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">==</span> Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">==</span> Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>constructor 本来是用于标识对象类型的。不过，一般认为 <span class=\"token keyword\">instanceof</span> 操作符是确定对象类型</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>更可靠的方式。前面例子中的每个对象都是 Object 的实例，同时也是 Person 的实例，如下面调用</pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">instanceof</span> 操作符的结果所示：</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person1 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person1 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person2 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person2 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>定义自定义构造函数可以确保实例被标识为特定类型，相比于工厂模式，这是一个很大的好处。在</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>这个例子中，person1 和 person2 之所以也被认为是 Object 的实例，是因为所有自定义对象都继承自 Object</pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">// 敲重点五：</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>构造函数不一定要写成函数声明的形式。赋值给变量的函数表达式也可以表示构造函数：</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Person</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> job</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>job <span class=\"token operator\">=</span> job<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">let</span> person1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nicholas\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Software Engineer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">let</span> person2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Greg\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Doctor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>person1<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Nicholas</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>person2<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Greg</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person1 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person1 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person2 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person2 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token comment\">// 敲重点六：</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>在实例化时，如果不想传参数，那么构造函数后面的括号可加可不加。只要有 <span class=\"token keyword\">new</span> 操作符，就可以调用相应的构造函数：</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Jake\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">let</span> person1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">let</span> person2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        person1<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Jake</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        person2<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Jake</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person1 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person1 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person2 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person2 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token comment\">// 敲重点七： 构造函数也是函数</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>构造函数与普通函数唯一的区别就是调用方式不同。除此之外，构造函数也是函数。并没有把某个</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>函数定义为构造函数的特殊语法。任何函数只要使用 <span class=\"token keyword\">new</span> 操作符调用就是构造函数，而不使用 <span class=\"token keyword\">new</span> 操</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>作符调用的函数就是普通函数。比如，前面的例子中定义的 <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>可以像下面这样调用：</pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>为啥都是大写，因为这样可以区别于普通的函数，一目了然的就知道这是构造函数</pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token comment\">// 敲重点八：构造函数的问题（优化构造函数）</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>构造函数虽然有用，但也不是没有问题。构造函数的主要问题在于，其定义的方法会在每个实例上</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>都创建一遍。因此对前面的例子而言，person1 和 person2 都有名为 <span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>的方法，但这两个方</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>法不是同一个 Function 实例。我们知道，ECMAScript 中的函数是对象，因此每次定义函数时，都会</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>初始化一个对象</pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>逻辑上讲，这个构造函数实际上是这样的：</pre></td></tr><tr><td data-num=\"101\"></td><td><pre> <span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> job</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>job <span class=\"token operator\">=</span> job<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sayName <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"console.log(this.name)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 逻辑等价</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>这样理解这个构造函数可以更清楚地知道，每个 Person 实例都会有自己的 Function 实例用于显</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>示 name 属性。当然了，以这种方式创建函数会带来不同的作用域链和标识符解析。但创建新 Function</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>实例的机制是一样的。因此不同实例上的函数虽然同名却不相等，如下所示：</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">.</span>sayName <span class=\"token operator\">==</span> person2<span class=\"token punctuation\">.</span>sayName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>怎么优化呢<span class=\"token operator\">?</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    函数定义转移到构造函数外部</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> job</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>job <span class=\"token operator\">=</span> job<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sayName <span class=\"token operator\">=</span> sayName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token keyword\">let</span> person1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nicholas\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Software Engineer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token keyword\">let</span> person2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Greg\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Doctor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        person1<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Nicholas</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        person2<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Greg </span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"128\"></td><td><pre><span class=\"token function\">在这里，sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>被定义在了构造函数外部。在构造函数内部，sayName 属性等于全局 <span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数。因为这一次 sayName 属性中包含的只是一个指向外部函数的指针，所以 person1 和 person2共享了定义在全局作用域上的 <span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数。这样虽然解决了相同逻辑的函数重复定义的问题，但全局作用域也因此被搞乱了，因为那个函数实际上只能在一个对象上调用。如果这个对象需要多个方法，那么就要在全局作用域中定义多个函数。这会导致自定义类型引用的代码不能很好地聚集一起。这个新问题可以通过原型模式来解决。</pre></td></tr></table></figure><h5 id=\"2原型模式创建对象重点部分单独分离出来\"><a class=\"anchor\" href=\"#2原型模式创建对象重点部分单独分离出来\">#</a> 2：原型模式创建对象（重点部分单独分离出来）</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 敲重点一：为啥出现原型模式创建对象？</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>这样虽然解决了相同逻辑的函数重复定义的问题，但全局作用域也因此被搞乱了，因为那个函数实际上只能在一个对象上调用。如果这个对象需要多个方法，那么就要在全局作用域中定义多个函数。这会导致自定义类型引用的代码不能很好地聚集一起。这个新问题可以通过原型模式来解决。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token comment\">// 也可以使用函数表达式的方式创建对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token comment\">//  let Person = function() &#123;&#125;; </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Nicholas\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">29</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>job <span class=\"token operator\">=</span> <span class=\"token string\">\"Software Engineer\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">let</span> person1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        person1<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Nicholas\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">let</span> person2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        person2<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Nicholas\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">.</span>sayName <span class=\"token operator\">==</span> person2<span class=\"token punctuation\">.</span>sayName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>这里，所有属性和 <span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法都直接添加到了 Person 的 prototype 属性上，构造函数体中什么也没有。但这样定义之后，调用构造函数创建的新对象仍然拥有相应的属性和方法。与构造函数模式不同，使用这种原型模式定义的属性和方法是由所有实例共享的。因此 person1 和 person2 访问的都是相同的属性和相同的 <span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数。要理解这个过程，就必须理解 ECMAScript 中原型的本质。 </pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 敲重点二：理解原型</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>无论何时，只要创建一个函数，就会按照特定的规则为这个函数创建一个 prototype 属性（指向原型对象）。默认情况下，所有原型对象自动获得一个名为 constructor <span class=\"token class-name\">的属性，指回与之关联的构造函数。对前面的例子而言，Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor 指向 Person。然后，因构造函数而异，可能会给原型对象添加其他属性和方法。</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>在自定义构造函数时，原型对象默认只会获得 constructor 属性，其他的所有方法都继承自Object。每次调用构造函数创建一个新实例，这个实例的内部<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Prototype<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>指针就会被赋值为构造函数的原型对象。脚本中没有访问这个<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Prototype<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>特性的标准方式，但 Firefox、Safari 和 Chrome会在每个对象上暴露__proto__属性，通过这个属性可以访问对象的原型。在其他实现中，这个特性完全被隐藏了。关键在于理解这一点：实例与构造函数原型之间有直接的联系，但实例与构造函数之间没有。</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token number\">1</span><span class=\"token operator\">:</span>构造函数可以是函数表达式<span class=\"token punctuation\">,</span> 也可以是函数声明</pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token number\">2</span><span class=\"token operator\">:</span>声明之后，构造函数就有了一个 与之关联的原型对象</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token number\">3</span><span class=\"token operator\">:</span>如前所述，构造函数有一个 prototype 属性 引用其原型对象，而这个原型对象也有一个 constructor 属性，引用这个构造函数 换句话说，两者循环引用</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token number\">4</span><span class=\"token operator\">:</span> 正常的原型链都会终止于 Object 的原型对象<span class=\"token punctuation\">,</span>Object 原型的原型是 <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token number\">5</span><span class=\"token operator\">:</span>构造函数、原型对象和实例是 <span class=\"token number\">3</span> 个完全不同的对象</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token number\">6</span><span class=\"token operator\">:</span>实例通过__proto__链接到原型对象 它实际上指向隐藏特性<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Prototype<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> 构造函数通过 prototype 属性链接到原型对象 实例与构造函数没有直接联系，与原型对象有直接联系</pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token number\">7</span><span class=\"token operator\">:</span> 同一个构造函数创建的两个实例 共享同一个原型对象：</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">// 敲重点三：相关 API</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token number\">1</span>：</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>使用 <span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法确定两个对象之间的这种关系</pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token function\">本质上，isPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>会在传入参数的<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Prototype<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>指向调用它的对象时返回 <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 说白了就是判断当前的实例对象是不是指向当前的原型</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token number\">2</span>：</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>ECMAScript的Object 类型有一个方法叫 Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>，返回参数的内部特性<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Prototype<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>的值 </pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">// 说白了，就是获取当前实例的原型对象</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Nicholas\"</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>Object 类型还有一个 <span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法，可以向实例的私有特性<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Prototype<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>写入一</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>个新值。这样就可以重写一个对象的原型继承关系</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">let</span> biped <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token literal-property property\">numLegs</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Matt'</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        Object<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span> biped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Matt</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>numLegs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> biped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\">// 但是不建议这样做，会严重影响性能</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token number\">4</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>为避免使用 Object<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>可能造成的性能下降，可以通过 Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>来创建一个新对象，同时为其指定原型</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">let</span> biped <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token literal-property property\">numLegs</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>biped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        person<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Matt'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Matt</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>numLegs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> biped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token comment\">// 敲重点四：原型层级</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>说白了就是 构造函数创造出来的实例 访问属性或者方法 会先从构造函数里面寻找，如果找不到会到原型里面找</pre></td></tr></table></figure><h1 id=\"四javascript继承\"><a class=\"anchor\" href=\"#四javascript继承\">#</a> 四：JavaScript 继承</h1>\n<h5 id=\"1原型链\"><a class=\"anchor\" href=\"#1原型链\">#</a> 1：原型链</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 敲重点一： 什么是原型链</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>原型链是ECMAScript的主要继承方式</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>其基本思想就是通过原型继承多个引用</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>类型的属性和方法。重温一下构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型有一个属性指回构造函数，而实例有一个内部指针指向原型。如果原型是另一个类型的实例呢？那就意味着这个原型本身有一个内部指针指向另一个原型，相应地另一个原型也有一个指针指向另一个构造函数。这样就在实例和原型之间构造了一条原型链。这就是原型链的基本构想。</pre></td></tr></table></figure><h5 id=\"1js如何实现继承es6类的原理\"><a class=\"anchor\" href=\"#1js如何实现继承es6类的原理\">#</a> 1：js 如何实现继承 (ES6 类的原理)</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>原型链继承</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>盗用构造函数继承</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>组合继承</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>原型式继承</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>寄生式继承</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>寄生组合继承</pre></td></tr></table></figure><h5 id=\"2es6类\"><a class=\"anchor\" href=\"#2es6类\">#</a> 2：ES6 类</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 敲重点一： 为什么出现类的概念</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>因为通过原型链和构造函数虽然能是实现继承，各种继承策略都有自己的问题，也有相应的妥协 但是代码也显得非常冗长和混乱。   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>为解决这些问题，ECMAScript <span class=\"token number\">6</span> 新引入的 <span class=\"token keyword\">class</span> 关键字具有正式定义类的能力。类（<span class=\"token keyword\">class</span>）是ECMAScript 中新的基础性语法糖结构。虽然 ECMAScript <span class=\"token number\">6</span> 类表面上看起来可以支持正式的面向对象编程，但实际上它背后使用的仍然是原型和构造函数的概念</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 敲重点二： 怎么定义一个类</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">// 类声明</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>或者</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> Animal <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 类表达式</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>与函数表达式类似，类表达式在它们被求值前也不能引用。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>与函数定义不同的是，虽然函数声明可以提升，但类定义不能</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 敲重点三：类可以由哪些构成</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>构造函数方法、实例方法、获取函数、设置函数和静态类方法</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">1.</span>构造函数方法 constructor ，每当创建实例的时候都会执行</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">2.</span>实例方法  就是定义在原型上的方法，是每个实例都共享的</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">3.</span>静态方法  直接用类点静态方法调用，（注意，实例是不能调用的）</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>静态方法很适合返回实例工厂</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age_ <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token function\">sayAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">static</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token comment\">// 使用随机年龄创建并返回一个 Person 实例</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Person &#123; age_: ... &#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 敲重点四：继承</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token constant\">ES6</span> 类支持单继承。使用 <span class=\"token keyword\">extends</span> 关键字，就可以继承任何拥有<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Construct<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>和原型的对象。很大程度上，这意味着不仅可以继承一个类，也可以继承普通的构造函数（保持向后兼容）</pre></td></tr></table></figure><h1 id=\"五newthis\"><a class=\"anchor\" href=\"#五newthis\">#</a> 五：new，this</h1>\n<h5 id=\"1new操作符具体干了什么\"><a class=\"anchor\" href=\"#1new操作符具体干了什么\">#</a> 1：new 操作符具体干了什么</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>：在内存中创建一个新对象</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span>：这个对象内部的<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Prototype<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>特性被赋值为构造函数的protopype属性</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span>：构造函数的内部的<span class=\"token keyword\">this</span>被赋值为这个新对象（即<span class=\"token keyword\">this</span>指向新对象）</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4</span>：执行构造函数内部的代码（给新对象添加属性）</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">5</span>：如果构造函数返回非空对象，则返回该对象；否则返回刚创建的新对象</pre></td></tr></table></figure><h5 id=\"2new的模拟实现\"><a class=\"anchor\" href=\"#2new的模拟实现\">#</a> 2：new 的模拟实现</h5>\n<h5 id=\"3this对象的理解\"><a class=\"anchor\" href=\"#3this对象的理解\">#</a> 3：this 对象的理解</h5>\n<h1 id=\"六callapplybind\"><a class=\"anchor\" href=\"#六callapplybind\">#</a> 六：call/apply/bind</h1>\n<h5 id=\"1callapplybind\"><a class=\"anchor\" href=\"#1callapplybind\">#</a> 1：call/apply/bind</h5>\n<h5 id=\"2call和apply的模拟实现\"><a class=\"anchor\" href=\"#2call和apply的模拟实现\">#</a> 2：call 和 apply 的模拟实现</h5>\n<h5 id=\"3bind的模拟实现\"><a class=\"anchor\" href=\"#3bind的模拟实现\">#</a> 3：bind 的模拟实现</h5>\n<h1 id=\"七事件\"><a class=\"anchor\" href=\"#七事件\">#</a> 七：事件</h1>\n<h5 id=\"1事件流\"><a class=\"anchor\" href=\"#1事件流\">#</a> 1：事件流</h5>\n<h5 id=\"2事件的三个阶段\"><a class=\"anchor\" href=\"#2事件的三个阶段\">#</a> 2：事件的三个阶段</h5>\n<h5 id=\"3事件的代理有何委托\"><a class=\"anchor\" href=\"#3事件的代理有何委托\">#</a> 3：事件的代理有何委托</h5>\n<h5 id=\"4如何派发事件\"><a class=\"anchor\" href=\"#4如何派发事件\">#</a> 4：如何派发事件</h5>\n<h1 id=\"八event-loop\"><a class=\"anchor\" href=\"#八event-loop\">#</a> 八：event loop</h1>\n<h5 id=\"1进程和线程\"><a class=\"anchor\" href=\"#1进程和线程\">#</a> 1：进程和线程</h5>\n<h5 id=\"2执行栈\"><a class=\"anchor\" href=\"#2执行栈\">#</a> 2：执行栈</h5>\n<h5 id=\"3为什么js是单线程而不是多线程\"><a class=\"anchor\" href=\"#3为什么js是单线程而不是多线程\">#</a> 3：为什么 js 是单线程，而不是多线程</h5>\n<h5 id=\"4宏任务微任务\"><a class=\"anchor\" href=\"#4宏任务微任务\">#</a> 4：宏任务 / 微任务</h5>\n<h5 id=\"5浏览器与node事件有何区别\"><a class=\"anchor\" href=\"#5浏览器与node事件有何区别\">#</a> 5: 浏览器与 Node 事件（有何区别）</h5>\n<h1 id=\"十浏览器缓存机制\"><a class=\"anchor\" href=\"#十浏览器缓存机制\">#</a> 十：浏览器缓存机制</h1>\n<h5 id=\"1缓存位置\"><a class=\"anchor\" href=\"#1缓存位置\">#</a> 1：缓存位置</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>## webStorage</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1.</span> 存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2.</span> 浏览器端通过 Window<span class=\"token punctuation\">.</span>sessionStorage 和 Window<span class=\"token punctuation\">.</span>localStorage 属性来实现本地存储机制。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">3.</span> 相关<span class=\"token constant\">API</span>：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token number\">1.</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">xxxxxStorage.setItem('key', 'value');</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      \t\t\t\t该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token number\">2.</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">xxxxxStorage.getItem('person');</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      ​\t\t该方法接受一个键名作为参数，返回键名对应的值。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token number\">3.</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">xxxxxStorage.removeItem('key');</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      ​\t\t该方法接受一个键名作为参数，并把该键名从存储中删除。</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token number\">4.</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> xxxxxStorage.clear()</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      ​\t\t该方法会清空存储中的所有数据。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token number\">4.</span> 备注：</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token number\">1.</span> SessionStorage存储的内容会随着浏览器窗口关闭而消失。</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token number\">2.</span> LocalStorage存储的内容，需要手动清除才会消失。</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token number\">3.</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">xxxxxStorage.getItem(xxx)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>如果xxx对应的value获取不到，那么getItem的返回值是<span class=\"token keyword\">null</span>。</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token number\">4.</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">JSON.parse(null)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>的结果依然是<span class=\"token keyword\">null</span>。</pre></td></tr></table></figure><h5 id=\"2缓存策略强缓存协商缓存\"><a class=\"anchor\" href=\"#2缓存策略强缓存协商缓存\">#</a> 2：缓存策略（强缓存，协商缓存）</h5>\n<h1 id=\"十一浏览器渲染原理\"><a class=\"anchor\" href=\"#十一浏览器渲染原理\">#</a> 十一：浏览器渲染原理</h1>\n<h5 id=\"1渲染过程\"><a class=\"anchor\" href=\"#1渲染过程\">#</a> 1：渲染过程</h5>\n<h5 id=\"2阻塞过程\"><a class=\"anchor\" href=\"#2阻塞过程\">#</a> 2：阻塞过程</h5>\n<h5 id=\"3重绘和汇流重排\"><a class=\"anchor\" href=\"#3重绘和汇流重排\">#</a> 3：重绘和汇流（重排）</h5>\n<h1 id=\"十二进阶知识\"><a class=\"anchor\" href=\"#十二进阶知识\">#</a> 十二：进阶知识</h1>\n<h5 id=\"1函数式编程\"><a class=\"anchor\" href=\"#1函数式编程\">#</a> 1：函数式编程</h5>\n<h5 id=\"2html5-web-worker\"><a class=\"anchor\" href=\"#2html5-web-worker\">#</a> 2：HTML5 Web Worker</h5>\n<h5 id=\"3service-worker\"><a class=\"anchor\" href=\"#3service-worker\">#</a> 3：Service Worker</h5>\n<h1 id=\"十三ecmascript\"><a class=\"anchor\" href=\"#十三ecmascript\">#</a> 十三：ECMAScript</h1>\n<h2 id=\"一es5基础es5是从ecmascript从第一版到现在比较完善的一版\"><a class=\"anchor\" href=\"#一es5基础es5是从ecmascript从第一版到现在比较完善的一版\">#</a> 一：es5 基础 (es5 是从 ECMAScript 从第一版到现在比较完善的一版)</h2>\n<h3 id=\"1变量-var\"><a class=\"anchor\" href=\"#1变量-var\">#</a> 1：变量 var</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">.</span>var声明的作用域</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 该变量将在函数退出时被销毁</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> \t\t<span class=\"token keyword\">var</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 局部变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 出错！</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 去掉之前的 var 操作符之后，message 就变成了全局变量</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre> \t\tmessage <span class=\"token operator\">=</span> <span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 全局变量</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"hi\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">2.</span>逗号分隔符定义多个变量</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        height <span class=\"token operator\">=</span> <span class=\"token number\">1.8</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">.</span>var声明提升</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre> \t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre> \t\t<span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined </span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>上面的代码等价于</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre> \t\t<span class=\"token keyword\">var</span> age<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre> \t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre> \t\tage <span class=\"token operator\">=</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></pre></td></tr></table></figure><h3 id=\"2javascriptes5数据类型\"><a class=\"anchor\" href=\"#2javascriptes5数据类型\">#</a> 2：JavaScript (ES5) 数据类型</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>数据类型：<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Undefined</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Null</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Boolean</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">String</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Number</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Symbol （ES6新出的）</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Object</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>引用类型：Object可以细分为：<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">基本引用类型</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">集合引用类型</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>基本引用类型：<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Date</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">RegExp</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">原始包装类型(Boolean,Number,String)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">单例内置对象(Global,Math)</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>集合引用类型：<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Object</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Array</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">定型数组</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Map</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">WeakMap</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Set</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">WeakSet</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr></table></figure><h3 id=\"3数据类型的检测\"><a class=\"anchor\" href=\"#3数据类型的检测\">#</a> 3：数据类型的检测</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">为什么要有数据类型的检测?</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>只有 <span class=\"token number\">7</span> 种数据类型似乎不足以表示全部数据。但 ECMAScript 的数据类型很灵活，一种数据类型可以当作多种数据类型来使用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">有哪些检测方法?</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">typeof</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">instanceof</span><span class=\"token punctuation\">(</span>主要用于判断是那种对象类型<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token function\">constructor</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">1</span>：在<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">JavaScript</span><span class=\"token template-punctuation string\">`</span></span>里使用<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">typeof</span><span class=\"token template-punctuation string\">`</span></span>判断数据类型，即：<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">number</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">string</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">undefined</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">boolean</span><span class=\"token template-punctuation string\">`</span></span>。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">2</span>：对于<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">null</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">array</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">function</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">object</span><span class=\"token template-punctuation string\">`</span></span>来说，使用<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">typeof</span><span class=\"token template-punctuation string\">`</span></span>都会统一返回<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">object</span><span class=\"token template-punctuation string\">`</span></span>字符串。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">3</span>：要想区分对象、数组、函数、单纯使用<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">typeof</span><span class=\"token template-punctuation string\">`</span></span>是不行的。在<span class=\"token constant\">JS</span>中，可以通过<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Object.prototype.toString.call()</span><span class=\"token template-punctuation string\">`</span></span>方法，判断某个对象之属于哪种内置类型。分为<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">null</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">string</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">boolean</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">number</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">undefined</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">array</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">function</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">object</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">date</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">math</span><span class=\"token template-punctuation string\">`</span></span>。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">4</span>：constructor 本来是用于标识对象类型的。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">5</span>：一般认为 <span class=\"token keyword\">instanceof</span> 操作符是确定对象类型 更可靠的方式。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">let</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">)</span>   <span class=\"token comment\">//object</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span> <span class=\"token comment\">//ƒ Object() &#123; [native code] &#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [object Number]</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [object Object]</span></pre></td></tr></table></figure><h2 id=\"二es6新增的特性\"><a class=\"anchor\" href=\"#二es6新增的特性\">#</a> 二：es6 新增的特性</h2>\n<h3 id=\"1变量-let\"><a class=\"anchor\" href=\"#1变量-let\">#</a> 1：变量 let</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>只能在块作用域里面生效</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> \t\t<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Matt'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> \t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Matt </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Matt</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre> \t\t<span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre> \t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 26 </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError: age 没有定义</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">2.</span>不能重复定义同一个变量</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">var</span> name<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">var</span> name<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">let</span> age<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">let</span> age<span class=\"token punctuation\">;</span> <span class=\"token comment\">// SyntaxError；标识符 age 已经声明过了</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token number\">3.</span>暂时性死区</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">//name 会被提升</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined </span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Matt'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">//age 不会被提升</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError：age 没有定义</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token number\">4.</span>全局声明</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// 与 var 关键字不同，使用 let 在全局作用域中声明的变量不会成为 window 对象的属性</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Matt'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Matt' </span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token number\">5</span><span class=\"token punctuation\">.</span>for 循环中的 <span class=\"token keyword\">let</span>声明</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">// 在 let 出现之前，for 循环定义的迭代变量会渗透到循环体外部：</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"42\"></td><td><pre> \t\t\t<span class=\"token comment\">// 循环逻辑 </span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">// 改成使用 let 之后，这个问题就消失了，因为迭代变量的作用域仅限于 for 循环块内部：</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"48\"></td><td><pre> \t\t\t<span class=\"token comment\">// 循环逻辑</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError: i 没有定义</span></pre></td></tr></table></figure><h3 id=\"2变量-const\"><a class=\"anchor\" href=\"#2变量-const\">#</a> 2：变量 const</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>声明变量时必须同时初始化变量，如果是常量且不能修改<span class=\"token punctuation\">,</span>如果是对象则可以修改</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span>不允许重复声明</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3.</span>声明的作用域也是块</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4.</span>不能用 <span class=\"token keyword\">const</span> 来声明迭代变量（因为迭代变量会自增）</pre></td></tr></table></figure><h3 id=\"3解构赋值\"><a class=\"anchor\" href=\"#3解构赋值\">#</a> 3：解构赋值</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>分为数组解构和对象解构，项目中从接口获取的数据可以解构为自己需要的数据，也常用于交换变量值</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span>这里面引入了rest参数，用来获取函数的多余参数，这样就不需要使用arguments对象。</pre></td></tr></table></figure><h3 id=\"4模板字符串主要是针对变量\"><a class=\"anchor\" href=\"#4模板字符串主要是针对变量\">#</a> 4：模板字符串 (主要是针对变量)</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'list'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">let</span> info <span class=\"token operator\">=</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">let</span> m <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">i am </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>info<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"5数组新增的方法\"><a class=\"anchor\" href=\"#5数组新增的方法\">#</a> 5：数组新增的方法</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">.</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：遍历数组元素，用于将类数组结构转换为数组实例</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">.</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：用于将一组参数转换为数组实例</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">.</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：替换元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">.</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：返回一个数组，返回的是数组的下标</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">5</span><span class=\"token punctuation\">.</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：返回一个数组，返回的是数组中的值</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">6</span><span class=\"token punctuation\">.</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：返回下标和值</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">7</span><span class=\"token punctuation\">.</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">copyWithin</span><span class=\"token punctuation\">(</span>起始位置<span class=\"token punctuation\">,</span>从第几个数据读取<span class=\"token punctuation\">,</span>截止位置<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">8</span><span class=\"token punctuation\">.</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：找出第一个符合条件的数组成员</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">9</span><span class=\"token punctuation\">.</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：找出第一个符合条件的数组成员的下标</pre></td></tr></table></figure><h3 id=\"6字符串新增的方法\"><a class=\"anchor\" href=\"#6字符串新增的方法\">#</a> 6：字符串新增的方法</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>：是否包含value值，是的话返回<span class=\"token boolean\">true</span></pre></td></tr></table></figure><h3 id=\"7函数新增的方法\"><a class=\"anchor\" href=\"#7函数新增的方法\">#</a> 7：函数新增的方法</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>扩展运算符：…<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">//1,2,3 把数组拆分成了三个值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span>箭头函数：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>箭头函数是普通函数的简写，可以更优雅的定义一个函数，和普通函数相比，有以下几点差异：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>（<span class=\"token number\">1</span>）函数体内的 <span class=\"token keyword\">this</span> 对象，就是定义时所在的对象，而不是使用时所在的对象。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>（<span class=\"token number\">2</span>）不可以使用 arguments 对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>（<span class=\"token number\">3</span>）不可以使用 <span class=\"token keyword\">yield</span> 命令，因此箭头函数不能用作 Generator 函数。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>（<span class=\"token number\">4</span>）不可以使用 <span class=\"token keyword\">new</span> 命令，因为：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>没有自己的 <span class=\"token keyword\">this</span>，无法调用 call，apply。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>没有 prototype 属性 ，而 <span class=\"token keyword\">new</span> 命令在执行时需要将构造函数的 prototype 赋值给新的对象的 proto</pre></td></tr></table></figure><h3 id=\"8对象新增的方法\"><a class=\"anchor\" href=\"#8对象新增的方法\">#</a> 8：对象新增的方法</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">,</span>value2<span class=\"token punctuation\">)</span>：判断两个参数是否相等</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">,</span>value2<span class=\"token punctuation\">)</span>：浅拷贝，拷贝出来的结果是 <span class=\"token punctuation\">[</span>value1<span class=\"token punctuation\">,</span>value2<span class=\"token punctuation\">]</span>（value1和value2都是对象）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3.</span>扩展运算符：<span class=\"token punctuation\">&#123;</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>…c<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span>’a’<span class=\"token punctuation\">,</span><span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span>’b’<span class=\"token punctuation\">,</span><span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span>’c’<span class=\"token punctuation\">,</span><span class=\"token literal-property property\">d</span><span class=\"token operator\">:</span>’d’<span class=\"token punctuation\">&#125;</span>→c<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span>’c’<span class=\"token punctuation\">,</span><span class=\"token literal-property property\">d</span><span class=\"token operator\">:</span>’d’<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">.</span>for…<span class=\"token keyword\">in</span>循环遍历对象自身的和继承的可枚举属性</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">5</span><span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>：返回一个数组，返回的是数组成员的下标</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">6</span><span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertySymbols</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>：返回的是Symbol定义的值</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">7</span><span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">ownKeys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>：可以拿到所有的值，包括Symbol定义的和非Symbol定义的</pre></td></tr></table></figure><h3 id=\"9symbol用法\"><a class=\"anchor\" href=\"#9symbol用法\">#</a> 9：Symbol 用法</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>这是<span class=\"token constant\">ES6</span>新增的数据类型，表示独一无二的值</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> a1 <span class=\"token operator\">=</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span>‘a1’<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 后面再对 a1 赋值也是无效的，a1 的值依旧是’a1’</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"10set-map数据结构\"><a class=\"anchor\" href=\"#10set-map数据结构\">#</a> 10：Set-Map 数据结构</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">.</span>Set本身是一个构造函数，类似于数组，但是里面的值都是唯一的，没有重复的值，所以可以用Set去重</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">let</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">let</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//[1,2,6,5]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 接下里介绍几个方法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'delete'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'clear'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'has'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">let</span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tlist<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 判断是否有该值</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tlist<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//、删除该值</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tlist<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 清空</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">.</span>Map数据结构类似于对象，也是键值对的集合，但是键的范围不局限与字符</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tmap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//456</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"11proxy\"><a class=\"anchor\" href=\"#11proxy\">#</a> 11：Proxy</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">.</span>Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">.</span>Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>用在这里表示由它来“代理”某些操作，可以译为“代理器”。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>优点：通过代理，条件与对象本身隔绝，后续代码维护、健壮都很强</pre></td></tr></table></figure><h3 id=\"12class的基本用法\"><a class=\"anchor\" href=\"#12class的基本用法\">#</a> 12：Class 的基本用法</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">.</span>class其实是对<span class=\"token keyword\">function</span>的简化 <span class=\"token keyword\">class</span>的声明</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 基本定义和生成实例</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xiaomao'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 继承</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 子类怎么去覆盖父类，this 一定要放在 super 后面</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'child'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 若 super ()，则所有参数都是父类的</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">'child'</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 子类增加的属性</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"13promise\"><a class=\"anchor\" href=\"#13promise\">#</a> 13：Promise</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">promise实际上解决jquery的ajax回调地域</span><span class=\"token punctuation\">(</span>解决层层嵌套<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>只是异步编程的一种解决方案</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'...'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"1什么是promise\"><a class=\"anchor\" href=\"#1什么是promise\">#</a> 1：什么是 promise</h5>\n<p>Promise 是异步编程的一种解决方案： 从语法上讲，promise 是一个对象，从它可以获取异步操作的消息；从本意上讲，它是承诺，承诺它过一段时间会给你一个结果。 promise 有三种状态：<strong>pending (等待态)，fulfiled (成功态)，rejected (失败态)</strong>；状态一旦改变，就不会再变。创造 promise 实例后，它会立即执行</p>\n<h5 id=\"2promise用来解决什么问题\"><a class=\"anchor\" href=\"#2promise用来解决什么问题\">#</a> 2：promise 用来解决什么问题</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 当参数 a 大于 10 且参数 fn2 是一个方法时 执行 fn2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token keyword\">function</span> <span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> fn2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> <span class=\"token number\">10</span> <span class=\"token operator\">&amp;&amp;</span> fn2 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is callback'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>一般来说我们会碰到的回调嵌套都不会很多，一般就一到两级，但是某些情况下，回调嵌套很多时，代码就会非常繁琐，会给我们的编程带来很多的麻烦，这种情况俗称——回调地狱。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>主要用来解决：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">1</span>：回调地狱，代码难以维护，常常第一个的函数输出的是第二个函数的输入的这种现象</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">2</span>：promise可以支持多个并发的请求，获取并发请求中的请求</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">3</span>：promise可以解决异步问题，本身不能说promise是异步的</pre></td></tr></table></figure><h5 id=\"3promise的基础用法\"><a class=\"anchor\" href=\"#3promise的基础用法\">#</a> 3：promise 的基础用法</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>： Promise是一个构造函数，自己身上有all、reject、resolve这几个眼熟的方法，原型上有then、catch等同样很眼熟的方法。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>          <span class=\"token comment\">// 执行异步操作</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>              console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'执行完成'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>              <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我是成功！！'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>上段代码会直接执行 <span class=\"token number\">2</span>秒后输出 <span class=\"token string\">'执行完成'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Promise的构造函数接收一个参数：函数，并且这个函数需要传入两个参数：</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>resolve：异步操作执行成功后的回调函数</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>reject：异步操作执行失败后的回调函数</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">2</span>：then 链式操作的用法  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>从表面上看，Promise只是能够简化层层回调的写法，而实质上，Promise的精髓是“状态”，用维护状态、传递状态的方式来使得回调函数能够及时调用，它比传递callback函数要简单、灵活的多。所以使用Promise的正确场景是这样的：</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token number\">3</span>：reject的用法 </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>把Promise的状态置为rejected，这样我们在then中就能捕捉到，然后执行“失败”情况的回调。看下面的代码。</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token comment\">// 执行异步操作</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>              <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 生成 1 - 10 的随机数</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>               <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                   <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>               <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                   <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数字是大于5的'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>               <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resolve'</span><span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rejeced'</span><span class=\"token punctuation\">,</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>产生以一个随机数，如果大于<span class=\"token number\">5</span>就会使用reject  <span class=\"token function\">错误</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>输出<span class=\"token string\">'数字是大于5'</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token number\">4</span><span class=\"token function\">：catch的用法</span> <span class=\"token punctuation\">(</span>前面的代码有错误可以报出来，不要promise是无法执行下来的<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>我们知道Promise对象除了then方法，还有一个catch方法，它是做什么用的呢？其实它和then的第二个参数一样，用来指定reject的回调。用法是这样：</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          <span class=\"token comment\">// 执行异步操作</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>          <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>              <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 生成 1 - 10 的随机数</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>               <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                   <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>               <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                   <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数字是大于5的'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>               <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>      p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resolve'</span><span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 假设随机数是 3  那么输出 resolve 为 3</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>aaaa<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//aaaa 是没有被定义的</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rejeced'</span><span class=\"token punctuation\">,</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rejeced'</span><span class=\"token punctuation\">,</span>err<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//  这里报错 ： rejeced ReferenceError: aaaa is not defined</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>在resolve的回调中，我们console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>somedata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>而aaaa这个变量是没有被定义的。如果我们不用Promise，代码运行到这里就直接在控制台报错了，不往下运行了。</pre></td></tr></table></figure><h5 id=\"4all的用法\"><a class=\"anchor\" href=\"#4all的用法\">#</a> 4：all 的用法</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>all的用法：谁跑的慢，以谁为准执行回调。all接收一个数组参数，里面的值最终都算返回Promise对象</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Promise的all方法提供了并行执行异步操作的能力，并且在所有异步操作执行完后才执行回调。看下面的例子：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">let</span> promise1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 生成 1-10 的随机数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数字太大了1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">let</span> promise2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 生成 1-10 的随机数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数字太大了2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">let</span> promise3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 生成 1-10 的随机数</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数字太大了3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>promise1<span class=\"token punctuation\">,</span> promise2<span class=\"token punctuation\">,</span> promise3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token comment\">// 三个都成功则成功 res 返回 [p1,p2,p3] 结果的数组</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token comment\">// 只要有失败，则失败  err 返回在哪个 promise 失败的回调</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>有了all，你就可以并行执行多个异步操作，并且在一个回调中处理所有的返回数据，是不是很酷？有一个场景是很适合用这个的，一些游戏类的素材比较多的应用，打开网页时，预先加载需要用到的各种资源如图片、flash以及各种静态文件。所有的都加载完后，我们再进行页面的初始化。</pre></td></tr></table></figure><h5 id=\"5race的用法\"><a class=\"anchor\" href=\"#5race的用法\">#</a> 5：race 的用法</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token operator\">:</span>race的用法：谁跑的快，以谁为准执行回调</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span>：race的使用场景：比如我们可以用race给某个异步请求设置超时时间，并且在超时后执行相应的操作，代码如下</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 请求某个图片资源</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">requestImg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">var</span> img <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                img<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'图片的路径'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 延时函数，用于给请求计时</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'图片请求超时'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">requestImg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>requestImg函数会异步请求一张图片，我把地址写为<span class=\"token string\">\"图片的路径\"</span>，所以肯定是无法成功请求到的。timeout函数是一个延时<span class=\"token number\">5</span>秒的异步操作。我们把这两个返回Promise对象的函数放进race，于是他俩就会赛跑，如果<span class=\"token number\">5</span>秒之内图片请求成功了，那么遍进入then方法，执行正常的流程。如果<span class=\"token number\">5</span>秒钟图片还未成功返回，那么timeout就跑赢了，则进入catch，报出“图片请求超时”的信息。</pre></td></tr></table></figure><h5 id=\"6手写一个promise\"><a class=\"anchor\" href=\"#6手写一个promise\">#</a> 6：手写一个 promise</h5>\n<h5 id=\"7promise面试题\"><a class=\"anchor\" href=\"#7promise面试题\">#</a> 7：promise 面试题</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token literal-property property\">输出</span><span class=\"token operator\">:</span>  <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">4</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token literal-property property\">解释</span><span class=\"token operator\">:</span>  Promise构造函数是同步执行的<span class=\"token punctuation\">,</span>promsie<span class=\"token punctuation\">.</span>then 中的函数是异步执行的</pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">2.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> promise1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'success'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> promise2 <span class=\"token operator\">=</span> promise1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error!!!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise1'</span><span class=\"token punctuation\">,</span> promise1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise2'</span><span class=\"token punctuation\">,</span> promise2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise1'</span><span class=\"token punctuation\">,</span> promise1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise2'</span><span class=\"token punctuation\">,</span> promise2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token literal-property property\">输出</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>promise1 Promise <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">&lt;</span>pending<span class=\"token operator\">></span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>promise2 Promise <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">&lt;</span>pending<span class=\"token operator\">></span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span><span class=\"token number\">50928</span><span class=\"token punctuation\">)</span> UnhandledPromiseRejectionWarning<span class=\"token operator\">:</span> Unhandled promise <span class=\"token function\">rejection</span> <span class=\"token punctuation\">(</span>rejection id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Error<span class=\"token operator\">:</span> error<span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span><span class=\"token number\">50928</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">DEP0018</span><span class=\"token punctuation\">]</span> DeprecationWarning<span class=\"token operator\">:</span> Unhandled promise rejections are deprecated<span class=\"token punctuation\">.</span> In the future<span class=\"token punctuation\">,</span> promise rejections that are not handled will terminate the Node<span class=\"token punctuation\">.</span>js process <span class=\"token keyword\">with</span> a non<span class=\"token operator\">-</span>zero exit code<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>promise1 Promise <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">'success'</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>promise2 Promise <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token operator\">&lt;</span>rejected<span class=\"token operator\">></span> Error<span class=\"token operator\">:</span> error<span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    at promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    at <span class=\"token operator\">&lt;</span>anonymous<span class=\"token operator\">></span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>解释：promise 有 <span class=\"token number\">3</span> 种状态：pending、fulfilled 或 rejected。状态改变只能是 pending<span class=\"token operator\">-</span><span class=\"token operator\">></span>fulfilled 或者 pending<span class=\"token operator\">-</span><span class=\"token operator\">></span>rejected，状态一旦改变则不能再变。上面 promise2 并不是 promise1，而是返回的一个新的 Promise 实例。</pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">3.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'success1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'success2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>promise</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'then: '</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'catch: '</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token literal-property property\">输出</span><span class=\"token operator\">:</span> success1</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>解释：构造函数中的 resolve 或 reject 只有第一次执行有效，多次调用没有任何作用，呼应代码二结论：promise 状态一旦改变则不能再变。</pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">4.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token literal-property property\">输出</span><span class=\"token operator\">:</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>解释：promise 可以链式调用。提起链式调用我们通常会想到通过 <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span> 实现，不过 Promise 并不是这样实现的。promise 每次调用 <span class=\"token punctuation\">.</span>then 或者 <span class=\"token punctuation\">.</span>catch 都会返回一个新的 promise，从而实现了链式调用。</pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">5.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'once'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'success'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token literal-property property\">输出</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>once</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>success <span class=\"token number\">1005</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>success <span class=\"token number\">1007</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>解释：promise 的 <span class=\"token punctuation\">.</span>then 或者 <span class=\"token punctuation\">.</span>catch 可以被调用多次，但这里 Promise 构造函数只执行一次。或者说 promise 内部状态一经改变，并且有了一个值，那么后续每次调用 <span class=\"token punctuation\">.</span>then 或者 <span class=\"token punctuation\">.</span>catch 都会直接拿到该值</pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">6.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error!!!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'then: '</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'catch: '</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token literal-property property\">输出</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token literal-property property\">then</span><span class=\"token operator\">:</span> Error<span class=\"token operator\">:</span> error<span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    at Promise<span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">.</span><span class=\"token function\">then</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    at <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                             </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>解释：<span class=\"token punctuation\">.</span>then 或者 <span class=\"token punctuation\">.</span>catch 中 <span class=\"token keyword\">return</span> 一个 error 对象并不会抛出错误，所以不会被后续的 <span class=\"token punctuation\">.</span>catch 捕获，需要改成其中一种：</pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">7.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> promise</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>promise<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token literal-property property\">输出</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token literal-property property\">TypeError</span><span class=\"token operator\">:</span> Chaining cycle detected <span class=\"token keyword\">for</span> promise #<span class=\"token operator\">&lt;</span>Promise<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    at <span class=\"token operator\">&lt;</span>anonymous<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    at process<span class=\"token punctuation\">.</span><span class=\"token function\">_tickCallback</span> <span class=\"token punctuation\">(</span>internal<span class=\"token operator\">/</span>process<span class=\"token operator\">/</span>next_tick<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">188</span><span class=\"token operator\">:</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    at Function<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">.</span><span class=\"token function\">runMain</span> <span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">667</span><span class=\"token operator\">:</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    at <span class=\"token function\">startup</span> <span class=\"token punctuation\">(</span>bootstrap_node<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">187</span><span class=\"token operator\">:</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    at bootstrap_node<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">607</span><span class=\"token operator\">:</span><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>解释：<span class=\"token punctuation\">.</span>then 或 <span class=\"token punctuation\">.</span>catch 返回的值不能是 promise 本身，否则会造成死循环。类似于：</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>process<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">tick</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tick'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  process<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span>tick<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">8.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token literal-property property\">输出</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>解释：<span class=\"token punctuation\">.</span>then 或者 <span class=\"token punctuation\">.</span>catch 的参数期望是函数，传入非函数则会发生值穿透。</pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">9.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">success</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fail1</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fail1: '</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">fail2</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fail2: '</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token literal-property property\">输出</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token literal-property property\">fail2</span><span class=\"token operator\">:</span> Error<span class=\"token operator\">:</span> error</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    at <span class=\"token function\">success</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    at <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>解释：<span class=\"token punctuation\">.</span>then 可以接收两个参数，第一个是处理成功的函数，第二个是处理错误的函数。<span class=\"token punctuation\">.</span>catch 是 <span class=\"token punctuation\">.</span>then 第二个参数的简便写法，但是它们用法上有一点需要注意：<span class=\"token punctuation\">.</span>then 的第二个处理错误的函数捕获不了第一个处理成功的函数抛出的错误，而后续的 <span class=\"token punctuation\">.</span>catch 可以捕获之前的错误。当然以下代码也可以：</pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">10.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>process<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nextTick'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'then'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'setImmediate'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token literal-property property\">输出</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>end</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>nextTick</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>then</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>setImmediate</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>解释：process<span class=\"token punctuation\">.</span>nextTick 和 promise<span class=\"token punctuation\">.</span>then 都属于 microtask，而 setImmediate 属于 macrotask，在事件循环的 check 阶段执行。事件循环的每个阶段（macrotask）之间都会执行 microtask，事件循环的开始会先执行一次 microtask。</pre></td></tr></table></figure><h3 id=\"14iterator和forof循环\"><a class=\"anchor\" href=\"#14iterator和forof循环\">#</a> 14：Iterator 和 for…of 循环</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>遍历器（Iterator）就是这样一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Iterator 的作用有三个：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>一是为各种数据结构，提供一个统一的、简便的访问接口；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>二是使得数据结构的成员能够按某种次序排列；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>三是 <span class=\"token constant\">ES6</span> 创造了一种新的遍历命令<span class=\"token keyword\">for</span>…<span class=\"token keyword\">of</span>循环，Iterator 接口主要供<span class=\"token keyword\">for</span>…<span class=\"token keyword\">of</span>消费</pre></td></tr></table></figure><h3 id=\"15generator\"><a class=\"anchor\" href=\"#15generator\">#</a> 15：Generator</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Generator 函数是 <span class=\"token constant\">ES6</span> 提供的一种异步编程解决方案，语法行为与传统函数完全不同。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Generator 函数有多种理解角度。语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>形式上，Generator 函数是一个普通函数，但是有两个特征。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>一是，<span class=\"token keyword\">function</span>关键字与函数名之间有一个星号；</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>二是，函数体内部使用<span class=\"token keyword\">yield</span>表达式，定义不同的内部状态（<span class=\"token keyword\">yield</span>在英语里的意思就是“产出”</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">helloWorldGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">yield</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">yield</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token string\">'ending'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">var</span> hw <span class=\"token operator\">=</span> <span class=\"token function\">helloWorldGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>上面代码定义了一个 Generator 函数helloWorldGenerator，它内部有两个<span class=\"token keyword\">yield</span>表达式（hello和world），即该函数有三个状态：hello，world 和 <span class=\"token keyword\">return</span> 语句（结束执行）。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>然后，Generator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>不同的是，调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象，</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>也就是前面介绍的遍历器对象（Iterator Object）。</pre></td></tr></table></figure><h3 id=\"16module体系\"><a class=\"anchor\" href=\"#16module体系\">#</a> 16：Module 体系</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>模块功能主要由两个命令构成：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span>和<span class=\"token keyword\">import</span>。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span>命令用于规定模块的对外接口，</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span>命令用于输入其他模块提供的功能。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span>命令，为模块指定默认输出。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> animal <span class=\"token keyword\">from</span> <span class=\"token string\">'./content'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token string\">'a cat'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>say<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./content'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> content <span class=\"token keyword\">from</span> <span class=\"token string\">'./content'</span></pre></td></tr></table></figure><h2 id=\"三es7新增的特性\"><a class=\"anchor\" href=\"#三es7新增的特性\">#</a> 三：es7 新增的特性</h2>\n<h3 id=\"1数组新增的方法\"><a class=\"anchor\" href=\"#1数组新增的方法\">#</a> 1: 数组新增的方法</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">.</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>：是否包含value值，是的话返回<span class=\"token boolean\">true</span></pre></td></tr></table></figure><h1 id=\"十四防抖和节流\"><a class=\"anchor\" href=\"#十四防抖和节流\">#</a> 十四：防抖和节流</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">防抖的定义</span><span class=\"token operator\">:</span>任务频繁触发的情况下，只有触发的间隔超过指定间隔，任务才执行。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token literal-property property\">案例</span><span class=\"token operator\">:</span>方式用户多次点击按钮，监听滚动条滚动<span class=\"token punctuation\">,</span>操纵一个小人让他有跳跃的动作，你狂点鼠标，小人狂跳，这就是最直观的抖动现象。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function-variable function\">代码实现</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">let</span> timer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token keyword\">let</span> args <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">节流的定义</span><span class=\"token operator\">:</span>指定时间间隔只执行一次，执行频率不受操作频率影响，但会把所有的都执行完。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token literal-property property\">案例</span><span class=\"token operator\">:</span>节流就像排队，比如我们在车站候车，当听到检票进站的通知，不论你有多紧急，跑得多快，还是得跟着排队，一个个地过闸机口，你的通过速度不可能比闸机口开关的速度更快了。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function-variable function\">代码实现</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "前端开发",
                "Javascript",
                "Javascript"
            ]
        },
        {
            "id": "http://yoursite.com/front-end/css%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AF%87/",
            "url": "http://yoursite.com/front-end/css%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AF%87/",
            "title": "css性能优化篇",
            "date_published": "2021-06-25T08:43:00.000Z",
            "content_html": "<h1 id=\"加载性能\"><a class=\"anchor\" href=\"#加载性能\">#</a> 加载性能</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>（1）合并和压缩 CSS 文件以减少文件大小。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>（2）css单一样式：当需要下边距和左边距的时候，很多时候选择:margin:top 0 bottom 0;但margin-bottom:bottom;margin-left:left;执行的效率更高。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>（3）减少使用@import,而建议使用link，因为后者在页面加载时一起加载，前者是等待页面加载完成之后再进行加载。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>（4）延迟或异步加载 CSS 文件，特别是对于首屏渲染来说。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>（5）使用 CDN（内容分发网络）来加速 CSS 文件的加载。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>（6）利用浏览器缓存机制，设置适当的缓存头信息。</pre></td></tr></table></figure><h1 id=\"选择器性能\"><a class=\"anchor\" href=\"#选择器性能\">#</a> 选择器性能</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>（1）关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）。CSS选择符是从右到左进行匹配的。当使用后代选择器的时候，浏览器会遍历所有子元素来确定是否是指定的元素等等；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>（2）如果规则拥有ID选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们了）。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>（3）避免使用通配规则，如*&#123;&#125;计算次数惊人！只对需要用到的元素进行选择。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>（4）尽量少的去对标签进行选择，而是用class。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>（5）尽量少的去使用后代选择器，降低选择器的权重值。后代选择器的开销是最高的，尽量将选择器的深度降到最低，最高不要超过三层，更多的使用类来关联每一个标签元素。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>（6）了解哪些属性是可以通过继承而来的，然后避免对这些属性重复指定规则。</pre></td></tr></table></figure><h1 id=\"渲染性能\"><a class=\"anchor\" href=\"#渲染性能\">#</a> 渲染性能</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>（1）慎重使用高性能属性：浮动、定位。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>（2）最小化重绘和重排操作，尽量在一次渲染中完成所有样式的修改。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>（3）去除空规则：｛｝。空规则的产生原因一般来说是为了预留样式。去除这些空规则无疑能减少css文档体积。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>（4）属性值为0时，不加单位。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>（5）属性值为浮动小数0.**，可以省略小数点之前的0。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>（6）标准化各种浏览器前缀：带浏览器前缀的在前。标准属性在后。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>（7）不使用@import前缀，它会影响css的加载速度。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>（8）选择器优化嵌套，尽量避免层级过深。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>（9）css雪碧图，同一页面相近部分的小图标，方便使用，减少页面的请求次数，但是同时图片本身会变大，使用时，优劣考虑清楚，再使用。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>（10）正确使用display的属性，由于display的作用，某些样式组合会无效，徒增样式体积的同时也影响解析性能。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>（11）不滥用web字体。对于中文网站来说WebFonts可能很陌生，国外却很流行。web fonts通常体积庞大，而且一些浏览器在下载web fonts时会阻塞页面渲染损伤性能。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>（12）使用硬件加速特性（如 transform 和 opacity）来提高动画的性能。</pre></td></tr></table></figure><h1 id=\"可维护性-健壮性\"><a class=\"anchor\" href=\"#可维护性-健壮性\">#</a> 可维护性、健壮性</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>（1）将具有相同属性的样式抽离出来，整合并通过class在页面中进行使用，提高css的可维护性。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>（2）样式与内容分离：将css代码定义到外部css中。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>（3）使用模块化的 CSS 结构，将样式分成独立的模块或组件。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>（4）使用注释和良好的命名规范，使样式易于理解和维护。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>（5）遵循代码风格指南和最佳实践，减少冗余和不必要的样式。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>（6）使用 CSS 预处理器（如 Sass 或 Less）来提高样式代码的可维护性和重用性。</pre></td></tr></table></figure>",
            "tags": [
                "前端开发",
                "css",
                "css"
            ]
        },
        {
            "id": "http://yoursite.com/front-end/html+css%E9%9D%A2%E8%AF%95/",
            "url": "http://yoursite.com/front-end/html+css%E9%9D%A2%E8%AF%95/",
            "title": "css面试",
            "date_published": "2021-06-25T08:43:00.000Z",
            "content_html": "<h1 id=\"bfc\"><a class=\"anchor\" href=\"#bfc\">#</a> BFC</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BFC 即 Block Formatting Contexts (块级格式化上下文)，它属于普通流，即：元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>只要元素满足下面任一条件即可触发 BFC 特性</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>body 根元素</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>浮动元素：float 除 none 以外的值</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>绝对定位元素：position (absolute、fixed)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>display 为 inline-block、table-cells、flex</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>overflow 除了 visible 以外的值 (hidden、auto、scroll)</pre></td></tr></table></figure><h1 id=\"多种方式实现同心圆\"><a class=\"anchor\" href=\"#多种方式实现同心圆\">#</a> 多种方式实现同心圆</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1.  2个view 相对定位 + 绝对定位</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>2.  2个view  flex布局</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>3.  1个view  使用伪元素</pre></td></tr></table></figure><h1 id=\"介绍一下-css-的盒子模型\"><a class=\"anchor\" href=\"#介绍一下-css-的盒子模型\">#</a> 介绍一下 CSS 的盒子模型？</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>有两种， IE 盒子模型、W3C 盒子模型；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>区 别： IE 的 content 部分把 border 和 padding 计算了进去;</pre></td></tr></table></figure><h1 id=\"css-选择器优先级\"><a class=\"anchor\" href=\"#css-选择器优先级\">#</a> css 选择器优先级？</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>!important > 行内样式（比重1000）> ID 选择器（比重100） > 类选择器（比重10） > 标签（比重1） > 通配符 > 继承 > 浏览器默认属性</pre></td></tr></table></figure><h1 id=\"垂直居中几种方式\"><a class=\"anchor\" href=\"#垂直居中几种方式\">#</a> 垂直居中几种方式？</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1.单行文本: line-height = height</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>2.图片: vertical-align: middle;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>3.absolute 定位: top: 50%;left: 50%;transform: translate(-50%, -50%);</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>4.flex:display:flex;justify-content: center;  align-items: center</pre></td></tr></table></figure><h1 id=\"简明说一下-css-link-与-import-的区别和用法\"><a class=\"anchor\" href=\"#简明说一下-css-link-与-import-的区别和用法\">#</a> 简明说一下 CSS link 与 @import 的区别和用法？</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>link 是 XHTML 标签，除了加载CSS外，还可以定义 RSS 等其他事务；@import 属于 CSS 范畴，只能加载 CSS。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>link 引用 CSS 时，在页面载入时同时加载；@import 需要页面网页完全载入以后加载。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>link 是 XHTML 标签，无兼容问题；@import 是在 CSS2.1 提出的，低版本的浏览器不支持。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>link 支持使用 Javascript 控制 DOM 去改变样式；而@import不支持。</pre></td></tr></table></figure><h1 id=\"rgba和opacity的透明效果有什么不同\"><a class=\"anchor\" href=\"#rgba和opacity的透明效果有什么不同\">#</a> rgba 和 opacity 的透明效果有什么不同？</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>opacity 会继承父元素的 opacity 属性，而 RGBA 设置的元素的后代元素不会继承不透明属性。</pre></td></tr></table></figure><h1 id=\"displaynone和visibilityhidden的区别\"><a class=\"anchor\" href=\"#displaynone和visibilityhidden的区别\">#</a> display:none 和 visibility:hidden 的区别？</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>display:none 隐藏对应的元素，在文档布局中不再给它分配空间，它各边的元素会合拢，就当他从来不存在。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>visibility:hidden 隐藏对应的元素，但是在文档布局中仍保留原来的空间。</pre></td></tr></table></figure><h1 id=\"position的值-relative和absolute分别是相对于谁进行定位的\"><a class=\"anchor\" href=\"#position的值-relative和absolute分别是相对于谁进行定位的\">#</a> position 的值， relative 和 absolute 分别是相对于谁进行定位的？</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>relative:相对定位，相对于自己本身在正常文档流中的位置进行定位。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>absolute:生成绝对定位，相对于最近一级定位不为static的父元素进行定位。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fixed: （老版本IE不支持）生成绝对定位，相对于浏览器窗口或者frame进行定位。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>static:默认值，没有定位，元素出现在正常的文档流中。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>sticky:生成粘性定位的元素，容器的位置根据正常文档流计算得出。</pre></td></tr></table></figure><h1 id=\"画一条05px的直线\"><a class=\"anchor\" href=\"#画一条05px的直线\">#</a> 画一条 0.5px 的直线？</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>考查的是css3的transform</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>height: 1px;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>transform: scale(0.5);</pre></td></tr></table></figure><h1 id=\"calc-support-media各自的含义及用法\"><a class=\"anchor\" href=\"#calc-support-media各自的含义及用法\">#</a> calc, support, media 各自的含义及用法？</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>@support 主要是用于检测浏览器是否支持CSS的某个属性，其实就是条件判断，如果支持某个属性，你可以写一套样式，如果不支持某个属性，你也可以提供另外一套样式作为替补。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>calc() 函数用于动态计算长度值。 calc()函数支持 “+”, “-”, “*”, “/” 运算；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>@media 查询，你可以针对不同的媒体类型定义不同的样式。</pre></td></tr></table></figure><h1 id=\"1rem-1em-1vh-1px各自代表的含义\"><a class=\"anchor\" href=\"#1rem-1em-1vh-1px各自代表的含义\">#</a> 1rem、1em、1vh、1px 各自代表的含义？</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1.rem</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>rem是全部的长度都相对于根元素元素。通常做法是给html元素设置一个字体大小，然后其他元素的长度单位就为rem。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>2. em</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>子元素字体大小的em是相对于父元素字体大小</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>元素的width/height/padding/margin用em的话是相对于该元素的font-size</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>vw/vh</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>全称是 Viewport Width 和 Viewport Height，视窗的宽度和高度，相当于 屏幕宽度和高度的 1%，不过，处理宽度的时候%单位更合适，处理高度的 话 vh 单位更好。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>3. px</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>px像素（Pixel）。相对长度单位。像素px是相对于显示器屏幕分辨率而言的。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>一般电脑的分辨率有&#123;19201024&#125;等不同的分辨率</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>19201024 前者是屏幕宽度总共有1920个像素,后者则是高度为1024个像素</pre></td></tr></table></figure><h1 id=\"css画一个三角形\"><a class=\"anchor\" href=\"#css画一个三角形\">#</a> css 画一个三角形？</h1>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.a</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">border-width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">border-style</span><span class=\"token punctuation\">:</span> solid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">border-color</span><span class=\"token punctuation\">:</span> transparent #0099CC transparent transparent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>90deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 顺时针旋转 90°*/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&lt;div class=<span class=\"token string\">\"a\"</span>>&lt;/div></pre></td></tr></table></figure><h1 id=\"html5里面都新增了那些新特性\"><a class=\"anchor\" href=\"#html5里面都新增了那些新特性\">#</a> HTML5 里面都新增了那些新特性？</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1. HTML5新的语义标签</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>article 独立的内容。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>aside 侧边栏。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>header 头部。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>nav 导航。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>section 文档中的节。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>footer 页脚。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>2. 画布(Canvas) API</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>3. 地理(Geolocation) API</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>4. 本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>5. sessionStorage 的数据在浏览器关闭后自动删除</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>6. 新的技术webworker, websocket, Geolocation</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>7. 拖拽释放(Drag and drop) API</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>8. 音频、视频API(audio,video)</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>9. 表单控件，calendar、date、time、email、url、searc</pre></td></tr></table></figure><h1 id=\"css3-里面都新增了那些新特性\"><a class=\"anchor\" href=\"#css3-里面都新增了那些新特性\">#</a> CSS3 里面都新增了那些新特性？</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1. 发展历史：CSS于1996年发布，而CSS3是CSS的第三个主要版本，于2001年开始提出，但其功能逐渐得到实现并得以广泛支持直到近年来。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>2. 模块化：CSS3采用了模块化的方式来组织样式属性。每个模块专注于特定的功能，例如布局、动画、字体等。这使得开发人员可以根据需要选择特定的模块进行应用，而不需要引入整个CSS3规范。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>3. 新增功能：CSS3引入了许多新特性和功能，如圆角边框、阴影、渐变、过渡、动画、媒体查询、弹性盒子布局、网格布局等。这些功能扩展了网页设计师的能力，使其能够创建更丰富、更交互性的用户界面。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>4. 浏览器兼容性：传统的CSS规范在不同浏览器上的兼容性并不一致，需要使用特定的浏览器前缀进行适配。然而，CSS3的很多功能已经得到了主流浏览器的广泛支持，因此在一定程度上减少了兼容性的问题。</pre></td></tr></table></figure>",
            "tags": [
                "前端开发",
                "css",
                "css"
            ]
        },
        {
            "id": "http://yoursite.com/front-end/nodejs/",
            "url": "http://yoursite.com/front-end/nodejs/",
            "title": "Nodejs基础",
            "date_published": "2021-06-25T08:43:00.000Z",
            "content_html": "<h1 id=\"一nodejs-基础\"><a class=\"anchor\" href=\"#一nodejs-基础\">#</a> 一：nodejs 基础</h1>\n<h2 id=\"1异步\"><a class=\"anchor\" href=\"#1异步\">#</a> 1. 异步</h2>\n<h2 id=\"2io\"><a class=\"anchor\" href=\"#2io\">#</a> <span class=\"exturl\" data-url=\"aHR0cDovLzIuaW8=\">2.io</span></h2>\n<h2 id=\"3fs\"><a class=\"anchor\" href=\"#3fs\">#</a> 3.fs</h2>\n<h1 id=\"二nodeweb开发\"><a class=\"anchor\" href=\"#二nodeweb开发\">#</a> 二：nodeweb 开发</h1>\n<h2 id=\"1koa2\"><a class=\"anchor\" href=\"#1koa2\">#</a> 1.koa2</h2>\n<h2 id=\"2router\"><a class=\"anchor\" href=\"#2router\">#</a> 2.router</h2>\n<h2 id=\"3eggjs\"><a class=\"anchor\" href=\"#3eggjs\">#</a> 3.eggjs</h2>\n<h1 id=\"三鉴权\"><a class=\"anchor\" href=\"#三鉴权\">#</a> 三：鉴权</h1>\n<h2 id=\"1cookie\"><a class=\"anchor\" href=\"#1cookie\">#</a> 1.cookie</h2>\n<h2 id=\"2jwt\"><a class=\"anchor\" href=\"#2jwt\">#</a> 2.jwt</h2>\n<h2 id=\"3oauth\"><a class=\"anchor\" href=\"#3oauth\">#</a> 3.oauth</h2>\n<h1 id=\"四数据库\"><a class=\"anchor\" href=\"#四数据库\">#</a> 四：数据库</h1>\n<h2 id=\"1mysql\"><a class=\"anchor\" href=\"#1mysql\">#</a> 1.mysql</h2>\n<h2 id=\"2redis\"><a class=\"anchor\" href=\"#2redis\">#</a> 2.redis</h2>\n<h2 id=\"3mongodb\"><a class=\"anchor\" href=\"#3mongodb\">#</a> 3.mongodb</h2>\n<h1 id=\"五中间件\"><a class=\"anchor\" href=\"#五中间件\">#</a> 五：中间件</h1>\n<h1 id=\"六部署发布\"><a class=\"anchor\" href=\"#六部署发布\">#</a> 六：部署发布</h1>\n<h2 id=\"1pm2\"><a class=\"anchor\" href=\"#1pm2\">#</a> 1.PM2</h2>\n<h2 id=\"2nginx\"><a class=\"anchor\" href=\"#2nginx\">#</a> 2.nginx</h2>\n<h2 id=\"3docker\"><a class=\"anchor\" href=\"#3docker\">#</a> 3.docker</h2>\n",
            "tags": [
                "前端开发",
                "Nodejs",
                "Nodejs"
            ]
        },
        {
            "id": "http://yoursite.com/front-end/javascript%E9%9D%A2%E8%AF%95/",
            "url": "http://yoursite.com/front-end/javascript%E9%9D%A2%E8%AF%95/",
            "title": "js面试",
            "date_published": "2021-06-25T08:43:00.000Z",
            "content_html": "<h2 id=\"1-js-数据类型\"><a class=\"anchor\" href=\"#1-js-数据类型\">#</a> 1. JS 数据类型？</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>数字（Number）：表示数值，包括整数和浮点数。例如：<span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.14</span>。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span>字符串（String）：表示文本数据，用于存储和操作字符序列。字符串可以使用单引号或双引号括起来。例如：<span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"World\"</span>。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3.</span>布尔值（Boolean）：表示逻辑值，只有两个取值：<span class=\"token boolean\">true</span> 和 <span class=\"token boolean\">false</span>。布尔值常用于条件判断和逻辑运算。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">4.</span>空值（Null）：表示空值或不存在的对象。当变量被赋值为 <span class=\"token keyword\">null</span> 时，表示该变量没有任何值。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">5.</span>未定义（Undefined）：表示变量声明了但未赋值。如果一个变量没有初始化，它的值就是 <span class=\"token keyword\">undefined</span>。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">6.</span>符号（Symbol）：<span class=\"token constant\">ES6</span> 引入的新数据类型，表示独一无二的值。符号通常用作对象属性的键。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>除了这些基本数据类型，JavaScript 还提供了一种复杂类型：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">7.</span>对象（Object）：表示复合值，可包含多个键值对。键是字符串或符号，值可以是任意类型。对象是 JavaScript 中最常见的数据类型之一，例如数组、函数等都是对象。</pre></td></tr></table></figure><h2 id=\"2-判断一个值是什么类型有哪些方法\"><a class=\"anchor\" href=\"#2-判断一个值是什么类型有哪些方法\">#</a> 2. 判断一个值是什么类型有哪些方法？</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typeof</span> 操作符：<span class=\"token keyword\">typeof</span> 操作符用于检查一个值的类型。它返回一个表示该值类型的字符串。常见的返回值包括 <span class=\"token string\">\"number\"</span>、<span class=\"token string\">\"string\"</span>、<span class=\"token string\">\"boolean\"</span>、<span class=\"token string\">\"object\"</span>、<span class=\"token string\">\"function\"</span>、<span class=\"token string\">\"undefined\"</span>、<span class=\"token string\">\"symbol\"</span>。例如：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>javascript</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"number\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"string\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"boolean\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"undefined\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"object\"（注意这是一个历史遗留问题）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"symbol\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"symbol\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"object\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"object\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"function\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">instanceof</span> 操作符：<span class=\"token keyword\">instanceof</span> 操作符用于检查一个对象是否属于某个构造函数的实例。它返回一个布尔值。例如：</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>javascript</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>arr <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>arr <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true，因为 Array 是 Object 的派生类</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">var</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>date <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>date <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true，因为 Date 是 Object 的派生类</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>constructor 属性：constructor 属性是对象的内置属性，指向创建该对象的构造函数。可以通过比较对象的 constructor 属性与预期构造函数来判断对象的类型。例如：</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>javascript</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>num<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Number<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>str<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> String<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">var</span> bool <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>bool<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Boolean<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString：Object 的原型对象上具有 toString 方法，可以通过调用该方法来获取一个值的类型字符串。例如：</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>javascript</pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"[object Object]\"</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"[object Array]\"</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">var</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"[object Date]\"</span></pre></td></tr></table></figure><h2 id=\"3-null-和-undefined-的区别\"><a class=\"anchor\" href=\"#3-null-和-undefined-的区别\">#</a> 3. null 和 undefined 的区别？</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">undefined</span> 通常表示缺少预期的值或变量尚未初始化。它是一个全局对象的属性，也可以通过声明变量但不进行赋值来获得该值。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">null</span> 表示明确地指定一个变量为空值，一般用于表示对象或变量没有有效的值。它是一个关键字，不是全局对象的属性。</pre></td></tr></table></figure><h2 id=\"4-怎么判断一个变量arr的话是否为数组此题用-typeof-不行\"><a class=\"anchor\" href=\"#4-怎么判断一个变量arr的话是否为数组此题用-typeof-不行\">#</a> 4. 怎么判断一个变量 arr 的话是否为数组（此题用 typeof 不行）？</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>如果你不想使用 <span class=\"token keyword\">typeof</span> 来判断一个变量是否为数组，可以使用 Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法。这个方法会检查给定的值是否为一个数组，并返回一个布尔值。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>以下是一个示例：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>javascript</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 true</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 false</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>在上述示例中，Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法被用来检查变量 arr 是否为数组。如果 arr 是一个数组，则返回 <span class=\"token boolean\">true</span>；否则，返回 <span class=\"token boolean\">false</span>。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>如果需要兼容老版本的浏览器，可以使用以下代码来实现类似的功能：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>javascript</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'[object Array]'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 true</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 false</span></pre></td></tr></table></figure><h2 id=\"5-的区别\"><a class=\"anchor\" href=\"#5-的区别\">#</a> 5. “===”、“ ==” 的区别？</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">==</span>，当且仅当两个运算数相等时，它返回 <span class=\"token boolean\">true</span>，即不检查数据类型</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">===</span>，只有在无需类型转换运算数就相等的情况下，才返回 <span class=\"token boolean\">true</span>，需要检查数据类型</pre></td></tr></table></figure><h2 id=\"6-eval是做什么的\"><a class=\"anchor\" href=\"#6-eval是做什么的\">#</a> 6. “eval 是做什么的？</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>它的功能是把对应的字符串解析成 <span class=\"token constant\">JS</span> 代码并运行；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>应该避免使用 eval，不安全，非常耗性能（<span class=\"token number\">2</span>次，一次解析成 js 语句，一次执行）。</pre></td></tr></table></figure><h2 id=\"7-箭头函数有哪些特点\"><a class=\"anchor\" href=\"#7-箭头函数有哪些特点\">#</a> 7. 箭头函数有哪些特点？</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>不需要<span class=\"token keyword\">function</span>关键字来创建函数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>省略<span class=\"token keyword\">return</span>关键字</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>改变<span class=\"token keyword\">this</span>指向</pre></td></tr></table></figure><h2 id=\"8-var-let-const-区别\"><a class=\"anchor\" href=\"#8-var-let-const-区别\">#</a> 8. var、let、const 区别？</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span>具有函数作用域，变量提升，并且可以重复声明。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span>和<span class=\"token keyword\">const</span>具有块级作用域，没有变量提升，而且不允许重复声明（在同一个作用域内）。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span>声明的变量可重新赋值，而<span class=\"token keyword\">const</span>声明的变量是常量，不可重新赋值。</pre></td></tr></table></figure><h2 id=\"9-new操作符具体干了什么呢\"><a class=\"anchor\" href=\"#9-new操作符具体干了什么呢\">#</a> 9. new 操作符具体干了什么呢？</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>、创建一个空对象，并且 <span class=\"token keyword\">this</span> 变量引用该对象，同时还继承了该函数的原型。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span>、属性和方法被加入到 <span class=\"token keyword\">this</span> 引用的对象中。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span>、新创建的对象由 <span class=\"token keyword\">this</span> 所引用，并且最后隐式的返回 <span class=\"token keyword\">this</span> 。</pre></td></tr></table></figure><h2 id=\"10-json-的了解\"><a class=\"anchor\" href=\"#10-json-的了解\">#</a> 10. JSON 的了解？</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">JSON</span><span class=\"token punctuation\">(</span>JavaScript Object Notation<span class=\"token punctuation\">)</span> 是一种轻量级的数据交换格式。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>它是基于JavaScript的一个子集。数据格式简单<span class=\"token punctuation\">,</span> 易于读写<span class=\"token punctuation\">,</span> 占用带宽小</pre></td></tr></table></figure><h2 id=\"11-documentwrite-和-innerhtml-的区别\"><a class=\"anchor\" href=\"#11-documentwrite-和-innerhtml-的区别\">#</a> 11. document.write 和 innerHTML 的区别？</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span>write 只能重绘整个页面</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>innerHTML 可以重绘页面的一部分</pre></td></tr></table></figure><h2 id=\"12-ajax过程\"><a class=\"anchor\" href=\"#12-ajax过程\">#</a> 12. ajax 过程？</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>创建XMLHttpRequest对象<span class=\"token punctuation\">,</span>也就是创建一个异步调用对象<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>创建一个新的<span class=\"token constant\">HTTP</span>请求<span class=\"token punctuation\">,</span>并指定该<span class=\"token constant\">HTTP</span>请求的方法、<span class=\"token constant\">URL</span>及验证信息<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>设置响应<span class=\"token constant\">HTTP</span>请求状态变化的函数<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>发送<span class=\"token constant\">HTTP</span>请求<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>获取异步调用返回的数据<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>使用JavaScript和<span class=\"token constant\">DOM</span>实现局部刷新<span class=\"token punctuation\">.</span></pre></td></tr></table></figure><h2 id=\"13-请解释一下-javascript-的同源策略\"><a class=\"anchor\" href=\"#13-请解释一下-javascript-的同源策略\">#</a> 13. 请解释一下 JavaScript 的同源策略？</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">概念</span><span class=\"token operator\">:</span>同源策略是客户端脚本（尤其是Netscape Navigator2<span class=\"token punctuation\">.</span><span class=\"token number\">0</span>，其目的是防止某个文档或脚本从多个不同源装载。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>这里的同源策略指的是：协议，域名，端口相同，同源策略是一种安全协议。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>指一段脚本只能读取来自同一来源的窗口和文档的属性。</pre></td></tr></table></figure><h2 id=\"14-介绍一下闭包和闭包常用场景\"><a class=\"anchor\" href=\"#14-介绍一下闭包和闭包常用场景\">#</a> 14. 介绍一下闭包和闭包常用场景？</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>闭包是指有权访问另一个函数作用域中的变量的函数，创建闭包常见方式，就是在一个函数的内部创建另一个函数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>使用闭包主要为了设计私有的方法和变量，闭包的优点是可以避免变量的污染，缺点是闭包会常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。在js中，函数即闭包，只有函数才会产生作用域的概念。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>闭包有三个特性：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>函数嵌套函数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>函数内部可以引用外部的参数和变量</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>参数和变量不会被垃圾回收机制回收</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>应用场景，设置私有变量的方法</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>不适用场景：返回闭包的函数是个非常大的函数</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>闭包的缺点就是常驻内存，会增大内存使用量，使用不当会造成内存泄漏</pre></td></tr></table></figure><h2 id=\"15-javascript的内存垃圾回收机制\"><a class=\"anchor\" href=\"#15-javascript的内存垃圾回收机制\">#</a> 15. javascript 的内存 (垃圾) 回收机制？</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>垃圾回收器会每隔一段时间找出那些不再使用的内存，然后为其释放内存</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">一般使用标记清除方法</span><span class=\"token punctuation\">(</span>mark and sweep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 当变量进入环境标记为进入环境，离开环境标记为离开环境</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>垃圾回收器会在运行的时候给存储在内存中的所有变量加上标记，然后去掉环境中的变量以及被环境中变量所引用的变量（闭包），在这些完成之后仍存在标记的就是要删除的变量了</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">还有引用计数方法</span><span class=\"token punctuation\">(</span>reference counting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 在低版本<span class=\"token constant\">IE</span>中经常会出现内存泄露，很多时候就是因为其采用引用计数方式进行垃圾回收。引用计数的策略是跟踪记录每个值被使用的次数，当声明了一个 变量并将一个引用类型赋值给该变量的时候这个值的引用次数就加<span class=\"token number\">1</span>，如果该变量的值变成了另外一个，则这个值得引用次数减<span class=\"token number\">1</span>，当这个值的引用次数变为<span class=\"token number\">0</span>的时 候，说明没有变量在使用，这个值没法被访问了，因此可以将其占用的空间回收，这样垃圾回收器会在运行的时候清理掉引用次数为<span class=\"token number\">0</span>的值占用的空间。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>在<span class=\"token constant\">IE</span>中虽然JavaScript对象通过标记清除的方式进行垃圾回收，但<span class=\"token constant\">BOM</span>与<span class=\"token constant\">DOM</span>对象却是通过引用计数回收垃圾的， 也就是说只要涉及<span class=\"token constant\">BOM</span>及<span class=\"token constant\">DOM</span>就会出现循环引用问题。</pre></td></tr></table></figure><h2 id=\"16-javascript原型原型链-有什么特点\"><a class=\"anchor\" href=\"#16-javascript原型原型链-有什么特点\">#</a> 16. JavaScript 原型，原型链？有什么特点？</h2>\n<pre><code class=\"language-javascript\">\n</code></pre>\n<h2 id=\"17-事件队列宏任务微任务\"><a class=\"anchor\" href=\"#17-事件队列宏任务微任务\">#</a> 17. 事件队列（宏任务微任务）</h2>\n<pre><code class=\"language-微任务和宏任务的本质区别。\">可以分为微任务（micro task）队列和宏任务（macro task）队列。\n\n微任务一般比宏任务先执行，并且微任务队列只有一个，宏任务队列可能有多个。另外我们常见的点击和键盘等事件也属于宏任务。\n\n下面我们看一下常见宏任务和常见微任务。\n\n常见宏任务：\nsetTimeout()\nsetInterval()\nsetImmediate()\n常见微任务：\n\npromise.then()、promise.catch()\nnew MutaionObserver()\nprocess.nextTick()\n\n\n微任务和宏任务的本质区别。\n\n宏任务特征：有明确的异步任务需要执行和回调；需要其他异步线程支持。\n微任务特征：没有明确的异步任务需要执行，只有回调；不需要其他异步线程支持。\n\n</code></pre>\n<h2 id=\"19-asyncawait\"><a class=\"anchor\" href=\"#19-asyncawait\">#</a> 19. async/await</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> 是一个通过异步执行并隐式返回 Promise 作为结果的函数。是Generator函数的语法糖，并对Generator函数进行了改进。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>改进：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>内置执行器，无需手动执行 <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>更好的语义</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>更广的适用性：co模块约定，<span class=\"token keyword\">yield</span>命令后面只能是 Thunk 函数或 Promise 对象，而<span class=\"token keyword\">async</span>函数的<span class=\"token keyword\">await</span>命令后面，可以是 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时会自动转成立即 resolved 的 Promise 对象）。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>返回值是 Promise，比 Generator 函数返回的 Iterator 对象方便，可以直接使用 <span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法进行调用。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">async</span> 隐式返回 Promise 作为结果的函数，那么可以简单理解为，<span class=\"token keyword\">await</span>后面的函数执行完毕时，<span class=\"token keyword\">await</span><span class=\"token function\">会产生一个微任务</span><span class=\"token punctuation\">(</span>Promise<span class=\"token punctuation\">.</span>then是微任务<span class=\"token punctuation\">)</span>。</pre></td></tr></table></figure><h2 id=\"20-javascript-是单线程的浏览器是多进程的\"><a class=\"anchor\" href=\"#20-javascript-是单线程的浏览器是多进程的\">#</a> 20. JavaScript 是单线程的，浏览器是多进程的</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>每打开一个新网页就会创建一个渲染进程</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>渲染进程是多线程的</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>负责页面渲染的 <span class=\"token constant\">GUI</span> 渲染线程</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>负责JavaScript的执行的 JavaScript 引擎线程，</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>负责浏览器事件循环的事件触发线程，注意这不归 JavaScript 引擎线程管</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>负责定时器的定时触发器线程，setTimeout 中低于 4ms 的时间间隔算为4ms</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>负责XMLHttpRequest的异步 http 请求线程</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token constant\">GUI</span> 渲染线程与 JavaScript 引擎线程是互斥的</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>单线程JavaScript是因为避免 <span class=\"token constant\">DOM</span> 渲染的冲突，web worker 支持多线程，但是 web worker 不能访问 window 对象，document 对象等。</pre></td></tr></table></figure>",
            "tags": [
                "前端开发",
                "Javascript",
                "Javascript"
            ]
        },
        {
            "id": "http://yoursite.com/front-end/uniapp/",
            "url": "http://yoursite.com/front-end/uniapp/",
            "title": "uniapp基础原理",
            "date_published": "2021-06-25T08:43:00.000Z",
            "content_html": "",
            "tags": [
                "前端开发",
                "uniapp",
                "uniapp"
            ]
        },
        {
            "id": "http://yoursite.com/front-end/webpack%E9%9D%A2%E8%AF%95/",
            "url": "http://yoursite.com/front-end/webpack%E9%9D%A2%E8%AF%95/",
            "title": "webpack面试",
            "date_published": "2021-06-25T08:43:00.000Z",
            "content_html": "<h1 id=\"谈谈你对webpack的理解webpack是什么\"><a class=\"anchor\" href=\"#谈谈你对webpack的理解webpack是什么\">#</a> 谈谈你对 Webpack 的理解（Webpack 是什么？）</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Webpack 是一个 静态模块打包器，可以分析各个模块的依赖关系，项目中的所有资源皆为模块，通过分析模块间的依赖关系，在其内部递归构建出一个依赖关系图，其中包含应用程序需要的每个模块，然后将这些模块打包成一个或多个 bundle。最终编绎输出模块为 HTML、JavaScript、CSS 以及各种静态文件（图片、字体等）。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>webpack 就像一条生产线,要经过一系列处理流程(loader)后才能将源文件转换成输出结果。 这条生产线上的每个处理流程的职责都是单一的,多个流程之间有存在依赖关系,只有完成当前处理后才能交给下一个流程去处理。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>插件就像是一个插入到生产线中的一个功能,在特定的时机对生产线上的资源做处理。 webpack 在运行过程中会广播事件,插件只需要监听它所关心的事件,就能加入到这条生产线中,去改变生产线的运作。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>webpack的主要作用如下：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>模块打包 可以将不同模块的文件打包整合在一起，并且保证它们之间的引用正确，执行有序。利用打包我们就可以在开发的时候根据我们自己的业务自由划分文件模块，保证项目结构的清晰和可读性。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>编译兼容 在前端的“上古时期”，手写一堆浏览器兼容代码一直是令前端工程师头皮发麻的事情，而在今天这个问题被大大的弱化了，通过webpack的Loader机制，不仅仅可以帮助我们对代码做polyfill，还可以编译转换诸如.less，.vue，.jsx这类在浏览器无法识别的格式文件，让我们在开发的时候可以使用新特性和新语法做开发，提高开发效率。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>能力扩展 通过webpack的Plugin机制，我们在实现模块化打包和编译兼容的基础上，可以进一步实现诸如按需加载，代码压缩等一系列功能，帮助我们进一步提高自动化程度，工程效率以及打包输出的质量。</pre></td></tr></table></figure><h1 id=\"webpack的打包过程打包原理构建流程\"><a class=\"anchor\" href=\"#webpack的打包过程打包原理构建流程\">#</a> Webpack 的打包过程 / 打包原理 / 构建流程？</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>初始化：启动构建，读取与合并配置参数，加载plugin,实例化Compiler</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>编译：从Entry出发，针对每个Module串行调用对应的Loader去翻译文件中的内容，再找到该Module依赖的Module，递归的进行编译处理</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>输出：将编译后的Module组合成Chunk,将Chunk转换成文件，输出到文件系统中</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>细节：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Webpack CLI 通过 yargs模块解析 CLI 参数，并转化为配置对象option（单入口：Object，多入口：Array），调用 webpack(option) 创建 compiler 对象。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>如果有 option.plugin，则遍历调用plugin.apply()来注册 plugin，</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>判断是否开启了 watch，如果开启则调用 compiler.watch，否则调用 compiler.run，开始构建。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>创建 Compilation 对象来收集全部资源和信息，然后触发 make 钩子。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>make阶段从入口开始递归所有依赖，</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>每次遍历时调用对应Loader翻译文件中内容，然后生成AST，遍历AST找到下个依赖继续递归，</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>根据入口和模块之间关系组装chunk，输出到dist中的一个文件内。</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>在以上过程中，webpack会在特定的时间点（使用tapable模块）广播特定的事件，插件监听事件并执行相应的逻辑，并且插件可以调用webpack提供的api改变webpack的运行结果</pre></td></tr></table></figure><h1 id=\"loader的作用\"><a class=\"anchor\" href=\"#loader的作用\">#</a> loader 的作用</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>webpack中的loader是一个函数，主要为了实现源码的转换，所以loader函数会以源码作为参数，比如，将ES6转换为ES5，将less转换为css，然后再将css转换为js，以便能嵌入到html文件中。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>默认情况下，webpack只支持对js和json文件进行打包，但是像css、html、png等其他类型的文件，webpack则无能为力。因此，就需要配置相应的loader进行文件内容的解析转换。</pre></td></tr></table></figure><h1 id=\"有哪些常见的loader他们是解决什么问题的\"><a class=\"anchor\" href=\"#有哪些常见的loader他们是解决什么问题的\">#</a> 有哪些常见的 Loader？他们是解决什么问题的？</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>image-loader：加载并且压缩图片文件。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>less-loader：加载并编译 LESS 文件。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>sass-loader：加载并编译 SASS/SCSS 文件。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>css-loader：加载 CSS，支持模块化、压缩、文件导入等特性，使用css-loader必须要配合使用style-loader。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>style-loader：用于将 CSS 编译完成的样式，挂载到页面的 style 标签上。需要注意 loader 执行顺序，style-loader 要放在第一位，loader 都是从后往前执行。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>babel-loader：把 ES6 转换成 ES5</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>postcss-loader：扩展 CSS 语法，使用下一代 CSS，可以配合 autoprefixer 插件自动补齐 CSS3 前缀。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>eslint-loader：通过 ESLint 检查 JavaScript 代码。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>vue-loader：加载并编译 Vue 组件。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件 (处理图片和字体)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>url-loader：与 file-loader 类似，区别是用户可以设置一个阈值，大于阈值会交给 file-loader 处理，小于阈值时返回文件 base64 形式编码 (处理图片和字体)。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>source-map-loader：加载额外的 Source Map 文件，以方便断点调试。</pre></td></tr></table></figure><h1 id=\"plugin的作用\"><a class=\"anchor\" href=\"#plugin的作用\">#</a> plugin 的作用</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>plugin是一个类，类中有一个apply()方法，主要用于Plugin的安装，可以在其中监听一些来自编译器发出的事件，在合适的时机做一些事情。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>webpack中的plugin赋予其各种灵活的功能，例如打包优化、资源管理、环境变量注入等，它们会运行在webpack的不同阶段（钩子 / 生命周期），贯穿了webpack整个编译周期。目的在于「解决 loader 无法实现的其他事」。</pre></td></tr></table></figure><h1 id=\"有哪些常见的plugin他们是解决什么问题的\"><a class=\"anchor\" href=\"#有哪些常见的plugin他们是解决什么问题的\">#</a> 有哪些常见的 Plugin？他们是解决什么问题的？</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>html-webpack-plugin：可以复制一个有结构的html文件，并自动引入打包输出的所有资源（JS/CSS）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>clean-webpack-plugin：重新打包自动清空 dist 目录</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mini-css-extract-plugin：提取 js 中的 css 成单独文件</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>optimize-css-assets-webpack-plugin：压缩css</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>uglifyjs-webpack-plugin：压缩js</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>commons-chunk-plugin：提取公共代码</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>define-plugin：定义环境变量</pre></td></tr></table></figure><h1 id=\"webpack中loader和plugin的区别\"><a class=\"anchor\" href=\"#webpack中loader和plugin的区别\">#</a> Webpack 中 Loader 和 Plugin 的区别</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>运行时机</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>1.loader运行在编译阶段</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>2.plugins 在整个周期都起作用</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>使用方式</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Loader:1.下载 2.使用</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Plugin:1.下载 2.引用 3.使用</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>loader是文件加载器，能够加载资源文件，并对这些文件进行一些处理，诸如编译、压缩等，最终一起打包到指定的文件中；plugin赋予了webpack各种灵活的功能，例如打包优化、资源管理、环境变量注入等，目的是解决 loader无法实现的其他事。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>在运行时机上，loader 运行在打包文件之前；plugin则是在整个编译周期都起作用。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>在配置上，loader在module.rules中配置，作为模块的解析规则，类型为数组。每一项都是一个 Object，内部包含了 test(类型文件)、loader、options (参数)等属性；plugin在 plugins中单独配置，类型为数组，每一项是一个 plugin 的实例，参数都通过构造函数传入。</pre></td></tr></table></figure><h1 id=\"webpack的热更新是如何做到的说明其原理\"><a class=\"anchor\" href=\"#webpack的热更新是如何做到的说明其原理\">#</a> webpack 的热更新是如何做到的？说明其原理？</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>热更新的核心就是客户端从服务端拉去更新后的文件，准确的说是 chunk diff (chunk 需要更新的部分)，实际上webpack-dev-server与浏览器之间维护了一个websocket，当本地资源发生变化时，webpack-dev-server会向浏览器推送更新，并带上构建时的hash，让客户端与上一次资源进行对比。客户端对比出差异后会向webpack-dev-server发起 Ajax 请求来获取更改内容(文件列表、hash)，这样客户端就可以再借助这些信息继续向webpack-dev-server发起 jsonp 请求获取该chunk的增量更新。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>后续的部分(拿到增量更新之后如何处理？哪些状态该保留？哪些又需要更新？)由HotModulePlugin 来完成，提供了相关 API 以供开发者针对自身场景进行处理，像react-hot-loader和vue-loader都是借助这些 API 实现热更新。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>详细：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>1、在 webpack 的 watch 模式下，文件系统中某一个文件发生修改，webpack 监听到文件变化，根据配置文件对模块重新编译打包，并将打包后的代码通过简单的 JavaScript 对象保存在内存中。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>2、webpack-dev-server 和 webpack 之间的接口交互，而在这一步，主要是 dev-server 的中间件webpack-dev-middleware 和 webpack 之间的交互，webpack-dev-middleware 调用 webpack 暴露的 API对代码变化进行监控，并且告诉 webpack，将代码打包到内存中。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>3、webpack-dev-server 对文件变化的一个监控，这一步不同于第一步，并不是监控代码变化重新打包。当我们在配置文件中配置了devServer.watchContentBase 为 true 的时候，Server 会监听这些配置文件夹中静态文件的变化，变化后会通知浏览器端对应用进行 live reload。注意，这儿是浏览器刷新，和 HMR 是两个概念</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>4、webpack-dev-server 代码的工作，该步骤主要是通过 sockjs（webpack-dev-server 的依赖）在浏览器端和服务端之间建立一个 websocket 长连接，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>同时也包括第三步中 Server 监听静态文件变化的信息。浏览器端根据这些 socket 消息进行不同的操作。当然服务端传递的最主要信息还是新模块的 hash 值，后面的步骤根据这一 hash 值来进行模块热替换。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>webpack-dev-server/client 端并不能够请求更新的代码，也不会执行热更模块操作，而把这些工作又交回给了 webpack，webpack/hot/dev-server 的工作就是根据 webpack-dev-server/client 传给它的信息以及 dev-server 的配置决定是刷新浏览器呢还是进行模块热更新。当然如果仅仅是刷新浏览器，也就没有后面那些步骤了。HotModuleReplacement.runtime 是客户端 HMR 的中枢，它接收到上一步传递给他的新模块的 hash 值，它通过 JsonpMainTemplate.runtime 向 server 端发送 Ajax 请求，服务端返回一个 json，该 json 包含了所有要更新的模块的 hash 值，获取到更新列表后，该模块再次通过 jsonp 请求，获取到最新的模块代码。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>5、决定 HMR 成功与否的关键步骤，在该步骤中，HotModulePlugin 将会对新旧模块进行对比，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引用。最后一步，当 HMR 失败后，回退到 live reload 操作，也就是进行浏览器刷新来获取最新打包代码。</pre></td></tr></table></figure><h1 id=\"如何解决循环依赖问题\"><a class=\"anchor\" href=\"#如何解决循环依赖问题\">#</a> 如何解决循环依赖问题</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Webpack 中将 require 替换为 webpack_require，会根据 moduleId 到 installedModules 找是否加载过，加载过则直接返回之前的 export，不会重复加载。</pre></td></tr></table></figure><h1 id=\"如何提高webpack构建速度\"><a class=\"anchor\" href=\"#如何提高webpack构建速度\">#</a> 如何提高 Webpack 构建速度</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 代码压缩</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token constant\">JS</span> 压缩</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>webpack <span class=\"token number\">4.0</span>默认在生产环境的时候是支持代码压缩的，即mode<span class=\"token operator\">=</span>production模式下。实际上webpack <span class=\"token number\">4.0</span>默认是使用terser<span class=\"token operator\">-</span>webpack<span class=\"token operator\">-</span>plugin这个压缩插件，在此之前是使用 uglifyjs<span class=\"token operator\">-</span>webpack<span class=\"token operator\">-</span>plugin，两者的区别是后者对 <span class=\"token constant\">ES6</span> 的压缩不是很好，同时我们可以开启 parallel参数，使用多进程压缩，加快压缩。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token constant\">CSS</span> 压缩</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token constant\">CSS</span> 压缩通常是去除无用的空格等，因为很难去修改选择器、属性的名称、值等。可以使用另外一个插件：css<span class=\"token operator\">-</span>minimizer<span class=\"token operator\">-</span>webpack<span class=\"token operator\">-</span>plugin。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token constant\">HTML</span> 压缩</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>使用HtmlWebpackPlugin插件来生成 <span class=\"token constant\">HTML</span> 的模板时候，通过配置属性minify进行 html 优化。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token literal-property property\">plugin</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlwebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token literal-property property\">minify</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token literal-property property\">minifyCSS</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是否压缩 css</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token literal-property property\">collapseWhitespace</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是否折叠空格</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token literal-property property\">removeComments</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 是否移除注释</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token number\">2.</span> 图片压缩</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>配置image<span class=\"token operator\">-</span>webpack<span class=\"token operator\">-</span>loader</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token number\">3.</span> Tree Shaking</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>Tree Shaking是一个术语，在计算机中表示消除死代码，依赖于 <span class=\"token constant\">ES</span> Module 的静态语法分析（不执行任何的代码，可以明确知道模块的依赖关系）。在webpack实现Tree shaking有两种方案：</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>usedExports：通过标记某些函数是否被使用，之后通过 Terser 来进行优化的</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token literal-property property\">optimization</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        usedExports</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>使用之后，没被用上的代码在webpack打包中会加入unused harmony <span class=\"token keyword\">export</span> mul注释，用来告知Terser在优化时，可以删除掉这段代码。</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>sideEffects：跳过整个模块<span class=\"token operator\">/</span>文件，直接查看该文件是否有副作用</pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>sideEffects用于告知webpack compiler哪些模块时有副作用，配置方法是在<span class=\"token keyword\">package</span><span class=\"token punctuation\">.</span>json中设置sideEffects属性。如果sideEffects设置为<span class=\"token boolean\">false</span>，就是告知webpack可以安全的删除未用到的exports。如果有些文件需要保留，可以设置为数组的形式，如：</pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token string-property property\">\"sideEffecis\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token string\">\"./src/util/format.js\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token string\">\"*.css\"</span> <span class=\"token comment\">// 所有的 css 文件</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token number\">4.</span> 缩小打包域</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>排除webpack不需要解析的模块，即在使用loader的时候，在尽量少的模块中去使用。可以借助 include和exclude这两个参数，规定loader只在那些模块应用和在哪些模块不应用。</pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token number\">5.</span> 减少 <span class=\"token constant\">ES6</span> 转为 <span class=\"token constant\">ES5</span> 的冗余代码</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>使用bable<span class=\"token operator\">-</span>plugin<span class=\"token operator\">-</span>transform<span class=\"token operator\">-</span>runtime插件</pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token number\">6.</span> 提取公共代码</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>通过配置CommonsChunkPlugin插件，将多个页面的公共代码抽离成单独的文件</pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token number\">7.</span> 其他</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>组件懒加载、路由懒加载、开启gzip、公共的第三方包上cdn、配置cache缓存Loader对文件的编译副本、配置resolve提高文件的搜索速度（@<span class=\"token operator\">:</span> src）</pre></td></tr></table></figure><h1 id=\"webpack和vite的区别\"><a class=\"anchor\" href=\"#webpack和vite的区别\">#</a> webpack 和 vite 的区别</h1>\n<p>工具本身定位不同<br />\n webpack 是底层的东西，vite 则是更上层的工具。webpack 是配置化，灵活度极高的工具，vite 是开箱即用，使用更简单的工具<br />\n原理不同<br />\n webpack 是 bundle，自己实现了一套模块导入导出机制。vite 是利用浏览器的 esm 能力，是 bundless。<br />\n优缺点<br />\n vite 开箱即用，更加简单，基于浏览器 esm，使得 hmr 更加优秀，达到极速的效果；webpack 更加灵活，api 以及插件生态更加丰富。<br />\nwebpack 先打包，再启动服务器，请求服务器时直接给予打包后的结果；vite 直接启动服务器，请求哪个模块再对哪个模块进行实时编译。</p>\n<p>1.webpack 常见配置</p>\n<p>2.webpack 性能优化</p>\n<p>3. 手写 webpack</p>\n<p>4. 实现自己地 vue-cli</p>\n<p>5. 剖析 vue-cli</p>\n<h1 id=\"webpack性能优化\"><a class=\"anchor\" href=\"#webpack性能优化\">#</a> webpack 性能优化</h1>\n<p>* 开发环境性能优化</p>\n<p>* 生产环境性能优化</p>\n<h1 id=\"开发环境性能优化\"><a class=\"anchor\" href=\"#开发环境性能优化\">#</a> 开发环境性能优化</h1>\n<p>* 优化打包构建速度</p>\n<p>* HMR</p>\n<p>* 优化代码调试</p>\n<p>* source-map</p>\n<h1 id=\"生产环境性能优化\"><a class=\"anchor\" href=\"#生产环境性能优化\">#</a> 生产环境性能优化</h1>\n<p>* 优化打包构建速度</p>\n<p>* oneOf</p>\n<p>* babel 缓存</p>\n<p>* 多进程打包</p>\n<p>* externals</p>\n<p>* dll</p>\n<p>* 优化代码运行的性能</p>\n<p>* 缓存 (hash-chunkhash-contenthash)</p>\n<p>* tree shaking</p>\n<p>* code split</p>\n<p>* 懒加载 / 预加载</p>\n<p>* pwa</p>\n",
            "tags": [
                "前端开发",
                "前端工程化",
                "webpack"
            ]
        },
        {
            "id": "http://yoursite.com/front-end/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%A6%96%E5%B1%8F%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/",
            "url": "http://yoursite.com/front-end/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%A6%96%E5%B1%8F%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/",
            "title": "小程序首屏性能优化",
            "date_published": "2021-06-25T08:43:00.000Z",
            "content_html": "<h1 id=\"一优化的核心\"><a class=\"anchor\" href=\"#一优化的核心\">#</a> 一：优化的核心</h1>\n<h2 id=\"一关于耗时\"><a class=\"anchor\" href=\"#一关于耗时\">#</a> 一：关于耗时</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 首屏耗时与用户设备、所在网络环境、程序代码有很大关系。线上环境有<span class=\"token number\">2</span><span class=\"token operator\">/</span><span class=\"token number\">3</span>的运气成分。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span> 理论上相同地域访问 https 比访问 ip 慢，但小程序要求必须使用 https。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3.</span> 小程序启动时由微信加载代码包，与服务域名无关，进入页面后才会发起首次网络请求，某些用户环境出现 <span class=\"token constant\">ERR_CONNECTION_RESET</span>，导致上报的 <span class=\"token constant\">API</span> 接口及首屏耗时因网络不通畅爆表</pre></td></tr></table></figure><h2 id=\"二前端性能监控rum-接入\"><a class=\"anchor\" href=\"#二前端性能监控rum-接入\">#</a> 二：前端性能监控（RUM） 接入</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">RUM</span> 是腾讯提供的一款前端监控方案，只需在控制台上创建业务系统和应用，获取上报 <span class=\"token constant\">ID</span>；通过安装 npm 依赖配置 <span class=\"token constant\">JSON</span> 就可以实现测速和日志的收集。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>注意：在小程序中，要按照小程序规则开启 <span class=\"token constant\">NPM</span> 构建。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>必须将  https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>aegis<span class=\"token punctuation\">.</span>qq<span class=\"token punctuation\">.</span>com  添加到 request 合法域名中，否则 <span class=\"token constant\">RUM</span> 控制台中没有正式版本的数据。一般会在 devTools 中开启忽略合法域名校验，为了方便开发调试调用开发环境，而忽略这个配置。</pre></td></tr></table></figure><h2 id=\"三图片资源\"><a class=\"anchor\" href=\"#三图片资源\">#</a> 三：图片资源</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>常见图片可以采用<span class=\"token constant\">JPG</span>、<span class=\"token constant\">PNG</span>、<span class=\"token constant\">WEBP</span>、雪碧图或字体图标实现，可搜索到的描述大概都是不同格式适用的不同场景，以及从占用带宽上的描述。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1.</span>首先要选择合适的图片格式</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">1.1</span>照片图片使用 webP。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">1.2</span>复杂的图形使用 <span class=\"token constant\">PNG</span> 或 <span class=\"token constant\">JPG</span>，看哪个格式的文件小。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">1.3</span>有透明度的图形使用 <span class=\"token constant\">PNG</span> 或 webP。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">1.4</span>可能缩放的图形、图标等使用 <span class=\"token constant\">SVG</span>。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">1.5</span>动态图尽量不使用 <span class=\"token constant\">GIF</span>，无法使用 <span class=\"token constant\">CSS</span> 的用视频替代。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">2.</span>在小程序中，只有网络图片且在基础库高于 <span class=\"token number\">2.9</span><span class=\"token number\">.0</span> 的微信上可以使用 webp ，目前绝大多数的微信用户基础库以及高于 <span class=\"token number\">2.16</span><span class=\"token number\">.0</span>版本库，因此</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>可以对互联网图片转换为 webp  格式，减小网络加载耗时。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">3.</span>目前没有查到关于这几种方式显示图片资源的页面渲染耗时分析。</pre></td></tr></table></figure><h2 id=\"四js-优化\"><a class=\"anchor\" href=\"#四js-优化\">#</a> 四：JS 优化</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>首先排查在主线程上不要使用同步方法，减小主线程阻塞。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span>开启小程序中的代码按需注入，避免没有使用的代码注入到小程序运行环境中，影响注入耗时和内存占用。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3.</span>生产环境去掉不必要的日志打印</pre></td></tr></table></figure><h2 id=\"五css-优化\"><a class=\"anchor\" href=\"#五css-优化\">#</a> 五：CSS 优化</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>因为构建 <span class=\"token constant\">CSSOM</span> 树时会阻塞页面的解析，因此需要：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1.</span>删除没有使用的 <span class=\"token constant\">CSS</span> 代码</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2.</span>减小 <span class=\"token constant\">CSS</span> 文件大小，如 #<span class=\"token constant\">FFFFFF</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> #<span class=\"token constant\">FFF</span> ， 0px <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">0</span>，不要使用 Base64 编码的图片。</pre></td></tr></table></figure><h1 id=\"二具体的优化方法\"><a class=\"anchor\" href=\"#二具体的优化方法\">#</a> 二：具体的优化方法</h1>\n<h2 id=\"一资源优化\"><a class=\"anchor\" href=\"#一资源优化\">#</a> 一：资源优化</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>资源优化</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span> 按照页面访问的频次，将图片资源分成常用的和不常用的，将常用的放入小程序代码包通过本地加载，将不常用的转换成 webp 放到服务器。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2.</span> 减小代码包体积：压缩代码包中的图片资源，对 <span class=\"token constant\">PNG</span> 格式的透明图设置更少的颜色数；通过依赖分析，更换体积更小的 markdown 渲染依赖。从 1M<span class=\"token operator\">+</span>下降到280K<span class=\"token operator\">+</span>。</pre></td></tr></table></figure><h2 id=\"二网络优化\"><a class=\"anchor\" href=\"#二网络优化\">#</a> 二：网络优化</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>网络优化</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span> 由于只有一台华北地区的服务器，为解决不同地域和运营商的访问速度，开启全站动态加速。通过某测速网站看到可解析到<span class=\"token number\">70</span><span class=\"token operator\">+</span>个独立 <span class=\"token constant\">IP</span>，并且不同地区的用户会访问到同运营商较近的 <span class=\"token constant\">IP</span>，然后由 <span class=\"token constant\">DCDN</span> 通过内部线路转发用户到服务器的请求。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2.</span> 通过分析，首次请求时需要进行域名的解析和建连，后续的请求会复用该链路，解析和 <span class=\"token constant\">SSL</span> 等时间为<span class=\"token number\">0</span>。通过某测速网站可看到平均响应时间在 <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>3s，考虑到链路复用，网络请求时间会在 60ms 左右。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">3.</span> 对不经常变更且频繁访问的接口，在 <span class=\"token constant\">DCDN</span> 中设置静态缓存，并触发接口预热，将接口的响应缓存到 <span class=\"token constant\">DCDN</span> 的二级节点上。这样用户发起这些请求时，直接由 <span class=\"token constant\">DCDN</span> 做出应答而不回源到真实服务器处理。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">4.</span> 在服务端和客户端开启 http<span class=\"token operator\">/</span><span class=\"token number\">2</span> 协议支持。由于小程序中无高并发请求，自测没有明显改善。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">5.</span> 对超过 1kb 的响应体开启 gzip 压缩。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">6.</span> 对服务端的图片等静态资源设置浏览器缓存。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">7.</span> 由于小程序不像 <span class=\"token constant\">BAT</span> 这么大用户量和高频的访问，根据 <span class=\"token constant\">DNS</span> 的解析机制，各地运营商如果有缓存 <span class=\"token constant\">DNS</span>的解析结果就不会向跟 <span class=\"token constant\">DNS</span> 进行解析，利用网站测速提供的服务，发送 <span class=\"token constant\">GET</span> 测速，让各地运营商缓存 <span class=\"token constant\">DNS</span> 结果。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">8.</span> 开启 <span class=\"token constant\">OCSP</span> Stapling，提高证书的校验性能。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">9.</span> 小程序使用中，服务端会调用 api<span class=\"token punctuation\">.</span>weixin<span class=\"token punctuation\">.</span>qq<span class=\"token punctuation\">.</span>com 换取用户的 openid，通过调用微信公众平台接口获取该域名的各个 ip 地址，在服务器执行 ping 命令，找到最快的一个ip，写入host文件。从 40ms 降低到 <span class=\"token number\">28</span><span class=\"token punctuation\">.</span>8ms。</pre></td></tr></table></figure><h2 id=\"三代码编写\"><a class=\"anchor\" href=\"#三代码编写\">#</a> 三：代码编写</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>代码编写</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span> 代码中对图片标签开启懒加载。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2.</span> 减小冗余的 <span class=\"token operator\">&lt;</span>view<span class=\"token operator\">></span> 层次嵌套。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">3.</span> 为 data 赋初始值，避免在网络请求结束后赋值引起页面元素的位置变动。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">4.</span> 开启代码的按需注入</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">5.</span> 采用 <span class=\"token constant\">DCDN</span> 后，各地域各运营商的绝大部分网络请求会在 <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>3s 内到达，因此删除了网络请求起止的 loading 浮层动画。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">6.</span> 原来为了真机调试方便，把网络请求、自定义组件的响应等打印到了 vConsole 中。目前线上生产环境删除了所有的日志打印。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">7.</span> 删除了部分无用的 css 代码。优化的部分 css 样式的选择器。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">8.</span> 亲测使用骨架屏只会让人感觉页面非白屏了，但会增加首屏的时间。</pre></td></tr></table></figure><h2 id=\"四业务逻辑\"><a class=\"anchor\" href=\"#四业务逻辑\">#</a> 四：业务逻辑</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 所有新用户（首次访问）最初进入小程序时，页面和 data 中的数据都是一样的。将这些数据作为 data <span class=\"token function\">的默认值（这里是把请求数据放在vue</span><span class=\"token punctuation\">(</span>cteated<span class=\"token punctuation\">)</span> <span class=\"token function\">uniapp</span><span class=\"token punctuation\">(</span>onLoad<span class=\"token punctuation\">)</span> ），直接显示出来，网络请求到达后，由于 data 内容不变，不会发生页面的重新渲染。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span> 用户使用程序后，将从网络请求中获取的用户数据存储到 storage 中。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3.</span> 对于长列表改为数据分页加载。</pre></td></tr></table></figure><h1 id=\"支付宝小程序\"><a class=\"anchor\" href=\"#支付宝小程序\">#</a> 支付宝小程序</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>核心要优化的东西：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1.</span>由于网络问题存在，所以这点应该去减少包的加载大小</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token number\">1.1</span> 图片等一些文件的大小</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token number\">1.2</span> 最后是分包 <span class=\"token punctuation\">,</span>但是2M以内，其实分包没有实际的意义</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">.</span>js 和 css 的优化 </pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>更多的优化渠道：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">3.</span>支付宝小程序内有相关的检测能力工具</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">4.</span>支付宝有性能研究群对接</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>可以研究的方向：</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">5.</span>有些机型是存在打不开的情况的，并非所有的都是网络造成的问题</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">6.</span>每个机型的启动首屏加载时间都是不同的， 可以认为中高端手机启动时间就是小于低端手机</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token number\">7.</span>小程序打开就涉及内存，平均每个页面需要的内存在<span class=\"token number\">250</span> <span class=\"token operator\">-</span> <span class=\"token number\">450</span>之间</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>当前页面内存的大小，直接影响下一个页面打开的时间</pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token number\">7.1</span> 某些手机的打开内存固定超过某个值 就会显示过高的</pre></td></tr></table></figure><h1 id=\"小程序性能\"><a class=\"anchor\" href=\"#小程序性能\">#</a> 小程序性能</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">.</span>vuex 对启动耗时的影响</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">.</span>mixins 对启动耗时的影响</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tvuex mixins 对启动耗时的影响和业务代码一致；比如：业务侧，在小程序启动阶段执行了大量、繁重的业务逻辑 会造成启动耗时过长，如果这部分业务逻辑是在 vuex mixins 也会造成启动耗时增长。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3.</span>子组件中的请求是从onReady 加载完再去调用请求的，所以是否组件中不要使用请求<span class=\"token operator\">?</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">4.</span>挂载到原型上的东西 <span class=\"token punctuation\">,</span>每次生成的页面都会执行这个数据 <span class=\"token punctuation\">,</span> 这里的影响多大<span class=\"token operator\">?</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">5.</span>有没有根据包大小计算出来的 平均启动时间<span class=\"token operator\">/</span>加载耗时   </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token number\">1.</span>计算最佳收益点</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token number\">2.</span>其实这里想表达的是否2M 和 <span class=\"token number\">1</span><span class=\"token punctuation\">.</span>5M的包下载时间的差距是否几乎不计<span class=\"token operator\">?</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">6.</span>从小程序加载流程上来讲，对于首次打开小程序用户，会去下载包，包大会造成下载时间变长（在相同网络条件下）；影响启动耗时的直接因素：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>● 平台：不同的平台下（安卓、<span class=\"token constant\">IOS</span>）设备性能、操作系统、框架实现、优化方案存在较大的差异，启动耗时也存在较大的差异。只有分平台比较启动耗时（包括各阶段耗时）才有意义；</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token number\">1.</span>怎么做到只是针对某个机型去判断<span class=\"token operator\">?</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token number\">2.</span>是不是要去处理慢的机型呢<span class=\"token operator\">?</span> 怎么处理是个问题</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>● 下载比例及大小：代码包下载和更新都会显著影响小程序启动耗时，在其他流程耗时稳定的情况下，下载比例升高会影响大盘启动耗时。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>● 入口页面：不同页面启动时，根据所在分包的不同，需要下载的代码包数量和大小和代码注入量都存在差异。不同页面渲染耗时也存在差异。</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>● 机型分布：启动耗时和设备性能有较强关联，不同小程序或使用场景用户群体的差异可能导致机型分布的差异，进而影响大盘启动耗时。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>● 网络环境：网络环境主要影响网络请求的耗时，如小程序信息获取、代码包下载等。</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>间接因素：</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>● 场景<span class=\"token operator\">/</span>访问来源：不同场景下，用户访问的页面不同，新用户比例也有差异，对启动耗时会有一定影响。此外，用户访问的目的性和自身的等待意愿也有差异，也会影响打开率。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token number\">1.</span>这里可能存在有些页面分享进来的，但是这个页面其实是不允许直接进入的，可能会造成某些问题导致的耗时</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token number\">2.</span>进入的页面不是首页，这是一种什么场景<span class=\"token operator\">?</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>● 首次访问用户比例：用户首次访问小程序时，需要完整的进行小程序信息准备、代码包下载的流程，代码缓存也需要重新生成，启动耗时会比非首次访问高。</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>● 小程序版本更新：小程序版本更新时，用户需要更新小程序信息和代码包，代码缓存也需要重新生成，启动耗时会出现上涨。</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token number\">1.</span>这个其实就是每次更新版本对启动时长的影响，特别是发布灰度的时候</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token number\">2.</span>一段时间不发新版本<span class=\"token punctuation\">,</span>启动时间会降低。这里其实说明我们登报的人，他存在多次进来看的情况（这个是肯定的）</pre></td></tr></table></figure>",
            "tags": [
                "前端开发",
                "小程序",
                "小程序"
            ]
        },
        {
            "id": "http://yoursite.com/front-end/web%E5%AE%89%E5%85%A8/",
            "url": "http://yoursite.com/front-end/web%E5%AE%89%E5%85%A8/",
            "title": "web安全",
            "date_published": "2021-06-25T08:43:00.000Z",
            "content_html": "<h1 id=\"xss跨站脚本攻击\"><a class=\"anchor\" href=\"#xss跨站脚本攻击\">#</a> XSS（跨站脚本攻击）：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>使用合适的编码和转义方式来处理输入和输出的数据。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>对用户输入进行验证和过滤，避免将恶意脚本插入到页面中。</pre></td></tr></table></figure><h1 id=\"csrf跨站请求伪造\"><a class=\"anchor\" href=\"#csrf跨站请求伪造\">#</a> CSRF（跨站请求伪造）：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在关键操作上使用随机生成的令牌（CSRF Token），并验证该令牌的合法性。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>设置合适的 SameSite Cookie 属性，限制跨站点访问。</pre></td></tr></table></figure><h1 id=\"点击劫持clickjacking\"><a class=\"anchor\" href=\"#点击劫持clickjacking\">#</a> 点击劫持（Clickjacking）：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>使用 X-Frame-Options 或 Content-Security-Policy 来限制页面被嵌套到其他网站的情况。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>可以使用 JavaScript 检测页面是否在 iframe 中展示，并弹出警告或拒绝加载。</pre></td></tr></table></figure><h1 id=\"密码安全\"><a class=\"anchor\" href=\"#密码安全\">#</a> 密码安全：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>采用密码哈希算法（如 bcrypt）对用户密码进行加密存储，避免明文存储。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>强制要求用户设置强密码，并进行密码策略的验证（如长度、大小写字母、特殊字符等）。</pre></td></tr></table></figure><h1 id=\"客户端数据验证和过滤\"><a class=\"anchor\" href=\"#客户端数据验证和过滤\">#</a> 客户端数据验证和过滤：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>不要依赖前端验证，一定要在后端进行数据验证和过滤。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>对客户端输入的数据进行严格验证，避免恶意输入和攻击。</pre></td></tr></table></figure><h1 id=\"安全更新和依赖管理\"><a class=\"anchor\" href=\"#安全更新和依赖管理\">#</a> 安全更新和依赖管理：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>及时更新和升级前端框架、库和依赖，以获取最新的安全修复和补丁。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>定期审查和监控项目的依赖项，确保没有包含已知的漏洞和安全问题。</pre></td></tr></table></figure><h1 id=\"https-的使用\"><a class=\"anchor\" href=\"#https-的使用\">#</a> HTTPS 的使用：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在页面上使用 HTTPS 协议来加密数据传输，防止数据被窃取和篡改。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>配置合适的 TLS/SSL 加密套件和证书，确保通信的安全性。</pre></td></tr></table></figure><h1 id=\"安全审计和日志记录\"><a class=\"anchor\" href=\"#安全审计和日志记录\">#</a> 安全审计和日志记录：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>记录用户操作日志，追溯异常行为和安全事件。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>定期进行安全审计，检查应用程序的漏洞和安全风险。</pre></td></tr></table></figure><h1 id=\"输入验证与过滤\"><a class=\"anchor\" href=\"#输入验证与过滤\">#</a> 输入验证与过滤：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对用户输入进行验证和过滤，确保只接受预期的合法输入。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>使用白名单过滤，而不是黑名单过滤，避免遗漏恶意输入。</pre></td></tr></table></figure><h1 id=\"安全的跨域资源共享cors配置\"><a class=\"anchor\" href=\"#安全的跨域资源共享cors配置\">#</a> 安全的跨域资源共享（CORS）配置：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>配置合适的 CORS 头信息，限制跨域请求的访问权限。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>设置合理的源和目标组合，防止未经授权的访问和信息泄露。</pre></td></tr></table></figure><h1 id=\"客户端存储的安全性\"><a class=\"anchor\" href=\"#客户端存储的安全性\">#</a> 客户端存储的安全性：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>避免在客户端存储敏感信息，如密码、令牌等。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>使用合适的存储机制，如浏览器提供的 localStorage 或 sessionStorage，加密存储敏感数据。</pre></td></tr></table></figure><h1 id=\"cdn-安全\"><a class=\"anchor\" href=\"#cdn-安全\">#</a> CDN 安全：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>如果使用内容分发网络（CDN），确保从可信任的来源获取资源并验证其完整性。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>配置适当的安全头部，如 Content Security Policy (CSP)。</pre></td></tr></table></figure><h1 id=\"防御点击劫持\"><a class=\"anchor\" href=\"#防御点击劫持\">#</a> 防御点击劫持：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>通过在响应头中设置 X-Frame-Options 或 Content-Security-Policy，限制页面被嵌套到其他网站的情况。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>对于现代浏览器，可以使用 Frame-ancestors CSP 指令来进一步控制允许嵌套页面的来源。</pre></td></tr></table></figure><h1 id=\"定期安全审查和漏洞扫描\"><a class=\"anchor\" href=\"#定期安全审查和漏洞扫描\">#</a> 定期安全审查和漏洞扫描：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>定期进行安全审查，检查代码中的潜在漏洞和安全隐患。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>使用自动化工具进行漏洞扫描和代码静态分析，及时发现可能存在的安全问题。</pre></td></tr></table></figure><h1 id=\"消息传递的安全性\"><a class=\"anchor\" href=\"#消息传递的安全性\">#</a> 消息传递的安全性：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对于敏感信息的传递，尽量使用加密算法加密数据。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>避免将敏感信息直接传递给前端，而是在后端进行敏感信息的处理和加密。</pre></td></tr></table></figure><h1 id=\"防御代码注入攻击\"><a class=\"anchor\" href=\"#防御代码注入攻击\">#</a> 防御代码注入攻击：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>避免在前端中执行不受信任的代码。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>不要将用户输入直接拼接到代码字符串中，以防止代码注入攻击。</pre></td></tr></table></figure><h1 id=\"防御文件上传漏洞\"><a class=\"anchor\" href=\"#防御文件上传漏洞\">#</a> 防御文件上传漏洞：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对用户上传的文件进行严格的验证和过滤，并使用独立的文件存储来避免安全问题。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>验证文件类型、大小和内容，确保只接受合法和安全的文件。</pre></td></tr></table></figure><h1 id=\"安全的第三方组件和库\"><a class=\"anchor\" href=\"#安全的第三方组件和库\">#</a> 安全的第三方组件和库：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在使用第三方组件和库时，选择经过广泛审查和更新的可信来源。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>定期更新和升级第三方组件，以获取最新的安全修复和功能改进。</pre></td></tr></table></figure><h1 id=\"保护敏感信息\"><a class=\"anchor\" href=\"#保护敏感信息\">#</a> 保护敏感信息：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>不要将敏感信息直接存储在前端，如密码、密钥等。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>使用加密算法对敏感信息进行加密，并在后端进行处理和存储。</pre></td></tr></table></figure>",
            "tags": [
                "前端开发",
                "web安全",
                "web安全"
            ]
        },
        {
            "id": "http://yoursite.com/front-end/vue%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80/",
            "url": "http://yoursite.com/front-end/vue%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80/",
            "title": "vue常用基础",
            "date_published": "2021-06-25T08:43:00.000Z",
            "content_html": "<p>vue 系列基础到原理.</p>\n<h1 id=\"一vue基础\"><a class=\"anchor\" href=\"#一vue基础\">#</a> 一：Vue 基础</h1>\n<h2 id=\"1vue生命周期和生命周期钩子函数\"><a class=\"anchor\" href=\"#1vue生命周期和生命周期钩子函数\">#</a> 1：vue 生命周期和生命周期钩子函数？</h2>\n<p><strong>beforecreated</strong>：在实例初始化之后，el 和 data 并未初始化（这个时期，this 变量还不能使用，在 data 下的数据，和 methods 下的方法，watcher 中的事件都不能获得到；）<br />\n<strong>created</strong>: 完成了 data 数据的初始化，el 没有（这个时候可以操作 vue 实例中的数据和各种方法，但是还不能对 &quot;dom&quot; 节点进行操作；）<br />\n<strong>beforeMount</strong>：完成了 el 和 data 初始化这里的 el 是虚拟的 dom；<br />\n<strong>mounted</strong> ：完成挂载，在这发起后端请求，拿回数据，配合路由钩子做一些事情（挂载完毕，这时 dom 节点被渲染到文档内，一些需要 dom 的操作在此时才能正常进行），定义定时器<br />\n<strong> beforeUpdate</strong>：<strong>数据是新的，但是页面是旧的</strong><br />\n<strong> update</strong>：数据和页面保持同步了，</p>\n<p><strong>activited</strong>：keep-alive 专属，组件被激活时调用</p>\n<p><strong>activited</strong>：keep-alive 专属，组件被销毁时调用</p>\n<p><strong>beforeDestory</strong>： 你确认删除定时器吗？<br />\n<strong>destoryed</strong> ：当前组件已被删除，(其实就是页面的退出)</p>\n<p><strong>A、什么是 vue 生命周期？</strong><br />\nVue 实例从创建到销毁的过程，就是生命周期。也就是从开始创建、初始化数据、编译模板、挂载 Dom→渲染、更新→渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。<br />\n<strong>B、vue 生命周期的作用是什么？</strong><br />\n它的生命周期有多个事件钩子，让我们在控制整个 Vue 实例的过程时更容易形成好的逻辑。<br />\n<strong>C、vue 生命周期总共有几个阶段？</strong><br />\n它可以总共分为 8 个阶段：创建前 / 后，载入前 / 后，更新前 / 后，销毁前 / 销毁后<br />\n<strong> D、第一次页面加载会触发哪几个钩子？</strong><br />\n第一次页面加载时会触发 beforeCreate, created, beforeMount, mounted 这几个钩子<br />\n<strong> E、DOM 渲染在 哪个周期中就已经完成？</strong><br />\nDOM 渲染在 mounted 中就已经完成了。<br />\n<strong>F、简单描述每个周期具体适合哪些场景？</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">.</span>beforecreate<span class=\"token operator\">:</span>可以在加个loading事件，在加载实例是触发</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">.</span>created<span class=\"token operator\">:</span>初始化完成时的事件写在这里，如在这结束loading事件，异步请求也适宜在这里调用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">.</span>mounted<span class=\"token operator\">:</span>异步请求，启动定时器，绑定自定义事件，订阅消息</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">.</span>updated<span class=\"token operator\">:</span>如果对数据统一处理</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">5</span><span class=\"token punctuation\">.</span>beforeDestroy<span class=\"token operator\">:</span>清除定时器，解绑自定义事件，取消订阅<span class=\"token punctuation\">,</span>一般不再这里在操作数据，即使操作了，页面也不会更新了</pre></td></tr></table></figure><h2 id=\"2v-show与v-if的区别\"><a class=\"anchor\" href=\"#2v-show与v-if的区别\">#</a> 2：v-show 与 v-if 的区别</h2>\n<p>v-show 是 css 切换，v-if 是完整的销毁和重新创建<br />\n使用频繁切换时用 v-show, 运行时较少改变时用 v-if<br />\nV-if=’false’v-if 是条件渲染，当 false 的时候不会渲染<br />\n使用 v-if 的时候，如果值为 false，那么页面将不会有这个 html 标签生成<br />\n v-show 则是不管值是为 true 还是 false，html 元素都会存在，只是 css 中的 display 显示或隐藏<br />\n v-show 仅仅控制元素的显示方式，将 display 属性在 block 和 none 来回切换；而 v-if 会控制这个 DOM 节点的存在与否。当我们需要经常切换某个元素的显示 / 隐藏时，使用 v-show 会更加节省性能上的开销；当只需要一次显示或隐藏时，使用 v-if 更加合理。</p>\n<h2 id=\"3开发中常用的指令有哪些\"><a class=\"anchor\" href=\"#3开发中常用的指令有哪些\">#</a> 3：开发中常用的指令有哪些？</h2>\n<p>v-model: 一般用在表达输入，很轻松的实现表单控件和数据的双向绑定</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>v<span class=\"token operator\">-</span>html：更新元素的innerHTML</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>p v<span class=\"token operator\">-</span>html<span class=\"token operator\">=</span><span class=\"token string\">\"msg\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token literal-property property\">el</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"#app\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token literal-property property\">data</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token literal-property property\">msg</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;h1>这是一个h1元素内容&lt;/h1>\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>v-show 与 v-if：条件渲染，注意二者区别<br />\n v-on:click: 可以简写为 @click,@绑定一个事件。如果事件触发了，就可以指定事件的处理函数<br />\n v-for：基于源数据多次渲染元素或模板<br />\n v-bind: 当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM 语法<br />\n v-bind:title=”msg” 简写：    :title=&quot;msg&quot;</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>v<span class=\"token operator\">-</span>clock解决页面闪烁问题</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>如果网速慢，而该标签内容是变量没有请求响应回来的时候，页面上先不显示该标签（vue给该标签加了css样式），当响应回来的时候改标签默认将css样式去除。此指令可以解决使用插值表达式页面闪烁问题</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>将该指令加在html标签中时，可以在该文件中加style属性为display：none，例子如下：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"#app\"</span> v<span class=\"token operator\">-</span>cloak<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span>v<span class=\"token operator\">-</span>cloak<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"4绑定class的数组用法\"><a class=\"anchor\" href=\"#4绑定class的数组用法\">#</a> 4：绑定 class 的数组用法</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>对象方法v<span class=\"token operator\">-</span>bind<span class=\"token operator\">:</span><span class=\"token keyword\">class</span><span class=\"token operator\">=</span>\"<span class=\"token punctuation\">&#123;</span><span class=\"token string-property property\">'orange'</span><span class=\"token operator\">:</span>isRipe<span class=\"token punctuation\">,</span> <span class=\"token string-property property\">'green'</span><span class=\"token operator\">:</span>isNotRipe<span class=\"token punctuation\">&#125;</span>”</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">:</span><span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"tindex == index ? 'aaa':'bbb'\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2.</span>数组方法v<span class=\"token operator\">-</span>bind<span class=\"token operator\">:</span><span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"[class1,class2]\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">3.</span>行内v<span class=\"token operator\">-</span>bind<span class=\"token operator\">:</span>style<span class=\"token operator\">=</span>\"<span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span>color<span class=\"token punctuation\">,</span><span class=\"token literal-property property\">fontSize</span><span class=\"token operator\">:</span>fontSize<span class=\"token operator\">+</span><span class=\"token string\">'px'</span><span class=\"token punctuation\">&#125;</span>”</pre></td></tr></table></figure><h2 id=\"5计算属性和methods\"><a class=\"anchor\" href=\"#5计算属性和methods\">#</a> 5：计算属性和 methods</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token literal-property property\">fullName</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">//get 有什么作用？当有人读取实例 (data) 上的数据时候，get 就会被调用，返回值可以是 data 上的值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">//get 什么时候调用？1. 初次读取时，2. 所依赖的数据发生变化的时候</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//fullName 被读取时调用</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">//set 什么时候调用？当 fullName 被修改时</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t<span class=\"token comment\">//fullName 被修改时调用 </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            \t<span class=\"token comment\">// 非必须写</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'修改fullName后的值'</span><span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span>\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 简写方式</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">fullNamejianxie</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName  <span class=\"token operator\">+</span> <span class=\"token string\">'jianxie'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token number\">1.</span><span class=\"token literal-property property\">定义</span><span class=\"token operator\">:</span>要用的属性存在，要通过已有的属性计算而来</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token number\">2.</span>计算属性的底层借助Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法提供gettter<span class=\"token operator\">/</span>setter</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">.</span>get函数什么时候调用<span class=\"token operator\">?</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">初次读取时</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>所依赖的数据发生变化的时</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token number\">4.</span><span class=\"token literal-property property\">优势</span><span class=\"token operator\">:</span><span class=\"token function\">与methods实现相比，内部有缓存机制</span><span class=\"token punctuation\">(</span>复用<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>效率更高<span class=\"token punctuation\">,</span>调试方便</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token number\">5.</span><span class=\"token literal-property property\">备注</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">计算属性最终会出现在vm</span><span class=\"token punctuation\">(</span>实例<span class=\"token punctuation\">)</span><span class=\"token function\">上，直接读取即可</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>如果计算属性被修改，那必须写<span class=\"token keyword\">set</span>去响应数据，且<span class=\"token keyword\">set</span>中要引起计算时依赖的数据发送变化</pre></td></tr></table></figure><h2 id=\"6computed计算属性和watch监听的对比\"><a class=\"anchor\" href=\"#6computed计算属性和watch监听的对比\">#</a> 6：computed (计算属性) 和 watch (监听) 的对比</h2>\n<p><strong>computed</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>computed是计算属性，也就是计算值，它更多用于计算值的场景</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>computed具有缓存性，computed的值在getter执行后是会缓存的，只有在它依赖的属性值改变之后，下一次获取computed的值时重新调用对应的getter来计算</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>computed适用于计算比较消耗性能的计算场景</pre></td></tr></table></figure><p><strong>watch</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> <span class=\"token number\">1.</span>监听实例上的基础数据类型 <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"isHot = !isHot\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token operator\">&lt;</span>hr<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> <span class=\"token number\">2.</span>监听引用类型的数据 <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"obj.age++\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">2</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">&lt;</span>hr<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> <span class=\"token number\">3.</span>修改对象类型的数据变成字符串 <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"obj = '变成其他数据类型了'\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">3</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'index'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token literal-property property\">isHot</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token literal-property property\">obj</span> <span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    <span class=\"token literal-property property\">age</span> <span class=\"token operator\">:</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token literal-property property\">watch</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token literal-property property\">isHot</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token literal-property property\">immediate</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 初始化的时候，让 handler 调用一下</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span>oldValue</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//handle 什么时候调用？isHot 发送变化时候</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'isHot被修改了'</span><span class=\"token punctuation\">,</span>newValue<span class=\"token punctuation\">,</span>oldValue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\">// 'obj.age' :&#123; </span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">//      handler(newValue,oldValue)&#123; </span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">//         console.log ('age 被修改了 ',newValue,oldValue)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">//     &#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">//      // 监视多级结构中某个属性的变化 (不建议这么写，如果有很多个值呢？)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token comment\">// &#125;,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token comment\">// obj:&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token comment\">//     // 这么写即使是 age 的值发送改变，也不会有任何操作。</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token comment\">//     // 因为此时监视的是 obj 下的整个对象，除非对象变成其他类型的数据才会触发</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token comment\">//     handler(newValue,oldValue)&#123; </span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token comment\">//         console.log ('obj 被修改了 ',newValue,oldValue)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token comment\">//     &#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token comment\">// &#125;,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token literal-property property\">obj</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token comment\">// 深度监视 </span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token comment\">// 不管是 obj 的数据类型变了，还是里面的值变了</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token literal-property property\">deep</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span>oldValue</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'obj被修改了'</span><span class=\"token punctuation\">,</span>newValue<span class=\"token punctuation\">,</span>oldValue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token comment\">// 简写方式 =></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token comment\">// 什么时候的时候才能简写？只需要用到 handler 的时候</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token function\">isHot</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span>oldValue</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'isHot被修改了'</span><span class=\"token punctuation\">,</span>newValue<span class=\"token punctuation\">,</span>oldValue<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token operator\">&lt;</span>style lang<span class=\"token operator\">=</span><span class=\"token string\">\"less\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> 100VW<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> 100VH<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">.</span>watch可以监听异步任务<span class=\"token punctuation\">,</span>计算属性无法开启异步任务</pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"obj = '变成其他数据类型了'\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">4</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">5</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>      <span class=\"token literal-property property\">ahhh</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>      <span class=\"token literal-property property\">obj</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"js\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>  <span class=\"token literal-property property\">watch</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token literal-property property\">obj</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>      <span class=\"token literal-property property\">deep</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>      <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span> oldValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"obj被修改了\"</span><span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            <span class=\"token comment\">// 这里注意要用箭头函数 (this 会一层一层往外找)，不能使用普通函数（this 执行 windows）</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token comment\">// 开启异步任务</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ahhh <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token operator\">&lt;</span>style lang<span class=\"token operator\">=</span><span class=\"token string\">\"less\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token punctuation\">.</span>container <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> 100vw<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>  <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> 100vh<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"7vue组件的scoped属性的作用\"><a class=\"anchor\" href=\"#7vue组件的scoped属性的作用\">#</a> 7：vue 组件的 scoped 属性的作用</h2>\n<p>在 style 标签上添加 scoped 属性，以表示它的样式作用于当下的模块，很好的实现了样式私有化的目的；<br />\n但是也得慎用：样式不易（可）修改，而很多时候，我们是需要对公共组件的样式做微调的；</p>\n<p><strong>解决办法：</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>①：使用混合型的css样式：（混合使用全局跟本地的样式） <span class=\"token operator\">&lt;</span>style<span class=\"token operator\">></span> <span class=\"token comment\">/* 全局样式 */</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>style scoped<span class=\"token operator\">></span> <span class=\"token comment\">/* 本地样式 */</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>②：深度作用选择器（<span class=\"token operator\">>>></span>）如果你希望 scoped 样式中的一个选择器能够作用得“更深”，例如影响子组件，你可以使用 <span class=\"token operator\">>>></span> 操作符：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>style scoped<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">.</span>a <span class=\"token operator\">>>></span> <span class=\"token punctuation\">.</span>b <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"8vue常用修饰符\"><a class=\"anchor\" href=\"#8vue常用修饰符\">#</a> 8：vue 常用修饰符</h2>\n<p><strong>修饰符分为：一般修饰符，事件修身符，按键、系统</strong></p>\n<p><strong>①一般修饰符</strong><br />\n.lazy：v-model 在每次 input 事件触发后将输入框的值与数据进行同步 。你可以添加 lazy 修饰符，从而转变为使用 change 事件进行同步</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>input v<span class=\"token operator\">-</span>model<span class=\"token punctuation\">.</span>lazy<span class=\"token operator\">=</span><span class=\"token string\">\"msg\"</span> <span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>.number</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>input v<span class=\"token operator\">-</span>model<span class=\"token punctuation\">.</span>number<span class=\"token operator\">=</span><span class=\"token string\">\"age\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"number\"</span><span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>.trim</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>如果要自动过滤用户输入的首尾空白字符 <span class=\"token operator\">&lt;</span>input v<span class=\"token operator\">-</span>model<span class=\"token punctuation\">.</span>trim<span class=\"token operator\">=</span><span class=\"token string\">'trim'</span><span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>② 事件修饰符</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 阻止单击事件继续传播 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>a v<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span>click<span class=\"token punctuation\">.</span>stop<span class=\"token operator\">=</span><span class=\"token string\">\"doThis\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2.</span>提交事件不再重载页面</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span>form v<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span>submit<span class=\"token punctuation\">.</span>prevent<span class=\"token operator\">=</span><span class=\"token string\">\"onSubmit\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">3.</span><span class=\"token function\">添加事件监听器时使用事件捕获模式</span><span class=\"token punctuation\">(</span>即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span>div v<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span>click<span class=\"token punctuation\">.</span>capture<span class=\"token operator\">=</span><span class=\"token string\">\"doThis\"</span><span class=\"token operator\">></span><span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">4.</span>只当在 event<span class=\"token punctuation\">.</span>target <span class=\"token function\">是当前元素自身时触发处理函数</span><span class=\"token punctuation\">(</span>即事件不是从内部元素触发的<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span>div v<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span>click<span class=\"token punctuation\">.</span>self<span class=\"token operator\">=</span><span class=\"token string\">\"doThat\"</span><span class=\"token operator\">></span><span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">5.</span>点击事件将只会触发一次 </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">&lt;</span>a v<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span>click<span class=\"token punctuation\">.</span>once<span class=\"token operator\">=</span><span class=\"token string\">\"doThis\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">6</span><span class=\"token punctuation\">.</span>vue组件添加事件</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">&lt;</span>Tabber @click<span class=\"token punctuation\">.</span>native<span class=\"token operator\">=</span><span class=\"token string\">\"doThis\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Tabbar<span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">7.</span>修饰符可以串联</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">&lt;</span>a v<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span>click<span class=\"token punctuation\">.</span>stop<span class=\"token punctuation\">.</span>prevent<span class=\"token operator\">=</span><span class=\"token string\">\"doThat\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>③按键修饰符</strong></p>\n<p>全部的按键别名:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">.</span>enter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span>tab</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">delete</span> <span class=\"token punctuation\">(</span>捕获“删除”和“退格”键<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span>esc</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">.</span>space</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">.</span>up</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">.</span>down</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">.</span>left</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">.</span>right</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">.</span>ctrl</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">.</span>alt</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">.</span>shift</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">.</span>meta</pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>input v<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span>keyup<span class=\"token punctuation\">.</span>enter<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span> 或者 <span class=\"token operator\">&lt;</span>input @keyup<span class=\"token punctuation\">.</span>enter<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>④系统修饰键 （可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器）</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">.</span>ctrl</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span>alt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span>shift</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span>meta</pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>input @keyup<span class=\"token punctuation\">.</span>alt<span class=\"token punctuation\">.</span><span class=\"token number\">67</span><span class=\"token operator\">=</span><span class=\"token string\">\"clear\"</span><span class=\"token operator\">></span> 或者 <span class=\"token operator\">&lt;</span>div @click<span class=\"token punctuation\">.</span>ctrl<span class=\"token operator\">=</span><span class=\"token string\">\"doSomething\"</span><span class=\"token operator\">></span>Do something<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> Ctrl <span class=\"token operator\">+</span> Click <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"9v-on可以监听多个事件处理吗可以的\"><a class=\"anchor\" href=\"#9v-on可以监听多个事件处理吗可以的\">#</a> 9：v-on 可以监听多个事件处理吗？（可以的）</h2>\n<p>一个元素绑定多个事件的两种写法，一个事件绑定多个函数的两种写法，修饰符的使用。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>a style<span class=\"token operator\">=</span><span class=\"token string\">\"cursor:default\"</span> v<span class=\"token operator\">-</span>on<span class=\"token operator\">=</span><span class=\"token string\">'&#123;click:DoSomething,mouseleave:MouseLeave&#125;'</span><span class=\"token operator\">></span>doSomething<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span></pre></td></tr></table></figure><p>在 method 方法里面分别写两个事件；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"a(),b()\"</span><span class=\"token operator\">></span>点我ab<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"10vue事件中使用event对象\"><a class=\"anchor\" href=\"#10vue事件中使用event对象\">#</a> 10：vue 事件中使用 event 对象</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 不加括号的的时候，直接拿到 event 对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"btn\"</span><span class=\"token operator\">></span>点击<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">btn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span>\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 现在的需求是点击事件直接传值过来，但是也要 event 对象</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 加了括号</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"btn($event,1,2)\"</span><span class=\"token operator\">></span>点击<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">btn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// [1,2]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"11nexttick\"><a class=\"anchor\" href=\"#11nexttick\">#</a> 11：nextTick</h2>\n<ol>\n<li>语法： <code>this.$nextTick(回调函数)</code></li>\n<li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li>\n<li>什么时候用：当改变数据后，要基于更新后的新 DOM 进行某些操作时，要在 nextTick 所指定的回调函数中执行。</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">**</span>比如你想让一个dom元素显示<span class=\"token operator\">**</span>，然后下一步去获取这个元素的offsetWidth，最后你获取到的会是<span class=\"token number\">0</span>。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">openSubmenu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>show <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 获取不到宽度</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">// 这里才可以 let w = this.$refs.submenu.offsetWidth;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"13vue组件间传递数据的方式\"><a class=\"anchor\" href=\"#13vue组件间传递数据的方式\">#</a> 13：Vue 组件间传递数据的方式</h2>\n<h3 id=\"1props配置项父传子-or-子传父\"><a class=\"anchor\" href=\"#1props配置项父传子-or-子传父\">#</a> 1.props 配置项 (父传子 or 子传父)</h3>\n<ol>\n<li>\n<p>功能：让组件接收外部传过来的数据</p>\n</li>\n<li>\n<p>传递数据： <code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></p>\n</li>\n<li>\n<p>接收数据：</p>\n<ol>\n<li>\n<p>第一种方式（只接收）： <code>props:['name'] </code></p>\n</li>\n<li>\n<p>第二种方式（限制类型）： <code>props:&#123;name:String&#125;</code></p>\n</li>\n<li>\n<p>第三种方式（限制类型、限制必要性、指定默认值）：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span>String<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 必要性</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span><span class=\"token string\">'老王'</span> <span class=\"token comment\">// 默认值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>备注：props 是只读的，Vue 底层会监测你对 props 的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制 props 的内容到 data 中一份，然后去修改 data 中的数据。</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"2组件的自定义事件子传父\"><a class=\"anchor\" href=\"#2组件的自定义事件子传父\">#</a> 2. 组件的自定义事件 (子传父)</h3>\n<ol>\n<li>\n<p>一种组件间通信的方式，适用于：&lt;strong style=&quot;color:red&quot;&gt; 子组件 ===&gt; 父组件 &lt;/strong&gt;</p>\n</li>\n<li>\n<p>使用场景：A 是父组件，B 是子组件，B 想给 A 传数据，那么就要在 A 中给 B 绑定自定义事件（&lt;span style=&quot;color:red&quot;&gt; 事件的回调在 A 中 &lt;/span&gt;）。</p>\n</li>\n<li>\n<p>绑定自定义事件：</p>\n<ol>\n<li>\n<p>第一种方式，在父组件中： <code>&lt;Demo @dataarr=&quot;test&quot;/&gt;</code>   或  <code>&lt;Demo v-on:dataarr=&quot;test&quot;/&gt;</code></p>\n</li>\n<li>\n<p>第二种方式，在父组件中：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>Demo ref<span class=\"token operator\">=</span><span class=\"token string\">\"demo\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">...</span><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>xxx<span class=\"token punctuation\">.</span><span class=\"token function\">$on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dataarr'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>若想让自定义事件只能触发一次，可以使用 <code>once</code>  修饰符，或 <code>$once</code>  方法。</p>\n</li>\n</ol>\n</li>\n<li>\n<p>触发自定义事件： <code>this.$emit('dataarr',数据)</code></p>\n</li>\n<li>\n<p>解绑自定义事件 <code>this.$off('dataarr')</code></p>\n</li>\n<li>\n<p>组件上也可以绑定原生 DOM 事件，需要使用 <code>native</code>  修饰符。</p>\n</li>\n<li>\n<p>注意：通过 <code>this.$refs.xxx.$on('dataarr',回调)</code>  绑定自定义事件时，回调 &lt;span style=&quot;color:red&quot;&gt; 要么配置在 methods 中 &lt;/span&gt;，&lt;span style=&quot;color:red&quot;&gt; 要么用箭头函数 &lt;/span&gt;，否则 this 指向会出问题！</p>\n</li>\n</ol>\n<h3 id=\"3全局事件总线globaleventbus\"><a class=\"anchor\" href=\"#3全局事件总线globaleventbus\">#</a> 3. 全局事件总线（GlobalEventBus）</h3>\n<ol>\n<li>\n<p>一种组件间通信的方式，适用于 &lt;span style=&quot;color:red&quot;&gt; 任意组件间通信 &lt;/span&gt;。</p>\n</li>\n<li>\n<p>安装全局事件总线：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">beforeCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>$bus <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span> <span class=\"token comment\">// 安装全局事件总线，$bus 就是当前应用的 vm</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">...</span><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>使用事件总线：</p>\n<ol>\n<li>\n<p>接收数据：A 组件想接收数据，则在 A 组件中给 $bus 绑定自定义事件，事件的 &lt;span style=&quot;color:red&quot;&gt; 回调留在 A 组件自身。&lt;/span&gt;</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">methods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span><span class=\"token operator\">...</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">...</span><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$bus<span class=\"token punctuation\">.</span><span class=\"token function\">$on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xxxx'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>提供数据： <code>this.$bus.$emit('xxxx',数据)</code></p>\n</li>\n</ol>\n</li>\n<li>\n<p>最好在 beforeDestroy 钩子中，用 $off 去解绑 &lt;span style=&quot;color:red&quot;&gt; 当前组件所用到的 &lt;/span &gt; 事件。</p>\n</li>\n</ol>\n<h3 id=\"4消息订阅与发布pubsub\"><a class=\"anchor\" href=\"#4消息订阅与发布pubsub\">#</a> 4. 消息订阅与发布（pubsub）</h3>\n<ol>\n<li>\n<p>一种组件间通信的方式，适用于 &lt;span style=&quot;color:red&quot;&gt; 任意组件间通信 &lt;/span&gt;。</p>\n</li>\n<li>\n<p>使用步骤：</p>\n<ol>\n<li>\n<p>安装 pubsub： <code>npm i pubsub-js</code></p>\n</li>\n<li>\n<p>引入:  <code>import pubsub from 'pubsub-js'</code></p>\n</li>\n<li>\n<p>接收数据：A 组件想接收数据，则在 A 组件中订阅消息，订阅的 &lt;span style=&quot;color:red&quot;&gt; 回调留在 A 组件自身。&lt;/span&gt;</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">methods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span><span class=\"token operator\">...</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">...</span><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pid <span class=\"token operator\">=</span> pubsub<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xxx'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 订阅消息</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>提供数据： <code>pubsub.publish('xxx',数据)</code></p>\n</li>\n<li>\n<p>最好在 beforeDestroy 钩子中，用 <code>PubSub.unsubscribe(pid)</code>  去 &lt;span style=&quot;color:red&quot;&gt; 取消订阅。&lt;/span&gt;</p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"5prvide-inject\"><a class=\"anchor\" href=\"#5prvide-inject\">#</a> 5：prvide &amp; inject</h3>\n<h3 id=\"6整合\"><a class=\"anchor\" href=\"#6整合\">#</a> 6：整合</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Vue 组件间通信只要指以下 <span class=\"token number\">3</span> 类通信：父子组件通信、隔代组件通信、兄弟组件通信，下面我们分别介绍每种通信方式且会说明此种方法可适用于哪类组件间通信。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>（<span class=\"token number\">1</span>）props <span class=\"token operator\">/</span> $emit 适用 父子组件通信</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>这种方法是 Vue 组件的基础，相信大部分同学耳闻能详，所以此处就不举例展开介绍。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>（<span class=\"token number\">2</span>）ref 与 $parent <span class=\"token operator\">/</span> $children适用 父子组件通信</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ref：如果在普通的 <span class=\"token constant\">DOM</span> 元素上使用，引用指向的就是 <span class=\"token constant\">DOM</span> 元素；如果用在子组件上，引用就指向组件实例</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>$parent <span class=\"token operator\">/</span> $children：访问父 <span class=\"token operator\">/</span> 子实例</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>（<span class=\"token number\">3</span>）EventBus （$emit <span class=\"token operator\">/</span> $on）适用于 父子、隔代、兄弟组件通信</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子、隔代、兄弟组件。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>（<span class=\"token number\">4</span>）$attrs<span class=\"token operator\">/</span>$listeners适用于 隔代组件通信</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>$attrs：包含了父作用域中不被 prop <span class=\"token function\">所识别</span> <span class=\"token punctuation\">(</span>且获取<span class=\"token punctuation\">)</span> <span class=\"token function\">的特性绑定</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">class</span> 和 style 除外 <span class=\"token punctuation\">)</span>。当一个组件没有声明任何 prop <span class=\"token function\">时，这里会包含所有父作用域的绑定</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">class</span> 和 style 除外 <span class=\"token punctuation\">)</span>，并且可以通过 v<span class=\"token operator\">-</span>bind<span class=\"token operator\">=</span><span class=\"token string\">\"$attrs\"</span> 传入内部组件。通常配合 inheritAttrs 选项一起使用。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">$listeners：包含了父作用域中的</span> <span class=\"token punctuation\">(</span>不含 <span class=\"token punctuation\">.</span>native 修饰器的<span class=\"token punctuation\">)</span> v<span class=\"token operator\">-</span>on 事件监听器。它可以通过 v<span class=\"token operator\">-</span>on<span class=\"token operator\">=</span><span class=\"token string\">\"$listeners\"</span> 传入内部组件</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>（<span class=\"token number\">5</span>）provide <span class=\"token operator\">/</span> inject适用于 隔代组件通信</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>祖先组件中通过 provider 来提供变量，然后在子孙组件中通过 inject 来注入变量。provide <span class=\"token operator\">/</span> inject <span class=\"token constant\">API</span> 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>（<span class=\"token number\">6</span>）Vuex适用于 父子、隔代、兄弟组件通信</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Vuex 是一个专为 Vue<span class=\"token punctuation\">.</span>js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” <span class=\"token function\">基本上就是一个容器，它包含着你的应用中大部分的状态</span> <span class=\"token punctuation\">(</span> state <span class=\"token punctuation\">)</span>。</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>改变 store <span class=\"token function\">中的状态的唯一途径就是显式地提交</span> <span class=\"token punctuation\">(</span>commit<span class=\"token punctuation\">)</span> mutation。这样使得我们可以方便地跟踪每一个状态的变化。</pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 父组件需要拿到子组件的数据和实例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token literal-property property\">父组件调用子组件的方法</span> <span class=\"token operator\">:</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>yeluosen<span class=\"token punctuation\">.</span><span class=\"token function\">childMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 子组件拿到父组件的实例 (可以处理父组件分数据和调用父组件的方法)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$parent</pre></td></tr></table></figure><h2 id=\"14vue更新响应式的缺陷和set的使用\"><a class=\"anchor\" href=\"#14vue更新响应式的缺陷和set的使用\">#</a> 14：vue 更新响应式的缺陷和 $set 的使用</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token operator\">&lt;</span>li v<span class=\"token operator\">-</span><span class=\"token keyword\">for</span><span class=\"token operator\">=</span><span class=\"token string\">\"(item, index) in person\"</span> <span class=\"token operator\">:</span>key<span class=\"token operator\">=</span><span class=\"token string\">\"index\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">6</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"addsex\"</span><span class=\"token operator\">></span>手动点击给对象添加属性<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token operator\">&lt;</span>li v<span class=\"token operator\">-</span><span class=\"token keyword\">for</span><span class=\"token operator\">=</span><span class=\"token string\">\"(item, index) in hobby\"</span> <span class=\"token operator\">:</span>key<span class=\"token operator\">=</span><span class=\"token string\">\"index\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">7</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"addhobby\"</span><span class=\"token operator\">></span>手动点击给数组修改属性<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token literal-property property\">person</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token literal-property property\">hobby</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"抽烟\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"喝酒\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"烫头\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token literal-property property\">persons</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gsq\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span> <span class=\"token punctuation\">,</span><span class=\"token literal-property property\">status</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gsq02\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">status</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gsq03\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">status</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token function\">addsex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token comment\">// 对象不能这么添加</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token comment\">//this.person.sex = ' 男'</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token comment\">// 正确写法</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>person<span class=\"token punctuation\">,</span> <span class=\"token string\">\"sex\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"男\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token function\">addhobby</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      <span class=\"token comment\">// 必须使用响应式的数组方法可以更新 / 或者使用 this.$set</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token comment\">// 哪些数组是相应式的？</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token comment\">// push,pop,shift,unshift,splice,sort,reverse</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token comment\">//this.hobby.splice (0,1,' 哈哈 ')</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token comment\">// 或者使用</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'哈哈'</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token operator\">&lt;</span>style lang<span class=\"token operator\">=</span><span class=\"token string\">\"less\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">.</span>container <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> 100vw<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> 100vh<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>Vue监视数据的原理：</pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token number\">1.</span> vue会监视data中所有层次的数据。</pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token number\">2.</span> 如何监测对象中的数据？</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>通过setter实现监视，且要在<span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token function\">时就传入要监测的数据。</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">对象中后追加的属性，Vue默认不做响应式处理</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>如需给后添加的属性做响应式，请使用如下<span class=\"token constant\">API</span>：</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\tVue<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target，propertyName<span class=\"token operator\">/</span>index，value<span class=\"token punctuation\">)</span> 或 </pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\tvm<span class=\"token punctuation\">.</span><span class=\"token function\">$set</span><span class=\"token punctuation\">(</span>target，propertyName<span class=\"token operator\">/</span>index，value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token number\">3.</span> 如何监测数组中的数据？</pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token function\">通过包裹数组更新元素的方法实现，本质就是做了两件事：</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">调用原生对应的方法对数组进行更新。</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>重新解析模板，进而更新页面。</pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token number\">4.</span>在Vue修改数组中的某个元素一定要用如下方法：</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token number\">1.</span>使用这些<span class=\"token constant\">API</span><span class=\"token operator\">:</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token function\">、pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token function\">、shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token function\">、unshift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token function\">、splice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token function\">、sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token function\">、reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token number\">2</span><span class=\"token punctuation\">.</span>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 或 vm<span class=\"token punctuation\">.</span><span class=\"token function\">$set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>特别注意：Vue<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 和 vm<span class=\"token punctuation\">.</span><span class=\"token function\">$set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 不能给vm 或 vm的根数据对象 添加属性！！！</pre></td></tr></table></figure><h2 id=\"15vue获取dom元素节点并操作元素的样式\"><a class=\"anchor\" href=\"#15vue获取dom元素节点并操作元素的样式\">#</a> 15：Vue 获取 dom 元素节点并操作元素的样式</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$refs 获取的是组件对象</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$el 获取的是dom节点</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">1.</span><span class=\"token function\">获取到元素节点</span><span class=\"token punctuation\">(</span>这里通过<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs获取元素节点<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>xxxxx<span class=\"token punctuation\">.</span>$el</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">2.</span>操作元素的样式</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>num1Underline<span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token string\">'scaleX(1)'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>这种方法需要注意的是$el 用于获取vue挂载的实例的dom对象，如果不添加$el则获取不到style的属性值，会打印 TypeError<span class=\"token operator\">:</span> Cannot read property <span class=\"token string\">'style'</span> <span class=\"token keyword\">of</span> <span class=\"token keyword\">undefined</span> 错误，这个错误大家一定都很熟悉，是类型错误，没有访问到dom元素</pre></td></tr></table></figure><h2 id=\"16forceupdate\"><a class=\"anchor\" href=\"#16forceupdate\">#</a> 16：forceUpdate</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 数据更新后，组件没更新。使用这个方法强制刷新组件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$forceUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"17mixin混入\"><a class=\"anchor\" href=\"#17mixin混入\">#</a> 17：mixin (混入)</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 功能：可以把多个组件共用的配置提取成一个混入对象</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span> 使用方式：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   第一步定义混合：</pre></td></tr></table></figure><p>{<br />\ndata(){....},<br />\nmethods:{....}<br />\n....<br />\n}</p>\n<pre><code>\n第二步使用混入：\n\n​\t全局混入：```Vue.mixin(xxx)```\n​\t局部混入：```mixins:['xxx']\t```\n</code></pre>\n<h2 id=\"18插件\"><a class=\"anchor\" href=\"#18插件\">#</a> 18：插件</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 功能：用于增强Vue</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span> 本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3.</span> 定义插件：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   对象<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">install</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">Vue<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token comment\">// 1. 添加全局过滤器</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       Vue<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token comment\">// 2. 添加全局指令</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       Vue<span class=\"token punctuation\">.</span><span class=\"token function\">directive</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token comment\">// 3. 配置全局混入 (合)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       Vue<span class=\"token punctuation\">.</span><span class=\"token function\">mixin</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       <span class=\"token comment\">// 4. 添加实例方法</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>       <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">$myMethod</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>       <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>$myProperty <span class=\"token operator\">=</span> xxxx</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token number\">4.</span> 使用插件：Vue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"19插槽\"><a class=\"anchor\" href=\"#19插槽\">#</a> 19：插槽</h2>\n<ol>\n<li>\n<p>作用：让父组件可以向子组件指定位置插入 html 结构，也是一种组件间通信的方式，适用于 &lt;strong style=&quot;color:red&quot;&gt; 父组件 ===&gt; 子组件 &lt;/strong&gt; 。</p>\n</li>\n<li>\n<p>分类：默认插槽、具名插槽、作用域插槽</p>\n</li>\n<li>\n<p>使用方式：</p>\n<ol>\n<li>\n<p>默认插槽：</p>\n<pre><code class=\"language-vue\">父组件中：\n        &lt;Category&gt;\n           &lt;div&gt;html结构1&lt;/div&gt;\n        &lt;/Category&gt;\n子组件中：\n        &lt;template&gt;\n            &lt;div&gt;\n               &lt;!-- 定义插槽 --&gt;\n               &lt;slot&gt;插槽默认内容...&lt;/slot&gt;\n            &lt;/div&gt;\n        &lt;/template&gt;\n</code></pre>\n</li>\n<li>\n<p>具名插槽：</p>\n<pre><code class=\"language-vue\">父组件中：\n        &lt;Category&gt;\n            &lt;template slot=&quot;center&quot;&gt;\n              &lt;div&gt;html结构1&lt;/div&gt;\n            &lt;/template&gt;\n\n            &lt;template v-slot:footer&gt;\n               &lt;div&gt;html结构2&lt;/div&gt;\n            &lt;/template&gt;\n        &lt;/Category&gt;\n子组件中：\n        &lt;template&gt;\n            &lt;div&gt;\n               &lt;!-- 定义插槽 --&gt;\n               &lt;slot name=&quot;center&quot;&gt;插槽默认内容...&lt;/slot&gt;\n               &lt;slot name=&quot;footer&quot;&gt;插槽默认内容...&lt;/slot&gt;\n            &lt;/div&gt;\n        &lt;/template&gt;\n</code></pre>\n</li>\n<li>\n<p>作用域插槽：</p>\n<ol>\n<li>\n<p>理解：&lt;span style=&quot;color:red&quot;&gt; 数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。&lt;/span&gt;（games 数据在 Category 组件中，但使用数据所遍历出来的结构由 App 组件决定）</p>\n</li>\n<li>\n<p>具体编码：</p>\n<pre><code class=\"language-vue\">父组件中：\n\t\t&lt;Category&gt;\n\t\t\t&lt;template scope=&quot;scopeData&quot;&gt;\n\t\t\t\t&lt;!-- 生成的是ul列表 --&gt;\n\t\t\t\t&lt;ul&gt;\n\t\t\t\t\t&lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;\n\t\t\t\t&lt;/ul&gt;\n\t\t\t&lt;/template&gt;\n\t\t&lt;/Category&gt;\n\n\t\t&lt;Category&gt;\n\t\t\t&lt;template slot-scope=&quot;scopeData&quot;&gt;\n\t\t\t\t&lt;!-- 生成的是h4标题 --&gt;\n\t\t\t\t&lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;\n\t\t\t&lt;/template&gt;\n\t\t&lt;/Category&gt;\n子组件中：\n        &lt;template&gt;\n            &lt;div&gt;\n                &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;\n            &lt;/div&gt;\n        &lt;/template&gt;\n\t\t\n        &lt;script&gt;\n            export default &#123;\n                name:'Category',\n                props:['title'],\n                //数据在子组件自身\n                data() &#123;\n                    return &#123;\n                        games:['红色警戒','穿越火线','劲舞团','超级玛丽']\n                    &#125;\n                &#125;,\n            &#125;\n        &lt;/script&gt;\n</code></pre>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"20-vue-生命周期执行顺序父子组件\"><a class=\"anchor\" href=\"#20-vue-生命周期执行顺序父子组件\">#</a> 20: vue 生命周期执行顺序 (父子组件)</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>加载渲染过程：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>父beforecreate <span class=\"token operator\">-</span><span class=\"token operator\">></span> 父created <span class=\"token operator\">-</span><span class=\"token operator\">></span> 父beforemount <span class=\"token operator\">-</span><span class=\"token operator\">></span> 父mounted <span class=\"token operator\">-</span><span class=\"token operator\">></span> 子created <span class=\"token operator\">-</span><span class=\"token operator\">></span> 子beforemount</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">></span>  子mounted <span class=\"token operator\">-</span><span class=\"token operator\">></span> 父mounted</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2.</span>子组件更新过程：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>父beforeUpdate <span class=\"token operator\">-</span><span class=\"token operator\">></span> 子beforeUpdate <span class=\"token operator\">-</span><span class=\"token operator\">></span> 子updated <span class=\"token operator\">-</span><span class=\"token operator\">></span> 父updated</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">3.</span>父组件更新过程：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>父beforeUpdate <span class=\"token operator\">-</span><span class=\"token operator\">></span> 父updated</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">4.</span>销毁过程：</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>父beforedestroy <span class=\"token operator\">-</span><span class=\"token operator\">></span> 子beforedestroy <span class=\"token operator\">-</span><span class=\"token operator\">></span> 子destroy  <span class=\"token operator\">-</span><span class=\"token operator\">></span> 父destroy </pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>页面第一次加在会触发beforecreate，created，beforemount，mounted。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token literal-property property\">拓展</span><span class=\"token operator\">:</span>如果有缓存keep<span class=\"token operator\">-</span>alive。那么还会触发actived钩子，退出时触发deactived。后续再进入只会触发actived钩子了。所以说频繁触发的函数放在active里面，执行一次的放在mounted里面。</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token literal-property property\">父子组件生命周期的触发顺序是</span><span class=\"token operator\">:</span>参考洋葱模型。</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>先是父组件的生命周期beforecreate，created，beforemount，子组件beforecreate，created，beforemount，子组件的mounted，父组件的mounted。因为要再父组件渲染前把子组件的数据渲染到父组件里面，所以在父组件dom挂载前mounted渲染前，先加载子组件的生命周期。</pre></td></tr></table></figure><h2 id=\"21-谈谈你对-keep-alive-的了解\"><a class=\"anchor\" href=\"#21-谈谈你对-keep-alive-的了解\">#</a> 21. 谈谈你对 keep-alive 的了解？</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>keep<span class=\"token operator\">-</span>alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，避免重新渲染 ，其有以下特性：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>一般结合路由和动态组件一起使用，用于缓存组件；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>提供 include 和 exclude 属性，两者都支持字符串或正则表达式， include 表示只有名称匹配的组件会被缓存，exclude 表示任何名称匹配的组件都不会被缓存 ，其中 exclude 的优先级比 include 高；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>对应两个钩子函数 activated 和 deactivated ，当组件被激活时，触发钩子函数 activated，当组件被移除时，触发钩子函数 deactivated。</pre></td></tr></table></figure><h1 id=\"二vue-router\"><a class=\"anchor\" href=\"#二vue-router\">#</a> 二：Vue-Router</h1>\n<h2 id=\"1基本使用\"><a class=\"anchor\" href=\"#1基本使用\">#</a> 1. 基本使用</h2>\n<ol>\n<li>\n<p>安装 vue-router，命令： <code>npm i vue-router</code></p>\n</li>\n<li>\n<p>应用插件： <code>Vue.use(VueRouter)</code></p>\n</li>\n<li>\n<p>编写 router 配置项:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 引入 VueRouter</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> VueRouter <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 引入 Luyou 组件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> About <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/About'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> Home <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/Home'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 创建 router 实例对象，去管理一组一组的路由规则</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token literal-property property\">routes</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>About</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>Home</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 暴露 router</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router</pre></td></tr></table></figure></li>\n<li>\n<p>实现切换（active-class 可配置高亮样式）</p>\n<pre><code class=\"language-vue\">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;\n</code></pre>\n</li>\n<li>\n<p>指定展示位置</p>\n<pre><code class=\"language-vue\">&lt;router-view&gt;&lt;/router-view&gt;\n</code></pre>\n</li>\n</ol>\n<h2 id=\"2几个注意点\"><a class=\"anchor\" href=\"#2几个注意点\">#</a> 2. 几个注意点</h2>\n<ol>\n<li>路由组件通常存放在 <code>pages</code>  文件夹，一般组件通常存放在 <code>components</code>  文件夹。</li>\n<li>通过切换，“隐藏” 了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li>\n<li>每个组件都有自己的 <code>$route</code>  属性，里面存储着自己的路由信息。</li>\n<li>整个应用只有一个 router，可以通过组件的 <code>$router</code>  属性获取到。</li>\n</ol>\n<h2 id=\"3多级路由多级路由\"><a class=\"anchor\" href=\"#3多级路由多级路由\">#</a> 3. 多级路由（多级路由）</h2>\n<ol>\n<li>\n<p>配置路由规则，使用 children 配置项：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">routes</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>About<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>Home<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span> <span class=\"token comment\">// 通过 children 配置子级路由</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\t<span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'news'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 此处一定不要写：/news</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t\t<span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>News</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t<span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 此处一定不要写：/message</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\t<span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>Message</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure></li>\n<li>\n<p>跳转（要写完整路径）：</p>\n<pre><code class=\"language-vue\">&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;\n</code></pre>\n</li>\n</ol>\n<h2 id=\"4路由的query参数\"><a class=\"anchor\" href=\"#4路由的query参数\">#</a> 4. 路由的 query 参数</h2>\n<ol>\n<li>\n<p>传递参数</p>\n<pre><code class=\"language-vue\">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;\n&lt;router-link :to=&quot;/home/message/detail?id=666&amp;title=你好&quot;&gt;跳转&lt;/router-link&gt;\n\t\t\t\t\n&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;\n&lt;router-link \n\t:to=&quot;&#123;\n\t\tpath:'/home/message/detail',\n\t\tquery:&#123;\n\t\t   id:666,\n            title:'你好'\n\t\t&#125;\n\t&#125;&quot;\n&gt;跳转&lt;/router-link&gt;\n</code></pre>\n</li>\n<li>\n<p>接收参数：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$route<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>id</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$route<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>title</pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"5命名路由\"><a class=\"anchor\" href=\"#5命名路由\">#</a> 5. 命名路由</h2>\n<ol>\n<li>\n<p>作用：可以简化路由的跳转。</p>\n</li>\n<li>\n<p>如何使用</p>\n<ol>\n<li>\n<p>给路由命名：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/demo'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>Demo<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>Test<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'hello'</span> <span class=\"token comment\">// 给路由命名</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\t\t<span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'welcome'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t\t\t<span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>Hello<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>简化跳转：</p>\n<pre><code class=\"language-vue\">&lt;!--简化前，需要写完整的路径 --&gt;\n&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;\n\n&lt;!--简化后，直接通过名字跳转 --&gt;\n&lt;router-link :to=&quot;&#123;name:'hello'&#125;&quot;&gt;跳转&lt;/router-link&gt;\n\n&lt;!--简化写法配合传递参数 --&gt;\n&lt;router-link \n\t:to=&quot;&#123;\n\t\tname:'hello',\n\t\tquery:&#123;\n\t\t   id:666,\n            title:'你好'\n\t\t&#125;\n\t&#125;&quot;\n&gt;跳转&lt;/router-link&gt;\n</code></pre>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"6路由的params参数\"><a class=\"anchor\" href=\"#6路由的params参数\">#</a> 6. 路由的 params 参数</h2>\n<ol>\n<li>\n<p>配置路由，声明接收 params 参数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>Home<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'news'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>News</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>Message<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\t\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'xiangqing'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t\t\t<span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'detail/:id/:title'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 使用占位符声明接收 params 参数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t\t<span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>Detail</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>传递参数</p>\n<pre><code class=\"language-vue\">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;\n&lt;router-link :to=&quot;/home/message/detail/666/你好&quot;&gt;跳转&lt;/router-link&gt;\n\t\t\t\t\n&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;\n&lt;router-link \n\t:to=&quot;&#123;\n\t\tname:'xiangqing',\n\t\tparams:&#123;\n\t\t   id:666,\n            title:'你好'\n\t\t&#125;\n\t&#125;&quot;\n&gt;跳转&lt;/router-link&gt;\n</code></pre>\n<blockquote>\n<p>特别注意：路由携带 params 参数时，若使用 to 的对象写法，则不能使用 path 配置项，必须使用 name 配置！</p>\n</blockquote>\n</li>\n<li>\n<p>接收参数：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$route<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$route<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>title</pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"7路由的props配置\"><a class=\"anchor\" href=\"#7路由的props配置\">#</a> 7. 路由的 props 配置</h2>\n<p>​\t作用：让路由组件更方便的收到参数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'xiangqing'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'detail/:id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>Detail<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 第一种写法：props 值为对象，该对象中所有的 key-value 的组合最终都会通过 props 传给 Detail 组件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// props:&#123;a:900&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 第二种写法：props 值为布尔值，布尔值为 true，则把路由收到的所有 params 参数通过 props 传给 Detail 组件</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// props:true</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 第三种写法：props 值为函数，该函数返回的对象中每一组 key-value 都会通过 props 传给 Detail 组件</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">props</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">route</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span>route<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span>route<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>title</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"8router-link的replace属性\"><a class=\"anchor\" href=\"#8router-link的replace属性\">#</a> 8. <code>&lt;router-link&gt;</code>  的 replace 属性</h2>\n<ol>\n<li>作用：控制路由跳转时操作浏览器历史记录的模式</li>\n<li>浏览器的历史记录有两种写入方式：分别为 <code>push</code>  和 <code>replace</code> ， <code>push</code>  是追加历史记录， <code>replace</code>  是替换当前记录。路由跳转时候默认为 <code>push</code></li>\n<li>如何开启 <code>replace</code>  模式： <code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li>\n</ol>\n<h2 id=\"9编程式路由导航\"><a class=\"anchor\" href=\"#9编程式路由导航\">#</a> 9. 编程式路由导航</h2>\n<ol>\n<li>\n<p>作用：不借助 <code>&lt;router-link&gt; </code> 实现路由跳转，让路由跳转更加灵活</p>\n</li>\n<li>\n<p>具体编码：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//$router 的两个 API</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'xiangqing'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span>xxx<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span>xxx</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'xiangqing'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span>xxx<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span>xxx</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 前进</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 后退</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 可前进也可后退</span></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"10缓存路由组件\"><a class=\"anchor\" href=\"#10缓存路由组件\">#</a> 10. 缓存路由组件</h2>\n<ol>\n<li>\n<p>作用：让不展示的路由组件保持挂载，不被销毁。</p>\n</li>\n<li>\n<p>具体编码：</p>\n<pre><code class=\"language-vue\">&lt;keep-alive include=&quot;News&quot;&gt; \n    &lt;router-view&gt;&lt;/router-view&gt;\n&lt;/keep-alive&gt;\n</code></pre>\n</li>\n</ol>\n<h2 id=\"11两个新的生命周期钩子\"><a class=\"anchor\" href=\"#11两个新的生命周期钩子\">#</a> 11. 两个新的生命周期钩子</h2>\n<ol>\n<li>\n<p>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</p>\n</li>\n<li>\n<p>具体名字：</p>\n<ol>\n<li><code>activated</code>  路由组件被激活时触发。</li>\n<li><code>deactivated</code>  路由组件失活时触发。</li>\n</ol>\n<p>keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>component<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 该组件将被缓存！ <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>component<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>如果只想 router<span class=\"token operator\">-</span>view 里面某个组件被缓存</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'home'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> Home<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token literal-property property\">meta</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token literal-property property\">keepAlive</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 需要被缓存</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'edit'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> Edit<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token literal-property property\">meta</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token literal-property property\">keepAlive</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// 不需要被缓存</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token operator\">&lt;</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token operator\">&lt;</span>router<span class=\"token operator\">-</span>view v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span><span class=\"token operator\">=</span><span class=\"token string\">\"$route.meta.keepAlive\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 这里是会被缓存的视图组件，比如 Home！ <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>router<span class=\"token operator\">-</span>view<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token operator\">&lt;</span>router<span class=\"token operator\">-</span>view v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span><span class=\"token operator\">=</span><span class=\"token string\">\"!$route.meta.keepAlive\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 这里是不被缓存的视图组件，比如 Edit！ <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>router<span class=\"token operator\">-</span>view<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"12路由守卫\"><a class=\"anchor\" href=\"#12路由守卫\">#</a> 12. 路由守卫</h2>\n<ol>\n<li>\n<p>作用：对路由进行权限控制</p>\n</li>\n<li>\n<p>分类：全局守卫、独享守卫、组件内守卫</p>\n</li>\n<li>\n<p>全局守卫:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 全局前置守卫：初始化时执行、每次路由切换前执行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span>from<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'beforeEach'</span><span class=\"token punctuation\">,</span>to<span class=\"token punctuation\">,</span>from<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>isAuth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 判断当前路由是否需要进行权限控制</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'school'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'atguigu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 权限控制的具体规则</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 放行</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'暂无权限查看'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token comment\">// next(&#123;name:'guanyu'&#125;)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 放行</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 全局后置守卫：初始化时执行、每次路由切换后执行</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span><span class=\"token keyword\">from</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'afterEach'</span><span class=\"token punctuation\">,</span>to<span class=\"token punctuation\">,</span>from<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tdocument<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> to<span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>title <span class=\"token comment\">// 修改网页的 title</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tdocument<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">'vue_test'</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>独享守卫:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">beforeEnter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span>from<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'beforeEnter'</span><span class=\"token punctuation\">,</span>to<span class=\"token punctuation\">,</span>from<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>isAuth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 判断当前路由是否需要进行权限控制</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'school'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'atguigu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'暂无权限查看'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token comment\">// next(&#123;name:'guanyu'&#125;)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>组件内守卫：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 进入守卫：通过路由规则，进入该组件时被调用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">beforeRouteEnter</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 离开守卫：通过路由规则，离开该组件时被调用</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">beforeRouteLeave</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"13vue-router实现路由懒加载-动态加载路由\"><a class=\"anchor\" href=\"#13vue-router实现路由懒加载-动态加载路由\">#</a> 13.vue-router 实现路由懒加载（ 动态加载路由 ）</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> VueRouter <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>VueRouter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Home'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'../views/Home.vue'</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 使用 import 的方式导入组件</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'About'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'../views/About.vue'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'history'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token literal-property property\">base</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">BASE_URL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  routes</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router</pre></td></tr></table></figure><h2 id=\"14vue-router如何响应-路由参数-的变化\"><a class=\"anchor\" href=\"#14vue-router如何响应-路由参数-的变化\">#</a> 14.vue-router 如何响应 路由参数 的变化？</h2>\n<p><strong>原来的组件实例会被复用。这也意味着组件的生命周期钩子不会再被调用。你可以简单地 watch (监测变化) $route 对象：</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> <span class=\"token string\">'...'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">watch</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string\">'$route'</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">// 对路由变化作出响应...</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"15route和router的区别是什么\"><a class=\"anchor\" href=\"#15route和router的区别是什么\">#</a> 15.<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mtext>和</mtext></mrow><annotation encoding=\"application/x-tex\">route和</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord cjk_fallback\">和</span></span></span></span> router 的区别是什么</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$route为当前router跳转当前路由组件里可获取name、path、query、params等</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$router为VueRouter实例，想要导航到不同<span class=\"token constant\">URL</span>，则使用$router<span class=\"token punctuation\">.</span>push方法</pre></td></tr></table></figure><h2 id=\"16hash和history的区别\"><a class=\"anchor\" href=\"#16hash和history的区别\">#</a> 16.hash 和 history 的区别</h2>\n<ol>\n<li>\n<p>对于一个 url 来说，什么是 hash 值？—— #及其后面的内容就是 hash 值。</p>\n</li>\n<li>\n<p>hash 值不会包含在 HTTP 请求中，即：hash 值不会带给服务器。</p>\n</li>\n<li>\n<p>hash 模式：</p>\n<ol>\n<li>地址中永远带着 #号，不美观 。</li>\n<li>若以后将地址通过第三方手机 app 分享，若 app 校验严格，则地址会被标记为不合法。</li>\n<li>兼容性较好。</li>\n</ol>\n</li>\n<li>\n<p>history 模式：</p>\n<ol>\n<li>地址干净，美观 。</li>\n<li>兼容性和 hash 模式相比略差。</li>\n<li>应用部署上线时需要后端人员支持，解决刷新页面服务端 404 的问题。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"17路由鉴权\"><a class=\"anchor\" href=\"#17路由鉴权\">#</a> 17. 路由鉴权</h2>\n<h2 id=\"18vue-router-路由模式有几种\"><a class=\"anchor\" href=\"#18vue-router-路由模式有几种\">#</a> 18.vue-router 路由模式有几种？</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vue<span class=\"token operator\">-</span>router 有 <span class=\"token number\">3</span> 种路由模式：hash、history、abstract，对应的源码如下所示：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">case</span> <span class=\"token string\">'history'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>history <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HTML5History</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">case</span> <span class=\"token string\">'hash'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>history <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashHistory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fallback<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">case</span> <span class=\"token string\">'abstract'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>history <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbstractHistory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">invalid mode: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>mode<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>其中，<span class=\"token number\">3</span> 种路由模式的说明如下：</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> 使用 <span class=\"token constant\">URL</span> hash 值来作路由。支持所有浏览器，包括不支持 <span class=\"token constant\">HTML5</span> History Api 的浏览器；</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token literal-property property\">history</span> <span class=\"token operator\">:</span> 依赖 <span class=\"token constant\">HTML5</span> History <span class=\"token constant\">API</span> 和服务器配置。具体可以查看 <span class=\"token constant\">HTML5</span> History 模式；</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token literal-property property\">abstract</span> <span class=\"token operator\">:</span> 支持所有 JavaScript 运行环境，如 Node<span class=\"token punctuation\">.</span>js 服务器端。如果发现没有浏览器的 <span class=\"token constant\">API</span>，路由会自动强制进入这个模式<span class=\"token punctuation\">.</span></pre></td></tr></table></figure><h2 id=\"19-能说下-vue-router-中常用的-hash-和-history-路由模式实现原理吗\"><a class=\"anchor\" href=\"#19-能说下-vue-router-中常用的-hash-和-history-路由模式实现原理吗\">#</a> 19. 能说下 vue-router 中常用的 hash 和 history 路由模式实现原理吗？</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>（<span class=\"token number\">1</span>）hash 模式的实现原理</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>早期的前端路由的实现就是基于 location<span class=\"token punctuation\">.</span>hash 来实现的。其实现原理很简单，location<span class=\"token punctuation\">.</span>hash 的值就是 <span class=\"token constant\">URL</span> 中 # 后面的内容。比如下面这个网站，它的 location<span class=\"token punctuation\">.</span>hash 的值为 ‘#search’：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token literal-property property\">https</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>www<span class=\"token punctuation\">.</span>word<span class=\"token punctuation\">.</span>com#search</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>hash 路由模式的实现主要是基于下面几个特性：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token constant\">URL</span> 中 hash 值只是客户端的一种状态，也就是说当向服务器端发出请求时，hash 部分不会被发送；</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>hash 值的改变，都会在浏览器的访问历史中增加一个记录。因此我们能通过浏览器的回退、前进按钮控制hash 的切换；</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>可以通过 a 标签，并设置 href 属性，当用户点击这个标签后，<span class=\"token constant\">URL</span> 的 hash 值会发生改变；或者使用 JavaScript 来对 loaction<span class=\"token punctuation\">.</span>hash 进行赋值，改变 <span class=\"token constant\">URL</span> 的 hash 值；</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>我们可以使用 hashchange 事件来监听 hash 值的变化，从而对页面进行跳转（渲染）。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>（<span class=\"token number\">2</span>）history 模式的实现原理</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token constant\">HTML5</span> 提供了 History <span class=\"token constant\">API</span> 来实现 <span class=\"token constant\">URL</span> 的变化。其中做最主要的 <span class=\"token constant\">API</span> 有以下两个：history<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 和 history<span class=\"token punctuation\">.</span><span class=\"token function\">repalceState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>。这两个 <span class=\"token constant\">API</span> 可以在不进行刷新的情况下，操作浏览器的历史纪录。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>唯一不同的是，前者是新增一个历史记录，后者是直接替换当前的历史记录，如下所示：</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>window<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>window<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">replaceState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>history 路由模式的实现主要基于存在下面几个特性：</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>pushState 和 repalceState 两个 <span class=\"token constant\">API</span> 来操作实现 <span class=\"token constant\">URL</span> 的变化 ；</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>我们可以使用 popstate 事件来监听 url 的变化，从而对页面进行跳转（渲染）；</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>history<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 或 history<span class=\"token punctuation\">.</span><span class=\"token function\">replaceState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 不会触发 popstate 事件，这时我们需要手动触发页面跳转（渲染）。</pre></td></tr></table></figure><h1 id=\"三vuex\"><a class=\"anchor\" href=\"#三vuex\">#</a> 三：Vuex</h1>\n<h2 id=\"1概念\"><a class=\"anchor\" href=\"#1概念\">#</a> 1. 概念</h2>\n<p>​\t\t在 Vue 中实现集中式状态（数据）管理的一个 Vue 插件，对 vue 应用中多个组件的共享状态进行集中式的管理（读 / 写），也是一种组件间通信的方式，且适用于任意组件间通信。</p>\n<h2 id=\"2何时使用\"><a class=\"anchor\" href=\"#2何时使用\">#</a> 2. 何时使用？</h2>\n<p>​\t\t多个组件需要共享数据时，音乐播放、登录状态、加入购物车</p>\n<h2 id=\"3搭建vuex环境\"><a class=\"anchor\" href=\"#3搭建vuex环境\">#</a> 3. 搭建 vuex 环境</h2>\n<ol>\n<li>\n<p>创建文件： <code>src/store/index.js</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 引入 Vue 核心库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 引入 Vuex</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> Vuex <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 应用 Vuex 插件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>Vuex<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 准备 actions 对象 —— 响应组件中用户的动作</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 准备 mutations 对象 —— 修改 state 中的数据</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> mutations <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 准备 state 对象 —— 保存具体的数据</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 创建并暴露 store</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tactions<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tmutations<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tstate</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 <code>main.js</code>  中创建 vm 时传入 <code>store</code>  配置项</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">...</span><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 引入 store</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">'./store'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">...</span><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 创建 vm</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token literal-property property\">el</span><span class=\"token operator\">:</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token parameter\">h</span> <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tstore</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"4基本使用\"><a class=\"anchor\" href=\"#4基本使用\">#</a> 4. 基本使用</h2>\n<ol>\n<li>\n<p>初始化数据、配置 <code>actions</code> 、配置 <code>mutations</code> ，操作文件 <code>store.js</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 引入 Vue 核心库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 引入 Vuex</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> Vuex <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 引用 Vuex</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>Vuex<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 响应组件中加的动作</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">jia</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span>value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token comment\">//console.log ('actions 中的 jia 被调用了 ',miniStore,value)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tcontext<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'JIA'</span><span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">const</span> mutations <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 执行加</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token constant\">JIA</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span>value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token comment\">//console.log ('mutations 中的 JIA 被调用了 ',state,value)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tstate<span class=\"token punctuation\">.</span>sum <span class=\"token operator\">+=</span> value</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 初始化数据</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token literal-property property\">sum</span><span class=\"token operator\">:</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 创建并暴露 store</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tactions<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tmutations<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tstate<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>组件中读取 vuex 中的数据： <code>$store.state.sum</code></p>\n</li>\n<li>\n<p>组件中修改 vuex 中的数据： <code>$store.dispatch('action中的方法名',数据)</code>  或  <code>$store.commit('mutations中的方法名',数据)</code></p>\n<blockquote>\n<p>备注：若没有网络请求或其他业务逻辑，组件中也可以越过 actions，即不写 <code>dispatch</code> ，直接编写 <code>commit</code></p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"5getters的使用\"><a class=\"anchor\" href=\"#5getters的使用\">#</a> 5.getters 的使用</h2>\n<ol>\n<li>\n<p>概念：当 state 中的数据需要经过加工后再使用时，可以使用 getters 加工。</p>\n</li>\n<li>\n<p>在 <code>store.js</code>  中追加 <code>getters</code>  配置</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">...</span><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> getters <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">bigSum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>sum <span class=\"token operator\">*</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 创建并暴露 store</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tgetters</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>组件中读取数据： <code>$store.getters.bigSum</code></p>\n</li>\n</ol>\n<h2 id=\"6四个map方法的使用\"><a class=\"anchor\" href=\"#6四个map方法的使用\">#</a> 6. 四个 map 方法的使用</h2>\n<ol>\n<li>\n<p>&lt;strong&gt;mapState 方法：&lt;/strong &gt; 用于帮助我们映射 <code>state</code>  中的数据为计算属性</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 借助 mapState 生成计算属性：sum、school、subject（对象写法）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token operator\">...</span><span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">sum</span><span class=\"token operator\">:</span><span class=\"token string\">'sum'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">school</span><span class=\"token operator\">:</span><span class=\"token string\">'school'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">subject</span><span class=\"token operator\">:</span><span class=\"token string\">'subject'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 借助 mapState 生成计算属性：sum、school、subject（数组写法）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">...</span><span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'sum'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'school'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'subject'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure></li>\n<li>\n<p>&lt;strong&gt;mapGetters 方法：&lt;/strong &gt; 用于帮助我们映射 <code>getters</code>  中的数据为计算属性</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 借助 mapGetters 生成计算属性：bigSum（对象写法）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">...</span><span class=\"token function\">mapGetters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">bigSum</span><span class=\"token operator\">:</span><span class=\"token string\">'bigSum'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 借助 mapGetters 生成计算属性：bigSum（数组写法）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">...</span><span class=\"token function\">mapGetters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'bigSum'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure></li>\n<li>\n<p>&lt;strong&gt;mapActions 方法：&lt;/strong &gt; 用于帮助我们生成与 <code>actions</code>  对话的方法，即：包含 <code>$store.dispatch(xxx)</code>  的函数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 靠 mapActions 生成：incrementOdd、incrementWait（对象形式）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">...</span><span class=\"token function\">mapActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">incrementOdd</span><span class=\"token operator\">:</span><span class=\"token string\">'jiaOdd'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">incrementWait</span><span class=\"token operator\">:</span><span class=\"token string\">'jiaWait'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 靠 mapActions 生成：incrementOdd、incrementWait（数组形式）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">...</span><span class=\"token function\">mapActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'jiaOdd'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'jiaWait'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>&lt;strong&gt;mapMutations 方法：&lt;/strong &gt; 用于帮助我们生成与 <code>mutations</code>  对话的方法，即：包含 <code>$store.commit(xxx)</code>  的函数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 靠 mapActions 生成：increment、decrement（对象形式）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">...</span><span class=\"token function\">mapMutations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">increment</span><span class=\"token operator\">:</span><span class=\"token string\">'JIA'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">decrement</span><span class=\"token operator\">:</span><span class=\"token string\">'JIAN'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 靠 mapMutations 生成：JIA、JIAN（对象形式）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">...</span><span class=\"token function\">mapMutations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'JIA'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'JIAN'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>备注：mapActions 与 mapMutations 使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p>\n</blockquote>\n<h2 id=\"7模块化命名空间\"><a class=\"anchor\" href=\"#7模块化命名空间\">#</a> 7. 模块化 + 命名空间</h2>\n<ol>\n<li>\n<p>目的：让代码更好维护，让多种数据分类更加明确。</p>\n</li>\n<li>\n<p>修改 <code>store.js</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> countAbout <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">namespaced</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 开启命名空间</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token literal-property property\">mutations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token literal-property property\">getters</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">bigSum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>sum <span class=\"token operator\">*</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">const</span> personAbout <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token literal-property property\">namespaced</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 开启命名空间</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token literal-property property\">mutations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token literal-property property\">modules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    countAbout<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    personAbout</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>开启命名空间后，组件中读取 state 数据：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方式一：自己直接读取</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>personAbout<span class=\"token punctuation\">.</span>list</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 方式二：借助 mapState 读取：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">...</span><span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'countAbout'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">'sum'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'school'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'subject'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure></li>\n<li>\n<p>开启命名空间后，组件中读取 getters 数据：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方式一：自己直接读取</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span>getters<span class=\"token punctuation\">[</span><span class=\"token string\">'personAbout/firstPersonName'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 方式二：借助 mapGetters 读取：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">...</span><span class=\"token function\">mapGetters</span><span class=\"token punctuation\">(</span><span class=\"token string\">'countAbout'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">'bigSum'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>开启命名空间后，组件中调用 dispatch</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方式一：自己直接 dispatch</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'personAbout/addPersonWang'</span><span class=\"token punctuation\">,</span>person<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 方式二：借助 mapActions：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">...</span><span class=\"token function\">mapActions</span><span class=\"token punctuation\">(</span><span class=\"token string\">'countAbout'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">incrementOdd</span><span class=\"token operator\">:</span><span class=\"token string\">'jiaOdd'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">incrementWait</span><span class=\"token operator\">:</span><span class=\"token string\">'jiaWait'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>开启命名空间后，组件中调用 commit</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方式一：自己直接 commit</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'personAbout/ADD_PERSON'</span><span class=\"token punctuation\">,</span>person<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 方式二：借助 mapMutations：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">...</span><span class=\"token function\">mapMutations</span><span class=\"token punctuation\">(</span><span class=\"token string\">'countAbout'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">increment</span><span class=\"token operator\">:</span><span class=\"token string\">'JIA'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">decrement</span><span class=\"token operator\">:</span><span class=\"token string\">'JIAN'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"8vuex-state数据的双向绑定\"><a class=\"anchor\" href=\"#8vuex-state数据的双向绑定\">#</a> 8：Vuex state 数据的双向绑定</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在从组件的 computed 中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>user</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token comment\">// 使用 vuex 中的 mutations 中定义好的方法来改变</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'USER'</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span><span class=\"token comment\">// 在组件中就可以使用</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">&lt;</span>input v<span class=\"token operator\">-</span>modle<span class=\"token operator\">=</span><span class=\"token string\">\"user\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"9相关文档写的比较好的文档\"><a class=\"anchor\" href=\"#9相关文档写的比较好的文档\">#</a> 9. 相关文档 (写的比较好的文档)</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">https</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>zhuanlan<span class=\"token punctuation\">.</span>zhihu<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>p<span class=\"token operator\">/</span><span class=\"token number\">78981485</span></pre></td></tr></table></figure><h2 id=\"10简要概括vuex\"><a class=\"anchor\" href=\"#10简要概括vuex\">#</a> 10. 简要概括 vuex</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>主要包括以下几个模块：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token parameter\">State</span> <span class=\"token operator\">=></span> 基本数据，定义了应用状态的数据结构，可以在这里设置默认的初始状态。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token parameter\">Getter</span> <span class=\"token operator\">=></span> 从基本数据派生的数据，允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token parameter\">Mutation</span> <span class=\"token operator\">=></span> 是唯一更改 store 中状态的方法，且必须是同步函数。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token parameter\">Action</span> <span class=\"token operator\">=></span> 像一个装饰器，包裹mutations，使之可以异步。用于提交 mutation，而不是直接变更状态，可以包含任意异步操作。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token parameter\">Module</span> <span class=\"token operator\">=></span> 模块化Vuex，允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中。</pre></td></tr></table></figure><h1 id=\"四vue中的开发经验\"><a class=\"anchor\" href=\"#四vue中的开发经验\">#</a> 四：Vue 中的开发经验</h1>\n<h2 id=\"1搭建vue脚手架vue-cli并创建一个项目\"><a class=\"anchor\" href=\"#1搭建vue脚手架vue-cli并创建一个项目\">#</a> 1：搭建 Vue 脚手架（vue-cli）并创建一个项目</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>安装node<span class=\"token punctuation\">.</span>js环境</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t  <span class=\"token punctuation\">[</span>官网下载地址<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>nodejs<span class=\"token punctuation\">.</span>org<span class=\"token operator\">/</span>en<span class=\"token operator\">/</span>download<span class=\"token operator\">/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>               一路安装完成后 打开cmd  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>               输入 node <span class=\"token operator\">-</span>v</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>               输入 npm <span class=\"token operator\">-</span>v</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>               如果能看到node和npm的版本号了，说明已经安装成功</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>               </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>               </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">2.</span>安装vue<span class=\"token operator\">-</span>cli</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>               有npm和cnpm两种方式，网上都说cnpm好些，所以我也用的cnpm安装，</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>               首先利用淘宝镜像安装cnpm      </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>               npm install cnpm <span class=\"token operator\">-</span>g <span class=\"token operator\">--</span>registry<span class=\"token operator\">=</span>https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>registry<span class=\"token punctuation\">.</span>npm<span class=\"token punctuation\">.</span>taobao<span class=\"token punctuation\">.</span>org       </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>               安装完成</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>               输入 cnpm <span class=\"token operator\">-</span>v</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>               </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>               </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">3.</span>然后全局安装 vue<span class=\"token operator\">-</span>cli</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>               输入指令 cnpm install <span class=\"token operator\">-</span>g vue<span class=\"token operator\">-</span>cli</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>               这个命令只需要运行一次就可以了。安装上之后，以后就不用安装了。</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>               查看vue版本号</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>               vue <span class=\"token operator\">-</span><span class=\"token constant\">V</span>    <span class=\"token comment\">// 注：V 是大写字母 V</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>               如果提示“无法识别 ‘vue’ ” ，有可能是 npm 版本过低，需要手动更新npm的版本号，这也是上面说的为什么要保证npm版本号高的原因，npm的版本可以手动升级更新，没记错的话应该是               </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>               npm install <span class=\"token operator\">-</span>g npm</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>               </pre></td></tr><tr><td data-num=\"28\"></td><td><pre> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>               </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>               </pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token number\">4.</span>使用vue<span class=\"token operator\">-</span>cli来创建一个基于 webpack 模板的新项目               </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>               创建</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>               cmd利用cd指令进入到保存项目的文件夹下，然后输入命令           </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>               输入 vue init webpack</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token number\">5.</span>安装项目所需要的依赖               </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   \t\t\t\t进入新建的项目文件夹下，就是上头有一些文件的里面，输入命令</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                输入 指令 cnpm install</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token number\">6.</span>运行项目</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>               根据你<span class=\"token keyword\">package</span><span class=\"token punctuation\">.</span>json里的配置里的指令</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>               一般情况下都是 npm run dev</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>               </pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token number\">7.</span>打包资源上线</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>               根据你<span class=\"token keyword\">package</span><span class=\"token punctuation\">.</span>json里的配置里的指令</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>               一般情况下都是 npm run build</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>              \t </pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token number\">8.</span>具体创建项目 博客地址</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>               <span class=\"token literal-property property\">https</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>www<span class=\"token punctuation\">.</span>cnblogs<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>coober<span class=\"token operator\">/</span>p<span class=\"token operator\">/</span><span class=\"token number\">10875647</span><span class=\"token punctuation\">.</span>html</pre></td></tr></table></figure><h2 id=\"2关于不同版本的vue\"><a class=\"anchor\" href=\"#2关于不同版本的vue\">#</a> 2：关于不同版本的 Vue</h2>\n<ol>\n<li>vue.js 与 vue.runtime.xxx.js 的区别：\n<ol>\n<li>vue.js 是完整版的 Vue，包含：核心功能 + 模板解析器。</li>\n<li>vue.runtime.xxx.js 是运行版的 Vue，只包含：核心功能；没有模板解析器。</li>\n</ol>\n</li>\n<li>因为 vue.runtime.xxx.js 没有模板解析器，所以不能使用 template 这个配置项，需要使用 render 函数接收到的 createElement 函数去指定具体内容。</li>\n</ol>\n<h2 id=\"3vueconfigjs配置文件\"><a class=\"anchor\" href=\"#3vueconfigjs配置文件\">#</a> 3：vue.config.js 配置文件</h2>\n<ol>\n<li>使用 vue inspect &gt; output.js 可以查看到 Vue 脚手架的默认配置。</li>\n<li>使用 vue.config.js 可以对脚手架进行个性化定制，详情见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbGkudnVlanMub3JnL3po\">https://cli.vuejs.org/zh</span></li>\n</ol>\n<h2 id=\"2vue中如何编写可复用的组件\"><a class=\"anchor\" href=\"#2vue中如何编写可复用的组件\">#</a> 2：vue 中如何编写可复用的组件？</h2>\n<p>①创建组件页面 eg Toast.vue；<br />\n②用 Vue.extend () 扩展一个组件构造器，再通过实例化组件构造器，就可创造出可复用的组件<br />\n③将 toast 组件挂载到新创建的 div 上；<br />\n④把 toast 组件的 dom 添加到 body 里；<br />\n⑤修改优化达到动态控制页面显示文字跟显示时间；</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> Toast <span class=\"token keyword\">from</span> <span class=\"token string\">'@/components/Toast'</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 引入组件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> ToastConstructor  <span class=\"token operator\">=</span> Vue<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>Toast<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 返回一个 “扩展实例构造器”</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">myToast</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">text<span class=\"token punctuation\">,</span>duration</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> toastDom <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ToastConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token literal-property property\">el</span><span class=\"token operator\">:</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 将 toast 组件挂载到新创建的 div 上</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span> toastDom<span class=\"token punctuation\">.</span>$el <span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 把 toast 组件的 dom 添加到 body 里</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    toastDom<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    toastDom<span class=\"token punctuation\">.</span>duration <span class=\"token operator\">=</span> duration<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 在指定 duration 之后让 toast 消失</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        toastDom<span class=\"token punctuation\">.</span>isShow <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> toastDom<span class=\"token punctuation\">.</span>duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> myToast<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>点击查看 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTYzODQ1L2FydGljbGUvZGV0YWlscy83NzUyNDkzNA==\">https://blog.csdn.net/qq_38563845/article/details/77524934</span></p>\n<h2 id=\"3vue父组件向子组件传对象不实时更新解决\"><a class=\"anchor\" href=\"#3vue父组件向子组件传对象不实时更新解决\">#</a> 3：vue 父组件向子组件传对象，不实时更新解决</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>思路<span class=\"token number\">1</span>：就是让利用v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span>的重新渲染机制</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1.</span>首先考虑的就是手动刷了，给组件加个v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span><span class=\"token operator\">=</span>”someShow“<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//  这是组件上写法 ：&lt;my-component v-if=\"someShow\">&lt;/my-component></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 下边写在父组件的 methods 里</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function-variable function\">refesh</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>someShow<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">var</span> _this<span class=\"token operator\">=</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$nextTick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t_this<span class=\"token punctuation\">.</span>someShow <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// $nextTick</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// $nextTick 是在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后使用 $nextTick，则可以在回调中获取更新后的 DOM  这样重新渲染就会是最新数据了</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>思路<span class=\"token number\">2</span>：利用watch监听</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>在子组件中监听你要的数据，当然别监听对象，监听了不一定好使。亲测不好使，测过好使的，可以给我留言。</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token function-variable function\">data</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token literal-property property\">btn</span><span class=\"token operator\">:</span><span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>   </pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token function-variable function\">changeTitle</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token operator\">=</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listTitle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">// 这里的每次变化了就复制给组件上的变量，视图也就更改了\t\t\t</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token function-variable function\">changeList</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content<span class=\"token operator\">=</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token function-variable function\">changeBtn</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>btn<span class=\"token operator\">=</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listBtn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token literal-property property\">watch</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    \t<span class=\"token literal-property property\">listTitle</span><span class=\"token operator\">:</span><span class=\"token string\">\"changeTitle\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token literal-property property\">listList</span><span class=\"token operator\">:</span><span class=\"token string\">\"changeList\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token literal-property property\">listBtn</span><span class=\"token operator\">:</span><span class=\"token string\">\"changeBtn\"</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token comment\">// 冒号前边这个就是从父组件传过来的，后边的就是变化了的监听函数</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"4is的用法用于动态组件且基于-dom-内模板的限制来工作\"><a class=\"anchor\" href=\"#4is的用法用于动态组件且基于-dom-内模板的限制来工作\">#</a> 4：is 的用法（用于动态组件且基于 DOM 内模板的限制来工作。）</h2>\n<p><strong>is 用来动态切换组件，DOM 模板解析</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>table<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>tr is<span class=\"token operator\">=</span><span class=\"token string\">\"my-row\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>tr<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>table<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"5vue脚手架配置代理\"><a class=\"anchor\" href=\"#5vue脚手架配置代理\">#</a> 5：vue 脚手架配置代理</h2>\n<h3 id=\"方法一\"><a class=\"anchor\" href=\"#方法一\">#</a> 方法一</h3>\n<p>​\t在 vue.config.js 中添加如下配置：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">devServer</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">proxy</span><span class=\"token operator\">:</span><span class=\"token string\">\"http://localhost:5000\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>说明：</p>\n<ol>\n<li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li>\n<li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li>\n<li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li>\n</ol>\n<h3 id=\"方法二\"><a class=\"anchor\" href=\"#方法二\">#</a> 方法二</h3>\n<p>​\t编写 vue.config.js 配置具体代理规则：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token literal-property property\">devServer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token literal-property property\">proxy</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token string-property property\">'/api1'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 匹配所有以 '/api1' 开头的请求路径</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:5000'</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 代理目标的基础路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token literal-property property\">changeOrigin</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token literal-property property\">pathRewrite</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string-property property\">'^/api1'</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token string-property property\">'/api2'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 匹配所有以 '/api2' 开头的请求路径</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:5001'</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 代理目标的基础路径</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token literal-property property\">changeOrigin</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token literal-property property\">pathRewrite</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string-property property\">'^/api2'</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   changeOrigin 设置为 true 时，服务器收到的请求头中的 host 为：localhost:5000</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   changeOrigin 设置为 false 时，服务器收到的请求头中的 host 为：localhost:8080</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   changeOrigin 默认值为 true</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>*/</span></pre></td></tr></table></figure><p>说明：</p>\n<ol>\n<li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li>\n<li>缺点：配置略微繁琐，请求资源时必须加前缀。</li>\n</ol>\n<h1 id=\"五vue源码原理\"><a class=\"anchor\" href=\"#五vue源码原理\">#</a> 五：Vue 源码原理</h1>\n<h2 id=\"1vuejs2x的两个核心是什么数据驱动-组件系统\"><a class=\"anchor\" href=\"#1vuejs2x的两个核心是什么数据驱动-组件系统\">#</a> 1：vue.js2.x 的两个核心是什么 (数据驱动、组件系统。)</h2>\n<p>数据驱动：Object.defineProperty 和存储器属性: getter 和 setter（所以只兼容 IE9 及以上版本），可称为基于依赖收集的观测机制，核心是 VM，即 ViewModel，保证数据和视图的一致性。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> number <span class=\"token operator\">=</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                <span class=\"token literal-property property\">name</span> <span class=\"token operator\">:</span> <span class=\"token string\">'jack'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token literal-property property\">sex</span> <span class=\"token operator\">:</span> <span class=\"token string\">'男'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token comment\">// value : 18,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token comment\">//enumerable : true, // 控制熟悉是否可以枚举，默认值是 false</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token comment\">//writable : true, // 控制熟悉是否可以被修改，默认值是 false</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token comment\">//configurable : true, // 控制属性是否可以被删除，默认值是 false</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token comment\">// 当有人读取 person 的 age 属性时，get 函数 (getter) 就会被调用，且返回值就是 age 的值</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'有人读取了age'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token keyword\">return</span> number</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">// 当有人修改 person 的 age 属性时，set 函数 (setter) 就会被调用，且会收到修改的具体值</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">有人修改了age，值为:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>value<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    number <span class=\"token operator\">=</span> value</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>组件系统:</p>\n<h2 id=\"2vue数据代理的原理\"><a class=\"anchor\" href=\"#2vue数据代理的原理\">#</a> 2：VUE 数据代理的原理</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">通过一个对象代理对另一个对象中的属性的操作</span><span class=\"token punctuation\">(</span>读写<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span><span class=\"token number\">100</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span><span class=\"token number\">200</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">,</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">.</span>x</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        obj<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> value</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">.</span>Vue中的数据代理：</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">通过vm对象代理data对象中的数据</span><span class=\"token punctuation\">(</span>读<span class=\"token operator\">/</span>写<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">.</span>Vue中数据代理的好处：</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t更加方便的操作data中的数据</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">3.</span>基本原理</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t通过Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>把data对象中所有属性添加到vm上</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    为每一个添加到vm上的属性，都指定一个getter<span class=\"token operator\">/</span>setter</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t在getter<span class=\"token operator\">/</span><span class=\"token function\">setter内部去操作</span><span class=\"token punctuation\">(</span>读<span class=\"token operator\">/</span>写<span class=\"token punctuation\">)</span>data中对应的属性</pre></td></tr></table></figure><h2 id=\"3vue-组件中-data-为什么必须是函数\"><a class=\"anchor\" href=\"#3vue-组件中-data-为什么必须是函数\">#</a> 3：Vue 组件中 data 为什么必须是函数</h2>\n<p>vue 组件中 data 值不能为对象，因为对象是引用类型，组件可能会被多个实例同时引用。<br />\n如果 data 值为对象，将导致多个实例共享一个对象，其中一个组件改变 data 属性值，其它实例也会受到影响。</p>\n<h2 id=\"4vue双向绑定的原理\"><a class=\"anchor\" href=\"#4vue双向绑定的原理\">#</a> 4：Vue 双向绑定的原理</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>如果被问到 Vue 怎么实现数据双向绑定，大家肯定都会回答 通过 Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 对数据进行劫持，但是 Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 只能对属性进行数据劫持，不能对整个对象进行劫持。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>同理无法对数组进行劫持，但是我们在使用 Vue 框架中都知道，Vue 能检测到对象和数组（部分方法的操作）的变化，那它是怎么实现的呢？我们查看相关代码如下：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   * Observe a list of Array items.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">observeArray</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">items</span><span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//observe 功能为监测数据的变化</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   * 对属性进行递归遍历</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">let</span> childOb <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>shallow <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token comment\">//observe 功能为监测数据的变化</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  通过以上 Vue 源码部分查看，我们就能知道 Vue 框架是通过遍历数组 和递归遍历对象，从而达到利用 Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 也能对对象和数组（部分方法的操作）进行监听。</pre></td></tr></table></figure><h2 id=\"5vue的diff算法列表渲染key的作用和原理\"><a class=\"anchor\" href=\"#5vue的diff算法列表渲染key的作用和原理\">#</a> 5：Vue 的 diff 算法（列表渲染 key 的作用和原理）</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>虚拟<span class=\"token constant\">DOM</span><span class=\"token literal-property property\">中key的作用</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>key是虚拟<span class=\"token constant\">DOM</span>对象的标识，当状态中的数据发生变化时，Vue会根据【新数据】生成【新的虚拟<span class=\"token constant\">DOM</span>】</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>随后，Vue进行【新的虚拟<span class=\"token constant\">DOM</span>】与【旧的虚拟<span class=\"token constant\">DOM</span>】的差异比较，比较规则如下</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2.</span><span class=\"token literal-property property\">对比规则</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>旧虚拟<span class=\"token constant\">DOM</span>中找到了与新虚拟<span class=\"token constant\">DOM</span><span class=\"token literal-property property\">相同的key</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token number\">1.</span>若虚拟<span class=\"token constant\">DOM</span>中的内容没变，直接使用之前的真实<span class=\"token constant\">DOM</span>！</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token number\">2.</span>若虚拟<span class=\"token constant\">DOM</span>中的内容变了，则生成新的真实<span class=\"token constant\">DOM</span>，随后替换掉页面中之前的真实<span class=\"token constant\">DOM</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>旧虚拟<span class=\"token constant\">DOM</span>中未找到与新虚拟<span class=\"token constant\">DOM</span>相同的key</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token number\">1.</span>创建新的真实<span class=\"token constant\">DOM</span>，随后渲染到页面</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">3.</span><span class=\"token literal-property property\">用index作为key可能会引发的问题</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token number\">1.</span>若对数据进行，逆序添加，逆序删除等破坏顺寻操作：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    \t<span class=\"token parameter\">会产生没有必要的真实<span class=\"token constant\">DOM</span>更新</span> <span class=\"token operator\">=></span> 界面效果没问题，但是效率低</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token number\">2.</span>如果结构中还有包含输入类的<span class=\"token constant\">DOM</span>：</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    \t<span class=\"token parameter\">会产生错误<span class=\"token constant\">DOM</span>更新</span> <span class=\"token operator\">=></span> 界面有问题</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">4.</span>开发中如何选择key<span class=\"token operator\">?</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token number\">1.</span>最好使用每条数据的唯一标识作为key<span class=\"token punctuation\">,</span>比如id<span class=\"token punctuation\">,</span>手机号，身份证号，学号等唯一值</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token number\">2.</span>如果不存在对数据的逆序添加，逆序删除等破坏性顺序操作，仅用于渲染列表展示，使用index作为key是没问题的</pre></td></tr></table></figure><h2 id=\"6vue是怎么检测数据的改变的原理\"><a class=\"anchor\" href=\"#6vue是怎么检测数据的改变的原理\">#</a> 6：Vue 是怎么检测数据的改变的原理</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token literal-property property\">name</span> <span class=\"token operator\">:</span><span class=\"token string\">'jack'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">age</span> <span class=\"token operator\">:</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 创建一个监视的实例对象，用于监视 data 中属性的变化</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> obs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observer</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 准备一个 vm 实例对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">let</span> vm <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>vm<span class=\"token punctuation\">.</span>_data <span class=\"token operator\">=</span> data <span class=\"token operator\">=</span> obs</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Observer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 汇总对象中所有属性形成的数组</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">const</span> keys <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 遍历</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    keys<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">k</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>k<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">被改了，我要去解析模板了，生成虚拟DOM</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                obj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 自己实现的基本的原理，只是对第一层的基本数据类型进行检测。无法检测到里面的</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>Vue的底层对data中的对象数据检测进行了递归，所以都能检测到，</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>数组里的对象数据没有检测</pre></td></tr></table></figure><h2 id=\"7-v-model-的原理\"><a class=\"anchor\" href=\"#7-v-model-的原理\">#</a> 7. v-model 的原理？</h2>\n<h2 id=\"8使用过-vue-ssr-吗说说-ssr\"><a class=\"anchor\" href=\"#8使用过-vue-ssr-吗说说-ssr\">#</a> 8. 使用过 Vue SSR 吗？说说 SSR？</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Vue<span class=\"token punctuation\">.</span>js 是构建客户端应用程序的框架。默认情况下，可以在浏览器中输出 Vue 组件，进行生成 <span class=\"token constant\">DOM</span> 和操作 <span class=\"token constant\">DOM</span>。然而，也可以将同一个组件渲染为服务端的 <span class=\"token constant\">HTML</span> 字符串，将它们直接发送到浏览器，最后将这些静态标记<span class=\"token string\">\"激活\"</span>为客户端上完全可交互的应用程序。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>即：<span class=\"token constant\">SSR</span>大致的意思就是vue在客户端将标签渲染成的整个 html 片段的工作在服务端完成，服务端形成的html 片段直接返回给客户端这个过程就叫做服务端渲染。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>服务端渲染 <span class=\"token constant\">SSR</span> 的优缺点如下：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>（<span class=\"token number\">1</span>）服务端渲染的优点：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>更好的 <span class=\"token constant\">SEO</span>：因为 <span class=\"token constant\">SPA</span> 页面的内容是通过 Ajax 获取，而搜索引擎爬取工具并不会等待 Ajax 异步完成后再抓取页面内容，所以在 <span class=\"token constant\">SPA</span> 中是抓取不到页面通过 Ajax 获取到的内容；而 <span class=\"token constant\">SSR</span> 是直接由服务端返回已经渲染好的页面（数据已经包含在页面中），所以搜索引擎爬取工具可以抓取渲染好的页面；</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>更快的内容到达时间（首屏加载更快）：<span class=\"token constant\">SPA</span> 会等待所有 Vue 编译后的 js 文件都下载完成后，才开始进行页面的渲染，文件下载等需要一定的时间等，所以首屏渲染需要一定的时间；<span class=\"token constant\">SSR</span> 直接由服务端渲染好页面直接返回显示，无需等待下载 js 文件及再去渲染等，所以 <span class=\"token constant\">SSR</span> 有更快的内容到达时间；</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>（<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> 服务端渲染的缺点：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>更多的开发条件限制：例如服务端渲染只支持 beforCreate 和 created 两个钩子函数，这会导致一些外部扩展库需要特殊处理，才能在服务端渲染应用程序中运行；并且与可以部署在任何静态文件服务器上的完全静态单页面应用程序 <span class=\"token constant\">SPA</span> 不同，服务端渲染应用程序，需要处于 Node<span class=\"token punctuation\">.</span>js server 运行环境；</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>更多的服务器负载：在 Node<span class=\"token punctuation\">.</span>js 中渲染完整的应用程序，显然会比仅仅提供静态文件的 server 更加大量占用<span class=\"token constant\">CPU</span> <span class=\"token function\">资源</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">CPU</span><span class=\"token operator\">-</span>intensive <span class=\"token operator\">-</span> <span class=\"token constant\">CPU</span> 密集<span class=\"token punctuation\">)</span><span class=\"token function\">，因此如果你预料在高流量环境</span> <span class=\"token punctuation\">(</span> high traffic <span class=\"token punctuation\">)</span> 下使用，请准备相应的服务器负载，并明智地采用缓存策略。</pre></td></tr></table></figure><h2 id=\"9-vue-框架怎么实现对象和数组的监听\"><a class=\"anchor\" href=\"#9-vue-框架怎么实现对象和数组的监听\">#</a> 9. Vue 框架怎么实现对象和数组的监听？</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Vue 数据双向绑定主要是指：数据变化更新视图，视图变化更新数据。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>即：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>输入框内容变化时，Data 中的数据同步变化。即 <span class=\"token parameter\">View</span> <span class=\"token operator\">=></span> Data 的变化。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Data 中的数据变化时，文本节点的内容同步变化。即 <span class=\"token parameter\">Data</span> <span class=\"token operator\">=></span> View 的变化。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>其中，View 变化更新 Data ，可以通过事件监听的方式来实现，所以 Vue 的数据双向绑定的工作主要是如何根据 Data 变化更新 View。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Vue 主要通过以下 <span class=\"token number\">4</span> 个步骤来实现数据双向绑定的：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>实现一个监听器 Observer：对数据对象进行遍历，包括子属性对象的属性，利用 Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 对属性都加上 setter 和 getter。这样的话，给这个对象的某个值赋值，就会触发 setter，那么就能监听到了数据变化。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>实现一个解析器 Compile：解析 Vue 模板指令，将模板中的变量都替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，调用更新函数进行数据更新。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>实现一个订阅者 Watcher：Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁 ，主要的任务是订阅 Observer 中的属性值变化的消息，当收到属性值变化的消息时，触发解析器 Compile 中对应的更新函数。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>实现一个订阅器 Dep：订阅器采用 发布<span class=\"token operator\">-</span>订阅 设计模式，用来收集订阅者 Watcher，对监听器 Observer 和 订阅者 Watcher 进行统一管理。</pre></td></tr></table></figure><h2 id=\"10-vue-怎么用-vmset-解决对象新增属性不能响应的问题\"><a class=\"anchor\" href=\"#10-vue-怎么用-vmset-解决对象新增属性不能响应的问题\">#</a> 10. Vue 怎么用 vm.$set () 解决对象新增属性不能响应的问题 ？</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>受现代 JavaScript 的限制 ，Vue 无法检测到对象属性的添加或删除。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>由于 Vue 会在初始化实例时对属性执行 getter<span class=\"token operator\">/</span>setter 转化，所以属性必须在 data 对象上存在才能让 Vue 将它转换为响应式的。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>但是 Vue 提供了 Vue<span class=\"token punctuation\">.</span><span class=\"token function\">set</span> <span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">,</span> propertyName<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> vm<span class=\"token punctuation\">.</span><span class=\"token function\">$set</span> <span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">,</span> propertyName<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>来实现为对象添加响应式属性，那框架本身是如何实现的呢？</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>我们查看对应的 Vue 源码：vue<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>core<span class=\"token operator\">/</span>instance<span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>js</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">set</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span> <span class=\"token operator\">|</span> Object<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">val</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> any <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">//target 为数组</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isValidArrayIndex</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 修改数组的长度，避免索引 > 数组长度导致 splcie () 执行有误</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    target<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 利用数组的 splice 变异方法触发响应式</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    target<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> val</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">//key 已经存在，直接修改属性值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> target <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> val</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">const</span> ob <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__ob__</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">//target 本身就不是响应式数据，直接赋值</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ob<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> val</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token comment\">// 对属性进行响应式处理</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token function\">defineReactive</span><span class=\"token punctuation\">(</span>ob<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  ob<span class=\"token punctuation\">.</span>dep<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">return</span> val</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>我们阅读以上源码可知，vm<span class=\"token punctuation\">.</span>$<span class=\"token keyword\">set</span> 的实现原理是：</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>如果目标是数组，直接使用数组的 splice 方法触发相应式；</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>如果目标是对象，会先判读属性是否存在、对象是否是响应式，最终如果要对属性进行响应式处理，则是通过调用 defineReactive 方法进行响应式处理（ defineReactive 方法就是 Vue 在初始化对象时，给对象属性采用 Object<span class=\"token punctuation\">.</span>defineProperty 动态添加 getter 和 setter 的功能所调用的方法）</pre></td></tr></table></figure><h2 id=\"11-虚拟-dom-的优缺点\"><a class=\"anchor\" href=\"#11-虚拟-dom-的优缺点\">#</a> 11. 虚拟 DOM 的优缺点？</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>优点：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>保证性能下限： 框架的虚拟 <span class=\"token constant\">DOM</span> 需要适配任何上层 <span class=\"token constant\">API</span> 可能产生的操作，它的一些 <span class=\"token constant\">DOM</span> 操作的实现必须是普适的，所以它的性能并不是最优的；但是比起粗暴的 <span class=\"token constant\">DOM</span> 操作性能要好很多，因此框架的虚拟 <span class=\"token constant\">DOM</span> 至少可以保证在你不需要手动优化的情况下，依然可以提供还不错的性能，即保证性能的下限；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>无需手动操作 <span class=\"token constant\">DOM</span>： 我们不再需要手动去操作 <span class=\"token constant\">DOM</span>，只需要写好 View<span class=\"token operator\">-</span>Model 的代码逻辑，框架会根据虚拟 <span class=\"token constant\">DOM</span> 和 数据双向绑定，帮我们以可预期的方式更新视图，极大提高我们的开发效率；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>跨平台： 虚拟 <span class=\"token constant\">DOM</span> 本质上是 JavaScript 对象<span class=\"token punctuation\">,</span>而 <span class=\"token constant\">DOM</span> 与平台强相关，相比之下虚拟 <span class=\"token constant\">DOM</span> 可以进行更方便地跨平台操作，例如服务器渲染、weex 开发等等。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token literal-property property\">缺点</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>无法进行极致优化： 虽然虚拟 <span class=\"token constant\">DOM</span> <span class=\"token operator\">+</span> 合理的优化，足以应对绝大部分应用的性能需求，但在一些性能要求极高的应用中虚拟 <span class=\"token constant\">DOM</span> 无法进行针对性的极致优化。</pre></td></tr></table></figure><h2 id=\"12-虚拟-dom-实现原理\"><a class=\"anchor\" href=\"#12-虚拟-dom-实现原理\">#</a> 12. 虚拟 DOM 实现原理？</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>虚拟 <span class=\"token constant\">DOM</span> 的实现原理主要包括以下 <span class=\"token number\">3</span> 部分：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>用 JavaScript 对象模拟真实 <span class=\"token constant\">DOM</span> 树，对真实 <span class=\"token constant\">DOM</span> 进行抽象；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>diff 算法 — 比较两棵虚拟 <span class=\"token constant\">DOM</span> 树的差异；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>pach 算法 — 将两个虚拟 <span class=\"token constant\">DOM</span> 对象的差异应用到真正的 <span class=\"token constant\">DOM</span> 树。</pre></td></tr></table></figure><h2 id=\"13-vue-中的-key-有什么作用\"><a class=\"anchor\" href=\"#13-vue-中的-key-有什么作用\">#</a> 13. Vue 中的 key 有什么作用？</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Vue 的 diff 过程可以概括为：oldCh 和 newCh 各有两个头尾的变量 oldStartIndex、oldEndIndex 和 newStartIndex、newEndIndex，它们会新节点和旧节点会进行两两对比，即一共有<span class=\"token number\">4</span>种比较方式：newStartIndex 和oldStartIndex 、newEndIndex 和 oldEndIndex 、newStartIndex 和 oldEndIndex 、newEndIndex 和 oldStartIndex，如果以上 <span class=\"token number\">4</span> 种比较都没匹配，如果设置了key，就会用 key 再进行比较，在比较的过程中，遍历会往中间靠，一旦 StartIdx <span class=\"token operator\">></span> EndIdx 表明 oldCh 和 newCh 至少有一个已经遍历完了，就会结束比较。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>所以 Vue 中 key 的作用是：key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速<span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>更准确：因为带 key 就不是就地复用了，在 sameNode 函数 a<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> b<span class=\"token punctuation\">.</span>key 对比中可以避免就地复用的情况。所以会更加准确。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>更快速：利用 key 的唯一性生成 map 对象来获取对应节点，比遍历方式更快，源码如下：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createKeyToOldIdx</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">children<span class=\"token punctuation\">,</span> beginIdx<span class=\"token punctuation\">,</span> endIdx</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">let</span> i<span class=\"token punctuation\">,</span> key</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> beginIdx<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> endIdx<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    key <span class=\"token operator\">=</span> children<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> map<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> map</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"14-你有对-vue-项目进行哪些优化\"><a class=\"anchor\" href=\"#14-你有对-vue-项目进行哪些优化\">#</a> 14. 你有对 Vue 项目进行哪些优化？</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>（<span class=\"token number\">1</span>）代码层面的优化</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span> 和 v<span class=\"token operator\">-</span>show 区分使用场景</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>computed 和 watch 区分使用场景</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>v<span class=\"token operator\">-</span><span class=\"token keyword\">for</span> 遍历必须为 item 添加 key，且避免同时使用 v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>长列表性能优化</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>事件的销毁</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>图片资源懒加载</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>路由懒加载</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>第三方插件的按需引入</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>优化无限列表性能</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>服务端渲染 <span class=\"token constant\">SSR</span> or 预渲染</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>（<span class=\"token number\">2</span>）Webpack 层面的优化</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Webpack 对图片进行压缩</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>减少 <span class=\"token constant\">ES6</span> 转为 <span class=\"token constant\">ES5</span> 的冗余代码</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>提取公共代码</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>模板预编译</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>提取组件的 <span class=\"token constant\">CSS</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>优化 SourceMap</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>构建结果输出分析</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>Vue 项目的编译优化</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>（<span class=\"token number\">3</span>）基础的 Web 技术的优化</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>开启 gzip 压缩</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>浏览器缓存</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token constant\">CDN</span> 的使用</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>使用 Chrome Performance 查找性能瓶颈</pre></td></tr></table></figure><h2 id=\"15-对于-vue30-特性你有什么了解的吗\"><a class=\"anchor\" href=\"#15-对于-vue30-特性你有什么了解的吗\">#</a> 15. 对于 vue3.0 特性你有什么了解的吗？</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Vue <span class=\"token number\">3.0</span> 的目标是让 Vue 核心变得更小、更快、更强大，因此 Vue <span class=\"token number\">3.0</span> 增加以下这些新特性：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>（<span class=\"token number\">1</span>）监测机制的改变</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3.0</span> 将带来基于代理 Proxy 的 observer 实现，提供全语言覆盖的反应性跟踪。这消除了 Vue <span class=\"token number\">2</span> 当中基于 Object<span class=\"token punctuation\">.</span>defineProperty 的实现所存在的很多限制：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>只能监测属性，不能监测对象</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>检测属性的添加和删除；</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>检测数组索引和长度的变更；</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>支持 Map、Set、WeakMap 和 WeakSet。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>新的 observer 还提供了以下特性：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>用于创建 observable 的公开 <span class=\"token constant\">API</span>。这为中小规模场景提供了简单轻量级的跨组件状态管理解决方案。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>默认采用惰性观察。在 <span class=\"token number\">2</span><span class=\"token punctuation\">.</span>x 中，不管反应式数据有多大，都会在启动时被观察到。如果你的数据集很大，这可能会在应用启动时带来明显的开销。在 <span class=\"token number\">3</span><span class=\"token punctuation\">.</span>x 中，只观察用于渲染应用程序最初可见部分的数据。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>更精确的变更通知。在 <span class=\"token number\">2</span><span class=\"token punctuation\">.</span>x 中，通过 Vue<span class=\"token punctuation\">.</span>set 强制添加新属性将导致依赖于该对象的 watcher 收到变更通知。在 <span class=\"token number\">3</span><span class=\"token punctuation\">.</span>x 中，只有依赖于特定属性的 watcher 才会收到通知。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>不可变的 observable：我们可以创建值的“不可变”版本（即使是嵌套属性），除非系统在内部暂时将其“解禁”。这个机制可用于冻结 prop 传递或 Vuex 状态树以外的变化。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>更好的调试功能：我们可以使用新的 renderTracked 和 renderTriggered 钩子精确地跟踪组件在什么时候以及为什么重新渲染。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>（<span class=\"token number\">2</span>）模板</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>模板方面没有大的变更，只改了作用域插槽，<span class=\"token number\">2</span><span class=\"token punctuation\">.</span>x 的机制导致作用域插槽变了，父组件会重新渲染，而 <span class=\"token number\">3.0</span> 把作用域插槽改成了函数的方式，这样只会影响子组件的重新渲染，提升了渲染的性能。</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>同时，对于 render 函数的方面，vue3<span class=\"token punctuation\">.</span><span class=\"token number\">0</span> 也会进行一系列更改来方便习惯直接使用 api 来生成 vdom 。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>（<span class=\"token number\">3</span>）对象式的组件声明方式</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>vue2<span class=\"token punctuation\">.</span>x 中的组件是通过声明的方式传入一系列 option，和 TypeScript 的结合需要通过一些装饰器的方式来做，虽然能实现功能，但是比较麻烦。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token number\">3.0</span> 修改了组件的声明方式，改成了类式的写法，这样使得和 TypeScript 的结合变得很容易。</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>此外，vue 的源码也改用了 TypeScript 来写。其实当代码的功能复杂之后，必须有一个静态类型系统来做一些辅助管理。</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>现在 vue3<span class=\"token punctuation\">.</span><span class=\"token number\">0</span> 也全面改用 TypeScript 来重写了，更是使得对外暴露的 api 更容易结合 TypeScript。静态类型系统对于复杂代码的维护确实很有必要。</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>（<span class=\"token number\">4</span>）其它方面的更改</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>vue3<span class=\"token punctuation\">.</span><span class=\"token number\">0</span> 的改变是全面的，上面只涉及到主要的 <span class=\"token number\">3</span> 个方面，还有一些其他的更改：</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>支持自定义渲染器，从而使得 weex 可以通过自定义渲染器的方式来扩展，而不是直接 fork 源码来改的方式。</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>支持 Fragment（多个根节点）和 Protal（在 dom 其他部分渲染组建内容）组件，针对一些特殊的场景做了处理。</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>基于 treeshaking 优化，提供了更多的内置功能。</pre></td></tr></table></figure><h2 id=\"16-响应式原理变化侦测\"><a class=\"anchor\" href=\"#16-响应式原理变化侦测\">#</a> 16. 响应式原理（变化侦测）</h2>\n<p><strong>使用发布订阅模式将数据劫持和模板编译结合，实现双向绑定</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token literal-property property\">、observer</span><span class=\"token operator\">:</span> 封装 Object<span class=\"token punctuation\">.</span>defineProperty 方法用来劫持对象属性的getter和setter，以此来追踪数据变化。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span><span class=\"token function\">、读取数据时触发getter来收集依赖</span><span class=\"token punctuation\">(</span>Watcher<span class=\"token punctuation\">)</span>到Dep。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3</span>、修改数据时触发setter，并遍历依赖列表，通知所有相关依赖（Watcher）</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">4</span>、Dep 类为依赖找一个存储依赖的地方，用来收集和管理依赖，在getter中收集，在setter中通知。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">5</span>、Watcher 类就是收集的依赖，实际上是一个订阅器，Watcher会将自己的实例赋值给window<span class=\"token punctuation\">.</span>target（全局变量）上，然后去主动访问属性，触发属性的getter，getter中会将此Watcher收集到Dep中，Watcher的update方法会在Dep的通知方法中被调用，触发更新。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">6</span>、Observer 类用来将一个对象的所有属性和子属性都变成响应式的，通过递归调用defineReactive来实现。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">7</span>、由于无法侦测对象上新增<span class=\"token operator\">/</span>删除属性，所以提供 $<span class=\"token keyword\">set</span> 和 $<span class=\"token keyword\">delete</span> <span class=\"token constant\">API5</span>。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">28.</span> Object<span class=\"token punctuation\">.</span>defineProperty怎么用， 三个参数？，有什么作用啊？</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   obj：需要定义属性的对象</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     prop：需要定义的属性</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>：要定义或修改的属性描述符。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t     <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"18\"</span><span class=\"token punctuation\">,</span>         <span class=\"token comment\">// 设置默认值 （与 get () 互斥）</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t     <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 这一句控制属性可以枚举 enumerable 改为 true 就可以参与遍历了   默认值 false</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t     <span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">// 该属性是否可写   默认值 false （与 set () 互斥）</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t     <span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 该属性是否可被删除   默认值 false</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t      <span class=\"token keyword\">get</span> <span class=\"token comment\">// 当有人读取 prop 的时候  get 函数就会调用，并且返回就是 sss 的值</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t      <span class=\"token keyword\">set</span> <span class=\"token comment\">// 当有人修改 prop 的时候  set 函数就会调用，有个参数这个参数就是修改后的值</span></pre></td></tr></table></figure><h2 id=\"17-vue2和vue3的响应式原理都有什么区别呢\"><a class=\"anchor\" href=\"#17-vue2和vue3的响应式原理都有什么区别呢\">#</a> 17. vue2 和 vue3 的响应式原理都有什么区别呢？</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vue2 用的是 Object<span class=\"token punctuation\">.</span>defindProperty 但是vue3用的是Proxy</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Object<span class=\"token punctuation\">.</span>defindProperty 缺点：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>一次只能对一个属性进行监听，需要遍历来对所有属性监听</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>对于对象的新增属性，需要手动监听</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>对于数组通过push、unshift方法增加的元素，也无法监听</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Proxy就没有这个问题，可以监听整个对象的数据变化，所以用vue3<span class=\"token punctuation\">.</span><span class=\"token number\">0</span>会用Proxy代替definedProperty。</pre></td></tr></table></figure><h2 id=\"18-vue-模板编译原理\"><a class=\"anchor\" href=\"#18-vue-模板编译原理\">#</a> 18. Vue 模板编译原理</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>模板字符串 转换成 element <span class=\"token constant\">AST</span>（解析器）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Vue<span class=\"token operator\">-</span>loader 切割解析 <span class=\"token punctuation\">.</span>vue 文件（parseHTML按标签以出栈入栈形式切割（自闭合不入栈直接处理），出栈时维护父子关系）生成 <span class=\"token constant\">AST</span>（抽象语法树）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>使用大量正则匹配开始结束标签，<span class=\"token keyword\">while</span>指针定位解析位置，</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>对 <span class=\"token constant\">AST</span> 进行静态节点标记，主要用来做虚拟<span class=\"token constant\">DOM</span>的渲染优化（优化器）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>在dom更新时不需 diff 静态节点。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>使用 element <span class=\"token constant\">AST</span> 生成 render 函数代码字符串（代码生成器）</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Vue<span class=\"token operator\">-</span>template<span class=\"token operator\">-</span>compiler再解析成render（可执行函数字符串<span class=\"token operator\">-</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">this</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token function\">_c</span><span class=\"token punctuation\">(</span>‘div’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>），<span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span> 生成函数，传递给组件的 render</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>在组件渲染的时候直接调用 render 即可</pre></td></tr></table></figure><h2 id=\"19-vue原理总结\"><a class=\"anchor\" href=\"#19-vue原理总结\">#</a> 19. Vue 原理总结</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>【模板编译】将template模板，经过编译系统后生成VNode，（模板字符串→<span class=\"token constant\">AST</span>→Render函数）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>【渲染】然后再通过渲染系统来将VNode生成真实<span class=\"token constant\">DOM</span>（document<span class=\"token punctuation\">.</span>createElement <span class=\"token operator\">&amp;&amp;</span> Mount挂载到真实<span class=\"token constant\">DOM</span>节点上）</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>【响应式】通过响应式系统对数据进行监听，当数据发生改变时，触发依赖项（组件）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>【Diff <span class=\"token operator\">&amp;</span> Patch】组件内收到通知后，会通过diff算法对比VNode的变化，尽可能复用代码，找出最小差异，保证性能消耗最小。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>【渲染】拿到需要新增<span class=\"token operator\">/</span>删除<span class=\"token operator\">/</span>修改的VNode后，逐一去操作真实<span class=\"token constant\">DOM</span>进行修改（通过选择器选择到对应真实<span class=\"token constant\">DOM</span>节点进行修改）</pre></td></tr></table></figure><h1 id=\"六对vue的理解\"><a class=\"anchor\" href=\"#六对vue的理解\">#</a> 六：对 Vue 的理解</h1>\n<h2 id=\"1谈谈对mvvm的理解\"><a class=\"anchor\" href=\"#1谈谈对mvvm的理解\">#</a> 1：谈谈对 MVVM 的理解</h2>\n<p>M-model，model 代表数据模型，也可以在 model 中定义数据修改和操作的业务逻辑</p>\n<p>V-view,view 代表 UI 组件，它负责将数据模型转化为 UI 展现出来</p>\n<p>VM-viewmodel,viewmodel 监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步 view 和 model 的对象，连接 model 和 view</p>\n<h2 id=\"2vue是渐进式的框架的理解主张最少没有多做职责之外的事\"><a class=\"anchor\" href=\"#2vue是渐进式的框架的理解主张最少没有多做职责之外的事\">#</a> 2：vue 是渐进式的框架的理解：(主张最少，没有多做职责之外的事)</h2>\n<p>Vue 的核心的功能，是一个视图模板引擎，但这不是说 Vue 就不能成为一个框架。如下图所示，这里包含了 Vue 的所有部件，在声明式渲染（视图模板引擎）的基础上，我们可以通过添加组件系统、客户端路由、大规模状态管理来构建一个完整的框架。更重要的是，这些功能相互独立，你可以在核心功能的基础上任意选用其他的部件，不一定要全部整合在一起。可以看到，所说的 “渐进式”，其实就是 Vue 的使用方式，同时也体现了 Vue 的设计的理念<br />\n在我看来，渐进式代表的含义是：主张最少。视图模板引擎<br />\n每个框架都不可避免会有自己的一些特点，从而会对使用者有一定的要求，这些要求就是主张，主张有强有弱，它的强势程度会影响在业务开发中的使用方式。<br />\n比如说，Angular，它两个版本都是强主张的，如果你用它，必须接受以下东西：<br />\n必须使用它的模块机制 - 必须使用它的依赖注入 - 必须使用它的特殊形式定义组件（这一点每个视图框架都有，难以避免）<br />\n所以 Angular 是带有比较强的排它性的，如果你的应用不是从头开始，而是要不断考虑是否跟其他东西集成，这些主张会带来一些困扰。<br />\nVue 可能有些方面是不如 React，不如 Angular，但它是渐进的，没有强主张，你可以在原有大系统的上面，把一两个组件改用它实现，当 jQuery 用；也可以整个用它全家桶开发，当 Angular 用；还可以用它的视图，搭配你自己设计的整个下层用。也可以函数式，都可以，它只是个轻量视图而已，只做了自己该做的事，没有做不该做的事，仅此而已。<br />\n<strong>渐进式的含义，我的理解是：没有多做职责之外的事。</strong></p>\n<h2 id=\"3spa-单页面应用及其优缺点\"><a class=\"anchor\" href=\"#3spa-单页面应用及其优缺点\">#</a> 3：SPA 单页面应用及其优缺点</h2>\n<p><strong>缺点：</strong></p>\n<p>不支持低版本的浏览器，最低只支持到 IE9；<br />\n不利于 SEO 的优化（如果要支持 SEO，建议通过服务端来进行渲染组件）；<br />\n第一次加载首页耗时相对长一些；<br />\n不可以使用浏览器的导航按钮需要自行实现前进、后退。</p>\n<p><strong>优点：</strong></p>\n<p>无刷新体验，提升了用户体验；<br />\n前端开发不再以页面为单位，更多地采用组件化的思想，代码结构和组织方式更加规范化，便于修改和调整；<br />\nAPI 共享，同一套后端程序代码不用修改就可以用于 Web 界面、手机、平板等多种客户端<br />\n用户体验好、快，内容的改变不需要重新加载整个页面。</p>\n<h2 id=\"4怎样理解-vue-的单向数据流\"><a class=\"anchor\" href=\"#4怎样理解-vue-的单向数据流\">#</a> 4：怎样理解 Vue 的单向数据流？</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>子组件想修改时，只能通过 $emit 派发一个自定义事件，父组件接收到后，由父组件修改。</pre></td></tr></table></figure><h1 id=\"七vue3扩展\"><a class=\"anchor\" href=\"#七vue3扩展\">#</a> 七：Vue3 扩展</h1>\n<h2 id=\"1vue3简介\"><a class=\"anchor\" href=\"#1vue3简介\">#</a> 1.VUE3 简介</h2>\n<ul>\n<li>2020 年 9 月 18 日，Vue.js 发布 3.0 版本，代号 One Piece (海贼王)</li>\n</ul>\n<h2 id=\"2vue3带来了什么\"><a class=\"anchor\" href=\"#2vue3带来了什么\">#</a> 2.Vue3 带来了什么</h2>\n<p>1. 性能的提升</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>打包大小减少<span class=\"token number\">41</span><span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span>初次渲染快<span class=\"token number\">55</span><span class=\"token operator\">%</span><span class=\"token punctuation\">,</span>更新渲染快<span class=\"token number\">33</span><span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3.</span>内存减少<span class=\"token number\">54</span><span class=\"token operator\">%</span>   </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">...</span></pre></td></tr></table></figure><p>2. 源码的升级</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>使用Proxy代替defineProperty实现响应式</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>重写虚拟<span class=\"token constant\">DOM</span>的实现和Tree<span class=\"token operator\">-</span>Shaking</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">...</span></pre></td></tr></table></figure><p>3. 拥抱 TypeScript</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Vue3可以更好的支持TypeScript</pre></td></tr></table></figure><p>4. 新的特性</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">.</span>Composition <span class=\"token constant\">API</span><span class=\"token punctuation\">(</span>组合<span class=\"token constant\">API</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tsteup配置</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ref与reactive</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    watch与watchEffect</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    provide与inject</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">2.</span>新的内置组件</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tFragment</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Teleport</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    Suspense</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">3.</span>其他改变</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t新的生命周期钩子</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    data选项应始终被声明为一个函数</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    移除keyCode支持作为v<span class=\"token operator\">-</span>on的修饰符</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token operator\">...</span></pre></td></tr></table></figure><h2 id=\"3创建vue30工程\"><a class=\"anchor\" href=\"#3创建vue30工程\">#</a> 3. 创建 Vue3.0 工程</h2>\n<h3 id=\"1使用vue-cli创建\"><a class=\"anchor\" href=\"#1使用vue-cli创建\">#</a> 1. 使用 vue-cli 创建</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>## 查看@vue<span class=\"token operator\">/</span>cli版本，确保@vue<span class=\"token operator\">/</span>cli版本在<span class=\"token number\">4.5</span><span class=\"token number\">.0</span>以上</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vue <span class=\"token operator\">--</span>version  或者 vue <span class=\"token operator\">-</span><span class=\"token constant\">V</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>## 安装或者升级你的@vue<span class=\"token operator\">/</span>cli</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>npm install <span class=\"token operator\">-</span>g @vue<span class=\"token operator\">/</span>cli</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>## 创建</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>vue create vue<span class=\"token operator\">-</span>text   <span class=\"token operator\">/</span>或者使用 <span class=\"token function\">node自带的</span><span class=\"token punctuation\">(</span>如果升级不了@vue<span class=\"token operator\">/</span>cli<span class=\"token punctuation\">)</span>    npx @vue<span class=\"token operator\">/</span>cli create my<span class=\"token operator\">-</span>app</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>## 启动</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cd vue<span class=\"token operator\">-</span>text</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>npm run serve</pre></td></tr></table></figure><h3 id=\"2使用vite创建\"><a class=\"anchor\" href=\"#2使用vite创建\">#</a> 2. 使用 vite 创建</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>## 什么是vite<span class=\"token operator\">?</span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>新一代前端构建工具</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>## 优势</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">1.</span>开发环境中<span class=\"token punctuation\">,</span>无需打包操作，可快速的冷启动</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2.</span><span class=\"token function\">轻量快速的热重载</span><span class=\"token punctuation\">(</span><span class=\"token constant\">HMR</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">3.</span>真正的按需编译，不再等待整个应用编译完成</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>## 创建工程</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>npm init  vite<span class=\"token operator\">-</span>app <span class=\"token operator\">&lt;</span>project<span class=\"token operator\">-</span>name<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>## 进入工程目录</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cd <span class=\"token operator\">&lt;</span>project<span class=\"token operator\">-</span>name<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>## 安装依赖</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>npm install</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>## 运行</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>npm run dev</pre></td></tr></table></figure><h2 id=\"4常用composition-api\"><a class=\"anchor\" href=\"#4常用composition-api\">#</a> 4. 常用 Composition API</h2>\n<h3 id=\"1拉开序幕的setup\"><a class=\"anchor\" href=\"#1拉开序幕的setup\">#</a> 1. 拉开序幕的 setup</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>理解：vue3<span class=\"token punctuation\">.</span><span class=\"token number\">0</span>中的一个新的配置项。值为一个函数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">.</span>setups是所有Composition <span class=\"token constant\">API</span><span class=\"token punctuation\">(</span>组合api<span class=\"token punctuation\">)</span> “表演的舞台”</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3.</span>组件中所有用到的：数据，方法等等。均要配置在setup中</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">.</span>setup函数的两种返回值：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token number\">1.</span>若返回一个对象，则对象中的属性，方法，在模板中直接使用</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token number\">2.</span><span class=\"token function\">若返回画一个渲染函数，则可以自定义渲染内容</span><span class=\"token punctuation\">(</span>了解即可<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">5.</span>注意点</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token number\">1.</span>尽量不要与Vue2<span class=\"token punctuation\">.</span>x配置混用</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token number\">2.</span>但在setup中不能访问到Vue2<span class=\"token punctuation\">.</span><span class=\"token function\">x配置</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>methsds<span class=\"token punctuation\">,</span>computed<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token number\">3.</span>如果重名，setup优先</pre></td></tr></table></figure><h3 id=\"2ref函数\"><a class=\"anchor\" href=\"#2ref函数\">#</a> 2.ref 函数</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>作用：定义一个响应式的数据</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span>语法 ： <span class=\"token keyword\">const</span> xxx <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span>initValue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token number\">1.</span>创建一个响应式的数据的引用对象</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token number\">2</span><span class=\"token punctuation\">.</span>js操作数据</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token number\">3.</span>模板中读取数据：不需要  <span class=\"token punctuation\">.</span>value  直接 <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">10</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">3.</span>备注：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token number\">1.</span>接收数据可以是基本类型，也可以是对象类型</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token number\">2.</span>基本类型的数据：响应式依然是靠Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 的<span class=\"token keyword\">get</span>和<span class=\"token keyword\">set</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token number\">3.</span>对象类型的数据： 内部求助了Vue3<span class=\"token punctuation\">.</span><span class=\"token number\">0</span>中的一个新的函数  <span class=\"token operator\">-</span> reactive</pre></td></tr></table></figure><h3 id=\"3reactive\"><a class=\"anchor\" href=\"#3reactive\">#</a> 3.reactive</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span><span class=\"token function\">作用：定义一个对象类型的响应式数据</span><span class=\"token punctuation\">(</span>基本类型别用它，用ref函数<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span>语法 <span class=\"token keyword\">const</span> 代理对象  <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>被代理对象<span class=\"token punctuation\">)</span>接收一个对象或者数组<span class=\"token punctuation\">,</span><span class=\"token function\">返回一个代理器对象</span><span class=\"token punctuation\">(</span>proxy对象<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">.</span>reactive定义的响应数据是深层次的</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4.</span>内部基于<span class=\"token constant\">ES6</span>的proxy，通过代理对象对原数据内部数据都是响应式的</pre></td></tr></table></figure><h1 id=\"八vue3x脚手架相关\"><a class=\"anchor\" href=\"#八vue3x脚手架相关\">#</a> 八：vue3.X 脚手架相关</h1>\n<h3 id=\"1shims-vuedts-文件的作用\"><a class=\"anchor\" href=\"#1shims-vuedts-文件的作用\">#</a> 1.shims-vue.d.ts  文件的作用</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * shims-vue.d.ts 的作用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 为了 typescript 做的适配定义文件，因为.vue 文件不是一个常规的文件类型，ts 是不能理解 vue 文件是干嘛的，</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 加这一段是是告诉 ts，vue 文件是这种类型的。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 可以把这一段删除，会发现 import 的所有 vue 类型的文件都会报错。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>declare module <span class=\"token string\">'*.vue'</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//declare 声明宣告， 声明一个 ambient module (即：没有内部实现的 module 声明) </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Vue</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>declare module <span class=\"token string\">'vue-echarts'</span>  <span class=\"token comment\">// 引入 vue-echarts</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">&lt;</span>script lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/* eslint-disable @typescript-eslint/camelcase */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Vue<span class=\"token punctuation\">,</span> Component<span class=\"token punctuation\">,</span> Watch <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-property-decorator'</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">import</span> ECharts <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-echarts'</span> <span class=\"token comment\">// 报错，按上面的方法在 shims-vue.d.ts 文件中引入即可</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">import</span> <span class=\"token string\">'echarts/lib/chart/line'</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">import</span> <span class=\"token string\">'echarts/lib/chart/pie'</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">import</span> <span class=\"token string\">'echarts/lib/component/tooltip'</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h1 id=\"八vue-性能优化\"><a class=\"anchor\" href=\"#八vue-性能优化\">#</a> 八：vue 性能优化</h1>\n<h2 id=\"1ssr\"><a class=\"anchor\" href=\"#1ssr\">#</a> 1.SSR</h2>\n<h2 id=\"2同构\"><a class=\"anchor\" href=\"#2同构\">#</a> 2. 同构</h2>\n<h2 id=\"3常见性能优化策略\"><a class=\"anchor\" href=\"#3常见性能优化策略\">#</a> 3. 常见性能优化策略</h2>\n<h1 id=\"九自动化测试\"><a class=\"anchor\" href=\"#九自动化测试\">#</a> 九：自动化测试</h1>\n<h2 id=\"1单元测试\"><a class=\"anchor\" href=\"#1单元测试\">#</a> 1. 单元测试</h2>\n<h2 id=\"2e2e测试\"><a class=\"anchor\" href=\"#2e2e测试\">#</a> 2.E2E 测试</h2>\n",
            "tags": [
                "前端开发",
                "Vue",
                "Vue"
            ]
        },
        {
            "id": "http://yoursite.com/front-end/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7html%20js%20%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95/",
            "url": "http://yoursite.com/front-end/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7html%20js%20%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95/",
            "title": "微信公众号html js 实现登录",
            "date_published": "2021-06-25T08:43:00.000Z",
            "content_html": "<pre><code class=\"language-JavaScript\">1. 在微信公众平台上创建并配置好您的公众号，获取到相应的开发者ID（AppID）和密钥（AppSecret）。\n\n2. 在您的网页中引入微信 JS-SDK，以便与微信进行交互。可以使用以下 JS 代码进行引入：\nscript src=&quot;http://res.wx.qq.com/open/js/jweixin-1.6.0.js&quot;&gt;&lt;/script&gt;\n\n\n3. 初始化微信 JS-SDK，设置相关配置信息，并在初始化完成后执行授权登录操作。可以使用以下 JS 代码进行初始化和授权登录操作：\nwx.config(&#123;\n    appId: 'YOUR_APP_ID',\n    timestamp: 'TIMESTAMP',\n    nonceStr: 'NONCE_STR',\n    signature: 'SIGNATURE',\n    jsApiList: ['checkJsApi', 'chooseWXPay', 'openLocation', 'scanQRCode', 'authorize'] // 需要使用的微信 API 列表\n&#125;);\n\nwx.ready(function() &#123;\n    // 在这里执行授权登录操作\n    wx.authorize(&#123;\n        scope: 'snsapi_base',\n        success: function(res) &#123;\n            // 用户同意授权，可以获取到用户的基本信息\n            var code = res.code; // 获取到授权登录的code\n            // 在这里可以将code发送到服务器进行进一步处理\n        &#125;,\n        fail: function(res) &#123;\n            // 用户拒绝授权或授权失败\n            console.log(res);\n        &#125;\n    &#125;);\n&#125;);\n\n请将 YOUR_APP_ID 替换为您的公众号的开发者ID，TIMESTAMP、NONCE_STR 和 SIGNATURE 替换为相应的值，这些信息可以通过后台服务器签名获取。\n\n\n4. 根据需要进行进一步的处理。在获得用户授权登录的code后，您可以将其发送到后台服务器，通过调用微信提供的接口来获取用户的详细信息或执行其他操作。\n\n\n</code></pre>\n",
            "tags": [
                "前端开发",
                "微信公众号",
                "微信公众号"
            ]
        },
        {
            "id": "http://yoursite.com/front-end/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7vue%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95/",
            "url": "http://yoursite.com/front-end/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7vue%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95/",
            "title": "微信公众号vue实现登录",
            "date_published": "2021-06-25T08:43:00.000Z",
            "content_html": "<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 在Vue项目中安装并引入微信 <span class=\"token constant\">JS</span><span class=\"token operator\">-</span><span class=\"token constant\">SDK</span>库（jweixin<span class=\"token punctuation\">.</span>js）。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>npm install weixin<span class=\"token operator\">-</span>js<span class=\"token operator\">-</span>sdk</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>引入 <span class=\"token keyword\">import</span> wx <span class=\"token keyword\">from</span> <span class=\"token string\">'weixin-js-sdk'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2.</span> 在Vue的组件中，创建一个用于授权登录的按钮，并定义触发登录的方法。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"wechatLogin\"</span><span class=\"token operator\">></span>微信登录<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">wechatLogin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 微信公众号授权登录的逻辑</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">3.</span> 在微信授权登录的方法内部，进行微信 <span class=\"token constant\">JS</span><span class=\"token operator\">-</span><span class=\"token constant\">SDK</span>的初始化和授权登录操作。</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 引入后端提供的获取微信 JS-SDK 配置的接口</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> getWechatConfig <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/api/wechat'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 替换成实际的接口路径</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">async</span> <span class=\"token function\">wechatLogin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getWechatConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用后端接口获取微信 JS-SDK 的配置信息</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    wx<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token literal-property property\">debug</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token literal-property property\">appId</span><span class=\"token operator\">:</span> config<span class=\"token punctuation\">.</span>appId<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token literal-property property\">timestamp</span><span class=\"token operator\">:</span> config<span class=\"token punctuation\">.</span>timestamp<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token literal-property property\">nonceStr</span><span class=\"token operator\">:</span> config<span class=\"token punctuation\">.</span>nonceStr<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token literal-property property\">signature</span><span class=\"token operator\">:</span> config<span class=\"token punctuation\">.</span>signature<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token literal-property property\">jsApiList</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'checkJsApi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'authorize'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 需要使用的微信 API 列表</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    wx<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token comment\">// 初始化失败的处理逻辑</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'微信 JS-SDK初始化失败:'</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    wx<span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token comment\">// 在这里执行授权登录操作</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      wx<span class=\"token punctuation\">.</span><span class=\"token function\">authorize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token literal-property property\">scope</span><span class=\"token operator\">:</span> <span class=\"token string\">'snsapi_base'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>          <span class=\"token comment\">// 用户同意授权，可以获取到用户的基本信息</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          <span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取到授权登录的 code</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>          <span class=\"token comment\">// 在这里可以将 code 发送到服务器进行进一步处理</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'授权登录成功，code:'</span><span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token function-variable function\">fail</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>          <span class=\"token comment\">// 用户拒绝授权或授权失败</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'授权登录失败:'</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "前端开发",
                "微信公众号",
                "微信公众号"
            ]
        },
        {
            "id": "http://yoursite.com/front-end/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/",
            "url": "http://yoursite.com/front-end/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/",
            "title": "前端性能优化",
            "date_published": "2021-06-25T08:43:00.000Z",
            "content_html": "<h2 id=\"一前端性能优化方向\"><a class=\"anchor\" href=\"#一前端性能优化方向\">#</a> 一：前端性能优化方向</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span><span class=\"token literal-property property\">加载性能</span><span class=\"token operator\">:</span>如何更快地把资源从服务器中拉到浏览器，如 http 与资源体积的各种优化，都是旨在加载性能的提升。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span><span class=\"token literal-property property\">渲染性能</span><span class=\"token operator\">:</span>如何更快的把资源在浏览器上进行渲染。如减少重排重绘，rIC 等都是旨在渲染性能的提升。</pre></td></tr></table></figure><h2 id=\"二核心性能指标与-performance-api\"><a class=\"anchor\" href=\"#二核心性能指标与-performance-api\">#</a> 二：核心性能指标与 Performance API</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">LCP</span><span class=\"token operator\">:</span> 加载性能。最大内容绘制应在 <span class=\"token number\">2</span><span class=\"token punctuation\">.</span>5s 内完成。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token constant\">FID</span><span class=\"token operator\">:</span> 交互性能。首次输入延迟应在 100ms 内完成。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token constant\">CLS</span><span class=\"token operator\">:</span> 页面稳定性。累积布局偏移，需手动计算，<span class=\"token constant\">CLS</span> 应保持在 <span class=\"token number\">0.1</span> 以下。</pre></td></tr></table></figure><h2 id=\"三计算与收集\"><a class=\"anchor\" href=\"#三计算与收集\">#</a> 三：计算与收集</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>当收集浏览器端每个用户核心性能指标时，可通过 web<span class=\"token operator\">-</span>vitals 收集并通过 <span class=\"token function\">sendBeacon</span> <span class=\"token punctuation\">(</span>opens <span class=\"token keyword\">new</span> <span class=\"token class-name\">window</span><span class=\"token punctuation\">)</span>上报到打点系统。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> getCLS<span class=\"token punctuation\">,</span> getFID<span class=\"token punctuation\">,</span> getLCP <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'web-vitals'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sendToAnalytics</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">metric</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>metric<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  navigator<span class=\"token punctuation\">.</span><span class=\"token function\">sendBeacon</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/analytics'</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">getCLS</span><span class=\"token punctuation\">(</span>sendToAnalytics<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">getFID</span><span class=\"token punctuation\">(</span>sendToAnalytics<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">getLCP</span><span class=\"token punctuation\">(</span>sendToAnalytics<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"四更快的传输\"><a class=\"anchor\" href=\"#四更快的传输\">#</a> 四：更快的传输</h2>\n<h3 id=\"1cdn\"><a class=\"anchor\" href=\"#1cdn\">#</a> 1：CDN</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>将资源分发到 <span class=\"token constant\">CDN</span> 的边缘网络节点，使用户可就近获取所需内容，大幅减小了光纤传输距离，使全球各地用户打开网站都拥有良好的网络体验。</pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbWcuYWxpY2RuLmNvbS9pbWdleHRyYS9pNC9PMUNOMDFaRTNQdEcyMkVvTU55QXY5TF8hITYwMDAwMDAwMDcwODktMi10cHMtMTUzMC0xMTQwLnBuZw==\">图片演示链接</span></p>\n<h3 id=\"2http2\"><a class=\"anchor\" href=\"#2http2\">#</a> 2：http2</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>http2 的诸多特性决定了它更快的传输速度。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1.</span>多路复用，在浏览器可并行发送 <span class=\"token constant\">N</span> 条请求。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2.</span>首部压缩，更小的负载体积。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3.</span>请求优先级，更快的关键请求</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>目前，网站已大多上了 http2，可在控制台面板进行查看。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>由于 http2 可并行请求，解决了 http1<span class=\"token punctuation\">.</span><span class=\"token number\">1</span> 线头阻塞的问题，以下几个性能优化点将会过时</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>资源合并。如 https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>shanyue<span class=\"token punctuation\">.</span>tech<span class=\"token operator\">/</span>assets<span class=\"token operator\">??</span>index<span class=\"token punctuation\">.</span>js<span class=\"token punctuation\">,</span>interview<span class=\"token punctuation\">.</span>js<span class=\"token punctuation\">,</span>report<span class=\"token punctuation\">.</span>js</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>域名分片。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>雪碧图。将无数小图片合并成单个大图片。</pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3NoZnNoYW55dWUvYXNzZXRzQG1hc3Rlci9zcmMvaDIuNzU4MmE0ZnZ0eDAwLnBuZw==\">图片演示链接</span></p>\n<h3 id=\"3充分利用-http-缓存\"><a class=\"anchor\" href=\"#3充分利用-http-缓存\">#</a> 3：充分利用 HTTP 缓存</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>更好的资源缓存策略，对于 <span class=\"token constant\">CDN</span> 来讲可减少回源次数，对于浏览器而言可减少请求发送次数。无论哪一点，对于二次网站访问都具有更好的访问体验。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token literal-property property\">一</span><span class=\"token operator\">:</span>缓存策略</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token number\">1.</span><span class=\"token literal-property property\">强缓存</span><span class=\"token operator\">:</span> 打包后带有 hash <span class=\"token function\">值的资源</span> <span class=\"token punctuation\">(</span>如 <span class=\"token operator\">/</span>build<span class=\"token operator\">/</span>a3b4c8a8<span class=\"token punctuation\">.</span>js<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token number\">2.</span><span class=\"token literal-property property\">协商缓存</span><span class=\"token operator\">:</span> 打包后不带有 hash <span class=\"token function\">值的资源</span> <span class=\"token punctuation\">(</span>如 <span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token literal-property property\">二</span><span class=\"token operator\">:</span><span class=\"token function\">分包加载</span> <span class=\"token punctuation\">(</span>Bundle Spliting<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token number\">1.</span>避免一行代码修改导致整个 bundle 的缓存失效</pre></td></tr></table></figure><h3 id=\"4减少-http-请求及负载\"><a class=\"anchor\" href=\"#4减少-http-请求及负载\">#</a> 4：减少 HTTP 请求及负载</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对一个网站的资源进行压缩优化，从而达到减少 <span class=\"token constant\">HTTP</span> 负载的目的。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>js<span class=\"token operator\">/</span>css<span class=\"token operator\">/</span>image 等常规资源体积优化，这是一个大话题，再以下分别讨论</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">1.</span>小图片优化，将小图片内联为 Data <span class=\"token constant\">URI</span>，减小请求数量</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2.</span>图片懒加载</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">3.</span>新的 <span class=\"token constant\">API</span><span class=\"token operator\">:</span> IntersectionObserver <span class=\"token constant\">API</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">4.</span><span class=\"token literal-property property\">新的属性</span><span class=\"token operator\">:</span> loading<span class=\"token operator\">=</span>lazy</pre></td></tr></table></figure><h2 id=\"五更小的体积\"><a class=\"anchor\" href=\"#五更小的体积\">#</a> 五：更小的体积</h2>\n<h3 id=\"1gzipbrotli\"><a class=\"anchor\" href=\"#1gzipbrotli\">#</a> 1：gzip/brotli</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对 <span class=\"token constant\">JS</span>、<span class=\"token constant\">CSS</span>、<span class=\"token constant\">HTML</span> 等文本资源均有效，但是对图片效果不大。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>gzip 通过 <span class=\"token constant\">LZ77</span> 算法与 Huffman 编码来压缩文件，重复度越高的文件可压缩的空间就越大。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>brotli 通过变种的 <span class=\"token constant\">LZ77</span> 算法、Huffman 编码及二阶文本建模来压缩文件，更先进的压缩算法，比 gzip 有更高的性能及压缩率</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>可在浏览器的 Content<span class=\"token operator\">-</span>Encoding 响应头查看该网站是否开启了压缩算法，目前知乎、掘金等已全面开启了 brotli 压缩。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre># Request Header</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Accept<span class=\"token operator\">-</span>Encoding<span class=\"token operator\">:</span> gzip<span class=\"token punctuation\">,</span> deflate<span class=\"token punctuation\">,</span> br</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre># gzip</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Content<span class=\"token operator\">-</span>Encoding<span class=\"token operator\">:</span> gzip</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre># gzip</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Content<span class=\"token operator\">-</span>Encoding<span class=\"token operator\">:</span> br</pre></td></tr></table></figure><h3 id=\"2压缩混淆工具\"><a class=\"anchor\" href=\"#2压缩混淆工具\">#</a> 2：压缩混淆工具</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span><span class=\"token function\">Terser</span> <span class=\"token punctuation\">(</span>opens <span class=\"token keyword\">new</span> <span class=\"token class-name\">window</span><span class=\"token punctuation\">)</span>是 Javascript 资源压缩混淆的神器。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token literal-property property\">它可以根据以下策略进行压缩处理</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>长变量名替换短变量</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>删除空格换行符</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token literal-property property\">预计算</span><span class=\"token operator\">:</span> <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">86400000</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>移除无法被执行的代码·</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>移除无用的变量及函数</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>可在 Terser <span class=\"token function\">Repl</span> <span class=\"token punctuation\">(</span>opens <span class=\"token keyword\">new</span> <span class=\"token class-name\">window</span><span class=\"token punctuation\">)</span>在线查看代码压缩效果。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">2.</span><span class=\"token function\">swc</span> <span class=\"token punctuation\">(</span>opens <span class=\"token keyword\">new</span> <span class=\"token class-name\">window</span><span class=\"token punctuation\">)</span>是另外一个用以压缩 Javascript 的工具，它拥有与 terser 相同的 <span class=\"token constant\">API</span>，由于它是由 rust 所写，因此它拥有更高的性能。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">.</span>html<span class=\"token operator\">-</span>minifier<span class=\"token operator\">-</span><span class=\"token function\">terser</span> <span class=\"token punctuation\">(</span>opens <span class=\"token keyword\">new</span> <span class=\"token class-name\">window</span><span class=\"token punctuation\">)</span>用以压缩 <span class=\"token constant\">HTML</span> 的工具</pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3NoZnNoYW55dWUvYXNzZXRzQG1hc3Rlci9zcmMvdGVyc2VyLjFiYjFzNXYzdHQ0dy5wbmc=\">图片演示链接</span></p>\n<h3 id=\"3更小的-javascript\"><a class=\"anchor\" href=\"#3更小的-javascript\">#</a> 3：更小的 Javascript</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>关于更小的 Javascript，上边已总结了两条<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>gzip<span class=\"token operator\">/</span>brotli</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">terser</span> <span class=\"token punctuation\">(</span>minify<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token literal-property property\">还有以下几点可以考虑考虑</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>路由懒加载，无需加载整个应用的资源</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Tree Shaking<span class=\"token operator\">:</span> 无用导出将在生产环境进行删除</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>browserlist<span class=\"token operator\">/</span>babel<span class=\"token operator\">:</span> 及时更新 browserlist，将会产生更小的垫片体积</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token literal-property property\">再补充一个问题</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>如何分析并优化当前项目的 Javascript 体积？如果使用 webpack 那就简单很多。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>使用 webpack<span class=\"token operator\">-</span>bundle<span class=\"token operator\">-</span>analyze 分析打包体积</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>对一些库替换为更小体积的库，如 moment <span class=\"token operator\">-</span><span class=\"token operator\">></span> dayjs</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>对一些库进行按需加载，如 <span class=\"token keyword\">import</span> lodash <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> lodash<span class=\"token operator\">/</span><span class=\"token keyword\">get</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>对一些库使用支持 Tree Shaking，如 <span class=\"token keyword\">import</span> lodash <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> lodash<span class=\"token operator\">-</span>es</pre></td></tr></table></figure><h3 id=\"4更小的图片\"><a class=\"anchor\" href=\"#4更小的图片\">#</a> 4：更小的图片</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在前端发展的现在，webp 普遍比 jpeg<span class=\"token operator\">/</span>png 更小，而 avif 又比 webp 小一个级别</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>为了无缝兼容，可选择 picture<span class=\"token operator\">/</span>source 进行回退处理</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>picture<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token operator\">&lt;</span>source srcset<span class=\"token operator\">=</span><span class=\"token string\">\"img/photo.avif\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"image/avif\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token operator\">&lt;</span>source srcset<span class=\"token operator\">=</span><span class=\"token string\">\"img/photo.webp\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"image/webp\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token string\">\"img/photo.jpg\"</span> width<span class=\"token operator\">=</span><span class=\"token string\">\"360\"</span> height<span class=\"token operator\">=</span><span class=\"token string\">\"240\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>picture<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">1.</span><span class=\"token literal-property property\">更合适的尺寸</span><span class=\"token operator\">:</span> 当页面仅需显示 100px<span class=\"token operator\">/</span>100px 大小图片时，对图片进行压缩到 100px<span class=\"token operator\">/</span>100px</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">2.</span><span class=\"token literal-property property\">更合适的压缩</span><span class=\"token operator\">:</span> 可对前端图片进行适当压缩，如通过 sharp 等</pre></td></tr></table></figure><h2 id=\"六渲染优化\"><a class=\"anchor\" href=\"#六渲染优化\">#</a> 六：渲染优化</h2>\n<h3 id=\"1关键渲染路径\"><a class=\"anchor\" href=\"#1关键渲染路径\">#</a> 1：关键渲染路径</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>以下五个步骤为关键渲染路径</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1.</span><span class=\"token constant\">HTML</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token constant\">DOM</span>，将 html 解析为 <span class=\"token constant\">DOM</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2.</span><span class=\"token constant\">CSS</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token constant\">CSSOM</span>，将 <span class=\"token constant\">CSS</span> 解析为 <span class=\"token constant\">CSSOM</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3.</span><span class=\"token constant\">DOM</span><span class=\"token operator\">/</span><span class=\"token constant\">CSSOM</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Render Tree，将 <span class=\"token constant\">DOM</span> 与 <span class=\"token constant\">CSSOM</span> 合并成渲染树</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">.</span>RenderTree <span class=\"token operator\">-</span><span class=\"token operator\">></span> Layout，确定渲染树中每个节点的位置信息</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">5</span><span class=\"token punctuation\">.</span>Layout <span class=\"token operator\">-</span><span class=\"token operator\">></span> Paint，将每个节点渲染在浏览器中</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>渲染的优化很大程度上是对关键渲染路径进行优化。</pre></td></tr></table></figure><h3 id=\"2preloadprefetch\"><a class=\"anchor\" href=\"#2preloadprefetch\">#</a> 2：preload/prefetch</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>preload<span class=\"token operator\">/</span>prefetch 可控制 <span class=\"token constant\">HTTP</span> 优先级，从而达到关键请求更快响应的目的。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>link rel<span class=\"token operator\">=</span><span class=\"token string\">\"prefetch\"</span> href<span class=\"token operator\">=</span><span class=\"token string\">\"style.css\"</span> <span class=\"token keyword\">as</span><span class=\"token operator\">=</span><span class=\"token string\">\"style\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>link rel<span class=\"token operator\">=</span><span class=\"token string\">\"preload\"</span> href<span class=\"token operator\">=</span><span class=\"token string\">\"main.js\"</span> <span class=\"token keyword\">as</span><span class=\"token operator\">=</span><span class=\"token string\">\"script\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">.</span>preload 加载当前路由必需资源，优先级高。一般对于 Bundle Spliting 资源与 Code Spliting 资源做 preload</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">.</span>prefetch 优先级低，在浏览器 idle 状态时加载资源。一般用以加载其它路由资源，如当页面出现 Link，可 prefetch 当前 Link 的路由资源。（next<span class=\"token punctuation\">.</span>js 默认会对 link 做懒加载<span class=\"token operator\">+</span>prefetch，即当某条 Link 出现页面中，即自动 prefetch 该 Link 指向的路由资源</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>捎带说一下 dns<span class=\"token operator\">-</span>prefetch，可对主机地址的 <span class=\"token constant\">DNS</span> 进行预解析。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">&lt;</span>link rel<span class=\"token operator\">=</span><span class=\"token string\">\"dns-prefetch\"</span> href<span class=\"token operator\">=</span><span class=\"token string\">\"//shanyue.tech\"</span><span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"3防抖与节流\"><a class=\"anchor\" href=\"#3防抖与节流\">#</a> 3：防抖与节流</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>防抖：防止抖动，单位时间内事件触发会被重置，避免事件被误伤触发多次。代码实现重在清零 clearTimeout。防抖可以比作等电梯，只要有一个人进来，就需要再等一会儿。业务场景有避免登录按钮多次点击的重复提交。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span><span class=\"token function\">节流：控制流量，单位时间内事件只能触发一次，与服务器端的限流</span> <span class=\"token punctuation\">(</span>Rate Limit<span class=\"token punctuation\">)</span> 类似。代码实现重在开锁关锁 timer<span class=\"token operator\">=</span>timeout<span class=\"token punctuation\">;</span> timer<span class=\"token operator\">=</span><span class=\"token keyword\">null</span>。节流可以比作过红绿灯，每等一个红灯时间就可以过一批。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>无论是防抖还是节流都可以大幅度减少渲染次数，在 React 中还可以使用 use<span class=\"token operator\">-</span>debounce 之类的 hooks 避免重新渲染。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useState <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useDebounce <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'use-debounce'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>text<span class=\"token punctuation\">,</span> setText<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// 一秒钟渲染一次，大大降低了重新渲染的频率</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useDebounce</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token operator\">&lt;</span>input</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        defaultValue<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Actual value<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>text<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Debounce value<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>value<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"4虚拟列表优化\"><a class=\"anchor\" href=\"#4虚拟列表优化\">#</a> 4：虚拟列表优化</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">这又是一个老生常谈的话题，一般在视口内维护一个虚拟列表</span><span class=\"token punctuation\">(</span>仅渲染十几条条数据左右<span class=\"token punctuation\">)</span>，监听视口位置变化，从而对视口内的虚拟列表进行控制。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>在 React 中可采用以下库<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>react<span class=\"token operator\">-</span><span class=\"token function\">virtualized</span><span class=\"token punctuation\">(</span>opens <span class=\"token keyword\">new</span> <span class=\"token class-name\">window</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>react<span class=\"token operator\">-</span>window</pre></td></tr></table></figure><h3 id=\"5请求及资源缓存\"><a class=\"anchor\" href=\"#5请求及资源缓存\">#</a> 5：请求及资源缓存</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在一些前端系统中，当加载页面时会发送请求，路由切换出去再切换回来时又会重新发送请求，每次请求完成后会对页面重新渲染。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>然而这些重新请求再大多数时是没有必要的，合理地对 <span class=\"token constant\">API</span> 进行缓存将达到优化渲染的目的。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">1.</span>对每一条 <span class=\"token constant\">GET</span> <span class=\"token constant\">API</span> 添加 key</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">2.</span>根据 key 控制该 <span class=\"token constant\">API</span> 缓存，重复发生请求时将从缓存中取得</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 设置缓存的 Key 为 Users:10086</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> isLoading<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">,</span> userId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetchUserById</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"七web-worker\"><a class=\"anchor\" href=\"#七web-worker\">#</a> 七：Web Worker</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">试举一例</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>在纯浏览器中，如何实现高性能的实时代码编译及转换？</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">.</span>Babel <span class=\"token function\">Repl</span><span class=\"token punctuation\">(</span>opens <span class=\"token keyword\">new</span> <span class=\"token class-name\">window</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>如果纯碎使用传统的 Javascript 实现，将会耗时过多阻塞主线程，有可能导致页面卡顿。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>如果使用 Web Worker 交由额外的线程来做这件事，将会高效很多，基本上所有在浏览器端进行代码编译的功能都由 Web Worker 实现。</pre></td></tr></table></figure><h2 id=\"八wasm\"><a class=\"anchor\" href=\"#八wasm\">#</a> 八：WASM</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span><span class=\"token constant\">JS</span> 性能低下</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2.</span><span class=\"token constant\">C</span><span class=\"token operator\">++</span><span class=\"token operator\">/</span>Rust 高性能</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3.</span>使用 <span class=\"token constant\">C</span><span class=\"token operator\">++</span><span class=\"token operator\">/</span>Rust 编写代码，然后在 Javascript 环境运行</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token literal-property property\">试举一例</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>在纯浏览器中，如何实现高性能的图片压缩？</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>基本上很难做到，Javascript 的性能与生态决定了实现图片压缩的艰难。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>而借助于 <span class=\"token constant\">WASM</span> 就相当于借用了其它语言的生态。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">1.</span><span class=\"token function\">libavif</span> <span class=\"token punctuation\">(</span>opens <span class=\"token keyword\">new</span> <span class=\"token class-name\">window</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">C</span>语言写的 avif 解码编码库</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">2.</span><span class=\"token function\">libwebp</span> <span class=\"token punctuation\">(</span>opens <span class=\"token keyword\">new</span> <span class=\"token class-name\">window</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">C</span>语言写的 webp 解码编码库</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">3.</span><span class=\"token function\">mozjpeg</span> <span class=\"token punctuation\">(</span>opens <span class=\"token keyword\">new</span> <span class=\"token class-name\">window</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">C</span>语言写的 jpeg 解码编码库</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">4.</span><span class=\"token function\">oxipng</span> <span class=\"token punctuation\">(</span>opens <span class=\"token keyword\">new</span> <span class=\"token class-name\">window</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Rust语言写的 png 优化库</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>而由于 <span class=\"token constant\">WASM</span>，完全可以把这些其它语言的生态移植到浏览器中，从而实现一个高性能的离线式的图片压缩工具。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>如果想了解这种的工具，请看看 squoosh</pre></td></tr></table></figure>",
            "tags": [
                "前端开发",
                "前端性能优化",
                "前端性能优化"
            ]
        },
        {
            "id": "http://yoursite.com/front-end/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E9%9D%A2%E8%AF%95/",
            "url": "http://yoursite.com/front-end/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E9%9D%A2%E8%AF%95/",
            "title": "前端性能优化三大方向",
            "date_published": "2021-06-25T08:43:00.000Z",
            "content_html": "<h1 id=\"浏览器缓存优化\"><a class=\"anchor\" href=\"#浏览器缓存优化\">#</a> 浏览器缓存优化</h1>\n<p>为了让浏览器缓存发挥最大作用，该策略尽量遵循以下五点就能发挥浏览器缓存最大作用。</p>\n<p>「考虑拒绝一切缓存策略」：Cache-Control:no-store<br />\n「考虑资源是否每次向服务器请求」：Cache-Control:no-cache<br />\n「考虑资源是否被代理服务器缓存」：Cache-Control:public/private<br />\n「考虑资源过期时间」：Expires:t/Cache-Control:max-age=t,s-maxage=t<br />\n「考虑协商缓存」：Last-Modified/Etag<br />\n 缓存策略通过设置 HTTP 报文实现，在形式上分为 **「强缓存 / 强制缓存」和「协商缓存 / 对比缓存」**。为了方便对比，笔者将某些细节使用图例展示，相信你有更好的理解。</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/80c0b755bd4f4b7f8cc4f9447f1a1bde.png#pic_center\" alt=\"\" /></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/0bfe2b2f1ea54e1aa6bf08d2c932ca0a.png#pic_center\" alt=\"\" /></p>\n<p>整个缓存策略机制很明了，先走强缓存，若命中失败才走协商缓存。若命中强缓存，直接使用强缓存；若未命中强缓存，发送请求到服务器检查是否命中协商缓存；若命中协商缓存，服务器返回 304 通知浏览器使用本地缓存，否则返回最新资源。</p>\n<p>有两种较常用的应用场景值得使用缓存策略一试，当然更多应用场景都可根据项目需求制定。</p>\n<p>「频繁变动资源」：设置 Cache-Control:no-cache，使浏览器每次都发送请求到服务器，配合 Last-Modified/ETag 验证资源是否有效<br />\n「不常变化资源」：设置 Cache-Control:max-age=31536000，对文件名哈希处理，当代码修改后生成新的文件名，当 HTML 文件引入文件名发生改变才会下载最新文件</p>\n<h1 id=\"渲染层面性能优化\"><a class=\"anchor\" href=\"#渲染层面性能优化\">#</a> 渲染层面性能优化</h1>\n<p>**「渲染层面」** 的性能优化，无疑是如何让代码解析更好执行更快。因此笔者从以下五方面做出建议。</p>\n<p>「CSS 策略」：基于 CSS 规则<br />\n「DOM 策略」：基于 DOM 操作<br />\n「阻塞策略」：基于脚本加载<br />\n「回流重绘策略」：基于回流重绘<br />\n「异步更新策略」：基于异步更新<br />\n上述五方面都是编写代码时完成，充满在整个项目流程的开发阶段里。因此在开发阶段需时刻注意以下涉及到的每一点，养成良好的开发习惯，性能优化也自然而然被使用上了。</p>\n<p>渲染层面的性能优化更多表现在编码细节上，而并非实体代码。简单来说就是遵循某些编码规则，才能将渲染层面的性能优化发挥到最大作用。</p>\n<p>**「回流重绘策略」** 在渲染层面的性能优化里占比较重，也是最常规的性能优化之一。上年笔者发布的掘金小册《玩转 CSS 的艺术之美》使用一整章讲解回流重绘，本章已开通试读，更多细节请戳这里。</p>\n<p>CSS 策略<br />\n避免出现超过三层的嵌套规则<br />\n避免为 ID 选择器添加多余选择器<br />\n避免使用标签选择器代替类选择器<br />\n避免使用通配选择器，只对目标节点声明规则<br />\n避免重复匹配重复定义，关注可继承属性<br />\n DOM 策略<br />\n缓存 DOM 计算属性<br />\n避免过多 DOM 操作<br />\n使用 DOMFragment 缓存批量化 DOM 操作<br />\n阻塞策略<br />\n脚本与 DOM / 其它脚本的依赖关系很强：对 &lt;script&gt; 设置 defer<br />\n 脚本与 DOM / 其它脚本的依赖关系不强：对 &lt;script&gt; 设置 async<br />\n 回流重绘策略<br />\n缓存 DOM 计算属性<br />\n使用类合并样式，避免逐条改变样式<br />\n使用 display 控制 DOM 显隐，将 DOM 离线化<br />\n异步更新策略<br />\n在异步任务中修改 DOM 时把其包装成微任务</p>\n<h1 id=\"性能优化六大指标\"><a class=\"anchor\" href=\"#性能优化六大指标\">#</a> 性能优化六大指标</h1>\n<p>六大指标基本囊括大部分性能优化细节，可作为九大策略的补充。笔者根据每条性能优化建议的特征将指标划分为以下六方面。</p>\n<p>「加载优化」：资源在加载时可做的性能优化<br />\n「执行优化」：资源在执行时可做的性能优化<br />\n「渲染优化」：资源在渲染时可做的性能优化<br />\n「样式优化」：样式在编码时可做的性能优化<br />\n「脚本优化」：脚本在编码时可做的性能优化<br />\n「V8 引擎优化」：针对 V8 引擎特征可做的性能优化</p>\n",
            "tags": [
                "前端开发",
                "前端性能优化",
                "前端性能优化"
            ]
        },
        {
            "id": "http://yoursite.com/front-end/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3/",
            "url": "http://yoursite.com/front-end/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3/",
            "title": "浏览器相关知识",
            "date_published": "2021-06-25T08:43:00.000Z",
            "content_html": "<h1 id=\"常见的浏览器内核有哪些\"><a class=\"anchor\" href=\"#常见的浏览器内核有哪些\">#</a> 常见的浏览器内核有哪些？</h1>\n<p>主要分成两部分：渲染引擎 (layout engineer 或 Rendering Engine) 和 JS 引擎。<br />\n渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。<br />\nJS 引擎则：解析和执行 javascript 来实现网页的动态效果。<br />\n最开始渲染引擎和 JS 引擎并没有区分的很明确，后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。<br />\n常见内核<br />\n Trident 内核：IE, MaxThon, TT, The World, 360, 搜狗浏览器等。[又称 MSHTML]<br />\n Gecko 内核：Netscape6 及以上版本，FF, MozillaSuite / SeaMonkey 等<br />\n Presto 内核：Opera7 及以上。 [Opera 内核原为：Presto，现为：Blink;]<br />\n Webkit 内核：Safari, Chrome 等。 [Chrome 的：Blink（WebKit 的分支）]</p>\n<h1 id=\"网页前端性能优化的方式有哪些\"><a class=\"anchor\" href=\"#网页前端性能优化的方式有哪些\">#</a> 网页前端性能优化的方式有哪些？</h1>\n<p>1. 压缩 css, js, 图片<br />\n 2. 减少 http 请求次数， 合并 css、js 、合并图片（雪碧图）<br />\n3. 使用 CDN<br />\n4. 减少 dom 元素数量<br />\n 5. 图片懒加载<br />\n 6. 静态资源另外用无 cookie 的域名<br />\n 7. 减少 dom 的访问（缓存 dom）<br />\n8. 巧用事件委托<br />\n 9. 样式表置顶、脚本置低</p>\n<h1 id=\"网页从输入网址到渲染完成经历了哪些过程\"><a class=\"anchor\" href=\"#网页从输入网址到渲染完成经历了哪些过程\">#</a> 网页从输入网址到渲染完成经历了哪些过程？</h1>\n<p>大致可以分为如下 7 步：</p>\n<p>输入网址；<br />\n发送到 DNS 服务器，并获取域名对应的 web 服务器对应的 ip 地址；<br />\n与 web 服务器建立 TCP 连接；<br />\n浏览器向 web 服务器发送 http 请求；<br />\nweb 服务器响应请求，并返回指定 url 的数据（或错误信息，或重定向的新的 url 地址）；<br />\n浏览器下载 web 服务器返回的数据及解析 html 源文件；<br />\n生成 DOM 树，解析 css 和 js，渲染页面，直至显示完成；</p>\n<h1 id=\"线程与进程的区别\"><a class=\"anchor\" href=\"#线程与进程的区别\">#</a> 线程与进程的区别？</h1>\n<p>一个程序至少有一个进程，一个进程至少有一个线程.<br />\n 线程的划分尺度小于进程，使得多线程程序的并发性高。<br />\n另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。<br />\n线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。<br />\n从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。</p>\n<h1 id=\"http常见的状态码\"><a class=\"anchor\" href=\"#http常见的状态码\">#</a> HTTP 常见的状态码？</h1>\n<p>100 Continue 继续，一般在发送 post 请求时，已发送了 http header 之后服务端将返回此信息，表示确认，之后发送具体参数信息<br />\n 200 OK 正常返回信息<br />\n 201 Created 请求成功并且服务器创建了新的资源<br />\n 202 Accepted 服务器已接受请求，但尚未处理<br />\n 301 Moved Permanently 请求的网页已永久移动到新位置。<br />\n302 Found 临时性重定向。<br />\n303 See Other 临时性重定向，且总是使用 GET 请求新的 URI。<br />\n304 Not Modified 自从上次请求后，请求的网页未修改过。<br />\n400 Bad Request 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。<br />\n401 Unauthorized 请求未授权。<br />\n403 Forbidden 禁止访问。<br />\n404 Not Found 找不到如何与 URI 相匹配的资源。<br />\n500 Internal Server Error 最常见的服务器端错误。<br />\n503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。</p>\n<h1 id=\"图片懒加载\"><a class=\"anchor\" href=\"#图片懒加载\">#</a> 图片懒加载？</h1>\n<p>当页面滚动的时间被触发 -&gt; 执行加载图片操作 -&gt; 判断图片是否在可视区域内 -&gt; 在，则动态将 data-src 的值赋予该图片</p>\n<h1 id=\"移动端性能优化\"><a class=\"anchor\" href=\"#移动端性能优化\">#</a> 移动端性能优化？</h1>\n<p>尽量使用 css3 动画，开启硬件加速<br />\n适当使用 touch 时间代替 click 时间<br />\n避免使用 css3 渐变阴影效果<br />\n可以用 transform: translateZ (0) 来开启硬件加速<br />\n不滥用 float。float 在渲染时计算量比较大，尽量减少使用<br />\n不滥用 web 字体。web 字体需要下载，解析，重绘当前页面<br />\n合理使用 requestAnimationFrame 动画代替 setTimeout<br />\ncss 中的属性（css3 transitions、css3 3D transforms、opacity、webGL、video）会触发 GUP 渲染，耗电</p>\n<h1 id=\"tcp-传输的三次握手-四次挥手策略\"><a class=\"anchor\" href=\"#tcp-传输的三次握手-四次挥手策略\">#</a> TCP 传输的三次握手、四次挥手策略</h1>\n<p>三次握手：<br />\n为了准确无误地吧数据送达目标处，TCP 协议采用了三次握手策略。用 TCP 协议把数据包送出去后，TCP 不会对传送后的情况置之不理，他一定会向对方确认是否送达，握手过程中使用 TCP 的标志：SYN 和 ACK<br />\n 发送端首先发送一个带 SYN 的标志的数据包给对方<br />\n接收端收到后，回传一个带有 SYN/ACK 标志的数据包以示传达确认信息<br />\n最后，发送端再回传一个带 ACK 的标志的数据包，代表 “握手” 结束<br />\n如在握手过程中某个阶段莫明中断，TCP 协议会再次以相同的顺序发送相同的数据包</p>\n<p>断开一个 TCP 连接需要 “四次挥手”<br />\n 第一次挥手：主动关闭方发送一个 FIN，用来关注主动方到被动关闭方的数据传送，也即是主动关闭方告诫被动关闭方：我已经不会再给你发数据了（在 FIN 包之前发送的数据，如果没有收到对应的 ACK 确认报文，主动关闭方依然会重发这些数据）。但是，此时主动关闭方还可以接受数据<br />\n第二次挥手：被动关闭方收到 FIN 包后，发送一个 ACK 给对方，确认序号收到序号 +1（与 SYN 相同，一个 FIN 占用一个序号）<br />\n第三次挥手：被动关闭方发送一个 FIN。用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会给你发送数据了<br />\n第四次挥手：主动关闭方收到 FIN 后，发送一个 ACK 给被动关闭方，确认序号为收到序号 + 1，至此，完成四次挥手</p>\n<h1 id=\"http-和-https为什么https安全\"><a class=\"anchor\" href=\"#http-和-https为什么https安全\">#</a> HTTP 和 HTTPS，为什么 HTTPS 安全？</h1>\n<p>HTTP 协议通常承载与 TCP 协议之上，在 HTTP 和 TCP 之间添加一个安全协议层（SSL 或 TSL），这个时候，就成了我们常说的 HTTPS<br />\n 默认 HTTP 的端口号为 80，HTTPS 的端口号为 443<br />\n 因为网络请求需要中间有很多的服务器路由的转发，中间的节点都可能篡改信息，而如果使用 HTTPS，密钥在你和终点站才有，https 之所有说比 http 安全，是因为他利用 ssl/tls 协议传输。包含证书，流量转发，负载均衡，页面适配，浏览器适配，refer 传递等，保障了传输过程的安全性</p>\n<h1 id=\"axios和fetch区别对比\"><a class=\"anchor\" href=\"#axios和fetch区别对比\">#</a> axios 和 fetch 区别对比</h1>\n<p>axios 是一个基于 Promise 用于浏览器和 nodejs 的 HTTP 客户端，本质上也是对原生 XHR 的封装，只不过它是 Promise 的实现版本，符合最新的 ES 规范，它本身具有以下特征</p>\n<p>从浏览器中创建 XMLHttpRequest<br />\n 支持 Promise API<br />\n 客户端支持防止 CSRF<br />\n 提供了一些并发请求的接口（重要，方便了很多的操作）<br />\n从 node.js 创建 http 请求<br />\n拦截请求和响应<br />\n转换请求和响应数据<br />\n取消请求<br />\n自动转换 JSON 数据<br />\n fetch 优势：</p>\n<p>语法简洁，更加语义化<br />\n基于标准 Promise 实现，支持 async/await<br />\n 同构方便，使用 isomorphic-fetch<br />\n 更加底层，提供的 API 丰富（request, response）<br />\n脱离了 XHR，是 ES 规范里新的实现方式<br />\n fetch 存在问题</p>\n<p>fetch 是一个低层次的 API，你可以把它考虑成原生的 XHR，所以使用起来并不是那么舒服，需要进行封装。<br />\nfetch 只对网络请求报错，对 400，500 都当做成功的请求，服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。<br />\nfetch 默认不会带 cookie，需要添加配置项： fetch (url, {credentials: ‘include’})<br />\n fetch 不支持 abort，不支持超时控制，使用 setTimeout 及 Promise.reject 的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费<br />\n fetch 没有办法原生监测请求的进度，而 XHR 可以</p>\n",
            "tags": [
                "前端开发",
                "浏览器",
                "浏览器"
            ]
        },
        {
            "id": "http://yoursite.com/front-end/%E8%AE%B0%E4%B8%80%E6%AC%A1vue%E8%BD%ACuniapp/",
            "url": "http://yoursite.com/front-end/%E8%AE%B0%E4%B8%80%E6%AC%A1vue%E8%BD%ACuniapp/",
            "title": "记一次vue转uniapp",
            "date_published": "2021-06-25T08:43:00.000Z",
            "content_html": "<h1 id=\"vue的相关标签怎么转\"><a class=\"anchor\" href=\"#vue的相关标签怎么转\">#</a> vue 的相关标签怎么转？</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>div  header main section -> view</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>span -> text</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ul li -> view ?  这个还不太确定，这个只要有样式类的情况下直接改</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>img -> image   这里注意的是转成uniapp的image标签要把宽高都设置一下  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>总结为只要有class类的情况下，基本上都是用的view</pre></td></tr></table></figure><p>#字体处理： px 转 rpx  2 倍化怎么处理？ 全局样式怎么转化？</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>uniapp有个&lt;page-meta :root-font-size=\"'12px'\"/></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>1rem 就是12px</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>现在某个页面盒子得大小是22px  但是实际我需要得大小是44px  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>so  在不改变前面数字得情况下，</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>1rem = 2px</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>但是这个是有一定缺陷的，浏览器里最小的字体是12px ,如果字体大小已经写死的情况下就不能用了   </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>so  其实还有一个办法，直接全局替换px 为 px * 2</pre></td></tr></table></figure><h1 id=\"对于已经使用axios写得api接口怎么快速转化成uniapp的请求方式\"><a class=\"anchor\" href=\"#对于已经使用axios写得api接口怎么快速转化成uniapp的请求方式\">#</a> 对于已经使用 axios 写得 api 接口，怎么快速转化成 uniapp 的请求方式</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>针对当前的项目，进行对函数导出和数据传入进行分布封装</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> config <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/config/index.js\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">'@/store/index.js'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">requestApi</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">const</span> ppsessid <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>ppSessId</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">const</span> sessid <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>sessId</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">const</span> cid <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>cid</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">const</span> publicHeaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token string-property property\">\"Content-Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token string-property property\">'Accept'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token string-property property\">'X-Yf-CID'</span><span class=\"token operator\">:</span> cid<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token string-property property\">'X-Yf-PPSessid'</span> <span class=\"token operator\">:</span> ppsessid<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token string-property property\">'X-Yf-Sessid'</span> <span class=\"token operator\">:</span> sessid</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\turl<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\tmethod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\tparams<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\tdata</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> options</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token comment\">// console.log('options', options)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\tuni<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t\t<span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> config<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">.</span>devServer <span class=\"token operator\">+</span> url<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\t<span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> method <span class=\"token operator\">||</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t\t<span class=\"token literal-property property\">header</span><span class=\"token operator\">:</span> publicHeaders<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t\t<span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> data <span class=\"token operator\">||</span> params<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t\t<span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t\t<span class=\"token function-variable function\">fail</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"vue中的good-storage-unaiapp的替代方案\"><a class=\"anchor\" href=\"#vue中的good-storage-unaiapp的替代方案\">#</a> vue 中的 good-storage    unaiapp 的替代方案</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>这个js库其实就是一个操作缓存的库</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>自己封装一个简单的对象即可解决</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> storage <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>storage<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tuni<span class=\"token punctuation\">.</span><span class=\"token function\">getStorageSync</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>storage<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">set</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tuni<span class=\"token punctuation\">.</span><span class=\"token function\">setStorageSync</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>storage<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">remove</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tuni<span class=\"token punctuation\">.</span><span class=\"token function\">removeStorageSync</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"vue中的相关跳转\"><a class=\"anchor\" href=\"#vue中的相关跳转\">#</a> vue 中的相关跳转</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>封装vue的原型对象。这个是最方便的，但是需要适配一些东西，<span class=\"token operator\">?</span> 可以试一下。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>push <span class=\"token operator\">-</span><span class=\"token operator\">></span> navigateTo  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>replace <span class=\"token operator\">-</span><span class=\"token operator\">></span> redirectTo</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>back  <span class=\"token operator\">-</span><span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">let</span> pages <span class=\"token operator\">=</span> <span class=\"token function\">getCurrentPages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前页面</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">let</span> beforePage <span class=\"token operator\">=</span> pages<span class=\"token punctuation\">[</span>pages<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 上一页</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t\t\tuni<span class=\"token punctuation\">.</span><span class=\"token function\">navigateBack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\t\t    <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t\t\t        beforePage<span class=\"token punctuation\">.</span><span class=\"token function\">onLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 执行上一页的 onLoad 方法</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t\t    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"怎么快速的处理css样式完成转化\"><a class=\"anchor\" href=\"#怎么快速的处理css样式完成转化\">#</a> 怎么快速的处理 css 样式完成转化</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>采取   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span>就地取材</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span>转vue标签为类</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>举个例子。 比如当前的页面p 标签哟样式，就直接，吧类名变成p <span class=\"token punctuation\">,</span>然后p标签改为view</pre></td></tr></table></figure><h1 id=\"路由相关\"><a class=\"anchor\" href=\"#路由相关\">#</a> 路由相关</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>canshu1  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    就是在 onload 里接收 options 里接收canshu1</pre></td></tr></table></figure><h1 id=\"记一次ui-li-scss-转化的过程\"><a class=\"anchor\" href=\"#记一次ui-li-scss-转化的过程\">#</a> 记一次 ui li  scss 转化的过程</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">*</span>转化之前</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span>template v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span><span class=\"token operator\">=</span><span class=\"token string\">\"currentSku.coupon &amp;&amp; currentSku.coupon.length\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token operator\">&lt;</span>li <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"has-coupon\"</span> v<span class=\"token operator\">-</span><span class=\"token keyword\">for</span><span class=\"token operator\">=</span><span class=\"token string\">\"(item, index) in currentSku.coupon.slice(0, 2)\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token operator\">:</span>key<span class=\"token operator\">=</span><span class=\"token string\">\"index\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token operator\">&lt;</span>li v<span class=\"token operator\">-</span><span class=\"token keyword\">else</span><span class=\"token operator\">></span>暂无优惠券<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">.</span>goods<span class=\"token operator\">-</span>tickets <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        ul <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          li <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> #378BF7<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">.</span>has<span class=\"token operator\">-</span>coupon <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>              <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>              align<span class=\"token operator\">-</span>items<span class=\"token operator\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>              <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> 20px <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>              font<span class=\"token operator\">-</span>size<span class=\"token operator\">:</span> 12px <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>              <span class=\"token literal-property property\">padding</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> 9px <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>              margin<span class=\"token operator\">-</span>right<span class=\"token operator\">:</span> 6px <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>              background<span class=\"token operator\">-</span>color<span class=\"token operator\">:</span> #378BF7<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>              background<span class=\"token operator\">-</span>repeat<span class=\"token operator\">:</span> no<span class=\"token operator\">-</span>repeat<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>              <span class=\"token literal-property property\">position</span><span class=\"token operator\">:</span> relative<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>              <span class=\"token literal-property property\">overflow</span><span class=\"token operator\">:</span> hidden<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>              <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> #<span class=\"token constant\">FFFFFF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>              <span class=\"token operator\">&amp;</span><span class=\"token operator\">:</span>last<span class=\"token operator\">-</span>child <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                margin<span class=\"token operator\">-</span>right<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>              <span class=\"token operator\">&amp;</span><span class=\"token operator\">:</span>before<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token operator\">:</span>after <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> block<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token literal-property property\">position</span><span class=\"token operator\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> 8px <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> 8px <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                background<span class=\"token operator\">-</span>color<span class=\"token operator\">:</span> #<span class=\"token constant\">FFF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                border<span class=\"token operator\">-</span>radius<span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token literal-property property\">top</span><span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token function\">translateY</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>              <span class=\"token operator\">&amp;</span><span class=\"token operator\">:</span>before <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token literal-property property\">left</span><span class=\"token operator\">:</span> <span class=\"token operator\">-</span>4px <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>              <span class=\"token operator\">&amp;</span><span class=\"token operator\">:</span>after <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token literal-property property\">right</span><span class=\"token operator\">:</span> <span class=\"token operator\">-</span>4px <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre> <span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">*</span>转化过后</pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token operator\">&lt;</span>view <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"ul222\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token operator\">&lt;</span>template v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span><span class=\"token operator\">=</span><span class=\"token string\">\"currentSku.coupon &amp;&amp; currentSku.coupon.length\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token operator\">&lt;</span>view <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"has-coupon\"</span> v<span class=\"token operator\">-</span><span class=\"token keyword\">for</span><span class=\"token operator\">=</span><span class=\"token string\">\"(item, index) in currentSku.coupon.slice(0, 2)\"</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token operator\">:</span>key<span class=\"token operator\">=</span><span class=\"token string\">\"index\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>view<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token operator\">&lt;</span>view v<span class=\"token operator\">-</span><span class=\"token keyword\">else</span><span class=\"token operator\">></span>暂无优惠券<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>view<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>view<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre> <span class=\"token punctuation\">.</span>goods<span class=\"token operator\">-</span>tickets <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token punctuation\">.</span>ul222 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>          <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>          view <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> #378BF7<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">.</span>has<span class=\"token operator\">-</span>coupon <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>              <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>              align<span class=\"token operator\">-</span>items<span class=\"token operator\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>              <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> 20px <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>              font<span class=\"token operator\">-</span>size<span class=\"token operator\">:</span> 12px <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>              <span class=\"token literal-property property\">padding</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> 9px <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>              margin<span class=\"token operator\">-</span>right<span class=\"token operator\">:</span> 6px <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>              background<span class=\"token operator\">-</span>color<span class=\"token operator\">:</span> #378BF7<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>              background<span class=\"token operator\">-</span>repeat<span class=\"token operator\">:</span> no<span class=\"token operator\">-</span>repeat<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>              <span class=\"token literal-property property\">position</span><span class=\"token operator\">:</span> relative<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>              <span class=\"token literal-property property\">overflow</span><span class=\"token operator\">:</span> hidden<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>              <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> #<span class=\"token constant\">FFFFFF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>              <span class=\"token operator\">&amp;</span><span class=\"token operator\">:</span>last<span class=\"token operator\">-</span>child <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                margin<span class=\"token operator\">-</span>right<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>              <span class=\"token operator\">&amp;</span><span class=\"token operator\">:</span>before<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token operator\">:</span>after <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> block<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                <span class=\"token literal-property property\">position</span><span class=\"token operator\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> 8px <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> 8px <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                background<span class=\"token operator\">-</span>color<span class=\"token operator\">:</span> #<span class=\"token constant\">FFF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                border<span class=\"token operator\">-</span>radius<span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                <span class=\"token literal-property property\">top</span><span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token function\">translateY</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>              <span class=\"token operator\">&amp;</span><span class=\"token operator\">:</span>before <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                <span class=\"token literal-property property\">left</span><span class=\"token operator\">:</span> <span class=\"token operator\">-</span>4px <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>              <span class=\"token operator\">&amp;</span><span class=\"token operator\">:</span>after <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                <span class=\"token literal-property property\">right</span><span class=\"token operator\">:</span> <span class=\"token operator\">-</span>4px <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"uniapp的图片路径相关问题\"><a class=\"anchor\" href=\"#uniapp的图片路径相关问题\">#</a> uniapp 的图片路径相关问题</h1>\n<p>编译成 H5 的时候图片在哪里都无所谓</p>\n<p>编译成小程序 的时候图片必须要在 static 下</p>\n<h1 id=\"分包应该在项目改写之前\"><a class=\"anchor\" href=\"#分包应该在项目改写之前\">#</a> 分包应该在项目改写之前</h1>\n<p>不然后面又得改写跳转路径</p>\n",
            "tags": [
                "前端开发",
                "大前端",
                "uniapp"
            ]
        },
        {
            "id": "http://yoursite.com/front-end/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/",
            "url": "http://yoursite.com/front-end/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/",
            "title": "移动端相关适配方案",
            "date_published": "2021-06-25T08:43:00.000Z",
            "content_html": "<h1 id=\"参考文档\"><a class=\"anchor\" href=\"#参考文档\">#</a> 参考文档</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM0MDAzMTQvYXJ0aWNsZS9kZXRhaWxzLzEyNTQ4ODM3Ng==\">https://blog.csdn.net/u013400314/article/details/125488376</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81MjU1NTIyNDg=\">https://zhuanlan.zhihu.com/p/525552248</span></p>\n",
            "tags": [
                "前端开发",
                "移动端适配",
                "移动端适配"
            ]
        }
    ]
}