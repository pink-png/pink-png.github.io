{
    "version": "https://jsonfeed.org/version/1",
    "title": "死肥宅",
    "subtitle": "肥宅快乐水",
    "icon": "https://pink-png.github.io/images/favicon.ico",
    "description": "编程 & 生活",
    "home_page_url": "https://pink-png.github.io",
    "items": [
        {
            "id": "https://pink-png.github.io/performance-optimization/%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/",
            "url": "https://pink-png.github.io/performance-optimization/%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/",
            "title": "前端调试技巧",
            "date_published": "2023-12-04T03:41:00.000Z",
            "content_html": "<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>、网络 请求重新发送xhr </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span>、修改请求参数： 复制<span class=\"token operator\">-</span><span class=\"token operator\">></span>以fetch格式复制</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span>、复制JavaScript变量：右键复制object、将object存储为全局变量</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4</span>、$0 输出选中的第一个元素</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">5</span>、截屏：Ctrl<span class=\"token operator\">+</span>shift<span class=\"token operator\">+</span>p screen</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">6</span>、同时展开多级节点 选中元素，按住alt再点击<span class=\"token number\">7</span>、$_ 上一个输出结果</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">8</span>、Ctrl <span class=\"token operator\">+</span>shift <span class=\"token operator\">+</span>p <span class=\"token keyword\">switch</span>切换主题</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">9</span><span class=\"token function\">、$$</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>选中所有匹配元素</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">10</span>、<span class=\"token keyword\">debugger</span></pre></td></tr></table></figure>",
            "tags": [
                "前端开发",
                "前端调试",
                "前端调试"
            ]
        },
        {
            "id": "https://pink-png.github.io/tool/git%E5%AD%A6%E4%B9%A0%E6%B8%85%E5%8D%95/",
            "url": "https://pink-png.github.io/tool/git%E5%AD%A6%E4%B9%A0%E6%B8%85%E5%8D%95/",
            "title": "git学习清单",
            "date_published": "2023-12-01T08:43:00.000Z",
            "content_html": "<h2 id=\"1初始化本地仓库-git-init-directory\"><a class=\"anchor\" href=\"#1初始化本地仓库-git-init-directory\">#</a> 1. 初始化本地仓库  git init &lt;directory&gt;</h2>\n<h2 id=\"2克隆一个远程仓库-git-clone-url\"><a class=\"anchor\" href=\"#2克隆一个远程仓库-git-clone-url\">#</a> 2. 克隆一个远程仓库  git clone &lt;url&gt;</h2>\n<h2 id=\"3添加文件到暂存区-git-add-file要添加当前目录中的所有文件请使用-代替代码如下-git-add\"><a class=\"anchor\" href=\"#3添加文件到暂存区-git-add-file要添加当前目录中的所有文件请使用-代替代码如下-git-add\">#</a> 3. 添加文件到暂存区 git add &lt;file&gt; 要添加当前目录中的所有文件，请使用。代替，代码如下： git add .</h2>\n<h2 id=\"4提交更改-git-commit-m-message如果要添加对跟踪文件所做的所有更改并提交-git-commit-a-m-message-orgit-commit-am-message\"><a class=\"anchor\" href=\"#4提交更改-git-commit-m-message如果要添加对跟踪文件所做的所有更改并提交-git-commit-a-m-message-orgit-commit-am-message\">#</a> 4. 提交更改 git commit -m &quot;&lt;message&gt;&quot; 如果要添加对跟踪文件所做的所有更改并提交。 git commit -a -m &quot;&lt;message&gt;&quot;# orgit commit -am &quot;&lt;message&gt;&quot;</h2>\n<h2 id=\"5从暂存区删除一个文件-git-reset-file\"><a class=\"anchor\" href=\"#5从暂存区删除一个文件-git-reset-file\">#</a> 5. 从暂存区删除一个文件 git reset &lt;file&gt;</h2>\n<h2 id=\"6移动或重命名文件-git-mv-current-path-new-path\"><a class=\"anchor\" href=\"#6移动或重命名文件-git-mv-current-path-new-path\">#</a> 6. 移动或重命名文件 git mv &lt;current path&gt; &lt;new path&gt;</h2>\n<h2 id=\"7从存储库中删除文件-git-rm-file-您也可以仅使用-cached-标志将其从暂存区中删除-git-rm-cached-file\"><a class=\"anchor\" href=\"#7从存储库中删除文件-git-rm-file-您也可以仅使用-cached-标志将其从暂存区中删除-git-rm-cached-file\">#</a> 7. 从存储库中删除文件  git rm &lt;file&gt; 您也可以仅使用 --cached 标志将其从暂存区中删除\t git rm --cached &lt;file&gt;</h2>\n<h1 id=\"基本-git-概念\"><a class=\"anchor\" href=\"#基本-git-概念\">#</a> 基本 Git 概念</h1>\n<h2 id=\"8默认分支名称main\"><a class=\"anchor\" href=\"#8默认分支名称main\">#</a> 8. 默认分支名称：main</h2>\n<h2 id=\"9默认远程名称origin\"><a class=\"anchor\" href=\"#9默认远程名称origin\">#</a> 9. 默认远程名称：origin</h2>\n<h2 id=\"10当前分支参考head\"><a class=\"anchor\" href=\"#10当前分支参考head\">#</a> 10. 当前分支参考：HEAD</h2>\n<h2 id=\"11head-的父级head-或-head~1\"><a class=\"anchor\" href=\"#11head-的父级head-或-head~1\">#</a> 11.HEAD 的父级：HEAD^ 或 HEAD~1</h2>\n<h2 id=\"12head-的祖父母head-或-head~2\"><a class=\"anchor\" href=\"#12head-的祖父母head-或-head~2\">#</a> 12.HEAD 的祖父母：HEAD^^ 或 HEAD~2</h2>\n<h2 id=\"13显示分支-git-branch-有用的标志\"><a class=\"anchor\" href=\"#13显示分支-git-branch-有用的标志\">#</a> 13. 显示分支 git branch  有用的标志：</h2>\n<p>-a：显示所有分支（本地和远程）</p>\n<p>-r：显示远程分支</p>\n<p>-v：显示最后一次提交的分支</p>\n<h2 id=\"14创建一个分支-git-branch-branch-你可以创建一个分支并使用-checkout-命令切换到它-git-checkout-b-branch\"><a class=\"anchor\" href=\"#14创建一个分支-git-branch-branch-你可以创建一个分支并使用-checkout-命令切换到它-git-checkout-b-branch\">#</a> 14. 创建一个分支 git branch &lt;branch&gt;  你可以创建一个分支并使用 checkout 命令切换到它。git checkout -b &lt;branch&gt;</h2>\n<h2 id=\"15切换到一个分支-git-checkout-branch\"><a class=\"anchor\" href=\"#15切换到一个分支-git-checkout-branch\">#</a> 15. 切换到一个分支 git checkout &lt;branch&gt;</h2>\n<h2 id=\"16删除一个分支-git-branch-d-branch-您还可以使用-d-标志强制删除分支-git-branch-d-branch\"><a class=\"anchor\" href=\"#16删除一个分支-git-branch-d-branch-您还可以使用-d-标志强制删除分支-git-branch-d-branch\">#</a> 16. 删除一个分支 git branch -d &lt;branch&gt; 您还可以使用 -D 标志强制删除分支。 git branch -D &lt;branch&gt;</h2>\n<h2 id=\"17合并分支-git-merge-branch-to-merge-into-head-有用的标志\"><a class=\"anchor\" href=\"#17合并分支-git-merge-branch-to-merge-into-head-有用的标志\">#</a> 17. 合并分支 git merge &lt;branch to merge into HEAD&gt; 有用的标志：</h2>\n<p>--no-ff：即使合并解析为快进，也创建合并提交</p>\n<p>--squash：将指定分支中的所有提交压缩为单个提交</p>\n<p>建议不要使用 --squash 标志，因为它会将所有提交压缩为单个提交，从而导致提交历史混乱。</p>\n<h2 id=\"18变基分支-变基是将一系列提交移动或组合到新的基本提交的过程-git-rebase-branch-to-rebase-from\"><a class=\"anchor\" href=\"#18变基分支-变基是将一系列提交移动或组合到新的基本提交的过程-git-rebase-branch-to-rebase-from\">#</a> 18. 变基分支 变基是将一系列提交移动或组合到新的基本提交的过程。git rebase &lt;branch to rebase from&gt;</h2>\n<h2 id=\"19查看之前的提交-git-checkout-commit-id\"><a class=\"anchor\" href=\"#19查看之前的提交-git-checkout-commit-id\">#</a> 19. 查看之前的提交 git checkout &lt;commit id&gt;</h2>\n<h2 id=\"20恢复提交-git-revert-commit-id\"><a class=\"anchor\" href=\"#20恢复提交-git-revert-commit-id\">#</a> 20. 恢复提交 git revert &lt;commit id&gt;</h2>\n<h2 id=\"21重置提交-git-reset-commit-id-您还可以添加-hard-标志来删除所有更改但请谨慎使用-git-reset-hard-commit-id\"><a class=\"anchor\" href=\"#21重置提交-git-reset-commit-id-您还可以添加-hard-标志来删除所有更改但请谨慎使用-git-reset-hard-commit-id\">#</a> 21. 重置提交 git reset &lt;commit id&gt; 您还可以添加 --hard 标志来删除所有更改，但请谨慎使用。 git reset --hard &lt;commit id&gt;</h2>\n<h2 id=\"22查看存储库的状态-git-status\"><a class=\"anchor\" href=\"#22查看存储库的状态-git-status\">#</a> 22. 查看存储库的状态 git status</h2>\n<h2 id=\"23显示提交历史-git-log\"><a class=\"anchor\" href=\"#23显示提交历史-git-log\">#</a> 23. 显示提交历史 git log</h2>\n<h2 id=\"24显示对未暂存文件的更改-git-diff-您还可以使用-staged-标志来显示对暂存文件的更改-git-diff-staged\"><a class=\"anchor\" href=\"#24显示对未暂存文件的更改-git-diff-您还可以使用-staged-标志来显示对暂存文件的更改-git-diff-staged\">#</a> 24. 显示对未暂存文件的更改 git diff\\  您还可以使用 --staged 标志来显示对暂存文件的更改。 git diff --staged</h2>\n<h2 id=\"25显示两次提交之间的变化-git-diff-commit-id-01-commit-id-02\"><a class=\"anchor\" href=\"#25显示两次提交之间的变化-git-diff-commit-id-01-commit-id-02\">#</a> 25. 显示两次提交之间的变化 git diff &lt;commit id 01&gt; &lt;commit id 02&gt;</h2>\n<h2 id=\"26存储更改-stash-允许您在不提交更改的情况下临时存储更改-git-stash-您还可以将消息添加到存储中-git-stash-save-message\"><a class=\"anchor\" href=\"#26存储更改-stash-允许您在不提交更改的情况下临时存储更改-git-stash-您还可以将消息添加到存储中-git-stash-save-message\">#</a> 26. 存储更改 stash 允许您在不提交更改的情况下临时存储更改。 git stash  您还可以将消息添加到存储中。 git stash save &quot;&lt;message&gt;&quot;</h2>\n<h2 id=\"27列出存储-git-stash-list\"><a class=\"anchor\" href=\"#27列出存储-git-stash-list\">#</a> 27. 列出存储 git stash list</h2>\n<h2 0=\"\" id=\"28申请一个藏匿处-应用存储不会将其从存储列表中删除-git-stash-apply-stash-id-如果不指定将应用最新的-stash适用于所有类似的-stash-命令-您还可以使用格式-stash-应用存储适用于所有类似的存储命令-git-stash-apply-stash\"><a class=\"anchor\" href=\"#28申请一个藏匿处-应用存储不会将其从存储列表中删除-git-stash-apply-stash-id-如果不指定将应用最新的-stash适用于所有类似的-stash-命令-您还可以使用格式-stash-应用存储适用于所有类似的存储命令-git-stash-apply-stash\">#</a> 28. 申请一个藏匿处 应用存储不会将其从存储列表中删除。 git stash apply &lt;stash id&gt; 如果不指定，将应用最新的 stash（适用于所有类似的 stash 命令） 您还可以使用格式 stash@{} 应用存储（适用于所有类似的存储命令） git stash apply stash@</h2>\n<h2 id=\"29删除一个藏匿处-git-stash-drop-stash-id\"><a class=\"anchor\" href=\"#29删除一个藏匿处-git-stash-drop-stash-id\">#</a> 29. 删除一个藏匿处 git stash drop &lt;stash id&gt;</h2>\n<h2 id=\"30删除所有藏匿处-git-stash-clear\"><a class=\"anchor\" href=\"#30删除所有藏匿处-git-stash-clear\">#</a> 30. 删除所有藏匿处 git stash clear</h2>\n<h2 id=\"31应用和删除存储-git-stash-pop-stash-id\"><a class=\"anchor\" href=\"#31应用和删除存储-git-stash-pop-stash-id\">#</a> 31. 应用和删除存储 git stash pop &lt;stash id&gt;</h2>\n<h2 id=\"32显示存储中的更改-git-stash-show-stash-id\"><a class=\"anchor\" href=\"#32显示存储中的更改-git-stash-show-stash-id\">#</a> 32. 显示存储中的更改 git stash show &lt;stash id&gt;</h2>\n<h2 id=\"33添加远程仓库-git-remote-add-remote-name-url\"><a class=\"anchor\" href=\"#33添加远程仓库-git-remote-add-remote-name-url\">#</a> 33. 添加远程仓库 git remote add &lt;remote name&gt; &lt;url&gt;</h2>\n<h2 id=\"34显示远程仓库-git-remote-添加-v-标志以显示远程存储库的-url-git-remote-v\"><a class=\"anchor\" href=\"#34显示远程仓库-git-remote-添加-v-标志以显示远程存储库的-url-git-remote-v\">#</a> 34. 显示远程仓库 git remote 添加 -v 标志以显示远程存储库的 URL。 git remote -v</h2>\n<h2 id=\"35删除远程仓库-git-remote-remove-remote-name\"><a class=\"anchor\" href=\"#35删除远程仓库-git-remote-remove-remote-name\">#</a> 35. 删除远程仓库 git remote remove &lt;remote name&gt;</h2>\n<h2 id=\"36重命名远程存储库-git-remote-rename-old-name-new-name\"><a class=\"anchor\" href=\"#36重命名远程存储库-git-remote-rename-old-name-new-name\">#</a> 36. 重命名远程存储库 git remote rename &lt;old name&gt; &lt;new name&gt;</h2>\n<h2 id=\"37从远程存储库中获取更改-git-fetch-remote-name\"><a class=\"anchor\" href=\"#37从远程存储库中获取更改-git-fetch-remote-name\">#</a> 37. 从远程存储库中获取更改 git fetch &lt;remote name&gt;</h2>\n<h2 id=\"38从特定分支获取更改-git-fetch-remote-name-branch\"><a class=\"anchor\" href=\"#38从特定分支获取更改-git-fetch-remote-name-branch\">#</a> 38. 从特定分支获取更改 git fetch &lt;remote name&gt; &lt;branch&gt;</h2>\n<h2 id=\"39从远程存储库中拉取更改-git-pull-remote-name-branch\"><a class=\"anchor\" href=\"#39从远程存储库中拉取更改-git-pull-remote-name-branch\">#</a> 39. 从远程存储库中拉取更改 git pull &lt;remote name&gt; &lt;branch&gt;</h2>\n<h2 id=\"40将更改推送到远程存储库-git-push-remote-name\"><a class=\"anchor\" href=\"#40将更改推送到远程存储库-git-push-remote-name\">#</a> 40. 将更改推送到远程存储库 git push &lt;remote name&gt;</h2>\n<h2 id=\"41将更改推送到特定分支-git-push-remote-name-branch\"><a class=\"anchor\" href=\"#41将更改推送到特定分支-git-push-remote-name-branch\">#</a> 41. 将更改推送到特定分支 git push &lt;remote name&gt; &lt;branch&gt;</h2>\n",
            "tags": [
                "版本管理",
                "git",
                "版本管理"
            ]
        },
        {
            "id": "https://pink-png.github.io/tool/%E4%B8%8B%E8%BD%BD%E7%B1%BB/",
            "url": "https://pink-png.github.io/tool/%E4%B8%8B%E8%BD%BD%E7%B1%BB/",
            "title": "下载",
            "date_published": "2023-12-01T08:43:00.000Z",
            "content_html": "<h1 id=\"xshell-下载地址\"><a class=\"anchor\" href=\"#xshell-下载地址\">#</a> xshell 下载地址</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueHNoZWxsLmNvbS96aC9mcmVlLWZvci1ob21lLXNjaG9vbC8=\">https://www.xshell.com/zh/free-for-home-school/</span></p>\n",
            "tags": [
                "下载",
                "xshell",
                "xshell"
            ]
        },
        {
            "id": "https://pink-png.github.io/js-base/jsES6-ES13%E6%96%B0%E5%A2%9E%E7%9A%84%E5%8A%9F%E8%83%BD/",
            "url": "https://pink-png.github.io/js-base/jsES6-ES13%E6%96%B0%E5%A2%9E%E7%9A%84%E5%8A%9F%E8%83%BD/",
            "title": "ES6-ES13新增的特性",
            "date_published": "2022-10-25T08:43:00.000Z",
            "content_html": "<h1 id=\"es6es2015\"><a class=\"anchor\" href=\"#es6es2015\">#</a> ES6（ES2015）</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>块级作用域变量声明（let和const）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>箭头函数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>模板字面量</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>解构赋值</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>默认参数值</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>扩展运算符和剩余参数</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>类和模块化（class和import/export）</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Promise 对象</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>迭代器和生成器（Iterator和Generator）</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>新的集合类型（Map、Set、WeakMap、WeakSet）</pre></td></tr></table></figure><h1 id=\"es7es2016\"><a class=\"anchor\" href=\"#es7es2016\">#</a> ES7（ES2016）</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Array.prototype.includes 方法</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>指数操作符（**）</pre></td></tr></table></figure><h1 id=\"es8-es2017\"><a class=\"anchor\" href=\"#es8-es2017\">#</a> ES8 (ES2017)</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>异步函数（async/await）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Object.values 和 Object.entries 方法</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>字符串填充方法（padStart和padEnd）</pre></td></tr></table></figure><h1 id=\"es9-es2018\"><a class=\"anchor\" href=\"#es9-es2018\">#</a> ES9 (ES2018)</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>异步迭代器</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Promise.prototype.finally 方法</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Rest/Spread 属性</pre></td></tr></table></figure><h1 id=\"es10-es2019\"><a class=\"anchor\" href=\"#es10-es2019\">#</a> ES10 (ES2019)</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Array.prototype.flat 和 Array.prototype.flatMap 方法</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Optional Chaining （可选链操作符 ?.）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>空值合并运算符（??）</pre></td></tr></table></figure><h1 id=\"es11-es2020\"><a class=\"anchor\" href=\"#es11-es2020\">#</a> ES11 (ES2020)</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BigInt 类型</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>动态导入（import()）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>可选的捕获绑定（Optional catch binding）</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Promise.allSettled 方法</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>String.prototype.matchAll 方法</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>全局对象 globalThis</pre></td></tr></table></figure><h1 id=\"es12-es2021\"><a class=\"anchor\" href=\"#es12-es2021\">#</a> ES12 (ES2021)</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>逻辑赋值运算符（||=、&amp;&amp;=、??=）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>String.prototype.replaceAll 方法</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Promise.any 方法</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>私有字段和方法（# 开头）</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>数字分隔符（Number separator）</pre></td></tr></table></figure><h1 id=\"es13-es2022\"><a class=\"anchor\" href=\"#es13-es2022\">#</a> ES13 (ES2022)</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>导入.meta对象</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>字符串实例方法String.prototype.&#123;trimLeft, trimRight&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>异步迭代器的for-await-of支持</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>import()的顶级动态引入</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>更宽松的模板字面量转义</pre></td></tr></table></figure>",
            "tags": [
                "前端开发",
                "Javascript",
                "Javascript"
            ]
        },
        {
            "id": "https://pink-png.github.io/js-base/js%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0%E5%92%8C%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/",
            "url": "https://pink-png.github.io/js-base/js%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0%E5%92%8C%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/",
            "title": "javascript全局函数和全局变量",
            "date_published": "2022-10-25T08:43:00.000Z",
            "content_html": "<ol>\n<li>全局变量</li>\n</ol>\n<ul>\n<li>Infinity 代表正的⽆穷⼤的数值。</li>\n<li>NaN 指示某个值是不是数字值。</li>\n<li>undefined 指示未定义的值。</li>\n</ul>\n<ol start=\"2\">\n<li>全局函数</li>\n</ol>\n<ul>\n<li>decodeURI () 解码某个编码的 URI 。</li>\n<li>decodeURIComponent () 解码⼀个编码的 URI 组件。</li>\n<li>encodeURI () 把字符串编码为 URI。</li>\n<li>encodeURIComponent () 把字符串编码为 URI 组件。</li>\n<li>escape () 对字符串进⾏编码。</li>\n<li>eval () 计算 JavaScript 字符串，并把它作为脚本代码来执⾏。</li>\n<li>isFinite () 检查某个值是否为有穷⼤的数。</li>\n<li>isNaN () 检查某个值是否是数字。</li>\n<li>Number () 把对象的值转换为数字。</li>\n<li>parseFloat () 解析⼀个字符串并返回⼀个浮点数。</li>\n<li>parseInt () 解析⼀个字符串并返回⼀个整数。</li>\n<li>String () 把对象的值转换为字符串。</li>\n<li>unescape () 对由 escape () 编码的字符串进⾏解码</li>\n</ul>\n",
            "tags": [
                "前端开发",
                "Javascript",
                "Javascript"
            ]
        },
        {
            "id": "https://pink-png.github.io/js-base/js%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F/",
            "url": "https://pink-png.github.io/js-base/js%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F/",
            "title": "js创建对象的多种方式",
            "date_published": "2022-10-25T08:43:00.000Z",
            "content_html": "<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 对象字面量（Object Literal）：使用对象字面量可以直接创建一个简单的对象。对象字面量使用花括号 <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> 包裹，并在其中定义键值对。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function-variable function\">sayHello</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>优点：简洁、直观，适合创建简单的对象。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>缺点：无法实现对象的复用，每次创建对象时都需要重新定义属性和方法。</pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">2.</span> 构造函数（Constructor）：通过构造函数可以创建一个对象的实例。构造函数使用 <span class=\"token keyword\">new</span> 操作符来调用，并在内部使用 <span class=\"token keyword\">this</span> 关键字来引用新创建的对象。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>优点：可以通过 <span class=\"token keyword\">new</span> 操作符创建对象的实例，适合创建多个相似的对象。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>缺点：每个对象实例都会拥有独立的方法，占用额外的内存空间。创建大量对象时可能造成内存浪费。</pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">3.</span> 原型链继承（Prototype Chain Inheritance）：使用原型链可以实现对象的继承。可以通过给构造函数的原型对象添加属性和方法，使所有通过该构造函数创建的对象都可以共享这些属性和方法。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>优点：可以实现对象的属性和方法的共享，减少内存占用。适合创建多个具有相同属性和方法的对象。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>缺点：所有实例共享原型对象上的属性和方法，如果对原型对象进行修改，会影响所有实例。不能传递参数给构造函数。</pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">4.</span> <span class=\"token constant\">ES6</span> 的类（Class）：<span class=\"token constant\">ES6</span> 引入了类的概念，可以使用 <span class=\"token keyword\">class</span> 关键字来定义一个类，并通过 <span class=\"token keyword\">new</span> 操作符创建类的实例。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>优点：语法更加直观、易读，符合面向对象的编程习惯。支持继承、封装和多态等特性。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>缺点：在底层仍然使用原型链来实现，因此也存在原型链继承的一些问题，如共享方法造成的潜在风险。</pre></td></tr></table></figure>",
            "tags": [
                "前端开发",
                "Javascript",
                "Javascript"
            ]
        },
        {
            "id": "https://pink-png.github.io/js-base/js%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/",
            "url": "https://pink-png.github.io/js-base/js%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/",
            "title": "js 实现异步编程",
            "date_published": "2022-10-25T08:43:00.000Z",
            "content_html": "<ol>\n<li>回调函数（Callbacks）：在异步操作完成后，通过传递一个回调函数作为参数，在异步操作结束时调用该回调函数来处理结果。</li>\n</ol>\n<pre><code class=\"language-Javascript\">function asyncOperation(callback) &#123;\n  // 模拟异步操作\n  setTimeout(function() &#123;\n    const result = 'Async operation completed';\n    callback(result);\n  &#125;, 1000);\n&#125;\n\nasyncOperation(function(result) &#123;\n  console.log(result);\n&#125;);\n\n优点：简单、容易理解\n缺点：不利于维护，代码耦合⾼\n</code></pre>\n<ol start=\"2\">\n<li>Promise：Promise 是一种在 ES6 中引入的异步编程模式。它代表一个异步操作最终的完成或失败，并提供了处理结果的方法。</li>\n</ol>\n<pre><code class=\"language-Javascript\">function asyncOperation() &#123;\n  return new Promise(function(resolve, reject) &#123;\n    // 模拟异步操作\n    setTimeout(function() &#123;\n      const result = 'Async operation completed';\n      resolve(result); // 异步操作成功\n      // 或者使用 reject(new Error('Async operation failed')); 处理异步操作失败\n    &#125;, 1000);\n  &#125;);\n&#125;\n\nasyncOperation()\n  .then(function(result) &#123;\n    console.log(result);\n  &#125;)\n  .catch(function(error) &#123;\n    console.error(error);\n  &#125;);\n\n优点：可以利⽤then⽅法，进⾏链式写法；可以书写错误时的回调函数；\n缺点：编写和理解，相对⽐较难\n</code></pre>\n<ol start=\"3\">\n<li>async/await：async/await 是在 ES2017 中引入的异步编程语法糖，基于 Promise，让异步代码看起来像同步代码一样。</li>\n</ol>\n<pre><code class=\"language-Javascript\">function asyncOperation() &#123;\n  return new Promise(function(resolve, reject) &#123;\n    // 模拟异步操作\n    setTimeout(function() &#123;\n      const result = 'Async operation completed';\n      resolve(result); // 异步操作成功\n      // 或者使用 reject(new Error('Async operation failed')); 处理异步操作失败\n    &#125;, 1000);\n  &#125;);\n&#125;\nasync function processData() &#123;\n  try &#123;\n    const result = await asyncOperation();\n    console.log(result);\n  &#125; catch (error) &#123;\n    console.error(error);\n  &#125;\n&#125;\n\nprocessData();\n优点：内置执⾏器、更好的语义、更⼴的适⽤性、返回的是Promise、结构清晰。\n缺点：错误处理机制\n</code></pre>\n<ol start=\"4\">\n<li>事件监听（Event Listening）：事件监听是一种基于观察者模式的编程方式。通过注册事件监听器，当特定事件发生时，会触发相应的回调函数。</li>\n</ol>\n<pre><code class=\"language-Javascript\">// 定义一个事件触发器\nconst eventEmitter = new EventEmitter();\n\n// 注册事件监听器\neventEmitter.on('event', function(data) &#123;\n  console.log('Event triggered:', data);\n&#125;);\n\n// 触发事件\neventEmitter.emit('event', 'Some data');\n\n优点：容易理解，可以绑定多个事件，每个事件可以指定多个回调函数\n缺点：事件驱动型，流程不够清晰\n\n</code></pre>\n<ol start=\"5\">\n<li>发布 / 订阅（Publish/Subscribe）：发布 / 订阅也是一种基于观察者模式的编程方式，其中发布者（发布消息的对象）和订阅者（接收消息的对象）之间是松耦合的关系。</li>\n</ol>\n<pre><code class=\"language-Javascript\">// 创建一个发布者\nconst publisher = new Publisher();\n\n// 创建一个订阅者并订阅消息\nconst subscriber1 = new Subscriber('Subscriber 1');\npublisher.subscribe(subscriber1);\n\n// 创建另一个订阅者并订阅消息\nconst subscriber2 = new Subscriber('Subscriber 2');\npublisher.subscribe(subscriber2);\n\n// 发布消息\npublisher.publish('Some message');\n\n类似于事件监听，但是可以通过‘消息中⼼ʼ，了解现在有多少发布者，多少订阅者\n\n</code></pre>\n<ol start=\"5\">\n<li>Generator 函数</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">myGeneratorFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Async operation completed.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">generator</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">const</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">iterate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> value<span class=\"token punctuation\">,</span> done <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      value<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token function\">iterate</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          <span class=\"token function\">iterate</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">throw</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token function\">iterate</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token function\">iterate</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span>myGeneratorFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>优点：函数体内外的数据交换、错误处理机制</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>缺点：流程管理不⽅便</pre></td></tr></table></figure>",
            "tags": [
                "前端开发",
                "Javascript",
                "Javascript"
            ]
        },
        {
            "id": "https://pink-png.github.io/js-base/js%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E7%9A%84%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/",
            "url": "https://pink-png.github.io/js-base/js%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E7%9A%84%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/",
            "title": "数组去重方法总结",
            "date_published": "2022-10-25T08:43:00.000Z",
            "content_html": "<h1 id=\"借助es6提供的set结构-new-set-简单好用-强烈推荐\"><a class=\"anchor\" href=\"#借助es6提供的set结构-new-set-简单好用-强烈推荐\">#</a> 借助 ES6 提供的 Set 结构 new Set () 简单好用 强烈推荐</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>使用 Set 数据结构：将数组转换为 Set，然后再将 Set 转回数组。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">noRepeat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">var</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 利用了 Set 结构不能接收重复数据的特点</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> newArr</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> <span class=\"token function\">noRepeat</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"利用-filter-indexof-去重\"><a class=\"anchor\" href=\"#利用-filter-indexof-去重\">#</a> 利用 filter () +  indexOf () 去重</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token function\">方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。item是当前元素的值，index是当前元素的索引值。indexOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token function\">方法可返回某个指定的字符串值在字符串中首次出现的位置。利用indexOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 查询到数组的下标，看是否等于当前的下标，相等的话就返回，否则不返回值</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'apps'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pear'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'apps'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">var</span> newArr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span>index</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> index<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 因为 indexOf 只能查找到第一个  </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"利用for-循环-搭配-indexof-去重\"><a class=\"anchor\" href=\"#利用for-循环-搭配-indexof-去重\">#</a> 利用 for 循环 搭配 indexOf 去重</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">function</span> <span class=\"token function\">noRepeat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">var</span> newArr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t     newArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    \t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> newArr</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> <span class=\"token function\">noRepeat</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"将数组的每一个元素依次与其他元素做比较发现重复元素删除-比较繁琐-不推荐\"><a class=\"anchor\" href=\"#将数组的每一个元素依次与其他元素做比较发现重复元素删除-比较繁琐-不推荐\">#</a> 将数组的每一个元素依次与其他元素做比较，发现重复元素，删除 比较繁琐 不推荐</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">function</span> <span class=\"token function\">noRepeat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">===</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                    arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> <span class=\"token function\">noRepeat</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"借助新数组-通过-indexof-方法判断当前元素在数组中的索引如果与循环的下标相等则添加到新数组中\"><a class=\"anchor\" href=\"#借助新数组-通过-indexof-方法判断当前元素在数组中的索引如果与循环的下标相等则添加到新数组中\">#</a> 借助新数组 通过 indexOf 方法判断当前元素在数组中的索引，如果与循环的下标相等则添加到新数组中</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">noRepeat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">var</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>              newArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> newArr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> <span class=\"token function\">noRepeat</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"利用双重for循环\"><a class=\"anchor\" href=\"#利用双重for循环\">#</a> 利用双重 for 循环</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">noRepeat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">!=</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>              arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">var</span> arr2  <span class=\"token operator\">=</span> <span class=\"token function\">noRepeat</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"利用includes实现数组去重\"><a class=\"anchor\" href=\"#利用includes实现数组去重\">#</a> 利用 includes 实现数组去重</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">noRepeat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">let</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>newArr<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            newArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     <span class=\"token keyword\">return</span> newArr</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"利用-reduce-includes\"><a class=\"anchor\" href=\"#利用-reduce-includes\">#</a> 利⽤ reduce + includes</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span> cur</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>prev<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>          prev<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">return</span> prev</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  优化后</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">function</span> <span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span> cur</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> prev<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> prev <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>prev<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"利用map数据结构去重\"><a class=\"anchor\" href=\"#利用map数据结构去重\">#</a> 利⽤ Map 数据结构去重</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">arrayNonRepeatfy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数组⽤于返回结果</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 如果有该 key 值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果没有该 key 值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            array<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"利用递归去重\"><a class=\"anchor\" href=\"#利用递归去重\">#</a> 利⽤递归去重</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">var</span> array <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">var</span> len <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      array<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 排序后更加⽅便去重</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">function</span> <span class=\"token function\">loop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> array<span class=\"token punctuation\">[</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                  array<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>              <span class=\"token function\">loop</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 递归 loop，然后数组去重</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token function\">loop</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"利用hasownproperty-filter\"><a class=\"anchor\" href=\"#利用hasownproperty-filter\">#</a> 利⽤ hasOwnProperty + filter</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> item <span class=\"token operator\">+</span> item<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span><span class=\"token keyword\">typeof</span> item <span class=\"token operator\">+</span> item<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"利用对象的属性不能相同的特点进行去重\"><a class=\"anchor\" href=\"#利用对象的属性不能相同的特点进行去重\">#</a> 利⽤对象的属性不能相同的特点进⾏去重</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'type error!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>          <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">var</span> arrry <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>obj<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>              arrry<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>              obj<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>              obj<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">return</span> arrry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "前端开发",
                "Javascript",
                "Javascript"
            ]
        },
        {
            "id": "https://pink-png.github.io/js-base/js%E6%B5%85%E8%B0%88new%20this/",
            "url": "https://pink-png.github.io/js-base/js%E6%B5%85%E8%B0%88new%20this/",
            "title": "浅谈js中new this 关键字",
            "date_published": "2022-10-25T08:43:00.000Z",
            "content_html": "<h1 id=\"new操作符具体干了什么\"><a class=\"anchor\" href=\"#new操作符具体干了什么\">#</a> new 操作符具体干了什么</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1. 创建一个新的空对象。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>2. 将新对象的原型链（[[Prototype]]）链接到构造函数的 prototype 属性上，使新对象能够访问构造函数原型中定义的属性和方法。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>3. 将构造函数的作用域赋值给新对象，即将新对象的 this 绑定到构造函数上，使构造函数内部的代码能够访问和操作新对象的属性。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>4. 执行构造函数内部的代码，初始化新对象的属性和方法。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>5. 如果构造函数返回了一个非空对象，则返回该对象；否则，返回新创建的对象。</pre></td></tr></table></figure><h1 id=\"new的模拟实现\"><a class=\"anchor\" href=\"#new的模拟实现\">#</a> new 的模拟实现</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myNew</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">constructor<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 1. 在内存中创建一个新对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 2. 将新对象的原型设置为构造函数的 prototype 属性</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  Object<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> constructor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 3. 将构造函数内部的 this 绑定到新对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">constructor</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 4. 执行构造函数内部的代码后，如果返回非空对象则返回该对象，否则返回新对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">return</span> result <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span> <span class=\"token operator\">?</span> result <span class=\"token operator\">:</span> obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上述代码中，myNew 函数接受构造函数和参数，模拟了 new 操作符的行为。它会创建一个新对象 obj，将该对象的原型设置为构造函数的 prototype 属性，然后将构造函数内部的 this 绑定到新对象 obj 上，最后根据构造函数的返回结果决定返回值。</p>\n<p>需要注意的是，这只是一个简化的实现，并没有考虑 new 操作符的所有细节和复杂性，如原型链继承、构造函数返回非对象值时的处理等。在实际开发中，建议优先使用原生的 new 操作符。</p>\n<h1 id=\"this-对象的理解\"><a class=\"anchor\" href=\"#this-对象的理解\">#</a> this 对象的理解</h1>\n<p>``text<br />\n 在 JavaScript 中，this 是一个特殊的关键字，它指向当前执行代码的上下文对象。具体来说，this 引用的是调用函数的对象，根据函数的调用方式不同，this 会有不同的值。</p>\n<pre><code>\n```text\nthis 的值可以根据以下几种情况进行判断\n</code></pre>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 作为普通函数调用：当函数作为独立函数调用时，<span class=\"token keyword\">this</span> 的值指向全局对象（在浏览器中为 window）。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token literal-property property\">sayHello</span><span class=\"token operator\">:</span> greet</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出：Hello, undefined</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>obj<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出：Hello, Alice</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">2.</span> 作为对象方法调用：当函数作为对象的方法调用时，<span class=\"token keyword\">this</span> 的值指向调用该方法的对象。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>person<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出：Hello, Alice</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">3.</span> 作为构造函数调用：当函数被用作构造函数调用时（使用 <span class=\"token keyword\">new</span> 关键字），<span class=\"token keyword\">this</span> 的值指向新创建的对象。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> john <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>john<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出：Hello, John</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">4.</span> 使用 call、apply 或 bind 方法显式指定 <span class=\"token keyword\">this</span> 的值。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">greeting</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>greeting<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Alice'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">greet</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span> <span class=\"token string\">'Hi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出：Hi, Alice</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">greet</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Hi'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出：Hi, Alice</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">const</span> boundGreet <span class=\"token operator\">=</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">boundGreet</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出：Hi, Alice</span></pre></td></tr></table></figure>",
            "tags": [
                "前端开发",
                "Javascript",
                "Javascript"
            ]
        },
        {
            "id": "https://pink-png.github.io/js-base/js%E6%B5%85%E8%B0%88%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%BB%A5%E5%8F%8A%E5%8F%98%E9%87%8F%E4%BB%A5%E5%8F%8A%E9%97%AD%E5%8C%85/",
            "url": "https://pink-png.github.io/js-base/js%E6%B5%85%E8%B0%88%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%BB%A5%E5%8F%8A%E5%8F%98%E9%87%8F%E4%BB%A5%E5%8F%8A%E9%97%AD%E5%8C%85/",
            "title": "js浅谈作用域 - 变量 - 闭包",
            "date_published": "2022-10-25T08:43:00.000Z",
            "content_html": "<h1 id=\"什么是作用域\"><a class=\"anchor\" href=\"#什么是作用域\">#</a> 什么是作用域</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在 JavaScript 中，作用域是指变量的可访问范围，它控制了变量在代码中的可见性和生命周期。JavaScript 有以下几种类型的作用域和变量：</pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 全局作用域（Global Scope）：全局作用域是在代码中任何地方都能访问到的最外层作用域。在浏览器环境中，全局作用域通常指的是 window 对象。在全局作用域中声明的变量在整个程序中都是可访问的。 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> globalVariable <span class=\"token operator\">=</span> <span class=\"token string\">'I am a global variable'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>globalVariable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出：I am a global variable</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>globalVariable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出：I am a global variable</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">2.</span> 函数作用域（Function Scope）：函数作用域是在函数内部声明的变量所拥有的作用域。这意味着函数内部可以访问函数外部的变量，但函数外部无法访问函数内部的变量。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">var</span> functionVariable <span class=\"token operator\">=</span> <span class=\"token string\">'I am a function variable'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>functionVariable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出：I am a function variable</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>functionVariable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错：functionVariable is not defined</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">3.</span> 块级作用域（Block Scope）：在 <span class=\"token constant\">ES6</span>（ECMAScript <span class=\"token number\">2015</span>）之前，JavaScript 只有全局作用域和函数作用域，没有块级作用域。块级作用域由一对花括号（<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>）创建，在块级作用域内声明的变量只在该块级作用域内部可见。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">var</span> blockVariable <span class=\"token operator\">=</span> <span class=\"token string\">'I am a block variable'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> blockScopedVariable <span class=\"token operator\">=</span> <span class=\"token string\">'I am a block-scoped variable'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>blockVariable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出：I am a block variable</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>blockScopedVariable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出：I am a block-scoped variable</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>blockVariable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出：I am a block variable</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>blockScopedVariable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错：blockScopedVariable is not defined</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">4.</span> 词法作用域（Lexical Scope）：JavaScript 使用的是词法作用域，也称为静态作用域。词法作用域是在代码编写时确定的，它基于变量在代码中的位置来确定其可访问范围，而不是运行时的调用栈。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> globalVariable <span class=\"token operator\">=</span> <span class=\"token string\">'I am a global variable'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">var</span> functionVariable <span class=\"token operator\">=</span> <span class=\"token string\">'I am a function variable'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>globalVariable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出：I am a global variable</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>functionVariable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出：I am a function variable</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在 JavaScript 中，变量有三种声明方式：var、let 和 const。其中 var 声明的变量具有函数作用域或全局作用域，let 和 const 声明的变量具有块级作用域。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>请注意，函数声明本身也遵循词法作用域，可以在函数内部定义函数，并在函数内部访问和调用。这就是 JavaScript 中的闭包机制。</pre></td></tr></table></figure><h1 id=\"作用域的理解\"><a class=\"anchor\" href=\"#作用域的理解\">#</a> 作用域的理解</h1>\n<ol>\n<li>作⽤域链的作⽤是保证执⾏环境⾥有权访问的变量和函数是有序的，作⽤域链的变量只能向上访问，变量访问到 window 对象即被终⽌，作⽤域链向下访问变量是不被允许的</li>\n<li>简单的说，作⽤域就是变量与函数的可访问范围，即作⽤域控制着变量与函数的可⻅性和⽣命周期</li>\n</ol>\n<h1 id=\"什么是闭包\"><a class=\"anchor\" href=\"#什么是闭包\">#</a> 什么是闭包？</h1>\n<ol>\n<li>\n<p>闭包就是能够读取其他函数内部变量的函数</p>\n</li>\n<li>\n<p>闭包是指有权访问另⼀个函数作⽤域中变量的函数，创建闭包的最常⻅的⽅式就是在⼀个函数内创建另⼀个函数，通过另⼀个函数访问这个函数的局部变量，利⽤闭包可以突破作⽤链域</p>\n</li>\n<li>\n<p>闭包的特性：<br />\n函数内再嵌套函数<br />\n内部函数可以引⽤外层的参数和变量<br />\n参数和变量不会被垃圾回收机制回收</p>\n</li>\n</ol>\n<h1 id=\"闭包的理解\"><a class=\"anchor\" href=\"#闭包的理解\">#</a> 闭包的理解</h1>\n<ol>\n<li>使⽤闭包主要是为了设计私有的⽅法和变量。闭包的优点是可以避免全局变量的污染，缺点是闭包会常驻内存，会增⼤内存使⽤量，使⽤不当很容易造成内存泄露。在 js 中，函数即闭包，只有函数才会产⽣作⽤域的概念</li>\n<li>闭包 的最⼤⽤处有两个，⼀个是可以读取函数内部的变量，另⼀个就是让这些变量始终保持在内存中</li>\n<li>闭包的另⼀个⽤处，是封装对象的私有属性和私有⽅法</li>\n<li>好处：能够实现封装和缓存等；</li>\n<li>坏处：就是消耗内存、不正当使⽤会造成内存溢出的问题</li>\n</ol>\n<h1 id=\"使用闭包的注意点\"><a class=\"anchor\" href=\"#使用闭包的注意点\">#</a> 使⽤闭包的注意点</h1>\n<ol>\n<li>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很⼤，所以不能滥⽤闭包，否则会造成⽹⻚的性能问题，在 IE 中可能导致内存泄露</li>\n<li>解决⽅法是，在退出函数之前，将不使⽤的局部变量全部删除</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">var</span> outerVariable <span class=\"token operator\">=</span> <span class=\"token string\">'I am an outer variable'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>outerVariable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 闭包，内部函数可以访问外部函数的变量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> inner<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">var</span> closureFunction <span class=\"token operator\">=</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">closureFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出：I am an outer variable</span></pre></td></tr></table></figure><h1 id=\"什么情况下会造成内存泄漏\"><a class=\"anchor\" href=\"#什么情况下会造成内存泄漏\">#</a> 什么情况下会造成内存泄漏</h1>\n<ol>\n<li>未及时释放闭包：如果闭包被保留在内存中，并且不再需要使用，但没有手动解除对闭包的引用，这将导致闭包及其所引用的变量无法被垃圾回收，从而造成内存泄漏。</li>\n<li>循环引用：如果闭包持有对其他对象的引用，而这些对象又持有对闭包的引用，形成了循环引用，那么这些对象以及闭包本身都无法被垃圾回收，导致内存泄漏。</li>\n<li>事件监听器未移除：当页面中的元素绑定了事件监听器，而这些监听器是在闭包中定义的，如果没有正确地解除对元素的引用，这会导致闭包无法释放，从而造成内存泄漏。</li>\n<li>全局变量引用：如果闭包中引用了全局变量，即使函数执行结束，闭包仍然可以访问和持有对全局变量的引用，阻止了对全局变量的释放，导致内存泄漏。</li>\n</ol>\n<h1 id=\"为避免闭包导致的内存泄漏可以采取以下措施\"><a class=\"anchor\" href=\"#为避免闭包导致的内存泄漏可以采取以下措施\">#</a> 为避免闭包导致的内存泄漏，可以采取以下措施：</h1>\n<ol>\n<li>及时释放闭包：在不需要使用闭包时，手动解除对闭包的引用，让垃圾回收机制能够回收闭包及其引用的变量。</li>\n<li>移除事件监听器：在不再需要使用的情况下，确保移除元素上的事件监听器，以免闭包继续持有对元素的引用。</li>\n<li>避免不必要的全局变量：减少对全局作用域的依赖，限制闭包对全局变量的引用，使得相关变量能够在不需要时被回收。</li>\n</ol>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在上面的例子中，outer 函数返回了一个内部函数 inner，该内部函数引用了 outer 函数的变量 outerVariable。即使 outer 函数执行完毕后，inner 函数依然可以访问和操作 outerVariable 变量，这就是闭包的特性。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>通过使用作用域和闭包，我们可以实现封装、数据私有化和模块化等编程概念。闭包还可以用于创建函数工厂和实现函数柯里化等高级编程技巧。</pre></td></tr></table></figure>",
            "tags": [
                "前端开发",
                "Javascript",
                "Javascript"
            ]
        },
        {
            "id": "https://pink-png.github.io/performance-optimization/%E6%8F%90%E9%AB%98Webpack%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6/",
            "url": "https://pink-png.github.io/performance-optimization/%E6%8F%90%E9%AB%98Webpack%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6/",
            "title": "webpack性能优化",
            "date_published": "2022-07-25T08:43:00.000Z",
            "content_html": "<h1 id=\"如何提高webpack构建速度\"><a class=\"anchor\" href=\"#如何提高webpack构建速度\">#</a> 如何提高 Webpack 构建速度</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 代码压缩</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token constant\">JS</span> 压缩</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>webpack <span class=\"token number\">4.0</span>默认在生产环境的时候是支持代码压缩的，即mode<span class=\"token operator\">=</span>production模式下。实际上webpack <span class=\"token number\">4.0</span>默认是使用terser<span class=\"token operator\">-</span>webpack<span class=\"token operator\">-</span>plugin这个压缩插件，在此之前是使用 uglifyjs<span class=\"token operator\">-</span>webpack<span class=\"token operator\">-</span>plugin，两者的区别是后者对 <span class=\"token constant\">ES6</span> 的压缩不是很好，同时我们可以开启 parallel参数，使用多进程压缩，加快压缩。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token constant\">CSS</span> 压缩</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token constant\">CSS</span> 压缩通常是去除无用的空格等，因为很难去修改选择器、属性的名称、值等。可以使用另外一个插件：css<span class=\"token operator\">-</span>minimizer<span class=\"token operator\">-</span>webpack<span class=\"token operator\">-</span>plugin。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token constant\">HTML</span> 压缩</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>使用HtmlWebpackPlugin插件来生成 <span class=\"token constant\">HTML</span> 的模板时候，通过配置属性minify进行 html 优化。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token literal-property property\">plugin</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlwebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token literal-property property\">minify</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token literal-property property\">minifyCSS</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是否压缩 css</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token literal-property property\">collapseWhitespace</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是否折叠空格</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token literal-property property\">removeComments</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 是否移除注释</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token number\">2.</span> 图片压缩</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>配置image<span class=\"token operator\">-</span>webpack<span class=\"token operator\">-</span>loader</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token number\">3.</span> Tree Shaking</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Tree Shaking是一个术语，在计算机中表示消除死代码，依赖于 <span class=\"token constant\">ES</span> Module 的静态语法分析（不执行任何的代码，可以明确知道模块的依赖关系）。在webpack实现Tree shaking有两种方案：</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>usedExports：通过标记某些函数是否被使用，之后通过 Terser 来进行优化的</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token literal-property property\">optimization</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        usedExports</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>使用之后，没被用上的代码在webpack打包中会加入unused harmony <span class=\"token keyword\">export</span> mul注释，用来告知Terser在优化时，可以删除掉这段代码。</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>sideEffects：跳过整个模块<span class=\"token operator\">/</span>文件，直接查看该文件是否有副作用</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>sideEffects用于告知webpack compiler哪些模块时有副作用，配置方法是在<span class=\"token keyword\">package</span><span class=\"token punctuation\">.</span>json中设置sideEffects属性。如果sideEffects设置为<span class=\"token boolean\">false</span>，就是告知webpack可以安全的删除未用到的exports。如果有些文件需要保留，可以设置为数组的形式，如：</pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token string-property property\">\"sideEffecis\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token string\">\"./src/util/format.js\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token string\">\"*.css\"</span> <span class=\"token comment\">// 所有的 css 文件</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token number\">4.</span> 缩小打包域</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>排除webpack不需要解析的模块，即在使用loader的时候，在尽量少的模块中去使用。可以借助 include和exclude这两个参数，规定loader只在那些模块应用和在哪些模块不应用。</pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token number\">5.</span> 减少 <span class=\"token constant\">ES6</span> 转为 <span class=\"token constant\">ES5</span> 的冗余代码</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>使用bable<span class=\"token operator\">-</span>plugin<span class=\"token operator\">-</span>transform<span class=\"token operator\">-</span>runtime插件</pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token number\">6.</span> 提取公共代码</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>通过配置CommonsChunkPlugin插件，将多个页面的公共代码抽离成单独的文件</pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token number\">7.</span> 其他</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>组件懒加载、路由懒加载、开启gzip、公共的第三方包上cdn、配置cache缓存Loader对文件的编译副本、配置resolve提高文件的搜索速度</pre></td></tr></table></figure><h1 id=\"webpack性能优化\"><a class=\"anchor\" href=\"#webpack性能优化\">#</a> webpack 性能优化</h1>\n<h2 id=\"开发环境性能优化\"><a class=\"anchor\" href=\"#开发环境性能优化\">#</a> 开发环境性能优化</h2>\n<ol>\n<li>优化打包构建速度</li>\n<li>HMR</li>\n<li>优化代码调试</li>\n<li>source-map</li>\n</ol>\n<h2 id=\"生产环境性能优化\"><a class=\"anchor\" href=\"#生产环境性能优化\">#</a> 生产环境性能优化</h2>\n<ol>\n<li>优化打包构建速度</li>\n<li>oneOf (可以按照一组优先级顺序来定义不同类型或特定条件下的模块处理方式)</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">//... 其他的 Webpack 配置</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">//... 其他规则</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token literal-property property\">oneOf</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'style-loader'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.less$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'style-loader'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'less-loader'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.js$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token literal-property property\">exclude</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token comment\">//... 其他的规则</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>babel 缓存</li>\n<li>多进程打包</li>\n<li>externals (拒绝某些包被打包进来)</li>\n<li>dll (独立打包第三方库，减少构建时间)</li>\n<li>优化代码运行的性能</li>\n<li>缓存 (hash-chunkhash-contenthash)</li>\n<li>tree shaking</li>\n</ol>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tree shaking：去除无用代码</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  前提：1. 必须使用ES6模块化  2. 开启production环境</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  作用: 减少代码体积</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>在package.json中配置 </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  \"sideEffects\": false 所有代码都没有副作用（都可以进行tree shaking）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    问题：可能会把css / @babel/polyfill （副作用）文件干掉</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  \"sideEffects\": [\"*.css\", \"*.less\"]</pre></td></tr></table></figure><ol start=\"10\">\n<li>code split</li>\n<li>懒加载 / 预加载</li>\n<li>pwa (PWA 提供了一种融合了网页和原生应用优点的解决方案，能够提供离线访问、快速加载、类似原生应用的体验以及跨平台兼容性等优势)</li>\n</ol>\n",
            "tags": [
                "前端开发",
                "前端性能优化",
                "前端性能优化"
            ]
        },
        {
            "id": "https://pink-png.github.io/performance-optimization/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%A4%A7%E7%BA%B2/",
            "url": "https://pink-png.github.io/performance-optimization/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%A4%A7%E7%BA%B2/",
            "title": "前端性能优化大纲",
            "date_published": "2022-06-25T08:43:00.000Z",
            "content_html": "<h1 id=\"性能优化六大指标\"><a class=\"anchor\" href=\"#性能优化六大指标\">#</a> 性能优化六大指标</h1>\n<p><strong>六大指标基本囊括大部分性能优化细节，可作为优化策略的补充。</strong></p>\n<ol>\n<li>「加载优化」：资源在加载时可做的性能优化</li>\n<li>「执行优化」：资源在执行时可做的性能优化</li>\n<li>「渲染优化」：资源在渲染时可做的性能优化</li>\n<li>「样式优化」：样式在编码时可做的性能优化</li>\n<li>「脚本优化」：脚本在编码时可做的性能优化</li>\n<li>「V8 引擎优化」：针对 V8 引擎特征可做的性能优化</li>\n</ol>\n<h2 id=\"加载优化\"><a class=\"anchor\" href=\"#加载优化\">#</a> 加载优化</h2>\n<ol>\n<li>优化 HTTP 请求：减少请求次数、合并与压缩静态资源、使用 CDN 等</li>\n</ol>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1. CDN：将资源分发到 CDN 的边缘网络节点，使用户可就近获</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>取所需内容，大幅减小了光纤传输距离，使全球各地用户打开网站都拥有良好的网络体验。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>2. http2：http2 的诸多特性决定了它更快的传输速度。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>2.1.多路复用，在浏览器可并行发送 N 条请求。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>2.2.首部压缩，更小的负载体积。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>2.3.请求优先级，更快的关键请求</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>目前，网站已大多上了 http2，可在控制台面板进行查看。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>由于 http2 可并行请求，解决了 http1.1 线头阻塞的问题，以下几个性能优化点将会过时</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>资源合并。如 https://shanyue.tech/assets??index.js,interview.js,report.js</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>域名分片。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>雪碧图。将无数小图片合并成单个大图片。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>3. 充分利用 HTTP 缓存</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>更好的资源缓存策略，对于 CDN 来讲可减少回源次数，对于浏览器而言可减少请求发送次数。无论哪一点，对于二次网站访问都具有更好的访问体验。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>一:缓存策略</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  1.强缓存: 打包后带有 hash 值的资源 (如 /build/a3b4c8a8.js)</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  2.协商缓存: 打包后不带有 hash 值的资源 (如 /index.html)</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>二:分包加载 (Bundle Spliting)</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  1.避免一行代码修改导致整个 bundle 的缓存失效 </pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>4. 减少 HTTP 请求及负载</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>对一个网站的资源进行压缩优化，从而达到减少 HTTP 负载的目的。</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>js/css/image 等常规资源体积优化，这是一个大话题，再以下分别讨论</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>4.1小图片优化，将小图片内联为 Data URI，减小请求数量</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>4.2图片懒加载</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>4.3新的 API: IntersectionObserver API</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>4.4新的属性: loading=lazy </pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>5. preload/prefetch</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> preload/prefetch 可控制 HTTP 优先级，从而达到关键请求更快响应的目的。</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>&lt;link rel=\"prefetch\" href=\"style.css\" as=\"style\"></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>&lt;link rel=\"preload\" href=\"main.js\" as=\"script\"></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>1. preload 加载当前路由必需资源，优先级高。一般对于 Bundle Spliting 资源与 Code Spliting 资源做 preload</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>2. prefetch 优先级低，在浏览器 idle 状态时加载资源。一般用以加载其它路由资源，如当页面出现 Link，可 prefetch 当前 Link 的路由资源。（next.js 默认会对 link 做懒加载+prefetch，即当某条 Link 出现页面中，即自动 prefetch 该 Link 指向的路由资源</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>捎带说一下 dns-prefetch，可对主机地址的 DNS 进行预解析。</pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>&lt;link rel=\"dns-prefetch\" href=\"//shanyue.tech\"></pre></td></tr></table></figure><ol start=\"2\">\n<li>使用缓存：利用浏览器缓存机制，设置适当的缓存头信息</li>\n<li>图片优化：选择合适的图片格式、压缩图片文件大小、响应式图片或按需加载图片</li>\n</ol>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在前端发展的现在，webp 普遍比 jpeg/png 更小，而 avif 又比 webp 小一个级别</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>为了无缝兼容，可选择 picture/source 进行回退处理</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&lt;picture></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  &lt;source srcset=\"img/photo.avif\" type=\"image/avif\"></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  &lt;source srcset=\"img/photo.webp\" type=\"image/webp\"></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  &lt;img src=\"img/photo.jpg\" width=\"360\" height=\"240\"></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>&lt;/picture></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>1.更合适的尺寸: 当页面仅需显示 100px/100px 大小图片时，对图片进行压缩到 100px/100px</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>2.更合适的压缩: 可对前端图片进行适当压缩，如通过 sharp 等</pre></td></tr></table></figure><ol start=\"4\">\n<li>延迟加载：将非关键资源延迟加载，如图片、视频、第三方插件等</li>\n<li>使用字体图标和矢量图形：替代大量图片的使用</li>\n<li>更小的 Javascript</li>\n</ol>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gzip/brotli</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>terser (minify)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>还有以下几点可以考虑考虑:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>路由懒加载，无需加载整个应用的资源</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Tree Shaking: 无用导出将在生产环境进行删除</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>browserlist/babel: 及时更新 browserlist，将会产生更小的垫片体积</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>再补充一个问题:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>如何分析并优化当前项目的 Javascript 体积？如果使用 webpack 那就简单很多。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>使用 webpack-bundle-analyze 分析打包体积</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>对一些库替换为更小体积的库，如 moment -> dayjs</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>对一些库进行按需加载，如 import lodash -> import lodash/get</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>对一些库使用支持 Tree Shaking，如 import lodash -> import lodash-es</pre></td></tr></table></figure><ol start=\"7\">\n<li>压缩混淆工具</li>\n</ol>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1.Terser (opens new window)是 Javascript 资源压缩混淆的神器。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>它可以根据以下策略进行压缩处理:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>长变量名替换短变量</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>删除空格换行符</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>预计算: const a = 24 * 60 * 60 * 1000 -> const a = 86400000</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>移除无法被执行的代码·</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>移除无用的变量及函数</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>可在 Terser Repl (opens new window)在线查看代码压缩效果。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>2.swc (opens new window)是另外一个用以压缩 Javascript 的工具，它拥有与 terser 相同的 API，由于它是由 rust 所写，因此它拥有更高的性能。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>3.html-minifier-terser (opens new window)用以压缩 HTML 的工具</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>4. gzip/brotli</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>对 JS、CSS、HTML 等文本资源均有效，但是对图片效果不大。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>gzip 通过 LZ77 算法与 Huffman 编码来压缩文件，重复度越高的文件可压缩的空间就越大。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>brotli 通过变种的 LZ77 算法、Huffman 编码及二阶文本建模来压缩文件，更先进的压缩算法，比 gzip 有更高的性能及压缩率</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>可在浏览器的 Content-Encoding 响应头查看该网站是否开启了压缩算法，目前知乎、掘金等已全面开启了 brotli 压缩。</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Request Header</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>Accept-Encoding: gzip, deflate, br</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>gzip</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Content-Encoding: gzip</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>gzip</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>Content-Encoding: br</pre></td></tr></table></figure><h2 id=\"执行优化\"><a class=\"anchor\" href=\"#执行优化\">#</a> 执行优化</h2>\n<ol>\n<li>代码优化：精简 html，css，js 代码，避免重复代码</li>\n<li>异步加载：将 JavaScript 放在底部，使用 async,defer 熟悉</li>\n<li>代码分割和懒加载：拆分大型应用程序为小模块，按需加载模块，减少初始加载时间</li>\n<li>前端代码压缩混淆：对前端代码进行压缩和混淆，减小文件大小，提高加载速度</li>\n</ol>\n<h2 id=\"渲染优化\"><a class=\"anchor\" href=\"#渲染优化\">#</a> 渲染优化</h2>\n<p>**「渲染层面」** 的性能优化，无疑是如何让代码解析更好执行更快。</p>\n<ol>\n<li>「CSS 策略」：基于 CSS 规则</li>\n<li>「DOM 策略」：基于 DOM 操作</li>\n<li>「阻塞策略」：基于脚本加载</li>\n<li>「回流重绘策略」：基于回流重绘</li>\n<li>「异步更新策略」：基于异步更新</li>\n<li>「缓存策略」</li>\n</ol>\n<p><strong>CSS 策略</strong><br />\n避免出现超过三层的嵌套规则<br />\n避免为 ID 选择器添加多余选择器<br />\n避免使用标签选择器代替类选择器<br />\n避免使用通配选择器，只对目标节点声明规则<br />\n避免重复匹配重复定义，关注可继承属性</p>\n<p><strong>DOM 策略</strong><br />\n缓存 DOM 计算属性<br />\n避免过多 DOM 操作<br />\n使用 DOMFragment 缓存批量化 DOM 操作<br />\n虚拟列表优化</p>\n<p><strong>阻塞策略</strong><br />\n脚本与 DOM / 其它脚本的依赖关系很强：对 &lt;script&gt; 设置 defer<br />\n 脚本与 DOM / 其它脚本的依赖关系不强：对 &lt;script&gt; 设置 async</p>\n<p>**「回流重绘策略」** 在渲染层面的性能优化里占比较重，也是最常规的性能优化之一。<br />\n缓存 DOM 计算属性<br />\n使用类合并样式，避免逐条改变样式<br />\n使用 display 控制 DOM 显隐，将 DOM 离线化</p>\n<p><strong>异步更新策略</strong><br />\n在异步任务中修改 DOM 时把其包装成微任务</p>\n<p><strong>缓存策略</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在一些前端系统中，当加载页面时会发送请求，路由切换出去再切换回来时又会重新发送请求，每次请求完成后会对页面重新渲染。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>然而这些重新请求再大多数时是没有必要的，合理地对 <span class=\"token constant\">API</span> 进行缓存将达到优化渲染的目的。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">1.</span>对每一条 <span class=\"token constant\">GET</span> <span class=\"token constant\">API</span> 添加 key</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">2.</span>根据 key 控制该 <span class=\"token constant\">API</span> 缓存，重复发生请求时将从缓存中取得</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 设置缓存的 Key 为 Users:10086</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> isLoading<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">,</span> userId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetchUserById</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"样式优化\"><a class=\"anchor\" href=\"#样式优化\">#</a> 样式优化</h2>\n<ol>\n<li>响应式设计：使用响应式布局和媒体查询适应不同设备和屏幕大小</li>\n<li>使用 CSS 预处理器：如 Less、Sass 等，提高样式编写的效率</li>\n</ol>\n<h2 id=\"脚本优化\"><a class=\"anchor\" href=\"#脚本优化\">#</a> 脚本优化</h2>\n<ol>\n<li>使用模块化开发：使用模块化 / 组件化的方式组织 JavaScript 代码</li>\n<li>优化 DOM 操作：减少 DOM 操作的次数，对多次操作进行批量处理</li>\n</ol>\n<h2 id=\"v8引擎优化\"><a class=\"anchor\" href=\"#v8引擎优化\">#</a> V8 引擎优化</h2>\n<ol>\n<li>避免不必要的闭包：过多的闭包会导致内存消耗增加</li>\n<li>使用高性能 API 和方法：如使用 map 而不是 for 循环等</li>\n<li>优化循环和递归：尽量减少循环和递归的层数和次数，避免性能问题</li>\n</ol>\n<h1 id=\"性能评测指标\"><a class=\"anchor\" href=\"#性能评测指标\">#</a> 性能评测指标</h1>\n<p><strong>三大指标</strong> 使用工具 lighthouse，web-vitals 等<br />\n LCP: 加载性能。最大内容绘制应在 2.5s 内完成。<br />\nFID: 交互性能。首次输入延迟应在 100ms 内完成。<br />\nCLS: 页面稳定性。累积布局偏移，需手动计算，CLS 应保持在 0.1 以下。</p>\n<h1 id=\"优化-dom-操作并减少其次数\"><a class=\"anchor\" href=\"#优化-dom-操作并减少其次数\">#</a> 优化 DOM 操作并减少其次数</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 批量更新：将多个 <span class=\"token constant\">DOM</span> 操作合并为一个操作，以减少重排和重绘的次数。例如，如果要对一个元素进行多次样式修改，可以先使用 <span class=\"token constant\">CSS</span> 类来添加或删除样式，最后再应用一次类，而不是每次修改都直接操作样式属性。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 不优化的写法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>element<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token string\">'100px'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>element<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token string\">'200px'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>element<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 优化的写法</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>element<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-class'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>element<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-class'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">2.</span> 使用文档片段（DocumentFragment）：将多个 <span class=\"token constant\">DOM</span> 节点先添加到文档片段中，然后再一次性插入文档中，这样只会触发一次重排和重绘。这在需要动态添加大量元素时特别有效。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 不优化的写法</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 优化的写法</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">const</span> fragment <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createDocumentFragment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  fragment<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>fragment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token number\">3.</span> 缓存 <span class=\"token constant\">DOM</span> 查询结果：当需要多次访问同一个 <span class=\"token constant\">DOM</span> 元素时，将查询结果缓存在变量中，避免重复查询。</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 不优化的写法</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myElement'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">+=</span> <span class=\"token string\">'new content'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">// 优化的写法</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myElement'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  element<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">+=</span> <span class=\"token string\">'new content'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token number\">4.</span> 使用虚拟 <span class=\"token constant\">DOM</span>：在涉及大量数据变动和复杂视图更新的情况下，可以使用虚拟 <span class=\"token constant\">DOM</span> 技术，通过比对虚拟 <span class=\"token constant\">DOM</span> 树来最小化实际 <span class=\"token constant\">DOM</span> 操作的次数。</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>这些是一些常见的优化 <span class=\"token constant\">DOM</span> 操作的方法。请根据具体场景选择合适的方法进行优化。记住，减少 <span class=\"token constant\">DOM</span> 操作次数会显著提高性能和用户体验。</pre></td></tr></table></figure><h1 id=\"浏览器缓存优化\"><a class=\"anchor\" href=\"#浏览器缓存优化\">#</a> 浏览器缓存优化</h1>\n<p>为了让浏览器缓存发挥最大作用，该策略尽量遵循以下五点就能发挥浏览器缓存最大作用。</p>\n<p>「考虑拒绝一切缓存策略」：Cache-Control:no-store<br />\n「考虑资源是否每次向服务器请求」：Cache-Control:no-cache<br />\n「考虑资源是否被代理服务器缓存」：Cache-Control:public/private<br />\n「考虑资源过期时间」：Expires:t/Cache-Control:max-age=t,s-maxage=t<br />\n「考虑协商缓存」：Last-Modified/Etag<br />\n 缓存策略通过设置 HTTP 报文实现，在形式上分为 **「强缓存 / 强制缓存」和「协商缓存 / 对比缓存」**。</p>\n<p><img data-src=\"/images/xn/%E5%BC%BA%E7%BC%93%E5%AD%98.png\" alt=\"\" /><br />\n<img data-src=\"/images/xn/%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98.png\" alt=\"\" /></p>\n<p>整个缓存策略机制很明了，先走强缓存，若命中失败才走协商缓存。若命中强缓存，直接使用强缓存；若未命中强缓存，发送请求到服务器检查是否命中协商缓存；若命中协商缓存，服务器返回 304 通知浏览器使用本地缓存，否则返回最新资源。</p>\n<p>有两种较常用的应用场景值得使用缓存策略一试，当然更多应用场景都可根据项目需求制定。</p>\n<p>「频繁变动资源」：设置 Cache-Control:no-cache，使浏览器每次都发送请求到服务器，配合 Last-Modified/ETag 验证资源是否有效<br />\n「不常变化资源」：设置 Cache-Control:max-age=31536000，对文件名哈希处理，当代码修改后生成新的文件名，当 HTML 文件引入文件名发生改变才会下载最新文件</p>\n<h1 id=\"web-worker\"><a class=\"anchor\" href=\"#web-worker\">#</a> Web Worker</h1>\n<p>在纯浏览器中，如何实现高性能的实时代码编译及转换？</p>\n<p>Babel Repl(opens new window)<br />\n 如果纯碎使用传统的 Javascript 实现，将会耗时过多阻塞主线程，有可能导致页面卡顿。</p>\n<p>如果使用 Web Worker 交由额外的线程来做这件事，将会高效很多，基本上所有在浏览器端进行代码编译的功能都由 Web Worker 实现。</p>\n<h1 id=\"wasm\"><a class=\"anchor\" href=\"#wasm\">#</a> WASM</h1>\n<ol>\n<li>JS 性能低下</li>\n<li>C++/Rust 高性能</li>\n<li>使用 C++/Rust 编写代码，然后在 Javascript 环境运行<br />\n试举一例:</li>\n</ol>\n<p>在纯浏览器中，如何实现高性能的图片压缩？</p>\n<p>基本上很难做到，Javascript 的性能与生态决定了实现图片压缩的艰难。</p>\n<p>而借助于 WASM 就相当于借用了其它语言的生态。</p>\n<p>1.libavif (opens new window): C 语言写的 avif 解码编码库<br />\n 2.libwebp (opens new window): C 语言写的 webp 解码编码库<br />\n 3.mozjpeg (opens new window): C 语言写的 jpeg 解码编码库<br />\n 4.oxipng (opens new window): Rust 语言写的 png 优化库<br />\n而由于 WASM，完全可以把这些其它语言的生态移植到浏览器中，从而实现一个高性能的离线式的图片压缩工具。</p>\n",
            "tags": [
                "前端开发",
                "前端性能优化",
                "前端性能优化"
            ]
        },
        {
            "id": "https://pink-png.github.io/performance-optimization/%E5%9C%A8%E6%9F%90%E6%9F%90%E4%BC%81%E4%B8%9A%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BC%98%E5%8C%96%E6%80%9D%E8%80%83(uniapp)/",
            "url": "https://pink-png.github.io/performance-optimization/%E5%9C%A8%E6%9F%90%E6%9F%90%E4%BC%81%E4%B8%9A%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BC%98%E5%8C%96%E6%80%9D%E8%80%83(uniapp)/",
            "title": "在某某企业小程序优化思考(uniapp)",
            "date_published": "2022-06-25T08:43:00.000Z",
            "content_html": "<ol>\n<li>\n<p>vuex 对启动耗时的影响<br />\n Vuex 是一个状态管理库，在启动阶段如果存在大量的业务逻辑，会使启动耗时增加。这是因为在启动过程中，需要初始化 Vuex 的状态和相关的模块，可能会触发一些异步操作和计算，导致启动时间延长。因此，在设计和使用 Vuex 时，需要注意避免在启动阶段执行过多的繁重操作，以减少启动耗时。</p>\n</li>\n<li>\n<p>mixins 对启动耗时的影响<br />\n Mixins 是一种在组件中复用代码的机制，通过将相同的逻辑和功能抽离到 Mixins 中，可以在多个组件中共享使用。在启动阶段，如果组件使用了 Mixins，会在组件实例化时执行 Mixins 中的代码逻辑，因此会增加启动耗时。如果 Mixins 中存在大量或复杂的业务逻辑，会进一步增加启动耗时。因此，使用 Mixins 时需要注意控制逻辑的复杂度，避免影响启动性能。</p>\n</li>\n<li>\n<p>子组件中的请求是从 onReady 加载完再去调用请求的，所以是否组件中不要使用请求？<br />\n 在小程序中，子组件的请求通常是在组件的 onReady 生命周期钩子函数中进行调用。由于 onReady 是在页面的渲染准备完成后调用的，此时页面已经可见，用户可以看到页面内容。因此，在 onReady 钩子中进行请求可能会导致页面加载完成后才开始请求数据，从而延长了页面加载时间。</p>\n</li>\n<li>\n<p>挂载到原型上的东西，每次生成的页面都会执行这个数据，这里的影响多大？<br />\n 当一些数据或方法挂载到小程序的原型对象上时，每次生成的页面都可以通过原型链访问到这些数据或方法。这样做的好处是可以实现数据和方法的全局共享和复用。</p>\n</li>\n<li>\n<p>有没有根据包大小计算出来的 平均启动时间 / 加载耗时<br />\n通常情况下，并没有一个直接根据包大小计算出来的平均启动时间或加载耗时的公式或算法。因为启动时间和加载耗时受到多个因素的影响，如网络环境、设备性能、代码复杂度等。<br />\n包大小的增加可能会导致下载时间变长，从而影响启动时间。然而，仅仅根据包大小无法准确预测启动时间的增加，还需要考虑其他因素的综合影响。因此，对于不同的小程序和具体场景，需要进行实际测试和评估来得出准确的启动时间和加载耗时。</p>\n</li>\n</ol>\n<ul>\n<li>计算最佳收益点</li>\n<li>其实这里想表达的是否 2M 和 1.5M 的包下载时间的差距是否几乎不计？</li>\n</ul>\n<ol start=\"6\">\n<li>从小程序加载流程上来讲，对于首次打开小程序用户，会去下载包，包大会造成下载时间变长（在相同网络条件下）；影响启动耗时的直接因素：<br />\n● 平台：不同的平台下（安卓、IOS）设备性能、操作系统、框架实现、优化方案存在较大的差异，启动耗时也存在较大的差异。只有分平台比较启动耗时（包括各阶段耗时）才有意义；<br />\n1. 怎么做到只是针对某个机型去判断？<br />\n2. 是不是要去处理慢的机型呢？怎么处理是个问题<br />\n● 下载比例及大小：代码包下载和更新都会显著影响小程序启动耗时，在其他流程耗时稳定的情况下，下载比例升高会影响大盘启动耗时。<br />\n● 入口页面：不同页面启动时，根据所在分包的不同，需要下载的代码包数量和大小和代码注入量都存在差异。不同页面渲染耗时也存在差异。<br />\n● 机型分布：启动耗时和设备性能有较强关联，不同小程序或使用场景用户群体的差异可能导致机型分布的差异，进而影响大盘启动耗时。<br />\n● 网络环境：网络环境主要影响网络请求的耗时，如小程序信息获取、代码包下载等。<br />\n间接因素：<br />\n● 场景 / 访问来源：不同场景下，用户访问的页面不同，新用户比例也有差异，对启动耗时会有一定影响。此外，用户访问的目的性和自身的等待意愿也有差异，也会影响打开率。<br />\n1. 这里可能存在有些页面分享进来的，但是这个页面其实是不允许直接进入的，可能会造成某些问题导致的耗时<br />\n 2. 进入的页面不是首页，这是一种什么场景？<br />\n● 首次访问用户比例：用户首次访问小程序时，需要完整的进行小程序信息准备、代码包下载的流程，代码缓存也需要重新生成，启动耗时会比非首次访问高。<br />\n● 小程序版本更新：小程序版本更新时，用户需要更新小程序信息和代码包，代码缓存也需要重新生成，启动耗时会出现上涨。<br />\n1. 这个其实就是每次更新版本对启动时长的影响，特别是发布灰度的时候<br />\n 2. 一段时间不发新版本，启动时间会降低。这里其实说明我们登报的人，他存在多次进来看的情况（这个是肯定的）</li>\n</ol>\n",
            "tags": [
                "前端开发",
                "前端性能优化",
                "前端性能优化"
            ]
        },
        {
            "id": "https://pink-png.github.io/Web-Integration/web%E5%AE%89%E5%85%A8/",
            "url": "https://pink-png.github.io/Web-Integration/web%E5%AE%89%E5%85%A8/",
            "title": "web安全",
            "date_published": "2021-06-25T08:43:00.000Z",
            "content_html": "<h1 id=\"xss跨站脚本攻击\"><a class=\"anchor\" href=\"#xss跨站脚本攻击\">#</a> XSS（跨站脚本攻击）：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>使用合适的编码和转义方式来处理输入和输出的数据。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>对用户输入进行验证和过滤，避免将恶意脚本插入到页面中。</pre></td></tr></table></figure><h1 id=\"csrf跨站请求伪造\"><a class=\"anchor\" href=\"#csrf跨站请求伪造\">#</a> CSRF（跨站请求伪造）：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在关键操作上使用随机生成的令牌（CSRF Token），并验证该令牌的合法性。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>设置合适的 SameSite Cookie 属性，限制跨站点访问。</pre></td></tr></table></figure><h1 id=\"点击劫持clickjacking\"><a class=\"anchor\" href=\"#点击劫持clickjacking\">#</a> 点击劫持（Clickjacking）：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>使用 X-Frame-Options 或 Content-Security-Policy 来限制页面被嵌套到其他网站的情况。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>可以使用 JavaScript 检测页面是否在 iframe 中展示，并弹出警告或拒绝加载。</pre></td></tr></table></figure><h1 id=\"密码安全\"><a class=\"anchor\" href=\"#密码安全\">#</a> 密码安全：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>采用密码哈希算法（如 bcrypt）对用户密码进行加密存储，避免明文存储。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>强制要求用户设置强密码，并进行密码策略的验证（如长度、大小写字母、特殊字符等）。</pre></td></tr></table></figure><h1 id=\"客户端数据验证和过滤\"><a class=\"anchor\" href=\"#客户端数据验证和过滤\">#</a> 客户端数据验证和过滤：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>不要依赖前端验证，一定要在后端进行数据验证和过滤。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>对客户端输入的数据进行严格验证，避免恶意输入和攻击。</pre></td></tr></table></figure><h1 id=\"安全更新和依赖管理\"><a class=\"anchor\" href=\"#安全更新和依赖管理\">#</a> 安全更新和依赖管理：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>及时更新和升级前端框架、库和依赖，以获取最新的安全修复和补丁。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>定期审查和监控项目的依赖项，确保没有包含已知的漏洞和安全问题。</pre></td></tr></table></figure><h1 id=\"https-的使用\"><a class=\"anchor\" href=\"#https-的使用\">#</a> HTTPS 的使用：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在页面上使用 HTTPS 协议来加密数据传输，防止数据被窃取和篡改。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>配置合适的 TLS/SSL 加密套件和证书，确保通信的安全性。</pre></td></tr></table></figure><h1 id=\"安全审计和日志记录\"><a class=\"anchor\" href=\"#安全审计和日志记录\">#</a> 安全审计和日志记录：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>记录用户操作日志，追溯异常行为和安全事件。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>定期进行安全审计，检查应用程序的漏洞和安全风险。</pre></td></tr></table></figure><h1 id=\"输入验证与过滤\"><a class=\"anchor\" href=\"#输入验证与过滤\">#</a> 输入验证与过滤：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对用户输入进行验证和过滤，确保只接受预期的合法输入。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>使用白名单过滤，而不是黑名单过滤，避免遗漏恶意输入。</pre></td></tr></table></figure><h1 id=\"安全的跨域资源共享cors配置\"><a class=\"anchor\" href=\"#安全的跨域资源共享cors配置\">#</a> 安全的跨域资源共享（CORS）配置：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>配置合适的 CORS 头信息，限制跨域请求的访问权限。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>设置合理的源和目标组合，防止未经授权的访问和信息泄露。</pre></td></tr></table></figure><h1 id=\"客户端存储的安全性\"><a class=\"anchor\" href=\"#客户端存储的安全性\">#</a> 客户端存储的安全性：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>避免在客户端存储敏感信息，如密码、令牌等。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>使用合适的存储机制，如浏览器提供的 localStorage 或 sessionStorage，加密存储敏感数据。</pre></td></tr></table></figure><h1 id=\"cdn-安全\"><a class=\"anchor\" href=\"#cdn-安全\">#</a> CDN 安全：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>如果使用内容分发网络（CDN），确保从可信任的来源获取资源并验证其完整性。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>配置适当的安全头部，如 Content Security Policy (CSP)。</pre></td></tr></table></figure><h1 id=\"防御点击劫持\"><a class=\"anchor\" href=\"#防御点击劫持\">#</a> 防御点击劫持：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>通过在响应头中设置 X-Frame-Options 或 Content-Security-Policy，限制页面被嵌套到其他网站的情况。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>对于现代浏览器，可以使用 Frame-ancestors CSP 指令来进一步控制允许嵌套页面的来源。</pre></td></tr></table></figure><h1 id=\"定期安全审查和漏洞扫描\"><a class=\"anchor\" href=\"#定期安全审查和漏洞扫描\">#</a> 定期安全审查和漏洞扫描：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>定期进行安全审查，检查代码中的潜在漏洞和安全隐患。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>使用自动化工具进行漏洞扫描和代码静态分析，及时发现可能存在的安全问题。</pre></td></tr></table></figure><h1 id=\"消息传递的安全性\"><a class=\"anchor\" href=\"#消息传递的安全性\">#</a> 消息传递的安全性：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对于敏感信息的传递，尽量使用加密算法加密数据。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>避免将敏感信息直接传递给前端，而是在后端进行敏感信息的处理和加密。</pre></td></tr></table></figure><h1 id=\"防御代码注入攻击\"><a class=\"anchor\" href=\"#防御代码注入攻击\">#</a> 防御代码注入攻击：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>避免在前端中执行不受信任的代码。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>不要将用户输入直接拼接到代码字符串中，以防止代码注入攻击。</pre></td></tr></table></figure><h1 id=\"防御文件上传漏洞\"><a class=\"anchor\" href=\"#防御文件上传漏洞\">#</a> 防御文件上传漏洞：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对用户上传的文件进行严格的验证和过滤，并使用独立的文件存储来避免安全问题。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>验证文件类型、大小和内容，确保只接受合法和安全的文件。</pre></td></tr></table></figure><h1 id=\"安全的第三方组件和库\"><a class=\"anchor\" href=\"#安全的第三方组件和库\">#</a> 安全的第三方组件和库：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在使用第三方组件和库时，选择经过广泛审查和更新的可信来源。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>定期更新和升级第三方组件，以获取最新的安全修复和功能改进。</pre></td></tr></table></figure><h1 id=\"保护敏感信息\"><a class=\"anchor\" href=\"#保护敏感信息\">#</a> 保护敏感信息：</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>不要将敏感信息直接存储在前端，如密码、密钥等。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>使用加密算法对敏感信息进行加密，并在后端进行处理和存储。</pre></td></tr></table></figure>",
            "tags": [
                "前端开发",
                "web安全",
                "web综合问题"
            ]
        },
        {
            "id": "https://pink-png.github.io/Web-Integration/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/",
            "url": "https://pink-png.github.io/Web-Integration/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/",
            "title": "浏览器缓存机制",
            "date_published": "2021-06-25T08:43:00.000Z",
            "content_html": "<h1 id=\"浏览器缓存机制\"><a class=\"anchor\" href=\"#浏览器缓存机制\">#</a> 浏览器缓存机制</h1>\n<p>浏览器缓存机制是指浏览器在处理网页资源时，将一部分资源保存在本地存储中，以便下次请求相同资源时可以快速获取，从而提高网页加载速度和用户体验。以下是常见的浏览器缓存机制：</p>\n<h1 id=\"强缓存\"><a class=\"anchor\" href=\"#强缓存\">#</a> 强缓存</h1>\n<ol>\n<li>浏览器在第一次请求资源时，服务器通过响应头中的 Cache-Control 或 Expires 字段返回资源，并将这些信息保存在浏览器缓存中。在下一次请求相同资源时，浏览器会直接从缓存中读取，而不发起请求</li>\n<li>常用的 Cache-Control 值有：</li>\n</ol>\n<ul>\n<li>public：表示资源可以被所有用户及代理服务器缓存。</li>\n<li>private：表示资源只能被单个用户缓存，不允许代理服务器缓存。</li>\n<li>max-age：表示资源在缓存中的有效期，单位为秒。</li>\n</ul>\n<h1 id=\"协商缓存\"><a class=\"anchor\" href=\"#协商缓存\">#</a> 协商缓存</h1>\n<ol>\n<li>在资源过期后，浏览器会发送一个带有 If-Modified-Since（Last-Modified）或 If-None-Match（ETag）字段的请求到服务器，询问该资源是否有更新。如果服务器返回 304 Not Modified 状态码，则表示资源未发生变化，浏览器会直接从缓存中读取。</li>\n<li>常用的响应头字段有：</li>\n</ol>\n<ul>\n<li>Last-Modified：表示资源的最后修改时间。</li>\n<li>ETag：表示资源的唯一标识符。</li>\n</ul>\n<h1 id=\"离线缓存\"><a class=\"anchor\" href=\"#离线缓存\">#</a> 离线缓存</h1>\n<ol>\n<li>HTML5 提供了离线缓存机制，使用 manifest 文件来定义需要缓存的资源。浏览器在第一次访问网页时会下载 manifest 文件并根据文件中的信息缓存相应资源。在之后的访问中，即使处于离线状态，浏览器仍然能够加载并显示已缓存的页面。离线缓存可以提高网页的可访问性和性能。</li>\n</ol>\n<h1 id=\"缓存位置\"><a class=\"anchor\" href=\"#缓存位置\">#</a> 缓存位置</h1>\n<ol>\n<li>\n<p>内存缓存（Memory Cache）：<br />\n内存缓存是最快的缓存位置，将资源直接保存在浏览器内存中。<br />\n内存缓存的读取速度非常快，可以快速响应请求，适用于频繁请求和临时性资源。<br />\n但是，内存缓存的容量有限，并且在浏览器关闭时会被清空。</p>\n</li>\n<li>\n<p>硬盘缓存（Disk Cache）：<br />\n硬盘缓存将资源保存在硬盘上，相对于内存缓存来说读取速度较慢，但比重新请求资源要快得多。<br />\n硬盘缓存可以持久保存资源，并且在浏览器关闭后仍然可用。<br />\n硬盘缓存的容量相对较大，可以保存更多的资源。</p>\n</li>\n<li>\n<p>服务端缓存：<br />\n服务端缓存是指将资源保存在服务器端，由服务器返回缓存的资源给浏览器。<br />\n服务端缓存可以利用类似缓存代理、CDN 等方式来提升资源获取速度，减轻服务器的压力。<br />\n服务端缓存可以根据资源的过期时间或版本号来判断是否返回缓存资源。</p>\n</li>\n<li>\n<p>Service Worker 缓存：<br />\nService Worker 是运行在浏览器后台的脚本，可以拦截网络请求并自定义响应。<br />\nService Worker 可以将资源保存在本地缓存中，实现离线访问或快速加载。<br />\nService Worker 缓存具有灵活性和高度可自定义的特性，适用于离线应用、推送通知等场景。</p>\n</li>\n</ol>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>通过合理设置缓存策略，可以减少对服务器的请求次数，加快网页加载速度，降低网络流量消耗。同时，如果网页内容有更新，通过修改资源的版本号或过期时间等方式来使浏览器重新请求新的资源版本。</p>\n",
            "tags": [
                "前端开发",
                "浏览器",
                "web综合问题"
            ]
        },
        {
            "id": "https://pink-png.github.io/Web-Integration/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/",
            "url": "https://pink-png.github.io/Web-Integration/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/",
            "title": "浏览器渲染原理以及优化思路",
            "date_published": "2021-06-25T08:43:00.000Z",
            "content_html": "<h1 id=\"浏览器渲染原理\"><a class=\"anchor\" href=\"#浏览器渲染原理\">#</a> 浏览器渲染原理</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1. 渲染过程：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>解析HTML：浏览器解析HTML代码，构建DOM树。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>解析CSS：浏览器解析CSS样式表，构建CSSOM树。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>构建渲染树：将DOM树和CSSOM树合并成渲染树，该树只包含需要显示元素的信息。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>布局（Layout）：计算每个元素的大小和位置。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>绘制（Paint）：根据计算好的布局信息，将每个元素绘制成屏幕上的像素。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>合成（Composite）：将绘制好的元素按正确的顺序合成到最终的图像上。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>2. 阻塞过程：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>脚本阻塞：当浏览器遇到&lt;script>标签或执行JavaScript代码时，会暂停HTML解析和渲染，直到脚本执行完毕。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>样式加载阻塞：如果浏览器遇到外部CSS文件，会等待该文件下载和解析完毕后再继续渲染。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>资源加载阻塞：当浏览器遇到资源文件如图片、字体或其他媒体时，会等待资源下载和加载完毕后再继续渲染。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>3. 重绘与汇流：</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>重绘（Repaint）：当元素的样式改变，但不影响布局时，浏览器只需要重新绘制元素的可视部分。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>汇流（Reflow）：当布局发生改变，例如改变元素的大小或位置时，浏览器需要重新计算并调整元素的布局和相关元素的位置。</pre></td></tr></table></figure><h1 id=\"优化\"><a class=\"anchor\" href=\"#优化\">#</a> 优化</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1. 减少阻塞时间：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>脚本加载优化：将JavaScript脚本放在页面底部，或者使用defer属性将其延迟执行，以免阻塞HTML解析和渲染过程。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>样式加载优化：将CSS样式表放在&lt;head>标签中，避免样式表的加载阻塞页面渲染。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>资源加载优化：使用合适的缓存策略、减小资源文件的大小，以及使用CDN等方式来提高资源加载速度。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>2. 最小化重绘与汇流：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>批量修改样式：避免频繁读取和修改单个元素的样式属性，最好使用CSS类进行批量修改，这样可以减少重绘和汇流的次数。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>避免强制同步布局：在修改多个元素的样式时，避免强制同步布局，即尽量将布局相关的修改集中在一起，减少不必要的重绘和汇流。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>3.使用现代CSS特性：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>使用CSS动画代替JavaScript动画：CSS动画借助浏览器的硬件加速，性能更高，并且不会阻塞JavaScript主线程。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>使用CSS Grid 和 Flexbox 布局：这些现代的布局方式能够更有效地处理布局，减少重绘和汇流的次数。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>4.图片优化：</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>使用适当的图片格式：根据图片特性选择合适的图片格式，例如JPEG、PNG、WebP等，以尽量减小文件大小。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>图片懒加载：只在视口范围内加载可见区域的图片，延迟加载其他图片，以提高页面加载速度。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>5. 代码优化：</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>避免频繁操作DOM：减少对DOM的修改和查询次数，可以使用文档片段（DocumentFragment）来进行批量操作。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>压缩和合并代码：对CSS和JavaScript文件进行压缩和合并，减小文件体积，加快加载速度。</pre></td></tr></table></figure>",
            "tags": [
                "前端开发",
                "浏览器",
                "web综合问题"
            ]
        },
        {
            "id": "https://pink-png.github.io/Web-Integration/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%9D%A2%E8%AF%95/",
            "url": "https://pink-png.github.io/Web-Integration/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%9D%A2%E8%AF%95/",
            "title": "web综合问题",
            "date_published": "2021-06-25T08:43:00.000Z",
            "content_html": "<h1 id=\"常见的浏览器内核有哪些\"><a class=\"anchor\" href=\"#常见的浏览器内核有哪些\">#</a> 常见的浏览器内核有哪些？</h1>\n<p>主要分成两部分：渲染引擎 (layout engineer 或 Rendering Engine) 和 JS 引擎。<br />\n渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。<br />\nJS 引擎则：解析和执行 javascript 来实现网页的动态效果。<br />\n最开始渲染引擎和 JS 引擎并没有区分的很明确，后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。<br />\n常见内核<br />\n Trident 内核：IE, MaxThon, TT, The World, 360, 搜狗浏览器等。[又称 MSHTML]<br />\n Gecko 内核：Netscape6 及以上版本，FF, MozillaSuite / SeaMonkey 等<br />\n Presto 内核：Opera7 及以上。 [Opera 内核原为：Presto，现为：Blink;]<br />\n Webkit 内核：Safari, Chrome 等。 [Chrome 的：Blink（WebKit 的分支）]</p>\n<h1 id=\"网页前端性能优化的方式有哪些\"><a class=\"anchor\" href=\"#网页前端性能优化的方式有哪些\">#</a> 网页前端性能优化的方式有哪些？</h1>\n<p>1. 压缩 css, js, 图片<br />\n 2. 减少 http 请求次数， 合并 css、js 、合并图片（雪碧图）<br />\n3. 使用 CDN<br />\n4. 减少 dom 元素数量<br />\n 5. 图片懒加载<br />\n 6. 静态资源另外用无 cookie 的域名<br />\n 7. 减少 dom 的访问（缓存 dom）<br />\n8. 巧用事件委托<br />\n 9. 样式表置顶、脚本置低</p>\n<h1 id=\"网页从输入网址到渲染完成经历了哪些过程\"><a class=\"anchor\" href=\"#网页从输入网址到渲染完成经历了哪些过程\">#</a> 网页从输入网址到渲染完成经历了哪些过程？</h1>\n<p>大致可以分为如下 7 步：</p>\n<p>输入网址；<br />\n发送到 DNS 服务器，并获取域名对应的 web 服务器对应的 ip 地址；<br />\n与 web 服务器建立 TCP 连接；<br />\n浏览器向 web 服务器发送 http 请求；<br />\nweb 服务器响应请求，并返回指定 url 的数据（或错误信息，或重定向的新的 url 地址）；<br />\n浏览器下载 web 服务器返回的数据及解析 html 源文件；<br />\n生成 DOM 树，解析 css 和 js，渲染页面，直至显示完成；</p>\n<h1 id=\"线程与进程的区别\"><a class=\"anchor\" href=\"#线程与进程的区别\">#</a> 线程与进程的区别？</h1>\n<p>一个程序至少有一个进程，一个进程至少有一个线程.<br />\n 线程的划分尺度小于进程，使得多线程程序的并发性高。<br />\n另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。<br />\n线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。<br />\n从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。</p>\n<h1 id=\"http常见的状态码\"><a class=\"anchor\" href=\"#http常见的状态码\">#</a> HTTP 常见的状态码？</h1>\n<p>100 Continue 继续，一般在发送 post 请求时，已发送了 http header 之后服务端将返回此信息，表示确认，之后发送具体参数信息<br />\n 200 OK 正常返回信息<br />\n 201 Created 请求成功并且服务器创建了新的资源<br />\n 202 Accepted 服务器已接受请求，但尚未处理<br />\n 301 Moved Permanently 请求的网页已永久移动到新位置。<br />\n302 Found 临时性重定向。<br />\n303 See Other 临时性重定向，且总是使用 GET 请求新的 URI。<br />\n304 Not Modified 自从上次请求后，请求的网页未修改过。<br />\n400 Bad Request 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。<br />\n401 Unauthorized 请求未授权。<br />\n403 Forbidden 禁止访问。<br />\n404 Not Found 找不到如何与 URI 相匹配的资源。<br />\n500 Internal Server Error 最常见的服务器端错误。<br />\n503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。</p>\n<h1 id=\"图片懒加载\"><a class=\"anchor\" href=\"#图片懒加载\">#</a> 图片懒加载？</h1>\n<p>当页面滚动的时间被触发 -&gt; 执行加载图片操作 -&gt; 判断图片是否在可视区域内 -&gt; 在，则动态将 data-src 的值赋予该图片</p>\n<h1 id=\"移动端性能优化\"><a class=\"anchor\" href=\"#移动端性能优化\">#</a> 移动端性能优化？</h1>\n<p>尽量使用 css3 动画，开启硬件加速<br />\n适当使用 touch 时间代替 click 时间<br />\n避免使用 css3 渐变阴影效果<br />\n可以用 transform: translateZ (0) 来开启硬件加速<br />\n不滥用 float。float 在渲染时计算量比较大，尽量减少使用<br />\n不滥用 web 字体。web 字体需要下载，解析，重绘当前页面<br />\n合理使用 requestAnimationFrame 动画代替 setTimeout<br />\ncss 中的属性（css3 transitions、css3 3D transforms、opacity、webGL、video）会触发 GUP 渲染，耗电</p>\n<h1 id=\"tcp-传输的三次握手-四次挥手策略\"><a class=\"anchor\" href=\"#tcp-传输的三次握手-四次挥手策略\">#</a> TCP 传输的三次握手、四次挥手策略</h1>\n<p>三次握手：<br />\n为了准确无误地吧数据送达目标处，TCP 协议采用了三次握手策略。用 TCP 协议把数据包送出去后，TCP 不会对传送后的情况置之不理，他一定会向对方确认是否送达，握手过程中使用 TCP 的标志：SYN 和 ACK<br />\n 发送端首先发送一个带 SYN 的标志的数据包给对方<br />\n接收端收到后，回传一个带有 SYN/ACK 标志的数据包以示传达确认信息<br />\n最后，发送端再回传一个带 ACK 的标志的数据包，代表 “握手” 结束<br />\n如在握手过程中某个阶段莫明中断，TCP 协议会再次以相同的顺序发送相同的数据包</p>\n<p>断开一个 TCP 连接需要 “四次挥手”<br />\n 第一次挥手：主动关闭方发送一个 FIN，用来关注主动方到被动关闭方的数据传送，也即是主动关闭方告诫被动关闭方：我已经不会再给你发数据了（在 FIN 包之前发送的数据，如果没有收到对应的 ACK 确认报文，主动关闭方依然会重发这些数据）。但是，此时主动关闭方还可以接受数据<br />\n第二次挥手：被动关闭方收到 FIN 包后，发送一个 ACK 给对方，确认序号收到序号 +1（与 SYN 相同，一个 FIN 占用一个序号）<br />\n第三次挥手：被动关闭方发送一个 FIN。用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会给你发送数据了<br />\n第四次挥手：主动关闭方收到 FIN 后，发送一个 ACK 给被动关闭方，确认序号为收到序号 + 1，至此，完成四次挥手</p>\n<h1 id=\"http-和-https为什么https安全\"><a class=\"anchor\" href=\"#http-和-https为什么https安全\">#</a> HTTP 和 HTTPS，为什么 HTTPS 安全？</h1>\n<p>HTTP 协议通常承载与 TCP 协议之上，在 HTTP 和 TCP 之间添加一个安全协议层（SSL 或 TSL），这个时候，就成了我们常说的 HTTPS<br />\n 默认 HTTP 的端口号为 80，HTTPS 的端口号为 443<br />\n 因为网络请求需要中间有很多的服务器路由的转发，中间的节点都可能篡改信息，而如果使用 HTTPS，密钥在你和终点站才有，https 之所有说比 http 安全，是因为他利用 ssl/tls 协议传输。包含证书，流量转发，负载均衡，页面适配，浏览器适配，refer 传递等，保障了传输过程的安全性</p>\n<h1 id=\"axios和fetch区别对比\"><a class=\"anchor\" href=\"#axios和fetch区别对比\">#</a> axios 和 fetch 区别对比</h1>\n<p>axios 是一个基于 Promise 用于浏览器和 nodejs 的 HTTP 客户端，本质上也是对原生 XHR 的封装，只不过它是 Promise 的实现版本，符合最新的 ES 规范，它本身具有以下特征</p>\n<p>从浏览器中创建 XMLHttpRequest<br />\n 支持 Promise API<br />\n 客户端支持防止 CSRF<br />\n 提供了一些并发请求的接口（重要，方便了很多的操作）<br />\n从 node.js 创建 http 请求<br />\n拦截请求和响应<br />\n转换请求和响应数据<br />\n取消请求<br />\n自动转换 JSON 数据<br />\n fetch 优势：</p>\n<p>语法简洁，更加语义化<br />\n基于标准 Promise 实现，支持 async/await<br />\n 同构方便，使用 isomorphic-fetch<br />\n 更加底层，提供的 API 丰富（request, response）<br />\n脱离了 XHR，是 ES 规范里新的实现方式<br />\n fetch 存在问题</p>\n<p>fetch 是一个低层次的 API，你可以把它考虑成原生的 XHR，所以使用起来并不是那么舒服，需要进行封装。<br />\nfetch 只对网络请求报错，对 400，500 都当做成功的请求，服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。<br />\nfetch 默认不会带 cookie，需要添加配置项： fetch (url, {credentials: ‘include’})<br />\n fetch 不支持 abort，不支持超时控制，使用 setTimeout 及 Promise.reject 的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费<br />\n fetch 没有办法原生监测请求的进度，而 XHR 可以</p>\n",
            "tags": [
                "前端开发",
                "浏览器",
                "web综合问题"
            ]
        },
        {
            "id": "https://pink-png.github.io/Web-Integration/%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/",
            "url": "https://pink-png.github.io/Web-Integration/%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/",
            "title": "跨域解决方案",
            "date_published": "2021-06-25T08:43:00.000Z",
            "content_html": "<h1 id=\"什么是跨域\"><a class=\"anchor\" href=\"#什么是跨域\">#</a> 什么是跨域？</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在前端领域中，跨域是指浏览器允许向服务器发送跨域请求，从而克服Ajax只能**同源**使用的限制。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>什么是同源策略？</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>**同源策略**是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指\"协议+域名+端口\"三者相同，即便两个不同的域名指向同一个ip地址，也非同源</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>同源策略限制以下几种行为：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>- Cookie、LocalStorage 和 IndexDB 无法读取</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>- DOM和JS对象无法获得</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>- AJAX 请求不能发送</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>举例说明：⽐如⼀个⿊客程序，他利⽤ Iframe 把真正的银⾏登录⻚⾯嵌到他的⻚⾯上，</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>当你使⽤真实的⽤户名，密码登录时，他的⻚⾯就可以通过 Javascript 读取到你的表单</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>中 input 中的内容，这样⽤户名，密码就轻松到⼿了。</pre></td></tr></table></figure><h1 id=\"jsonp跨域\"><a class=\"anchor\" href=\"#jsonp跨域\">#</a> JSONP 跨域</h1>\n<p><strong>jsonp</strong> 的原理就是利用 <code>&lt;script&gt;</code>  标签没有跨域限制，通过 <code>&lt;script&gt;</code>  标签 src 属性，发送带有 callback 参数的 GET 请求，服务端将接口返回数据拼凑到 callback 函数中，返回给浏览器，浏览器解析执行，从而前端拿到 callback 函数返回的数据。</p>\n<p>1）原生 JS 实现：</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;script></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    var script = document.createElement('script');</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    script.type = 'text/javascript';</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    // 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    script.src = 'http://www.domain2.com:8080/login?user=admin&amp;callback=handleCallback';</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    document.head.appendChild(script);</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    // 回调执行函数</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    function handleCallback(res) &#123;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        alert(JSON.stringify(res));</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> &lt;/script></pre></td></tr></table></figure><p>服务端返回如下（返回时即执行全局函数）：</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>handleCallback(&#123;\"success\": true, \"user\": \"admin\"&#125;)</pre></td></tr></table></figure><p>2）jquery Ajax 实现：</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$.ajax(&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    url: 'http://www.domain2.com:8080/login',</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    type: 'get',</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    dataType: 'jsonp',  // 请求方式为jsonp</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    jsonpCallback: \"handleCallback\",  // 自定义回调函数名</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    data: &#123;&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&#125;);</pre></td></tr></table></figure><p>3）Vue axios 实现：</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>this.$http = axios;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>this.$http.jsonp('http://www.domain2.com:8080/login', &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    params: &#123;&#125;,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    jsonp: 'handleCallback'</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#125;).then((res) => &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console.log(res); </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&#125;)</pre></td></tr></table></figure><p>后端 node.js 代码：</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>var querystring = require('querystring');</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>var http = require('http');</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>var server = http.createServer();</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>server.on('request', function(req, res) &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    var params = querystring.parse(req.url.split('?')[1]);</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    var fn = params.callback;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    // jsonp返回设置</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    res.writeHead(200, &#123; 'Content-Type': 'text/javascript' &#125;);</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    res.write(fn + '(' + JSON.stringify(params) + ')');</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    res.end();</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>&#125;);</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>server.listen('8080');</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>console.log('Server is running at port 8080...');</pre></td></tr></table></figure><p>jsonp 的缺点：只能发送 get 一种请求。</p>\n<h1 id=\"跨域资源共享cors后端配置跨域\"><a class=\"anchor\" href=\"#跨域资源共享cors后端配置跨域\">#</a> 跨域资源共享（CORS）（后端配置跨域）</h1>\n<p><strong>CORS</strong> 是一个 W3C 标准，全称是 &quot;跨域资源共享&quot;（Cross-origin resource sharing）。<br />\n它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求，从而克服了 AJAX 只能同源使用的限制。<br />\nCORS 需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE 浏览器不能低于 IE10。</p>\n<p>浏览器将 CORS 跨域请求分为简单请求和非简单请求。</p>\n<p>只要同时满足一下两个条件，就属于简单请求</p>\n<p>(1) 使用下列方法之一：</p>\n<ul>\n<li>head</li>\n<li>get</li>\n<li>post</li>\n</ul>\n<p>(2) 请求的 Heder 是</p>\n<ul>\n<li>Accept</li>\n<li>Accept-Language</li>\n<li>Content-Language</li>\n<li>Content-Type: 只限于三个值：application/x-www-form-urlencoded、multipart/form-data、text/plain</li>\n</ul>\n<p>不同时满足上面的两个条件，就属于非简单请求。浏览器对这两种的处理，是不一样的。</p>\n<p>简单请求</p>\n<p>对于简单请求，浏览器直接发出 CORS 请求。具体来说，就是在头信息之中，增加一个 Origin 字段。</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>GET /cors HTTP/1.1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Origin: http://api.bob.com</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Host: api.alice.com</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Accept-Language: en-US</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Connection: keep-alive</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>User-Agent: Mozilla/5.0...</pre></td></tr></table></figure><p>上面的头信息中，Origin 字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。</p>\n<p>CORS 请求设置的响应头字段，都以 Access-Control - 开头:</p>\n<p><strong>1）Access-Control-Allow-Origin</strong>：必选</p>\n<p>它的值要么是请求时 Origin 字段的值，要么是一个 *，表示接受任意域名的请求。</p>\n<p><strong>2）Access-Control-Allow-Credentials</strong>：可选</p>\n<p>它的值是一个布尔值，表示是否允许发送 Cookie。默认情况下，Cookie 不包括在 CORS 请求之中。设为 true，即表示服务器明确许可，Cookie 可以包含在请求中，一起发给服务器。这个值也只能设为 true，如果服务器不要浏览器发送 Cookie，删除该字段即可。</p>\n<p><strong>3）Access-Control-Expose-Headers</strong>：可选</p>\n<p>CORS 请求时，XMLHttpRequest 对象的 getResponseHeader () 方法只能拿到 6 个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在 Access-Control-Expose-Headers 里面指定。上面的例子指定，getResponseHeader (‘FooBar’) 可以返回 FooBar 字段的值。</p>\n<p>非简单请求</p>\n<p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是 PUT 或 DELETE，或者 Content-Type 字段的类型是 application/json。非简单请求的 CORS 请求，会在正式通信之前，增加一次 HTTP 查询请求，称为 &quot;预检&quot; 请求（preflight）。</p>\n<p>预检请求</p>\n<p>预检 &quot;请求用的请求方法是 OPTIONS，表示这个请求是用来询问的。请求头信息里面，关键字段是 Origin，表示请求来自哪个源。除了 Origin 字段，&quot; 预检 &quot; 请求的头信息包括两个特殊字段。</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>OPTIONS /cors HTTP/1.1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Origin: http://api.bob.com</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Access-Control-Request-Method: PUT</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Access-Control-Request-Headers: X-Custom-Header</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Host: api.alice.com</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Accept-Language: en-US</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Connection: keep-alive</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>User-Agent: Mozilla/5.0..</pre></td></tr></table></figure><p><strong>1）Access-Control-Request-Method</strong>：必选</p>\n<p>用来列出浏览器的 CORS 请求会用到哪些 HTTP 方法，上例是 PUT。</p>\n<p><strong>2）Access-Control-Request-Headers</strong>：可选</p>\n<p>该字段是一个逗号分隔的字符串，指定浏览器 CORS 请求会额外发送的头信息字段，上例是 X-Custom-Header。</p>\n<p>预检请求的回应</p>\n<p>服务器收到 &quot;预检&quot; 请求以后，检查了 Origin、Access-Control-Request-Method 和 Access-Control-Request-Headers 字段以后，确认允许跨源请求，就可以做出回应。</p>\n<p>HTTP 回应中，除了关键的是 Access-Control-Allow-Origin 字段，其他 CORS 相关字段如下：</p>\n<p><strong>1）Access-Control-Allow-Methods</strong>：必选</p>\n<p>它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次 &quot;预检&quot; 请求。</p>\n<p><strong>2）Access-Control-Allow-Headers</strong></p>\n<p>如果浏览器请求包括 Access-Control-Request-Headers 字段，则 Access-Control-Allow-Headers 字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在 &quot;预检&quot; 中请求的字段。</p>\n<p><strong>3）Access-Control-Allow-Credentials</strong>：可选</p>\n<p>该字段与简单请求时的含义相同。</p>\n<p><strong>4）Access-Control-Max-Age</strong>：可选</p>\n<p>用来指定本次预检请求的有效期，单位为秒。</p>\n<p>CORS 跨域示例</p>\n<p><strong>1）前端设置</strong>：</p>\n<ul>\n<li>原生 ajax：</li>\n</ul>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>var xhr = new XMLHttpRequest(); // IE8/9需用window.XDomainRequest兼容</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>// 前端设置是否带cookie</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>xhr.withCredentials = true;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>xhr.open('post', 'http://www.domain2.com:8080/login', true);</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>xhr.send('user=admin');</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>xhr.onreadystatechange = function() &#123;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        alert(xhr.responseText);</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>&#125;;</pre></td></tr></table></figure><ul>\n<li>jquery ajax：</li>\n</ul>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$.ajax(&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ...</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   xhrFields: &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       withCredentials: true    // 前端设置是否带cookie</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   &#125;,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   crossDomain: true,   // 会让请求头中包含跨域的额外信息，但不会含cookie</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ...</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>&#125;);</pre></td></tr></table></figure><p><strong>2）服务端设置</strong>：</p>\n<ul>\n<li>nodejs 代码</li>\n</ul>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>var http = require('http');</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>var server = http.createServer();</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>var qs = require('querystring');</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>server.on('request', function(req, res) &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    var postData = '';</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    // 数据块接收中</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    req.addListener('data', function(chunk) &#123;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        postData += chunk;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    &#125;);</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    // 数据接收完毕</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    req.addListener('end', function() &#123;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        postData = qs.parse(postData);</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        // 跨域后台设置</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        res.writeHead(200, &#123;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            'Access-Control-Allow-Credentials': 'true',     // 后端允许发送Cookie</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            'Access-Control-Allow-Origin': 'http://www.domain1.com',    // 允许访问的域（协议+域名+端口）</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            /* </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>             * 此处设置的cookie还是domain2的而非domain1，因为后端也不能跨域写cookie(nginx反向代理可以实现)，</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>             * 但只要domain2中写入一次cookie认证，后面的跨域接口都能从domain2中获取cookie，从而实现所有的接口都能跨域访问</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>             */</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            'Set-Cookie': 'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly'  // HttpOnly的作用是让js无法读取cookie</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        &#125;);</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        res.write(JSON.stringify(postData));</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        res.end();</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    &#125;);</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>&#125;);</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>server.listen('8080');</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>console.log('Server is running at port 8080...');</pre></td></tr></table></figure><h1 id=\"nginx代理跨域\"><a class=\"anchor\" href=\"#nginx代理跨域\">#</a> nginx 代理跨域</h1>\n<p>nginx 代理跨域，实质和 CORS 跨域原理一样，通过配置文件设置请求响应头 Access-Control-Allow-Origin… 等字段。</p>\n<p>1）nginx 配置解决 iconfont 跨域</p>\n<p>浏览器跨域访问 js、css、img 等常规静态资源被同源策略许可，但 iconfont 字体文件 (eot|otf|ttf|woff|svg) 例外，此时可在 nginx 的静态资源服务器中加入以下配置。</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>location / &#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  add_header Access-Control-Allow-Origin *;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#125;</pre></td></tr></table></figure><p>2）nginx 反向代理接口跨域</p>\n<p>跨域问题：同源策略仅是针对浏览器的安全策略。服务器端调用 HTTP 接口只是使用 HTTP 协议，不需要同源策略，也就不存在跨域问题。</p>\n<p>实现思路：通过 Nginx 配置一个代理服务器域名与 domain1 相同，端口不同）做跳板机，反向代理访问 domain2 接口，并且可以顺便修改 cookie 中 domain 信息，方便当前域 cookie 写入，实现跨域访问。</p>\n<p>nginx 具体配置：</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#proxy服务器</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>server &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    listen       81;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    server_name  www.domain1.com;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    location / &#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        proxy_pass   http://www.domain2.com:8080;  #反向代理</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        proxy_cookie_domain www.domain2.com www.domain1.com; #修改cookie里域名</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        index  index.html index.htm;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        # 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        add_header Access-Control-Allow-Origin http://www.domain1.com;  #当前端只跨域不带cookie时，可为*</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        add_header Access-Control-Allow-Credentials true;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>&#125;</pre></td></tr></table></figure><h1 id=\"nodejs中间件代理跨域\"><a class=\"anchor\" href=\"#nodejs中间件代理跨域\">#</a> nodejs 中间件代理跨域</h1>\n<p>node 中间件实现跨域代理，原理大致与 nginx 相同，都是通过启一个代理服务器，实现数据的转发，也可以通过设置 cookieDomainRewrite 参数修改响应头中 cookie 中域名，实现当前域的 cookie 写入，方便接口登录认证。</p>\n<p><strong>1）非 vue 框架的跨域</strong></p>\n<p>使用 node + express + http-proxy-middleware 搭建一个 proxy 服务器。</p>\n<ul>\n<li>前端代码：</li>\n</ul>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>var xhr = new XMLHttpRequest();</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>// 前端开关：浏览器是否读写cookie</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>xhr.withCredentials = true;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>// 访问http-proxy-middleware代理服务器</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>xhr.open('get', 'http://www.domain1.com:3000/login?user=admin', true);</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>xhr.send();</pre></td></tr></table></figure><ul>\n<li>中间件服务器代码：</li>\n</ul>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>var express = require('express');</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>var proxy = require('http-proxy-middleware');</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>var app = express();</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>app.use('/', proxy(&#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    // 代理跨域目标接口</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    target: 'http://www.domain2.com:8080',</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    changeOrigin: true,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    // 修改响应头信息，实现跨域并允许带cookie</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    onProxyRes: function(proxyRes, req, res) &#123;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        res.header('Access-Control-Allow-Origin', 'http://www.domain1.com');</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        res.header('Access-Control-Allow-Credentials', 'true');</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    &#125;,</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    // 修改响应信息中的cookie域名</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cookieDomainRewrite: 'www.domain1.com'  // 可以为false，表示不修改</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>&#125;));</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>app.listen(3000);</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>console.log('Proxy server is listen at port 3000...');</pre></td></tr></table></figure><p><strong>2）vue 框架的跨域</strong></p>\n<p>node + vue + webpack + webpack-dev-server 搭建的项目，跨域请求接口，直接修改 webpack.config.js 配置。开发环境下，vue 渲染服务和接口代理服务都是 webpack-dev-server 同一个，所以页面与代理接口之间不再跨域。</p>\n<p>webpack.config.js 部分配置：</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module.exports = &#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    entry: &#123;&#125;,</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    module: &#123;&#125;,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    devServer: &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        historyApiFallback: true,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        proxy: [&#123;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            context: '/login',</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            target: 'http://www.domain2.com:8080',  // 代理跨域目标接口</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            changeOrigin: true,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            secure: false,  // 当代理某些https服务报错时用</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            cookieDomainRewrite: 'www.domain1.com'  // 可以为false，表示不修改</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        &#125;],</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        noInfo: true</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>&#125;</pre></td></tr></table></figure><h1 id=\"documentdomain-iframe跨域\"><a class=\"anchor\" href=\"#documentdomain-iframe跨域\">#</a> document.domain + iframe 跨域</h1>\n<p>此方案仅限主域相同，子域不同的跨域应用场景。实现原理：两个页面都通过 js 强制设置 document.domain 为基础主域，就实现了同域。</p>\n<p>1）父窗口：(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHAlM0EvL3d3dy5kb21haW4uY29tL2EuaHRtbA==\">http://www.domain.com/a.html</span>)</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;iframe id=\"iframe\" src=\"http://child.domain.com/b.html\">&lt;/iframe></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&lt;script></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    document.domain = 'domain.com';</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    var user = 'admin';</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&lt;/script></pre></td></tr></table></figure><p>1）子窗口：(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHAlM0EvL2NoaWxkLmRvbWFpbi5jb20vYS5odG1s\">http://child.domain.com/a.html</span>)</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;script></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    document.domain = 'domain.com';</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    // 获取父窗口中变量</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console.log('get js data from parent ---> ' + window.parent.user);</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&lt;/script></pre></td></tr></table></figure><h1 id=\"locationhash-iframe跨域\"><a class=\"anchor\" href=\"#locationhash-iframe跨域\">#</a> location.hash + iframe 跨域</h1>\n<p>实现原理： a 欲与 b 跨域相互通信，通过中间页 c 来实现。 三个页面，不同域之间利用 iframe 的 location.hash 传值，相同域之间直接 js 访问来通信。</p>\n<p>具体实现：A 域：a.html -&gt; B 域：b.html -&gt; A 域：c.html，a 与 b 不同域只能通过 hash 值单向通信，b 与 c 也不同域也只能单向通信，但 c 与 a 同域，所以 c 可通过 parent.parent 访问 a 页面所有对象。</p>\n<p>1）a.html：(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHAlM0EvL3d3dy5kb21haW4xLmNvbS9hLmh0bWw=\">http://www.domain1.com/a.html</span>)</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;iframe id=\"iframe\" src=\"http://www.domain2.com/b.html\" style=\"display:none;\">&lt;/iframe></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&lt;script></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    var iframe = document.getElementById('iframe');</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    // 向b.html传hash值</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    setTimeout(function() &#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        iframe.src = iframe.src + '#user=admin';</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    &#125;, 1000);</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    // 开放给同域c.html的回调方法</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    function onCallback(res) &#123;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        alert('data from c.html ---> ' + res);</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>&lt;/script></pre></td></tr></table></figure><p>2）b.html：(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHAlM0EvL3d3dy5kb21haW4yLmNvbS9iLmh0bWw=\">http://www.domain2.com/b.html</span>)</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;iframe id=\"iframe\" src=\"http://www.domain1.com/c.html\" style=\"display:none;\">&lt;/iframe></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&lt;script></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    var iframe = document.getElementById('iframe');</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    // 监听a.html传来的hash值，再传给c.html</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    window.onhashchange = function () &#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        iframe.src = iframe.src + location.hash;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    &#125;;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&lt;/script></pre></td></tr></table></figure><p>3）c.html：(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHAlM0EvL3d3dy5kb21haW4xLmNvbS9jLmh0bWw=\">http://www.domain1.com/c.html</span>)</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;script></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    // 监听b.html传来的hash值</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    window.onhashchange = function () &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        // 再通过操作同域a.html的js回调，将结果传回</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        window.parent.parent.onCallback('hello: ' + location.hash.replace('#user=', ''));</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    &#125;;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&lt;/script></pre></td></tr></table></figure><h1 id=\"windowname\"><a class=\"anchor\" href=\"#windowname\">#</a> <span class=\"exturl\" data-url=\"aHR0cDovL3dpbmRvdy5uYW1l\">window.name</span> + iframe 跨域</h1>\n<p>window.name 属性的独特之处：name 值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。</p>\n<p>1）a.html：(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHAlM0EvL3d3dy5kb21haW4xLmNvbS9hLmh0bWw=\">http://www.domain1.com/a.html</span>)</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>var proxy = function(url, callback) &#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    var state = 0;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    var iframe = document.createElement('iframe');</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    // 加载跨域页面</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    iframe.src = url;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    // onload事件会触发2次，第1次加载跨域页，并留存数据于window.name</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    iframe.onload = function() &#123;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        if (state === 1) &#123;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            // 第2次onload(同域proxy页)成功后，读取同域window.name中数据</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            callback(iframe.contentWindow.name);</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            destoryFrame();</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        &#125; else if (state === 0) &#123;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            // 第1次onload(跨域页)成功后，切换到同域代理页面</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            iframe.contentWindow.location = 'http://www.domain1.com/proxy.html';</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            state = 1;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    &#125;;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    document.body.appendChild(iframe);</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    // 获取数据以后销毁这个iframe，释放内存；这也保证了安全（不被其他域frame js访问）</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    function destoryFrame() &#123;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        iframe.contentWindow.document.write('');</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        iframe.contentWindow.close();</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        document.body.removeChild(iframe);</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>&#125;;</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>// 请求跨域b页面数据</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>proxy('http://www.domain2.com/b.html', function(data)&#123;</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    alert(data);</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>&#125;);</pre></td></tr></table></figure><p>2）proxy.html：(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHAlM0EvL3d3dy5kb21haW4xLmNvbS9wcm94eS5odG1s\">http://www.domain1.com/proxy.html</span>)</p>\n<p>中间代理页，与 a.html 同域，内容为空即可。</p>\n<p>3）b.html：(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHAlM0EvL3d3dy5kb21haW4yLmNvbS9iLmh0bWw=\">http://www.domain2.com/b.html</span>)</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;script></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    window.name = 'This is domain2 data!';</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&lt;/script></pre></td></tr></table></figure><p>通过 iframe 的 src 属性由外域转向本地域，跨域数据即由 iframe 的 window.name 从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</p>\n<h1 id=\"postmessage跨域\"><a class=\"anchor\" href=\"#postmessage跨域\">#</a> postMessage 跨域</h1>\n<p>postMessage 是 HTML5 XMLHttpRequest Level 2 中的 API，且是为数不多可以跨域操作的 window 属性之一，它可用于解决以下方面的问题：</p>\n<ul>\n<li>页面和其打开的新窗口的数据传递</li>\n<li>多窗口之间消息传递</li>\n<li>页面与嵌套的 iframe 消息传递</li>\n<li>上面三个场景的跨域数据传递</li>\n</ul>\n<p>用法：postMessage (data,origin) 方法接受两个参数：</p>\n<ul>\n<li><strong>data</strong>： html5 规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用 JSON.stringify () 序列化。</li>\n<li><strong>origin</strong>： 协议 + 主机 + 端口号，也可以设置为 &quot;*&quot;，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为 &quot;/&quot;。</li>\n</ul>\n<p>1）a.html：(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHAlM0EvL3d3dy5kb21haW4xLmNvbS9hLmh0bWw=\">http://www.domain1.com/a.html</span>)</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;iframe id=\"iframe\" src=\"http://www.domain2.com/b.html\" style=\"display:none;\">&lt;/iframe></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&lt;script>       </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    var iframe = document.getElementById('iframe');</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    iframe.onload = function() &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        var data = &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            name: 'aym'</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        &#125;;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        // 向domain2传送跨域数据</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        iframe.contentWindow.postMessage(JSON.stringify(data), 'http://www.domain2.com');</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    &#125;;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    // 接受domain2返回数据</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    window.addEventListener('message', function(e) &#123;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        alert('data from domain2 ---> ' + e.data);</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    &#125;, false);</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>&lt;/script></pre></td></tr></table></figure><p>2）b.html：(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHAlM0EvL3d3dy5kb21haW4yLmNvbS9iLmh0bWw=\">http://www.domain2.com/b.html</span>)</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;script></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    // 接收domain1的数据</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    window.addEventListener('message', function(e) &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        alert('data from domain1 ---> ' + e.data);</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        var data = JSON.parse(e.data);</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        if (data) &#123;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            data.number = 16;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            // 处理后再发回domain1</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            window.parent.postMessage(JSON.stringify(data), 'http://www.domain1.com');</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    &#125;, false);</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>&lt;/script></pre></td></tr></table></figure><h1 id=\"websocket协议跨域\"><a class=\"anchor\" href=\"#websocket协议跨域\">#</a> WebSocket 协议跨域</h1>\n<p>WebSocket protocol 是 HTML5 一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是 server push 技术的一种很好的实现。<br />\n原生 WebSocket API 使用起来不太方便，我们使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHAlM0EvL1NvY2tldC5pbw==\"> http://Socket.io</span>，它很好地封装了 webSocket 接口，提供了更简单、灵活的接口，也对不支持 webSocket 的浏览器提供了向下兼容。</p>\n<p>1）前端代码：</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;div>user input：&lt;input type=\"text\">&lt;/div></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&lt;script src=\"https://cdn.bootcss.com/socket.io/2.2.0/socket.io.js\">&lt;/script></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&lt;script></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>var socket = io('http://www.domain2.com:8080');</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>// 连接成功处理</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>socket.on('connect', function() &#123;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    // 监听服务端消息</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    socket.on('message', function(msg) &#123;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        console.log('data from server: ---> ' + msg); </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    &#125;);</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    // 监听服务端关闭</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    socket.on('disconnect', function() &#123; </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        console.log('Server socket has closed.'); </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    &#125;);</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>&#125;);</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>document.getElementsByTagName('input')[0].onblur = function() &#123;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    socket.send(this.value);</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>&#125;;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>&lt;/script></pre></td></tr></table></figure><p>2）Nodejs socket 后台：</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>var http = require('http');</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>var socket = require('socket.io');</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>// 启http服务</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>var server = http.createServer(function(req, res) &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    res.writeHead(200, &#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        'Content-type': 'text/html'</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    &#125;);</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    res.end();</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>&#125;);</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>server.listen('8080');</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>console.log('Server is running at port 8080...');</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>// 监听socket连接</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>socket.listen(server).on('connection', function(client) &#123;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    // 接收信息</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    client.on('message', function(msg) &#123;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        client.send('hello：' + msg);</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        console.log('data from client: ---> ' + msg);</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    &#125;);</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    // 断开处理</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    client.on('disconnect', function() &#123;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        console.log('Client socket has closed.'); </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    &#125;);</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>&#125;);</pre></td></tr></table></figure><h1 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>以上就是9种常见的跨域解决方案，jsonp（只支持get请求，支持老的IE浏览器）适合加载不同域名的js、css，img等静态资源；CORS（支持所有类型的HTTP请求，但浏览器IE10以下不支持）适合做ajax各种跨域请求；Nginx代理跨域和nodejs中间件跨域原理都相似，都是搭建一个服务器，直接在服务器端请求HTTP接口，这适合前后端分离的前端项目调后端接口。document.domain+iframe适合主域名相同，子域名不同的跨域请求。postMessage、websocket都是HTML5新特性，兼容性不是很好，只适用于主流浏览器和IE10+</pre></td></tr></table></figure>",
            "tags": [
                "前端开发",
                "跨域",
                "web综合问题"
            ]
        },
        {
            "id": "https://pink-png.github.io/Web-Integration/%E8%AF%A6%E8%A7%A3%E4%BB%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E2%BC%8Aurl%E5%88%B0%E6%98%BE%E7%A4%BA%E2%BB%9A%E2%BE%AF/",
            "url": "https://pink-png.github.io/Web-Integration/%E8%AF%A6%E8%A7%A3%E4%BB%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E2%BC%8Aurl%E5%88%B0%E6%98%BE%E7%A4%BA%E2%BB%9A%E2%BE%AF/",
            "title": "从浏览器地址栏输⼊url到显示⻚⾯的步骤",
            "date_published": "2021-06-25T08:43:00.000Z",
            "content_html": "<ol>\n<li>在浏览器地址栏输⼊ URL</li>\n<li>浏览器查看缓存，如果请求资源在缓存中并且新鲜，跳转到转码步骤</li>\n</ol>\n<ul>\n<li>如果资源未缓存，发起新请求</li>\n<li>如果已缓存，检验是否⾜够新鲜，⾜够新鲜直接提供给客户端，否则与服务器进⾏验证。</li>\n<li>检验新鲜通常有两个 HTTP 头进⾏控制 Expires 和 Cache-Control ：(  HTTP1.0 提供 Expires，值为⼀个绝对时间表示缓存新鲜⽇期<br />\n HTTP1.1 增加了 Cache-Control: max-age=, 值为以秒为单位的最⼤新鲜时间)</li>\n</ul>\n<ol start=\"3\">\n<li>浏览器解析 URL 获取协议，主机，端⼝，path</li>\n<li>浏览器组装⼀个 HTTP（GET）请求报⽂</li>\n<li>浏览器获取主机 ip 地址，过程如下：</li>\n</ol>\n<ul>\n<li>浏览器缓存：(浏览器会在本地进行 DNS 缓存，将之前解析过的域名和其对应的 IP 地址保存起来。当再次请求相同的域名时，浏览器会首先检查本地缓存中是否存在对应的记录)</li>\n<li>本机缓存：(如果在浏览器缓存中找不到域名的 IP 地址，浏览器将查找操作系统（如 Windows、Mac 等）的本机 DNS 缓存。操作系统也会对 DNS 查询结果进行缓存，以提高性能和减少网络请求)</li>\n<li>hosts ⽂件：(如果在本机缓存中没有找到域名的 IP 地址，系统将查找操作系统的 Hosts 文件。Hosts 文件是一个文本文件，可以手动配置域名和对应的 IP 地址映射关系)</li>\n<li>路由器缓存：(如果在 Hosts 文件中找不到域名的 IP 地址，系统将向路由器发送 DNS 查询请求。某些路由器会在自身进行 DNS 缓存，以便快速响应本地网络设备的 DNS 查询)</li>\n<li>ISP DNS 缓存：(如果在路由器缓存中没有找到域名的 IP 地址，系统将向互联网服务提供商（ISP）的 DNS 服务器发送 DNS 查询请求。ISP 的 DNS 服务器也会进行缓存，以提高 DNS 解析速度和网络访问效率)</li>\n<li>DNS 递归查询：(如果在 ISP DNS 缓存中找不到域名的 IP 地址，ISP 的 DNS 服务器将发起递归查询。递归查询是指 DNS 服务器按照一定的顺序向上级 DNS 服务器发出查询请求，直到找到所需的 IP 地址或者查询失败。在递归查询过程中，可能会经过多个 DNS 服务器，这可能导致负载均衡使得每次获得的 IP 地址可能不一样)（可能存在负载均衡导致每次 IP 不⼀样）</li>\n</ul>\n<ol start=\"6\">\n<li>打开⼀个 socket 与⽬标 IP 地址，端⼝建⽴ TCP 链接，三次握⼿如下：</li>\n</ol>\n<ul>\n<li>客户端发送⼀个 TCP 的 SYN=1，Seq=X 的包到服务器端⼝</li>\n<li>服务器发回 SYN=1， ACK=X+1， Seq=Y 的响应包</li>\n<li>客户端发送 ACK=Y+1， Seq=Z</li>\n</ul>\n<ol start=\"7\">\n<li>TCP 链接建⽴后发送 HTTP 请求</li>\n<li>服务器接受请求并解析，将请求转发到服务程序，如虚拟主机使⽤ HTTP Host 头部判断请求的服务程序</li>\n<li>服务器检查 HTTP 请求头是否包含缓存验证信息如果验证缓存新鲜，返回 304 等对应状态码</li>\n<li>处理程序读取完整请求并准备 HTTP 响应，可能需要查询数据库等操作</li>\n<li>服务器将响应报⽂通过 TCP 连接发送回浏览器</li>\n<li>浏览器接收 HTTP 响应，然后根据情况选择关闭 TCP 连接或者保留重⽤，关闭 TCP 连接的四<br />\n次握⼿如下：</li>\n</ol>\n<ul>\n<li>主动⽅发送 Fin=1， Ack=Z， Seq= X 报⽂</li>\n<li>被动⽅发送 ACK=X+1， Seq=Z 报⽂</li>\n<li>被动⽅发送 Fin=1， ACK=X， Seq=Y 报⽂</li>\n<li>主动⽅发送 ACK=Y， Seq=X 报⽂</li>\n</ul>\n<ol start=\"13\">\n<li>浏览器检查响应状态吗：是否为 1XX，3XX， 4XX， 5XX，这些情况处理与 2XX 不同</li>\n<li>如果资源可缓存，进⾏缓存</li>\n<li>对响应进⾏解码（例如 gzip 压缩）</li>\n<li>根据资源类型决定如何处理（假设资源为 HTML ⽂档）</li>\n<li>解析 HTML ⽂档，构件 DOM 树，下载资源，构造 CSSOM 树，执⾏ js 脚本，这些操作没有严格的先后顺序，以下分别解释</li>\n<li>构建 DOM 树：</li>\n</ol>\n<ul>\n<li>Tokenizing：根据 HTML 规范将字符流解析为标记</li>\n<li>Lexing：词法分析将标记转换为对象并定义属性和规则</li>\n<li>DOM construction：根据 HTML 标记关系将对象组成 DOM 树</li>\n</ul>\n<ol start=\"19\">\n<li>解析过程中遇到图⽚、样式表、js ⽂件，启动下载</li>\n<li>构建 CSSOM 树：</li>\n</ol>\n<ul>\n<li>Tokenizing：字符流转换为标记流</li>\n<li>Node：根据标记创建节点</li>\n<li>CSSOM：节点创建 CSSOM 树</li>\n</ul>\n<ol start=\"21\">\n<li>根据 DOM 树和 CSSOM 树构建渲染树 :</li>\n</ol>\n<ul>\n<li>从 DOM 树的根节点遍历所有可⻅节点，不可⻅节点包括：1） script , meta 这样本身<br />\n不可⻅的标签。2) 被 css 隐藏的节点，如 display: none</li>\n<li>对每⼀个可⻅节点，找到恰当的 CSSOM 规则并应⽤</li>\n<li>发布可视节点的内容和计算样式</li>\n</ul>\n<ol start=\"22\">\n<li>js 解析如下：</li>\n</ol>\n<ul>\n<li>浏览器创建 Document 对象并解析 HTML，将解析到的元素和⽂本节点添加到⽂档中，此<br />\n时 document.readystate 为 loading</li>\n<li>HTML 解析器遇到没有 async 和 defer 的 script 时，将他们添加到⽂档中，然后执⾏⾏内<br />\n或外部脚本。这些脚本会同步执⾏，并且在脚本下载和执⾏时解析器会暂停。这样就可<br />\n以⽤ document.write () 把⽂本插⼊到输⼊流中。同步脚本经常简单定义函数和注册事件<br />\n处理程序，他们可以遍历和操作 script 和他们之前的⽂档内容</li>\n<li>当解析器遇到设置了 async 属性的 script 时，开始下载脚本并继续解析⽂档。脚本会在它下载完成后尽快执⾏，但是解析器不会停下来等它下载。异步脚本禁使⽤ document.write ()，它们可以访问⾃⼰ script 和之前的⽂档元素</li>\n<li>当⽂档完成解析，document.readState 变成 interactive</li>\n<li>所有 defer 脚本会按照在⽂档出现的顺序执⾏，延迟脚本能访问完整⽂档树，禁⽌使⽤ document.write ()</li>\n<li>浏览器在 Document 对象上触发 DOMContentLoaded 事件</li>\n<li>此时⽂档完全解析完成，浏览器可能还在等待如图⽚等内容加载，等这些内容完成载⼊并且所有异步脚本完成载⼊和执⾏，document.readState 变 complete，window 触发 load 事件</li>\n</ul>\n<ol start=\"23\">\n<li>显示⻚⾯（HTML 解析过程中会逐步显示⻚⾯）</li>\n</ol>\n",
            "tags": [
                "前端开发",
                "浏览器",
                "web综合问题"
            ]
        },
        {
            "id": "https://pink-png.github.io/front-end/Bootstrap/",
            "url": "https://pink-png.github.io/front-end/Bootstrap/",
            "title": "Bootstrap",
            "date_published": "2021-06-25T08:43:00.000Z",
            "content_html": "<h1 id=\"什么是bootstrap以及为什么要使用bootstrap\"><a class=\"anchor\" href=\"#什么是bootstrap以及为什么要使用bootstrap\">#</a> 什么是 Bootstrap？以及为什么要使⽤ Bootstrap？</h1>\n<ol>\n<li>Bootstrap 是⼀个⽤于快速开发 Web 应⽤程序和⽹站的前端框架。</li>\n<li>Bootstrap 是基于 HTML 、 CSS 、 JAVASCRIPT 的</li>\n<li>Bootstrap 具有移动设备优先、浏览器⽀持良好、容易上⼿、响应式设计等优点，所以 Bootstrap 被⼴泛应⽤</li>\n</ol>\n<h1 id=\"使用bootstrap时要声明的文档类型是什么以及为什么要这样声明\"><a class=\"anchor\" href=\"#使用bootstrap时要声明的文档类型是什么以及为什么要这样声明\">#</a> 使⽤ Bootstrap 时，要声明的⽂档类型是什么？以及为什么要这样声明？</h1>\n<ol>\n<li>使⽤ Bootstrap 时，需要使⽤ HTML5 ⽂档类型（ Doctype ）。 &lt;!DOCTYPE html&gt;</li>\n<li>因为 Bootstrap 使⽤了⼀些 HTML5 元素和 CSS 属性，如果在 Bootstrap 创建的⽹⻚开头不使⽤ HTML5 的⽂档类型（ Doctype ），可能会⾯临⼀些浏览器显示不⼀致的问题，甚⾄可能⾯临⼀些特定情境下的不⼀致，以致于代码不能通过 W3C 标准的验证</li>\n</ol>\n<h1 id=\"什么是bootstrap网格系统\"><a class=\"anchor\" href=\"#什么是bootstrap网格系统\">#</a> 什么是 Bootstrap ⽹格系统</h1>\n<ol>\n<li>Bootstrap 包含了⼀个响应式的、移动设备优先的、不固定的⽹格系统，可以随着设备或视⼝⼤⼩的增加⽽适当地扩展到 12 列。它包含了⽤于简单的布局选项的预定义类，也包含了⽤于⽣成更多语义布局的功能强⼤的混合类</li>\n<li>响应式⽹格系统随着屏幕或视⼝（ viewport ）尺⼨的增加，系统会⾃动分为最多 12 列。</li>\n</ol>\n<h1 id=\"bootstrap-网格系统grid-system的工作原理\"><a class=\"anchor\" href=\"#bootstrap-网格系统grid-system的工作原理\">#</a> Bootstrap ⽹格系统（Grid System）的⼯作原理</h1>\n<p>（1）⾏必须放置在 .container class 内，以便获得适当的对⻬（ alignment ）和内<br />\n边距（ padding ）。<br />\n（2）使⽤⾏来创建列的⽔平组。<br />\n（3）内容应该放置在列内，且唯有列可以是⾏的直接⼦元素。<br />\n（4）预定义的⽹格类，⽐如 .row 和 .col-xs-4 ，可⽤于快速创建⽹格布局。 LESS<br />\n 混合类可⽤于更多语义布局。<br />\n（5）列通过内边距（ padding ）来创建列内容之间的间隙。该内边距是通过 .rows 上<br />\n的外边距（ margin ）取负，表示第⼀列和最后⼀列的⾏偏移。<br />\n（6）⽹格系统是通过指定您想要横跨的⼗⼆个可⽤的列来创建的。例如，要创建三个相等<br />\n的列，则使⽤三个 .col-xs-4</p>\n<h1 id=\"对于各类尺寸的设备bootstrap设置的class前缀分别是什么\"><a class=\"anchor\" href=\"#对于各类尺寸的设备bootstrap设置的class前缀分别是什么\">#</a> 对于各类尺⼨的设备，Bootstrap 设置的 class 前缀分别是什么</h1>\n<ol>\n<li>超⼩设备⼿机（ &lt;768px ）： .col-xs-*</li>\n<li>⼩型设备平板电脑（ &gt;=768px ）： .col-sm-*</li>\n<li>中型设备台式电脑（ &gt;=992px ）： .col-md-*</li>\n<li>⼤型设备台式电脑（ &gt;=1200px ）： .col-lg-*</li>\n</ol>\n<h1 id=\"bootstrap-网格系统列与列之间的间隙宽度是多少\"><a class=\"anchor\" href=\"#bootstrap-网格系统列与列之间的间隙宽度是多少\">#</a> Bootstrap ⽹格系统列与列之间的间隙宽度是多少</h1>\n<p>间隙宽度为 30px （⼀个列的每边分别是 15px ）</p>\n<h1 id=\"如果需要在一个标题的旁边创建副标题可以怎样操作\"><a class=\"anchor\" href=\"#如果需要在一个标题的旁边创建副标题可以怎样操作\">#</a> 如果需要在⼀个标题的旁边创建副标题，可以怎样操作</h1>\n<p>在元素两旁添加 &lt;small&gt; ，或者添加 .small 的 class</p>\n<h1 id=\"用bootstrap如何设置文字的对方式\"><a class=\"anchor\" href=\"#用bootstrap如何设置文字的对方式\">#</a> ⽤ Bootstrap，如何设置⽂字的对⻬⽅式</h1>\n<ol>\n<li>class=&quot;text-center&quot; 设置居中⽂本</li>\n<li>class=&quot;text-right&quot; 设置向右对⻬⽂本</li>\n<li>class=&quot;text-left&quot; 设置向左对⻬⽂本</li>\n</ol>\n<h1 id=\"bootstrap如何设置响应式表格\"><a class=\"anchor\" href=\"#bootstrap如何设置响应式表格\">#</a> Bootstrap 如何设置响应式表格？</h1>\n<p>增加 class=&quot;table-responsive&quot;</p>\n<h1 id=\"使用bootstrap创建垂直表单的基本步骤\"><a class=\"anchor\" href=\"#使用bootstrap创建垂直表单的基本步骤\">#</a> 使⽤ Bootstrap 创建垂直表单的基本步骤？</h1>\n<p>（1）向⽗ &lt;form&gt; 元素添加 role=&quot;form&quot; ；<br />\n（2）把标签和控件放在⼀个带有 class=&quot;form-group&quot; 的 &lt;div&gt; 中，这是获取最佳间距<br />\n所必需的；<br />\n（3）向所有的⽂本元素 &lt;input&gt; 、 &lt;textarea&gt; 、 &lt;select&gt; 添加 class=&quot;form-control&quot;</p>\n<h1 id=\"使用bootstrap创建水平表单的基本步骤\"><a class=\"anchor\" href=\"#使用bootstrap创建水平表单的基本步骤\">#</a> 使⽤ Bootstrap 创建⽔平表单的基本步骤？</h1>\n<p>（1）向⽗ &lt;form&gt; 元素添加 class=&quot;form-horizontal&quot; ；<br />\n（2）把标签和控件放在⼀个带有 class=&quot;form-group&quot; 的 &lt;div&gt; 中；<br />\n（3）向标签添加 class=&quot;control-label&quot; 。</p>\n<h1 id=\"使用bootstrap如何创建表单控件的帮助文本\"><a class=\"anchor\" href=\"#使用bootstrap如何创建表单控件的帮助文本\">#</a> 使⽤ Bootstrap 如何创建表单控件的帮助⽂本？</h1>\n<p>增加 class=&quot;help-block&quot; 的 span 标签或 p 标签。</p>\n<h1 id=\"使用bootstrap激活或禁用按钮要如何操作\"><a class=\"anchor\" href=\"#使用bootstrap激活或禁用按钮要如何操作\">#</a> 使⽤ Bootstrap 激活或禁⽤按钮要如何操作？</h1>\n<ol>\n<li>激活按钮：给按钮增加 .active 的 class</li>\n<li>禁⽤按钮：给按钮增加 disabled=&quot;disabled&quot; 的属性</li>\n</ol>\n<h1 id=\"bootstrap有哪些关于的class\"><a class=\"anchor\" href=\"#bootstrap有哪些关于的class\">#</a> Bootstrap 有哪些关于的 class？</h1>\n<p>（1） .img-rounded 为图⽚添加圆⻆<br />\n（2） .img-circle 将图⽚变为圆形<br />\n（3） .img-thumbnail 缩略图功能<br />\n（4） .img-responsive 图⽚响应式 (将很好地扩展到⽗元素)</p>\n<h1 id=\"bootstrap中有关元素浮动及清除浮动的class\"><a class=\"anchor\" href=\"#bootstrap中有关元素浮动及清除浮动的class\">#</a> Bootstrap 中有关元素浮动及清除浮动的 class？</h1>\n<p>（1） class=&quot;pull-left&quot; 元素浮动到左边<br />\n（2） class=&quot;pull-right&quot; 元素浮动到右边<br />\n（3） class=&quot;clearfix&quot; 清除浮动</p>\n<h1 id=\"除了屏幕阅读器外其他设备上隐藏元素的class\"><a class=\"anchor\" href=\"#除了屏幕阅读器外其他设备上隐藏元素的class\">#</a> 除了屏幕阅读器外，其他设备上隐藏元素的 class？</h1>\n<p><code>class=&quot;sr-only</code></p>\n<h1 id=\"bootstrap如何制作下拉菜单\"><a class=\"anchor\" href=\"#bootstrap如何制作下拉菜单\">#</a> Bootstrap 如何制作下拉菜单？</h1>\n<p>（1）将下拉菜单包裹在 class=&quot;dropdown&quot; 的 &lt;div&gt; 中；<br />\n（2）在触发下拉菜单的按钮中添加： class=&quot;btn dropdown-toggle&quot;<br />\nid=&quot;dropdownMenu1&quot; data-toggle=&quot;dropdown&quot;<br />\n（3）在包裹下拉菜单的 ul 中添加： class=&quot;dropdown-menu&quot;role=&quot;menu&quot;aria-labelledby=&quot;dropdownMenu1&quot;<br />\n（4）在下拉菜单的列表项中添加： role=&quot;presentation&quot; 。其中，下拉菜单的标题要添<br />\n加 class=&quot;dropdown-header&quot; ，选项部分要添加 tabindex=&quot;-1&quot; 。</p>\n<h1 id=\"bootstrap如何制作按钮组以及水平按钮组和垂直按钮组的优先级\"><a class=\"anchor\" href=\"#bootstrap如何制作按钮组以及水平按钮组和垂直按钮组的优先级\">#</a> Bootstrap 如何制作按钮组？以及⽔平按钮组和垂直按钮组的优先级？</h1>\n<p>（1）⽤ class=&quot;btn-group&quot; 的 &lt;div&gt; 去包裹按钮组； class=&quot;btn-group-vertical&quot; 可设置垂直按钮组。<br />\n（2） btn-group 的优先级⾼于 btn-group-vertical 的优先级。</p>\n<h1 id=\"bootstrap如何设置按钮的下拉菜单\"><a class=\"anchor\" href=\"#bootstrap如何设置按钮的下拉菜单\">#</a> Bootstrap 如何设置按钮的下拉菜单？</h1>\n<p>在⼀个 .btn-group 中放置按钮和下拉菜单即可。</p>\n<h1 id=\"bootstrap中的输入框组如何制作\"><a class=\"anchor\" href=\"#bootstrap中的输入框组如何制作\">#</a> Bootstrap 中的输⼊框组如何制作？</h1>\n<p>（1）把前缀或者后缀元素放在⼀个带有 class=&quot;input-group&quot; 中的 &lt;div&gt; 中<br />\n（2）在该 &lt;div&gt; 内，在 class=&quot;input-group-addon&quot; 的 &lt;span&gt; ⾥⾯放置额外的内<br />\n容；<br />\n（3）把 &lt;span&gt; 放在 &lt;input&gt; 元素的前⾯或后⾯。</p>\n<h1 id=\"bootstrap中的导航都有哪些\"><a class=\"anchor\" href=\"#bootstrap中的导航都有哪些\">#</a> Bootstrap 中的导航都有哪些？</h1>\n<p>（1）导航元素：有 class=&quot;nav nav-tabs&quot; 的标签⻚导航，还有 class=&quot;nav nav\u0002pills&quot; 的胶囊式标签⻚导航；<br />\n（2）导航栏： class=&quot;navbar navbar-default&quot; role=&quot;navigation&quot; ；<br />\n（3）⾯包屑导航： class=&quot;breadcrumb&quot;</p>\n<h1 id=\"bootstrap中设置分的class\"><a class=\"anchor\" href=\"#bootstrap中设置分的class\">#</a> Bootstrap 中设置分⻚的 class？</h1>\n<ol>\n<li>默认的分⻚： class=&quot;pagination&quot;</li>\n<li>默认的翻⻚： class=&quot;pager&quot;</li>\n</ol>\n<h1 id=\"bootstrap中显示标签的class\"><a class=\"anchor\" href=\"#bootstrap中显示标签的class\">#</a> Bootstrap 中显示标签的 class？</h1>\n<p>class=&quot;label&quot;</p>\n<h1 id=\"bootstrap中如何制作徽章\"><a class=\"anchor\" href=\"#bootstrap中如何制作徽章\">#</a> Bootstrap 中如何制作徽章？</h1>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;span class=<span class=\"token string\">\"badge\"</span>>26&lt;/span></pre></td></tr></table></figure><h1 id=\"bootstrap中超大屏幕的作用是什么\"><a class=\"anchor\" href=\"#bootstrap中超大屏幕的作用是什么\">#</a> Bootstrap 中超⼤屏幕的作⽤是什么</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>设置 class=\"jumbotron\" 可以制作超⼤屏幕，该组件可以增加标题的⼤⼩并</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>增加更多的外边距</pre></td></tr></table></figure>",
            "tags": [
                "前端开发",
                "Bootstrap",
                "Bootstrap"
            ]
        }
    ]
}