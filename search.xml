<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端调试技巧</title>
      <link href="/performance-optimization/%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
      <url>/performance-optimization/%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<pre><code class="javascript">1、网络 请求重新发送xhr 2、修改请求参数： 复制-&gt;以fetch格式复制3、复制JavaScript变量：右键复制object、将object存储为全局变量4、$0 输出选中的第一个元素5、截屏：Ctrl+shift+p screen6、同时展开多级节点 选中元素，按住alt再点击7、$_ 上一个输出结果8、Ctrl +shift +p switch切换主题9、$$()选中所有匹配元素10、debugger</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 前端调试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git学习清单</title>
      <link href="/tool/git%E5%AD%A6%E4%B9%A0%E6%B8%85%E5%8D%95/"/>
      <url>/tool/git%E5%AD%A6%E4%B9%A0%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1-初始化本地仓库-git-init"><a href="#1-初始化本地仓库-git-init" class="headerlink" title="1.初始化本地仓库  git init "></a>1.初始化本地仓库  git init <directory></h2><h2 id="2-克隆一个远程仓库-git-clone"><a href="#2-克隆一个远程仓库-git-clone" class="headerlink" title="2.克隆一个远程仓库  git clone "></a>2.克隆一个远程仓库  git clone <url></h2><h2 id="3-添加文件到暂存区-git-add-要添加当前目录中的所有文件，请使用-代替-代码如下：-git-add"><a href="#3-添加文件到暂存区-git-add-要添加当前目录中的所有文件，请使用-代替-代码如下：-git-add" class="headerlink" title="3.添加文件到暂存区 git add 要添加当前目录中的所有文件，请使用 . 代替,代码如下： git add ."></a>3.添加文件到暂存区 git add <file>要添加当前目录中的所有文件，请使用 . 代替,代码如下： git add .</h2><h2 id="4-提交更改-git-commit-m-““如果要添加对跟踪文件所做的所有更改并提交。-git-commit-a-m-““-orgit-commit-am-““"><a href="#4-提交更改-git-commit-m-““如果要添加对跟踪文件所做的所有更改并提交。-git-commit-a-m-““-orgit-commit-am-““" class="headerlink" title="4.提交更改 git commit -m ““如果要添加对跟踪文件所做的所有更改并提交。 git commit -a -m ““# orgit commit -am ““"></a>4.提交更改 git commit -m “<message>“如果要添加对跟踪文件所做的所有更改并提交。 git commit -a -m “<message>“# orgit commit -am “<message>“</h2><h2 id="5-从暂存区删除一个文件-git-reset"><a href="#5-从暂存区删除一个文件-git-reset" class="headerlink" title="5.从暂存区删除一个文件 git reset "></a>5.从暂存区删除一个文件 git reset <file></h2><h2 id="6-移动或重命名文件-git-mv"><a href="#6-移动或重命名文件-git-mv" class="headerlink" title="6.移动或重命名文件 git mv  "></a>6.移动或重命名文件 git mv <current path> <new path></h2><h2 id="7-从存储库中删除文件-git-rm-您也可以仅使用-–cached-标志将其从暂存区中删除-git-rm-–cached"><a href="#7-从存储库中删除文件-git-rm-您也可以仅使用-–cached-标志将其从暂存区中删除-git-rm-–cached" class="headerlink" title="7.从存储库中删除文件  git rm  您也可以仅使用 –cached 标志将其从暂存区中删除 git rm –cached "></a>7.从存储库中删除文件  git rm <file> 您也可以仅使用 –cached 标志将其从暂存区中删除 git rm –cached <file></h2><h1 id="基本-Git-概念"><a href="#基本-Git-概念" class="headerlink" title="基本 Git 概念"></a>基本 Git 概念</h1><h2 id="8-默认分支名称：main"><a href="#8-默认分支名称：main" class="headerlink" title="8.默认分支名称：main"></a>8.默认分支名称：main</h2><h2 id="9-默认远程名称：origin"><a href="#9-默认远程名称：origin" class="headerlink" title="9.默认远程名称：origin"></a>9.默认远程名称：origin</h2><h2 id="10-当前分支参考：HEAD"><a href="#10-当前分支参考：HEAD" class="headerlink" title="10.当前分支参考：HEAD"></a>10.当前分支参考：HEAD</h2><h2 id="11-HEAD-的父级：HEAD-或-HEAD-1"><a href="#11-HEAD-的父级：HEAD-或-HEAD-1" class="headerlink" title="11.HEAD 的父级：HEAD^ 或 HEAD~1"></a>11.HEAD 的父级：HEAD^ 或 HEAD~1</h2><h2 id="12-HEAD-的祖父母：HEAD-或-HEAD-2"><a href="#12-HEAD-的祖父母：HEAD-或-HEAD-2" class="headerlink" title="12.HEAD 的祖父母：HEAD^^ 或 HEAD~2"></a>12.HEAD 的祖父母：HEAD^^ 或 HEAD~2</h2><h2 id="13-显示分支-git-branch-有用的标志："><a href="#13-显示分支-git-branch-有用的标志：" class="headerlink" title="13.显示分支 git branch  有用的标志："></a>13.显示分支 git branch  有用的标志：</h2><p>-a：显示所有分支（本地和远程）</p><p>-r：显示远程分支</p><p>-v：显示最后一次提交的分支</p><h2 id="14-创建一个分支-git-branch-你可以创建一个分支并使用-checkout-命令切换到它。git-checkout-b"><a href="#14-创建一个分支-git-branch-你可以创建一个分支并使用-checkout-命令切换到它。git-checkout-b" class="headerlink" title="14.创建一个分支 git branch   你可以创建一个分支并使用 checkout 命令切换到它。git checkout -b "></a>14.创建一个分支 git branch <branch>  你可以创建一个分支并使用 checkout 命令切换到它。git checkout -b <branch></h2><h2 id="15-切换到一个分支-git-checkout"><a href="#15-切换到一个分支-git-checkout" class="headerlink" title="15.切换到一个分支 git checkout "></a>15.切换到一个分支 git checkout <branch></h2><h2 id="16-删除一个分支-git-branch-d-您还可以使用-D-标志强制删除分支。-git-branch-D"><a href="#16-删除一个分支-git-branch-d-您还可以使用-D-标志强制删除分支。-git-branch-D" class="headerlink" title="16.删除一个分支 git branch -d  您还可以使用 -D 标志强制删除分支。 git branch -D "></a>16.删除一个分支 git branch -d <branch> 您还可以使用 -D 标志强制删除分支。 git branch -D <branch></h2><h2 id="17-合并分支-git-merge-有用的标志："><a href="#17-合并分支-git-merge-有用的标志：" class="headerlink" title="17.合并分支 git merge  有用的标志："></a>17.合并分支 git merge <branch to merge into HEAD> 有用的标志：</h2><p>–no-ff：即使合并解析为快进，也创建合并提交</p><p>–squash：将指定分支中的所有提交压缩为单个提交</p><p>建议不要使用 –squash 标志，因为它会将所有提交压缩为单个提交，从而导致提交历史混乱。</p><h2 id="18-变基分支-变基是将一系列提交移动或组合到新的基本提交的过程。git-rebase"><a href="#18-变基分支-变基是将一系列提交移动或组合到新的基本提交的过程。git-rebase" class="headerlink" title="18.变基分支 变基是将一系列提交移动或组合到新的基本提交的过程。git rebase "></a>18.变基分支 变基是将一系列提交移动或组合到新的基本提交的过程。git rebase <branch to rebase from></h2><h2 id="19-查看之前的提交-git-checkout"><a href="#19-查看之前的提交-git-checkout" class="headerlink" title="19.查看之前的提交 git checkout "></a>19.查看之前的提交 git checkout <commit id></h2><h2 id="20-恢复提交-git-revert"><a href="#20-恢复提交-git-revert" class="headerlink" title="20.恢复提交 git revert "></a>20.恢复提交 git revert <commit id></h2><h2 id="21-重置提交-git-reset-您还可以添加-–hard-标志来删除所有更改，但请谨慎使用。-git-reset-–hard"><a href="#21-重置提交-git-reset-您还可以添加-–hard-标志来删除所有更改，但请谨慎使用。-git-reset-–hard" class="headerlink" title="21.重置提交 git reset  您还可以添加 –hard 标志来删除所有更改，但请谨慎使用。 git reset –hard "></a>21.重置提交 git reset <commit id> 您还可以添加 –hard 标志来删除所有更改，但请谨慎使用。 git reset –hard <commit id></h2><h2 id="22-查看存储库的状态-git-status"><a href="#22-查看存储库的状态-git-status" class="headerlink" title="22.查看存储库的状态 git status"></a>22.查看存储库的状态 git status</h2><h2 id="23-显示提交历史-git-log"><a href="#23-显示提交历史-git-log" class="headerlink" title="23.显示提交历史 git log"></a>23.显示提交历史 git log</h2><h2 id="24-显示对未暂存文件的更改-git-diff-您还可以使用-–staged-标志来显示对暂存文件的更改。-git-diff-–staged"><a href="#24-显示对未暂存文件的更改-git-diff-您还可以使用-–staged-标志来显示对暂存文件的更改。-git-diff-–staged" class="headerlink" title="24.显示对未暂存文件的更改 git diff\  您还可以使用 –staged 标志来显示对暂存文件的更改。 git diff –staged"></a>24.显示对未暂存文件的更改 git diff\  您还可以使用 –staged 标志来显示对暂存文件的更改。 git diff –staged</h2><h2 id="25-显示两次提交之间的变化-git-diff-lt-commit-id-01-gt-lt-commit-id-02-gt"><a href="#25-显示两次提交之间的变化-git-diff-lt-commit-id-01-gt-lt-commit-id-02-gt" class="headerlink" title="25.显示两次提交之间的变化 git diff &lt;commit id 01&gt; &lt;commit id 02&gt;"></a>25.显示两次提交之间的变化 git diff &lt;commit id 01&gt; &lt;commit id 02&gt;</h2><h2 id="26-存储更改-stash-允许您在不提交更改的情况下临时存储更改。-git-stash-您还可以将消息添加到存储中。-git-stash-save-““"><a href="#26-存储更改-stash-允许您在不提交更改的情况下临时存储更改。-git-stash-您还可以将消息添加到存储中。-git-stash-save-““" class="headerlink" title="26.存储更改 stash 允许您在不提交更改的情况下临时存储更改。 git stash  您还可以将消息添加到存储中。 git stash save ““"></a>26.存储更改 stash 允许您在不提交更改的情况下临时存储更改。 git stash  您还可以将消息添加到存储中。 git stash save “<message>“</h2><h2 id="27-列出存储-git-stash-list"><a href="#27-列出存储-git-stash-list" class="headerlink" title="27.列出存储 git stash list"></a>27.列出存储 git stash list</h2><h2 id="28-申请一个藏匿处-应用存储不会将其从存储列表中删除。-git-stash-apply-如果不指定，将应用最新的-stash（适用于所有类似的-stash-命令）-您还可以使用格式-stash-应用存储（适用于所有类似的存储命令）-git-stash-apply-stash-0"><a href="#28-申请一个藏匿处-应用存储不会将其从存储列表中删除。-git-stash-apply-如果不指定，将应用最新的-stash（适用于所有类似的-stash-命令）-您还可以使用格式-stash-应用存储（适用于所有类似的存储命令）-git-stash-apply-stash-0" class="headerlink" title="28.申请一个藏匿处 应用存储不会将其从存储列表中删除。 git stash apply  如果不指定，将应用最新的 stash（适用于所有类似的 stash 命令） 您还可以使用格式 stash@{} 应用存储（适用于所有类似的存储命令） git stash apply stash@{0}"></a>28.申请一个藏匿处 应用存储不会将其从存储列表中删除。 git stash apply <stash id> 如果不指定，将应用最新的 stash（适用于所有类似的 stash 命令） 您还可以使用格式 stash@{} 应用存储（适用于所有类似的存储命令） git stash apply stash@{0}</h2><h2 id="29-删除一个藏匿处-git-stash-drop"><a href="#29-删除一个藏匿处-git-stash-drop" class="headerlink" title="29.删除一个藏匿处 git stash drop "></a>29.删除一个藏匿处 git stash drop <stash id></h2><h2 id="30-删除所有藏匿处-git-stash-clear"><a href="#30-删除所有藏匿处-git-stash-clear" class="headerlink" title="30.删除所有藏匿处 git stash clear"></a>30.删除所有藏匿处 git stash clear</h2><h2 id="31-应用和删除存储-git-stash-pop"><a href="#31-应用和删除存储-git-stash-pop" class="headerlink" title="31.应用和删除存储 git stash pop "></a>31.应用和删除存储 git stash pop <stash id></h2><h2 id="32-显示存储中的更改-git-stash-show"><a href="#32-显示存储中的更改-git-stash-show" class="headerlink" title="32.显示存储中的更改 git stash show "></a>32.显示存储中的更改 git stash show <stash id></h2><h2 id="33-添加远程仓库-git-remote-add"><a href="#33-添加远程仓库-git-remote-add" class="headerlink" title="33.添加远程仓库 git remote add  "></a>33.添加远程仓库 git remote add <remote name> <url></h2><h2 id="34-显示远程仓库-git-remote-添加-v-标志以显示远程存储库的-URL。-git-remote-v"><a href="#34-显示远程仓库-git-remote-添加-v-标志以显示远程存储库的-URL。-git-remote-v" class="headerlink" title="34.显示远程仓库 git remote 添加 -v 标志以显示远程存储库的 URL。 git remote -v"></a>34.显示远程仓库 git remote 添加 -v 标志以显示远程存储库的 URL。 git remote -v</h2><h2 id="35-删除远程仓库-git-remote-remove"><a href="#35-删除远程仓库-git-remote-remove" class="headerlink" title="35.删除远程仓库 git remote remove "></a>35.删除远程仓库 git remote remove <remote name></h2><h2 id="36-重命名远程存储库-git-remote-rename"><a href="#36-重命名远程存储库-git-remote-rename" class="headerlink" title="36.重命名远程存储库 git remote rename  "></a>36.重命名远程存储库 git remote rename <old name> <new name></h2><h2 id="37-从远程存储库中获取更改-git-fetch"><a href="#37-从远程存储库中获取更改-git-fetch" class="headerlink" title="37.从远程存储库中获取更改 git fetch "></a>37.从远程存储库中获取更改 git fetch <remote name></h2><h2 id="38-从特定分支获取更改-git-fetch"><a href="#38-从特定分支获取更改-git-fetch" class="headerlink" title="38.从特定分支获取更改 git fetch  "></a>38.从特定分支获取更改 git fetch <remote name> <branch></h2><h2 id="39-从远程存储库中拉取更改-git-pull"><a href="#39-从远程存储库中拉取更改-git-pull" class="headerlink" title="39.从远程存储库中拉取更改 git pull  "></a>39.从远程存储库中拉取更改 git pull <remote name> <branch></h2><h2 id="40-将更改推送到远程存储库-git-push"><a href="#40-将更改推送到远程存储库-git-push" class="headerlink" title="40.将更改推送到远程存储库 git push "></a>40.将更改推送到远程存储库 git push <remote name></h2><h2 id="41-将更改推送到特定分支-git-push"><a href="#41-将更改推送到特定分支-git-push" class="headerlink" title="41.将更改推送到特定分支 git push  "></a>41.将更改推送到特定分支 git push <remote name> <branch></h2>]]></content>
      
      
      <categories>
          
          <category> 版本管理 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下载</title>
      <link href="/tool/%E4%B8%8B%E8%BD%BD%E7%B1%BB/"/>
      <url>/tool/%E4%B8%8B%E8%BD%BD%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="xshell-下载地址"><a href="#xshell-下载地址" class="headerlink" title="xshell 下载地址"></a>xshell 下载地址</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cueHNoZWxsLmNvbS96aC9mcmVlLWZvci1ob21lLXNjaG9vbC8=">https://www.xshell.com/zh/free-for-home-school/</span> </p>]]></content>
      
      
      <categories>
          
          <category> 下载 </category>
          
          <category> xshell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6-ES13新增的特性</title>
      <link href="/js-base/jsES6-ES13%E6%96%B0%E5%A2%9E%E7%9A%84%E5%8A%9F%E8%83%BD/"/>
      <url>/js-base/jsES6-ES13%E6%96%B0%E5%A2%9E%E7%9A%84%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6（ES2015）"><a href="#ES6（ES2015）" class="headerlink" title="ES6（ES2015）"></a>ES6（ES2015）</h1><pre><code class="text">块级作用域变量声明（let和const）箭头函数模板字面量解构赋值默认参数值扩展运算符和剩余参数类和模块化（class和import/export）Promise 对象迭代器和生成器（Iterator和Generator）新的集合类型（Map、Set、WeakMap、WeakSet）</code></pre><h1 id="ES7（ES2016）"><a href="#ES7（ES2016）" class="headerlink" title="ES7（ES2016）"></a>ES7（ES2016）</h1><pre><code class="text">Array.prototype.includes 方法指数操作符（**）</code></pre><h1 id="ES8-ES2017"><a href="#ES8-ES2017" class="headerlink" title="ES8 (ES2017)"></a>ES8 (ES2017)</h1><pre><code class="text">异步函数（async/await）Object.values 和 Object.entries 方法字符串填充方法（padStart和padEnd）</code></pre><h1 id="ES9-ES2018"><a href="#ES9-ES2018" class="headerlink" title="ES9 (ES2018)"></a>ES9 (ES2018)</h1><pre><code class="text">异步迭代器Promise.prototype.finally 方法Rest/Spread 属性</code></pre><h1 id="ES10-ES2019"><a href="#ES10-ES2019" class="headerlink" title="ES10 (ES2019)"></a>ES10 (ES2019)</h1><pre><code class="text">Array.prototype.flat 和 Array.prototype.flatMap 方法Optional Chaining （可选链操作符 ?.）空值合并运算符（??）</code></pre><h1 id="ES11-ES2020"><a href="#ES11-ES2020" class="headerlink" title="ES11 (ES2020)"></a>ES11 (ES2020)</h1><pre><code class="text">BigInt 类型动态导入（import()）可选的捕获绑定（Optional catch binding）Promise.allSettled 方法String.prototype.matchAll 方法全局对象 globalThis</code></pre><h1 id="ES12-ES2021"><a href="#ES12-ES2021" class="headerlink" title="ES12 (ES2021)"></a>ES12 (ES2021)</h1><pre><code class="text">逻辑赋值运算符（||=、&amp;&amp;=、??=）String.prototype.replaceAll 方法Promise.any 方法私有字段和方法（# 开头）数字分隔符（Number separator）</code></pre><h1 id="ES13-ES2022"><a href="#ES13-ES2022" class="headerlink" title="ES13 (ES2022)"></a>ES13 (ES2022)</h1><pre><code class="text">导入.meta对象字符串实例方法String.prototype.&#123;trimLeft, trimRight&#125;异步迭代器的for-await-of支持import()的顶级动态引入更宽松的模板字面量转义</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript全局函数和全局变量</title>
      <link href="/js-base/js%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0%E5%92%8C%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/"/>
      <url>/js-base/js%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0%E5%92%8C%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<ol><li>全局变量</li></ol><ul><li>Infinity 代表正的⽆穷⼤的数值。</li><li>NaN 指示某个值是不是数字值。</li><li>undefined 指示未定义的值。</li></ul><ol start="2"><li>全局函数</li></ol><ul><li>decodeURI() 解码某个编码的 URI 。</li><li>decodeURIComponent() 解码⼀个编码的 URI 组件。</li><li>encodeURI() 把字符串编码为 URI。</li><li>encodeURIComponent() 把字符串编码为 URI 组件。</li><li>escape() 对字符串进⾏编码。</li><li>eval() 计算 JavaScript 字符串，并把它作为脚本代码来执⾏。</li><li>isFinite() 检查某个值是否为有穷⼤的数。</li><li>isNaN() 检查某个值是否是数字。</li><li>Number() 把对象的值转换为数字。</li><li>parseFloat() 解析⼀个字符串并返回⼀个浮点数。</li><li>parseInt() 解析⼀个字符串并返回⼀个整数。</li><li>String() 把对象的值转换为字符串。</li><li>unescape() 对由 escape() 编码的字符串进⾏解码</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js创建对象的多种方式</title>
      <link href="/js-base/js%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/js-base/js%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<pre><code class="javascript">1. 对象字面量（Object Literal）：使用对象字面量可以直接创建一个简单的对象。对象字面量使用花括号 &#123;&#125; 包裹，并在其中定义键值对。const person = &#123;  name: &#39;John&#39;,  age: 30,  sayHello: function() &#123;    console.log(&#39;Hello!&#39;);  &#125;&#125;;优点：简洁、直观，适合创建简单的对象。缺点：无法实现对象的复用，每次创建对象时都需要重新定义属性和方法。</code></pre><pre><code class="javascript">2. 构造函数（Constructor）：通过构造函数可以创建一个对象的实例。构造函数使用 new 操作符来调用，并在内部使用 this 关键字来引用新创建的对象。function Person(name, age) &#123;  this.name = name;  this.age = age;  this.sayHello = function() &#123;    console.log(&#39;Hello!&#39;);  &#125;;&#125;const person = new Person(&#39;John&#39;, 30);优点：可以通过 new 操作符创建对象的实例，适合创建多个相似的对象。缺点：每个对象实例都会拥有独立的方法，占用额外的内存空间。创建大量对象时可能造成内存浪费。</code></pre><pre><code class="javascript">3. 原型链继承（Prototype Chain Inheritance）：使用原型链可以实现对象的继承。可以通过给构造函数的原型对象添加属性和方法，使所有通过该构造函数创建的对象都可以共享这些属性和方法。function Person(name, age) &#123;  this.name = name;  this.age = age;&#125;Person.prototype.sayHello = function() &#123;  console.log(&#39;Hello!&#39;);&#125;;const person = new Person(&#39;John&#39;, 30);优点：可以实现对象的属性和方法的共享，减少内存占用。适合创建多个具有相同属性和方法的对象。缺点：所有实例共享原型对象上的属性和方法，如果对原型对象进行修改，会影响所有实例。不能传递参数给构造函数。</code></pre><pre><code class="javascript">4. ES6 的类（Class）：ES6 引入了类的概念，可以使用 class 关键字来定义一个类，并通过 new 操作符创建类的实例。class Person &#123;  constructor(name, age) &#123;    this.name = name;    this.age = age;  &#125;    sayHello() &#123;    console.log(&#39;Hello!&#39;);  &#125;&#125;const person = new Person(&#39;John&#39;, 30);优点：语法更加直观、易读，符合面向对象的编程习惯。支持继承、封装和多态等特性。缺点：在底层仍然使用原型链来实现，因此也存在原型链继承的一些问题，如共享方法造成的潜在风险。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js 实现异步编程</title>
      <link href="/js-base/js%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
      <url>/js-base/js%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<ol><li>回调函数（Callbacks）：在异步操作完成后，通过传递一个回调函数作为参数，在异步操作结束时调用该回调函数来处理结果。</li></ol><pre><code class="Javascript">function asyncOperation(callback) &#123;  // 模拟异步操作  setTimeout(function() &#123;    const result = &#39;Async operation completed&#39;;    callback(result);  &#125;, 1000);&#125;asyncOperation(function(result) &#123;  console.log(result);&#125;);优点：简单、容易理解缺点：不利于维护，代码耦合⾼</code></pre><ol start="2"><li>Promise：Promise 是一种在 ES6 中引入的异步编程模式。它代表一个异步操作最终的完成或失败，并提供了处理结果的方法。</li></ol><pre><code class="Javascript">function asyncOperation() &#123;  return new Promise(function(resolve, reject) &#123;    // 模拟异步操作    setTimeout(function() &#123;      const result = &#39;Async operation completed&#39;;      resolve(result); // 异步操作成功      // 或者使用 reject(new Error(&#39;Async operation failed&#39;)); 处理异步操作失败    &#125;, 1000);  &#125;);&#125;asyncOperation()  .then(function(result) &#123;    console.log(result);  &#125;)  .catch(function(error) &#123;    console.error(error);  &#125;);优点：可以利⽤then⽅法，进⾏链式写法；可以书写错误时的回调函数；缺点：编写和理解，相对⽐较难</code></pre><ol start="3"><li>async&#x2F;await：async&#x2F;await 是在 ES2017 中引入的异步编程语法糖，基于 Promise，让异步代码看起来像同步代码一样。</li></ol><pre><code class="Javascript">function asyncOperation() &#123;  return new Promise(function(resolve, reject) &#123;    // 模拟异步操作    setTimeout(function() &#123;      const result = &#39;Async operation completed&#39;;      resolve(result); // 异步操作成功      // 或者使用 reject(new Error(&#39;Async operation failed&#39;)); 处理异步操作失败    &#125;, 1000);  &#125;);&#125;async function processData() &#123;  try &#123;    const result = await asyncOperation();    console.log(result);  &#125; catch (error) &#123;    console.error(error);  &#125;&#125;processData();优点：内置执⾏器、更好的语义、更⼴的适⽤性、返回的是Promise、结构清晰。缺点：错误处理机制</code></pre><ol start="4"><li>事件监听（Event Listening）：事件监听是一种基于观察者模式的编程方式。通过注册事件监听器，当特定事件发生时，会触发相应的回调函数。</li></ol><pre><code class="Javascript">// 定义一个事件触发器const eventEmitter = new EventEmitter();// 注册事件监听器eventEmitter.on(&#39;event&#39;, function(data) &#123;  console.log(&#39;Event triggered:&#39;, data);&#125;);// 触发事件eventEmitter.emit(&#39;event&#39;, &#39;Some data&#39;);优点：容易理解，可以绑定多个事件，每个事件可以指定多个回调函数缺点：事件驱动型，流程不够清晰</code></pre><ol start="5"><li>发布&#x2F;订阅（Publish&#x2F;Subscribe）：发布&#x2F;订阅也是一种基于观察者模式的编程方式，其中发布者（发布消息的对象）和订阅者（接收消息的对象）之间是松耦合的关系。</li></ol><pre><code class="Javascript">// 创建一个发布者const publisher = new Publisher();// 创建一个订阅者并订阅消息const subscriber1 = new Subscriber(&#39;Subscriber 1&#39;);publisher.subscribe(subscriber1);// 创建另一个订阅者并订阅消息const subscriber2 = new Subscriber(&#39;Subscriber 2&#39;);publisher.subscribe(subscriber2);// 发布消息publisher.publish(&#39;Some message&#39;);类似于事件监听，但是可以通过‘消息中⼼ʼ，了解现在有多少发布者，多少订阅者</code></pre><ol start="5"><li>Generator函数</li></ol><pre><code class="javascript">function* myGeneratorFunction() &#123;  try &#123;    const result = yield new Promise((resolve, reject) =&gt; &#123;      setTimeout(() =&gt; &#123;        resolve(&#39;Async operation completed.&#39;);      &#125;, 2000);    &#125;);    console.log(result);  &#125; catch (error) &#123;    console.error(error);  &#125;&#125;function runGenerator(generator) &#123;  const iterator = generator();  function iterate(&#123; value, done &#125;) &#123;    if (done) &#123;      return;    &#125;    if (value instanceof Promise) &#123;      value.then(        (result) =&gt; &#123;          iterate(iterator.next(result));        &#125;,        (error) =&gt; &#123;          iterate(iterator.throw(error));        &#125;      );    &#125; else &#123;      iterate(iterator.next(value));    &#125;  &#125;  iterate(iterator.next());&#125;runGenerator(myGeneratorFunction);优点：函数体内外的数据交换、错误处理机制缺点：流程管理不⽅便</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组去重方法总结</title>
      <link href="/js-base/js%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E7%9A%84%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/js-base/js%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E7%9A%84%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="借助ES6提供的Set结构-new-Set-简单好用-强烈推荐"><a href="#借助ES6提供的Set结构-new-Set-简单好用-强烈推荐" class="headerlink" title="借助ES6提供的Set结构 new Set() 简单好用 强烈推荐"></a>借助ES6提供的Set结构 new Set() 简单好用 强烈推荐</h1><pre><code class="javascript">使用 Set 数据结构：将数组转换为 Set，然后再将 Set 转回数组。 var arr = [1,9,8,8,7,7];  function noRepeat(arr)&#123;    var newArr = [...new Set(arr)]; //利用了Set结构不能接收重复数据的特点    return newArr  &#125;  var arr2 = noRepeat(arr) </code></pre><h1 id="利用-filter-indexOf-去重"><a href="#利用-filter-indexOf-去重" class="headerlink" title="利用 filter() +  indexOf() 去重"></a>利用 filter() +  indexOf() 去重</h1><pre><code class="javascript">filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。item是当前元素的值，index是当前元素的索引值。indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。利用indexOf() 查询到数组的下标，看是否等于当前的下标，相等的话就返回，否则不返回值var arr = [&#39;apple&#39;,&#39;apps&#39;,&#39;pear&#39;,&#39;apple&#39;,&#39;orange&#39;,&#39;apps&#39;];    var newArr = arr.filter(function(item,index)&#123;     return arr.indexOf(item) === index;  // 因为indexOf 只能查找到第一个    &#125;);</code></pre><h1 id="利用for-循环-搭配-indexOf-去重"><a href="#利用for-循环-搭配-indexOf-去重" class="headerlink" title="利用for 循环 搭配 indexOf 去重"></a>利用for 循环 搭配 indexOf 去重</h1><pre><code class="javascript"> var arr = [1,9,8,8,7,7]; function noRepeat(arr) &#123;        var newArr=[];         for(var i=0;i&lt;arr.length;i++) &#123;          if(newArr.indexOf(arr[i]) === -1) &#123;             newArr.push(arr[i]);          &#125;        &#125;    return newArr  &#125;  var arr2 = noRepeat(arr);</code></pre><h1 id="将数组的每一个元素依次与其他元素做比较，发现重复元素，删除-比较繁琐-不推荐"><a href="#将数组的每一个元素依次与其他元素做比较，发现重复元素，删除-比较繁琐-不推荐" class="headerlink" title="将数组的每一个元素依次与其他元素做比较，发现重复元素，删除 比较繁琐 不推荐"></a>将数组的每一个元素依次与其他元素做比较，发现重复元素，删除 比较繁琐 不推荐</h1><pre><code class="javascript">var arr = [1,9,8,8,7,7]; function noRepeat(arr) &#123;        for(var i = 0; i &lt; arr.length-1; i++)&#123;            for(var j = i+1; j &lt; arr.length; j++)&#123;                if(arr[i]===arr[j])&#123;                    arr.splice(j,1);                    j--;                &#125;            &#125;        &#125;        return arr; &#125; var arr2 = noRepeat(arr);</code></pre><h1 id="借助新数组-通过-indexOf-方法判断当前元素在数组中的索引，如果与循环的下标相等则添加到新数组中"><a href="#借助新数组-通过-indexOf-方法判断当前元素在数组中的索引，如果与循环的下标相等则添加到新数组中" class="headerlink" title="借助新数组 通过 indexOf 方法判断当前元素在数组中的索引，如果与循环的下标相等则添加到新数组中"></a>借助新数组 通过 indexOf 方法判断当前元素在数组中的索引，如果与循环的下标相等则添加到新数组中</h1><pre><code class="javascript"> var arr = [1,9,8,8,7,7];    function noRepeat(arr) &#123;        var newArr = [];        for (var i = 0; i &lt; arr.length; i++) &#123;            if (arr.indexOf(arr[i]) == i) &#123;              newArr.push(arr[i]);            &#125;        &#125;        return newArr;    &#125;   var arr2 = noRepeat(arr); </code></pre><h1 id="利用双重for循环"><a href="#利用双重for循环" class="headerlink" title="利用双重for循环"></a>利用双重for循环</h1><pre><code class="javascript">var arr = [1,9,8,8,7,7];  function noRepeat(arr)&#123;   for (var i = 0; i &lt; arr.length; i++) &#123;       for (var j = 0; j &lt; arr.length; j++) &#123;           if (arr[i] == arr[j] &amp;&amp; i != j) &#123;              arr.splice(j, 1);            &#125;       &#125;    &#125;    return arr;&#125;var arr2  = noRepeat(arr);</code></pre><h1 id="利用includes实现数组去重"><a href="#利用includes实现数组去重" class="headerlink" title="利用includes实现数组去重"></a>利用includes实现数组去重</h1><pre><code class="javascript"> var arr = [1,9,8,8,7,7];    function noRepeat(arr) &#123;      let newArr = [];      for(i=0; i&lt;arr.length; i++)&#123;        if(!newArr.includes(arr[i]))&#123;            newArr.push(arr[i])        &#125;      &#125;     return newArr   &#125;</code></pre><h1 id="利⽤-reduce-includes"><a href="#利⽤-reduce-includes" class="headerlink" title="利⽤ reduce + includes"></a>利⽤ reduce + includes</h1><pre><code class="javascript">  const res = arr.reduce((prev, cur) =&gt; &#123;      if(!prev.includes(cur))&#123;          prev.push(cur)      &#125;      return prev  &#125;, [])  优化后 function unique(arr) &#123;    return arr.reduce((prev, cur) =&gt; prev.includes(cur) ? prev : [...prev, cur])  &#125;</code></pre><h1 id="利⽤Map数据结构去重"><a href="#利⽤Map数据结构去重" class="headerlink" title="利⽤Map数据结构去重"></a>利⽤Map数据结构去重</h1><pre><code class="javascript"> function arrayNonRepeatfy(arr) &#123;    let map = new Map();    let array = new Array(); // 数组⽤于返回结果    for (let i = 0; i &lt; arr.length; i++) &#123;        if (map.has(arr[i])) &#123; // 如果有该key值            map.set(arr[i], true);        &#125; else &#123;            map.set(arr[i], false); // 如果没有该key值            array.push(arr[i]);        &#125;    &#125;    return array;&#125;</code></pre><h1 id="利⽤递归去重"><a href="#利⽤递归去重" class="headerlink" title="利⽤递归去重"></a>利⽤递归去重</h1><pre><code class="javascript"> function unique(arr) &#123;      var array = arr;      var len = array.length;      array.sort(function (a, b) &#123; //排序后更加⽅便去重          return a - b;      &#125;)      function loop(index) &#123;          if (index &gt;= 1) &#123;              if (array[index] === array[index - 1]) &#123;                  array.splice(index, 1);              &#125;              loop(index - 1); //递归loop，然后数组去重          &#125;      &#125;      loop(len - 1);      return array;  &#125;</code></pre><h1 id="利⽤hasOwnProperty-filter"><a href="#利⽤hasOwnProperty-filter" class="headerlink" title="利⽤hasOwnProperty + filter"></a>利⽤hasOwnProperty + filter</h1><pre><code class="javascript">function unique(arr) &#123;    var obj = &#123;&#125;;    return arr.filter(function (item, index, arr) &#123;        return obj.hasOwnProperty(typeof item + item) ? false : (obj[typeof item + item] = true);    &#125;);&#125;</code></pre><h1 id="利⽤对象的属性不能相同的特点进⾏去重"><a href="#利⽤对象的属性不能相同的特点进⾏去重" class="headerlink" title="利⽤对象的属性不能相同的特点进⾏去重"></a>利⽤对象的属性不能相同的特点进⾏去重</h1><pre><code class="javascript">function unique(arr) &#123;      if (!Array.isArray(arr)) &#123;          console.log(&#39;type error!&#39;)          return      &#125;      var arrry = [];      var obj = &#123;&#125;;      for (var i = 0; i &lt; arr.length; i++) &#123;          if (!obj[arr[i]]) &#123;              arrry.push(arr[i])              obj[arr[i]] = 1          &#125; else &#123;              obj[arr[i]]++          &#125;      &#125;      return arrry;  &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈js中new this 关键字</title>
      <link href="/js-base/js%E6%B5%85%E8%B0%88new%20this/"/>
      <url>/js-base/js%E6%B5%85%E8%B0%88new%20this/</url>
      
        <content type="html"><![CDATA[<h1 id="new操作符具体干了什么"><a href="#new操作符具体干了什么" class="headerlink" title="new操作符具体干了什么"></a>new操作符具体干了什么</h1><pre><code class="text">1. 创建一个新的空对象。2. 将新对象的原型链（[[Prototype]]）链接到构造函数的 prototype 属性上，使新对象能够访问构造函数原型中定义的属性和方法。3. 将构造函数的作用域赋值给新对象，即将新对象的 this 绑定到构造函数上，使构造函数内部的代码能够访问和操作新对象的属性。4. 执行构造函数内部的代码，初始化新对象的属性和方法。5. 如果构造函数返回了一个非空对象，则返回该对象；否则，返回新创建的对象。</code></pre><h1 id="new的模拟实现"><a href="#new的模拟实现" class="headerlink" title="new的模拟实现"></a>new的模拟实现</h1><pre><code class="javascript">function myNew(constructor, ...args) &#123;  // 1. 在内存中创建一个新对象  const obj = &#123;&#125;;  // 2. 将新对象的原型设置为构造函数的 prototype 属性  Object.setPrototypeOf(obj, constructor.prototype);  // 3. 将构造函数内部的 this 绑定到新对象  const result = constructor.apply(obj, args);  // 4. 执行构造函数内部的代码后，如果返回非空对象则返回该对象，否则返回新对象  return result instanceof Object ? result : obj;&#125;</code></pre><p>上述代码中，myNew 函数接受构造函数和参数，模拟了 new 操作符的行为。它会创建一个新对象 obj，将该对象的原型设置为构造函数的 prototype 属性，然后将构造函数内部的 this 绑定到新对象 obj 上，最后根据构造函数的返回结果决定返回值。</p><p>需要注意的是，这只是一个简化的实现，并没有考虑 new 操作符的所有细节和复杂性，如原型链继承、构造函数返回非对象值时的处理等。在实际开发中，建议优先使用原生的 new 操作符。</p><h1 id="this-对象的理解"><a href="#this-对象的理解" class="headerlink" title="this 对象的理解"></a>this 对象的理解</h1><p>&#96;&#96;text<br>在 JavaScript 中，this 是一个特殊的关键字，它指向当前执行代码的上下文对象。具体来说，this 引用的是调用函数的对象，根据函数的调用方式不同，this 会有不同的值。</p><pre><code>```textthis 的值可以根据以下几种情况进行判断</code></pre><pre><code class="javascript">1. 作为普通函数调用：当函数作为独立函数调用时，this 的值指向全局对象（在浏览器中为 window）。function greet() &#123;  console.log(`Hello, $&#123;this.name&#125;`);&#125;const obj = &#123;  name: &#39;Alice&#39;,  sayHello: greet&#125;;greet(); // 输出：Hello, undefinedobj.sayHello(); // 输出：Hello, Alice</code></pre><pre><code class="javascript">2. 作为对象方法调用：当函数作为对象的方法调用时，this 的值指向调用该方法的对象。const person = &#123;  name: &#39;Alice&#39;,  sayHello() &#123;    console.log(`Hello, $&#123;this.name&#125;`);  &#125;&#125;;person.sayHello(); // 输出：Hello, Alice</code></pre><pre><code class="javascript">3. 作为构造函数调用：当函数被用作构造函数调用时（使用 new 关键字），this 的值指向新创建的对象。function Person(name) &#123;  this.name = name;  this.sayHello = function() &#123;    console.log(`Hello, $&#123;this.name&#125;`);  &#125;;&#125;const john = new Person(&#39;John&#39;);john.sayHello(); // 输出：Hello, John</code></pre><pre><code class="javascript">4. 使用 call、apply 或 bind 方法显式指定 this 的值。function greet(greeting) &#123;  console.log(`$&#123;greeting&#125;, $&#123;this.name&#125;`);&#125;const person = &#123;  name: &#39;Alice&#39;&#125;;greet.call(person, &#39;Hi&#39;); // 输出：Hi, Alicegreet.apply(person, [&#39;Hi&#39;]); // 输出：Hi, Aliceconst boundGreet = greet.bind(person);boundGreet(&#39;Hi&#39;); // 输出：Hi, Alice</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js浅谈作用域 - 变量 - 闭包</title>
      <link href="/js-base/js%E6%B5%85%E8%B0%88%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%BB%A5%E5%8F%8A%E5%8F%98%E9%87%8F%E4%BB%A5%E5%8F%8A%E9%97%AD%E5%8C%85/"/>
      <url>/js-base/js%E6%B5%85%E8%B0%88%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%BB%A5%E5%8F%8A%E5%8F%98%E9%87%8F%E4%BB%A5%E5%8F%8A%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是作用域"><a href="#什么是作用域" class="headerlink" title="什么是作用域"></a>什么是作用域</h1><pre><code class="text">在 JavaScript 中，作用域是指变量的可访问范围，它控制了变量在代码中的可见性和生命周期。JavaScript 有以下几种类型的作用域和变量：</code></pre><pre><code class="javascript">1. 全局作用域（Global Scope）：全局作用域是在代码中任何地方都能访问到的最外层作用域。在浏览器环境中，全局作用域通常指的是 window 对象。在全局作用域中声明的变量在整个程序中都是可访问的。 var globalVariable = &#39;I am a global variable&#39;;function foo() &#123;  console.log(globalVariable); // 输出：I am a global variable&#125;console.log(globalVariable); // 输出：I am a global variable</code></pre><pre><code class="javascript">2. 函数作用域（Function Scope）：函数作用域是在函数内部声明的变量所拥有的作用域。这意味着函数内部可以访问函数外部的变量，但函数外部无法访问函数内部的变量。function foo() &#123;  var functionVariable = &#39;I am a function variable&#39;;  console.log(functionVariable); // 输出：I am a function variable&#125;console.log(functionVariable); // 报错：functionVariable is not defined</code></pre><pre><code class="javascript">3. 块级作用域（Block Scope）：在 ES6（ECMAScript 2015）之前，JavaScript 只有全局作用域和函数作用域，没有块级作用域。块级作用域由一对花括号（&#123;&#125;）创建，在块级作用域内声明的变量只在该块级作用域内部可见。function foo() &#123;  if (true) &#123;    var blockVariable = &#39;I am a block variable&#39;;    let blockScopedVariable = &#39;I am a block-scoped variable&#39;;    console.log(blockVariable); // 输出：I am a block variable    console.log(blockScopedVariable); // 输出：I am a block-scoped variable  &#125;  console.log(blockVariable); // 输出：I am a block variable  console.log(blockScopedVariable); // 报错：blockScopedVariable is not defined&#125;</code></pre><pre><code class="javascript">4. 词法作用域（Lexical Scope）：JavaScript 使用的是词法作用域，也称为静态作用域。词法作用域是在代码编写时确定的，它基于变量在代码中的位置来确定其可访问范围，而不是运行时的调用栈。var globalVariable = &#39;I am a global variable&#39;;function foo() &#123;  var functionVariable = &#39;I am a function variable&#39;;  console.log(globalVariable); // 输出：I am a global variable  console.log(functionVariable); // 输出：I am a function variable&#125;foo();</code></pre><pre><code class="text">在 JavaScript 中，变量有三种声明方式：var、let 和 const。其中 var 声明的变量具有函数作用域或全局作用域，let 和 const 声明的变量具有块级作用域。请注意，函数声明本身也遵循词法作用域，可以在函数内部定义函数，并在函数内部访问和调用。这就是 JavaScript 中的闭包机制。</code></pre><h1 id="作用域的理解"><a href="#作用域的理解" class="headerlink" title="作用域的理解"></a>作用域的理解</h1><ol><li>作⽤域链的作⽤是保证执⾏环境⾥有权访问的变量和函数是有序的，作⽤域链的变量只能向上访问，变量访问到 window 对象即被终⽌，作⽤域链向下访问变量是不被允许的</li><li>简单的说，作⽤域就是变量与函数的可访问范围，即作⽤域控制着变量与函数的可⻅性和⽣命周期</li></ol><h1 id="什么是闭包？"><a href="#什么是闭包？" class="headerlink" title="什么是闭包？"></a>什么是闭包？</h1><ol><li><p>闭包就是能够读取其他函数内部变量的函数</p></li><li><p>闭包是指有权访问另⼀个函数作⽤域中变量的函数，创建闭包的最常⻅的⽅式就是在⼀个函数内创建另⼀个函数，通过另⼀个函数访问这个函数的局部变量,利⽤闭包可以突破作⽤链域</p></li><li><p>闭包的特性：<br>函数内再嵌套函数<br>内部函数可以引⽤外层的参数和变量<br>参数和变量不会被垃圾回收机制回收</p></li></ol><h1 id="闭包的理解"><a href="#闭包的理解" class="headerlink" title="闭包的理解"></a>闭包的理解</h1><ol><li>使⽤闭包主要是为了设计私有的⽅法和变量。闭包的优点是可以避免全局变量的污染，缺点是闭包会常驻内存，会增⼤内存使⽤量，使⽤不当很容易造成内存泄露。在js中，函数即闭包，只有函数才会产⽣作⽤域的概念</li><li>闭包 的最⼤⽤处有两个，⼀个是可以读取函数内部的变量，另⼀个就是让这些变量始终保持在内存中</li><li>闭包的另⼀个⽤处，是封装对象的私有属性和私有⽅法</li><li>好处：能够实现封装和缓存等；</li><li>坏处：就是消耗内存、不正当使⽤会造成内存溢出的问题</li></ol><h1 id="使⽤闭包的注意点"><a href="#使⽤闭包的注意点" class="headerlink" title="使⽤闭包的注意点"></a>使⽤闭包的注意点</h1><ol><li>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很⼤，所以不能滥⽤闭包，否则会造成⽹⻚的性能问题，在IE中可能导致内存泄露</li><li>解决⽅法是，在退出函数之前，将不使⽤的局部变量全部删除</li></ol><pre><code class="javascript">function outer() &#123;  var outerVariable = &#39;I am an outer variable&#39;;  function inner() &#123;    console.log(outerVariable); // 闭包，内部函数可以访问外部函数的变量  &#125;  return inner;&#125;var closureFunction = outer(); closureFunction(); // 输出：I am an outer variable</code></pre><h1 id="什么情况下会造成内存泄漏"><a href="#什么情况下会造成内存泄漏" class="headerlink" title="什么情况下会造成内存泄漏"></a>什么情况下会造成内存泄漏</h1><ol><li>未及时释放闭包：如果闭包被保留在内存中，并且不再需要使用，但没有手动解除对闭包的引用，这将导致闭包及其所引用的变量无法被垃圾回收，从而造成内存泄漏。</li><li>循环引用：如果闭包持有对其他对象的引用，而这些对象又持有对闭包的引用，形成了循环引用，那么这些对象以及闭包本身都无法被垃圾回收，导致内存泄漏。</li><li>事件监听器未移除：当页面中的元素绑定了事件监听器，而这些监听器是在闭包中定义的，如果没有正确地解除对元素的引用，这会导致闭包无法释放，从而造成内存泄漏。</li><li>全局变量引用：如果闭包中引用了全局变量，即使函数执行结束，闭包仍然可以访问和持有对全局变量的引用，阻止了对全局变量的释放，导致内存泄漏。</li></ol><h1 id="为避免闭包导致的内存泄漏，可以采取以下措施："><a href="#为避免闭包导致的内存泄漏，可以采取以下措施：" class="headerlink" title="为避免闭包导致的内存泄漏，可以采取以下措施："></a>为避免闭包导致的内存泄漏，可以采取以下措施：</h1><ol><li>及时释放闭包：在不需要使用闭包时，手动解除对闭包的引用，让垃圾回收机制能够回收闭包及其引用的变量。</li><li>移除事件监听器：在不再需要使用的情况下，确保移除元素上的事件监听器，以免闭包继续持有对元素的引用。</li><li>避免不必要的全局变量：减少对全局作用域的依赖，限制闭包对全局变量的引用，使得相关变量能够在不需要时被回收。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><pre><code class="text">在上面的例子中，outer 函数返回了一个内部函数 inner，该内部函数引用了 outer 函数的变量 outerVariable。即使 outer 函数执行完毕后，inner 函数依然可以访问和操作 outerVariable 变量，这就是闭包的特性。通过使用作用域和闭包，我们可以实现封装、数据私有化和模块化等编程概念。闭包还可以用于创建函数工厂和实现函数柯里化等高级编程技巧。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack性能优化</title>
      <link href="/performance-optimization/%E6%8F%90%E9%AB%98Webpack%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6/"/>
      <url>/performance-optimization/%E6%8F%90%E9%AB%98Webpack%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="如何提高Webpack构建速度"><a href="#如何提高Webpack构建速度" class="headerlink" title="如何提高Webpack构建速度"></a>如何提高Webpack构建速度</h1><pre><code class="javascript">1. 代码压缩JS 压缩webpack 4.0默认在生产环境的时候是支持代码压缩的，即mode=production模式下。实际上webpack 4.0默认是使用terser-webpack-plugin这个压缩插件，在此之前是使用 uglifyjs-webpack-plugin，两者的区别是后者对 ES6 的压缩不是很好，同时我们可以开启 parallel参数，使用多进程压缩，加快压缩。CSS 压缩CSS 压缩通常是去除无用的空格等，因为很难去修改选择器、属性的名称、值等。可以使用另外一个插件：css-minimizer-webpack-plugin。HTML 压缩使用HtmlWebpackPlugin插件来生成 HTML 的模板时候，通过配置属性minify进行 html 优化。module.exports = &#123;plugin:[  new HtmlwebpackPlugin(&#123;    minify:&#123;      minifyCSS: false, // 是否压缩css      collapseWhitespace: false, // 是否折叠空格      removeComments: true // 是否移除注释    &#125;  &#125;)  ]&#125;2. 图片压缩配置image-webpack-loader3. Tree ShakingTree Shaking是一个术语，在计算机中表示消除死代码，依赖于 ES Module 的静态语法分析（不执行任何的代码，可以明确知道模块的依赖关系）。在webpack实现Tree shaking有两种方案：usedExports：通过标记某些函数是否被使用，之后通过 Terser 来进行优化的module.exports = &#123;    ...    optimization:&#123;        usedExports    &#125;  &#125;使用之后，没被用上的代码在webpack打包中会加入unused harmony export mul注释，用来告知Terser在优化时，可以删除掉这段代码。sideEffects：跳过整个模块/文件，直接查看该文件是否有副作用sideEffects用于告知webpack compiler哪些模块时有副作用，配置方法是在package.json中设置sideEffects属性。如果sideEffects设置为false，就是告知webpack可以安全的删除未用到的exports。如果有些文件需要保留，可以设置为数组的形式，如：&quot;sideEffecis&quot;:[    &quot;./src/util/format.js&quot;,    &quot;*.css&quot; // 所有的css文件]4. 缩小打包域排除webpack不需要解析的模块，即在使用loader的时候，在尽量少的模块中去使用。可以借助 include和exclude这两个参数，规定loader只在那些模块应用和在哪些模块不应用。5. 减少 ES6 转为 ES5 的冗余代码使用bable-plugin-transform-runtime插件6. 提取公共代码通过配置CommonsChunkPlugin插件，将多个页面的公共代码抽离成单独的文件7. 其他组件懒加载、路由懒加载、开启gzip、公共的第三方包上cdn、配置cache缓存Loader对文件的编译副本、配置resolve提高文件的搜索速度</code></pre><h1 id="webpack性能优化"><a href="#webpack性能优化" class="headerlink" title="webpack性能优化"></a>webpack性能优化</h1><h2 id="开发环境性能优化"><a href="#开发环境性能优化" class="headerlink" title="开发环境性能优化"></a>开发环境性能优化</h2><ol><li>优化打包构建速度</li><li>HMR</li><li>优化代码调试</li><li>source-map</li></ol><h2 id="生产环境性能优化"><a href="#生产环境性能优化" class="headerlink" title="生产环境性能优化"></a>生产环境性能优化</h2><ol><li>优化打包构建速度</li><li>oneOf(可以按照一组优先级顺序来定义不同类型或特定条件下的模块处理方式)</li></ol><pre><code class="javascript">module.exports = &#123;  // ...其他的Webpack配置  module: &#123;    rules: [      // ...其他规则      &#123;        oneOf: [          &#123;            test: /\.css$/,            use: [&#39;style-loader&#39;, &#39;css-loader&#39;]          &#125;,          &#123;            test: /\.less$/,            use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#39;less-loader&#39;]          &#125;,          &#123;            test: /\.js$/,            exclude: /node_modules/,            use: &#39;babel-loader&#39;          &#125;,          // ...其他的规则        ]      &#125;    ]  &#125;&#125;;</code></pre><ol start="3"><li>babel缓存</li><li>多进程打包</li><li>externals(拒绝某些包被打包进来)</li><li>dll(独立打包第三方库,减少构建时间)</li><li>优化代码运行的性能</li><li>缓存(hash-chunkhash-contenthash)</li><li>tree shaking</li></ol><pre><code class="text">tree shaking：去除无用代码  前提：1. 必须使用ES6模块化  2. 开启production环境  作用: 减少代码体积在package.json中配置   &quot;sideEffects&quot;: false 所有代码都没有副作用（都可以进行tree shaking）    问题：可能会把css / @babel/polyfill （副作用）文件干掉  &quot;sideEffects&quot;: [&quot;*.css&quot;, &quot;*.less&quot;]</code></pre><ol start="10"><li>code split</li><li>懒加载&#x2F;预加载</li><li>pwa(PWA 提供了一种融合了网页和原生应用优点的解决方案，能够提供离线访问、快速加载、类似原生应用的体验以及跨平台兼容性等优势)</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 前端性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端性能优化大纲</title>
      <link href="/performance-optimization/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%A4%A7%E7%BA%B2/"/>
      <url>/performance-optimization/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%A4%A7%E7%BA%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="性能优化六大指标"><a href="#性能优化六大指标" class="headerlink" title="性能优化六大指标"></a>性能优化六大指标</h1><p><strong>六大指标基本囊括大部分性能优化细节，可作为优化策略的补充。</strong></p><ol><li>「加载优化」：资源在加载时可做的性能优化</li><li>「执行优化」：资源在执行时可做的性能优化</li><li>「渲染优化」：资源在渲染时可做的性能优化</li><li>「样式优化」：样式在编码时可做的性能优化</li><li>「脚本优化」：脚本在编码时可做的性能优化</li><li>「V8引擎优化」：针对V8引擎特征可做的性能优化</li></ol><h2 id="加载优化"><a href="#加载优化" class="headerlink" title="加载优化"></a>加载优化</h2><ol><li>优化HTTP请求：减少请求次数、合并与压缩静态资源、使用CDN等</li></ol><pre><code class="text">1. CDN：将资源分发到 CDN 的边缘网络节点，使用户可就近获取所需内容，大幅减小了光纤传输距离，使全球各地用户打开网站都拥有良好的网络体验。2. http2：http2 的诸多特性决定了它更快的传输速度。2.1.多路复用，在浏览器可并行发送 N 条请求。2.2.首部压缩，更小的负载体积。2.3.请求优先级，更快的关键请求目前，网站已大多上了 http2，可在控制台面板进行查看。由于 http2 可并行请求，解决了 http1.1 线头阻塞的问题，以下几个性能优化点将会过时资源合并。如 https://shanyue.tech/assets??index.js,interview.js,report.js域名分片。雪碧图。将无数小图片合并成单个大图片。3. 充分利用 HTTP 缓存更好的资源缓存策略，对于 CDN 来讲可减少回源次数，对于浏览器而言可减少请求发送次数。无论哪一点，对于二次网站访问都具有更好的访问体验。一:缓存策略  1.强缓存: 打包后带有 hash 值的资源 (如 /build/a3b4c8a8.js)  2.协商缓存: 打包后不带有 hash 值的资源 (如 /index.html)二:分包加载 (Bundle Spliting)  1.避免一行代码修改导致整个 bundle 的缓存失效 4. 减少 HTTP 请求及负载对一个网站的资源进行压缩优化，从而达到减少 HTTP 负载的目的。js/css/image 等常规资源体积优化，这是一个大话题，再以下分别讨论4.1小图片优化，将小图片内联为 Data URI，减小请求数量4.2图片懒加载4.3新的 API: IntersectionObserver API4.4新的属性: loading=lazy 5. preload/prefetch preload/prefetch 可控制 HTTP 优先级，从而达到关键请求更快响应的目的。&lt;link rel=&quot;prefetch&quot; href=&quot;style.css&quot; as=&quot;style&quot;&gt;&lt;link rel=&quot;preload&quot; href=&quot;main.js&quot; as=&quot;script&quot;&gt;1. preload 加载当前路由必需资源，优先级高。一般对于 Bundle Spliting 资源与 Code Spliting 资源做 preload2. prefetch 优先级低，在浏览器 idle 状态时加载资源。一般用以加载其它路由资源，如当页面出现 Link，可 prefetch 当前 Link 的路由资源。（next.js 默认会对 link 做懒加载+prefetch，即当某条 Link 出现页面中，即自动 prefetch 该 Link 指向的路由资源捎带说一下 dns-prefetch，可对主机地址的 DNS 进行预解析。&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//shanyue.tech&quot;&gt;</code></pre><ol start="2"><li>使用缓存：利用浏览器缓存机制，设置适当的缓存头信息</li><li>图片优化：选择合适的图片格式、压缩图片文件大小、响应式图片或按需加载图片</li></ol><pre><code class="text">在前端发展的现在，webp 普遍比 jpeg/png 更小，而 avif 又比 webp 小一个级别为了无缝兼容，可选择 picture/source 进行回退处理&lt;picture&gt;  &lt;source srcset=&quot;img/photo.avif&quot; type=&quot;image/avif&quot;&gt;  &lt;source srcset=&quot;img/photo.webp&quot; type=&quot;image/webp&quot;&gt;  &lt;img src=&quot;img/photo.jpg&quot; width=&quot;360&quot; height=&quot;240&quot;&gt;&lt;/picture&gt;1.更合适的尺寸: 当页面仅需显示 100px/100px 大小图片时，对图片进行压缩到 100px/100px2.更合适的压缩: 可对前端图片进行适当压缩，如通过 sharp 等</code></pre><ol start="4"><li>延迟加载：将非关键资源延迟加载，如图片、视频、第三方插件等</li><li>使用字体图标和矢量图形：替代大量图片的使用</li><li>更小的 Javascript</li></ol><pre><code class="text">gzip/brotliterser (minify)还有以下几点可以考虑考虑:路由懒加载，无需加载整个应用的资源Tree Shaking: 无用导出将在生产环境进行删除browserlist/babel: 及时更新 browserlist，将会产生更小的垫片体积再补充一个问题:如何分析并优化当前项目的 Javascript 体积？如果使用 webpack 那就简单很多。使用 webpack-bundle-analyze 分析打包体积对一些库替换为更小体积的库，如 moment -&gt; dayjs对一些库进行按需加载，如 import lodash -&gt; import lodash/get对一些库使用支持 Tree Shaking，如 import lodash -&gt; import lodash-es</code></pre><ol start="7"><li>压缩混淆工具</li></ol><pre><code class="text">1.Terser (opens new window)是 Javascript 资源压缩混淆的神器。它可以根据以下策略进行压缩处理:长变量名替换短变量删除空格换行符预计算: const a = 24 * 60 * 60 * 1000 -&gt; const a = 86400000移除无法被执行的代码·移除无用的变量及函数可在 Terser Repl (opens new window)在线查看代码压缩效果。2.swc (opens new window)是另外一个用以压缩 Javascript 的工具，它拥有与 terser 相同的 API，由于它是由 rust 所写，因此它拥有更高的性能。3.html-minifier-terser (opens new window)用以压缩 HTML 的工具4. gzip/brotli对 JS、CSS、HTML 等文本资源均有效，但是对图片效果不大。gzip 通过 LZ77 算法与 Huffman 编码来压缩文件，重复度越高的文件可压缩的空间就越大。brotli 通过变种的 LZ77 算法、Huffman 编码及二阶文本建模来压缩文件，更先进的压缩算法，比 gzip 有更高的性能及压缩率可在浏览器的 Content-Encoding 响应头查看该网站是否开启了压缩算法，目前知乎、掘金等已全面开启了 brotli 压缩。Request HeaderAccept-Encoding: gzip, deflate, brgzipContent-Encoding: gzipgzipContent-Encoding: br </code></pre><h2 id="执行优化"><a href="#执行优化" class="headerlink" title="执行优化"></a>执行优化</h2><ol><li>代码优化：精简html，css，js代码，避免重复代码</li><li>异步加载：将JavaScript放在底部，使用async,defer熟悉</li><li>代码分割和懒加载：拆分大型应用程序为小模块，按需加载模块，减少初始加载时间</li><li>前端代码压缩混淆：对前端代码进行压缩和混淆，减小文件大小，提高加载速度</li></ol><h2 id="渲染优化"><a href="#渲染优化" class="headerlink" title="渲染优化"></a>渲染优化</h2><p><strong>「渲染层面」</strong>的性能优化，无疑是如何让代码解析更好执行更快。</p><ol><li>「CSS策略」：基于CSS规则</li><li>「DOM策略」：基于DOM操作</li><li>「阻塞策略」：基于脚本加载</li><li>「回流重绘策略」：基于回流重绘</li><li>「异步更新策略」：基于异步更新</li><li>「缓存策略」</li></ol><p><strong>CSS策略</strong><br>避免出现超过三层的嵌套规则<br>避免为ID选择器添加多余选择器<br>避免使用标签选择器代替类选择器<br>避免使用通配选择器，只对目标节点声明规则<br>避免重复匹配重复定义，关注可继承属性</p><p><strong>DOM策略</strong><br>缓存DOM计算属性<br>避免过多DOM操作<br>使用DOMFragment缓存批量化DOM操作<br>虚拟列表优化</p><p><strong>阻塞策略</strong><br>脚本与DOM&#x2F;其它脚本的依赖关系很强：对<script>设置defer<br>脚本与DOM/其它脚本的依赖关系不强：对<script>设置async</p><p><strong>「回流重绘策略」</strong>在渲染层面的性能优化里占比较重，也是最常规的性能优化之一。<br>缓存DOM计算属性<br>使用类合并样式，避免逐条改变样式<br>使用display控制DOM显隐，将DOM离线化</p><p><strong>异步更新策略</strong><br>在异步任务中修改DOM时把其包装成微任务</p><p><strong>缓存策略</strong></p><pre><code class="javascript">在一些前端系统中，当加载页面时会发送请求，路由切换出去再切换回来时又会重新发送请求，每次请求完成后会对页面重新渲染。然而这些重新请求再大多数时是没有必要的，合理地对 API 进行缓存将达到优化渲染的目的。1.对每一条 GET API 添加 key2.根据 key 控制该 API 缓存，重复发生请求时将从缓存中取得function Example() &#123;  // 设置缓存的 Key 为 Users:10086  const &#123; isLoading, data &#125; = useQuery([&#39;users&#39;, userId], () =&gt; fetchUserById(userId))&#125;</code></pre><h2 id="样式优化"><a href="#样式优化" class="headerlink" title="样式优化"></a>样式优化</h2><ol><li>响应式设计：使用响应式布局和媒体查询适应不同设备和屏幕大小</li><li>使用CSS预处理器：如Less、Sass等，提高样式编写的效率</li></ol><h2 id="脚本优化"><a href="#脚本优化" class="headerlink" title="脚本优化"></a>脚本优化</h2><ol><li>使用模块化开发：使用模块化/组件化的方式组织JavaScript代码</li><li>优化DOM操作：减少DOM操作的次数，对多次操作进行批量处理</li></ol><h2 id="V8引擎优化"><a href="#V8引擎优化" class="headerlink" title="V8引擎优化"></a>V8引擎优化</h2><ol><li>避免不必要的闭包：过多的闭包会导致内存消耗增加</li><li>使用高性能API和方法：如使用map而不是for循环等</li><li>优化循环和递归：尽量减少循环和递归的层数和次数，避免性能问题</li></ol><h1 id="性能评测指标"><a href="#性能评测指标" class="headerlink" title="性能评测指标"></a>性能评测指标</h1><p><strong>三大指标</strong> 使用工具 lighthouse，web-vitals 等<br>LCP: 加载性能。最大内容绘制应在 2.5s 内完成。<br>FID: 交互性能。首次输入延迟应在 100ms 内完成。<br>CLS: 页面稳定性。累积布局偏移，需手动计算，CLS 应保持在 0.1 以下。</p><h1 id="优化-DOM-操作并减少其次数"><a href="#优化-DOM-操作并减少其次数" class="headerlink" title="优化 DOM 操作并减少其次数"></a>优化 DOM 操作并减少其次数</h1><pre><code class="javascript">1. 批量更新：将多个 DOM 操作合并为一个操作，以减少重排和重绘的次数。例如，如果要对一个元素进行多次样式修改，可以先使用 CSS 类来添加或删除样式，最后再应用一次类，而不是每次修改都直接操作样式属性。// 不优化的写法element.style.width = &#39;100px&#39;;element.style.height = &#39;200px&#39;;element.style.backgroundColor = &#39;red&#39;;// 优化的写法element.classList.add(&#39;my-class&#39;);element.classList.remove(&#39;my-class&#39;);2. 使用文档片段（DocumentFragment）：将多个 DOM 节点先添加到文档片段中，然后再一次性插入文档中，这样只会触发一次重排和重绘。这在需要动态添加大量元素时特别有效。// 不优化的写法for (let i = 0; i &lt; 1000; i++) &#123;  const element = document.createElement(&#39;div&#39;);  document.body.appendChild(element);&#125;// 优化的写法const fragment = document.createDocumentFragment();for (let i = 0; i &lt; 1000; i++) &#123;  const element = document.createElement(&#39;div&#39;);  fragment.appendChild(element);&#125;document.body.appendChild(fragment);3. 缓存 DOM 查询结果：当需要多次访问同一个 DOM 元素时，将查询结果缓存在变量中，避免重复查询。// 不优化的写法for (let i = 0; i &lt; 100; i++) &#123;  document.getElementById(&#39;myElement&#39;).innerHTML += &#39;new content&#39;;&#125;// 优化的写法const element = document.getElementById(&#39;myElement&#39;);for (let i = 0; i &lt; 100; i++) &#123;  element.innerHTML += &#39;new content&#39;;&#125;4. 使用虚拟 DOM：在涉及大量数据变动和复杂视图更新的情况下，可以使用虚拟 DOM 技术，通过比对虚拟 DOM 树来最小化实际 DOM 操作的次数。这些是一些常见的优化 DOM 操作的方法。请根据具体场景选择合适的方法进行优化。记住，减少 DOM 操作次数会显著提高性能和用户体验。</code></pre><h1 id="浏览器缓存优化"><a href="#浏览器缓存优化" class="headerlink" title="浏览器缓存优化"></a>浏览器缓存优化</h1><p>为了让浏览器缓存发挥最大作用，该策略尽量遵循以下五点就能发挥浏览器缓存最大作用。</p><p>「考虑拒绝一切缓存策略」：Cache-Control:no-store<br>「考虑资源是否每次向服务器请求」：Cache-Control:no-cache<br>「考虑资源是否被代理服务器缓存」：Cache-Control:public/private<br>「考虑资源过期时间」：Expires:t/Cache-Control:max-age=t,s-maxage=t<br>「考虑协商缓存」：Last-Modified/Etag<br>缓存策略通过设置HTTP报文实现，在形式上分为<strong>「强缓存/强制缓存」和「协商缓存/对比缓存」</strong>。</p><p><img data-src="/images/xn/%E5%BC%BA%E7%BC%93%E5%AD%98.png"><br><img data-src="/images/xn/%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98.png"></p><p>整个缓存策略机制很明了，先走强缓存，若命中失败才走协商缓存。若命中强缓存，直接使用强缓存；若未命中强缓存，发送请求到服务器检查是否命中协商缓存；若命中协商缓存，服务器返回304通知浏览器使用本地缓存，否则返回最新资源。</p><p>有两种较常用的应用场景值得使用缓存策略一试，当然更多应用场景都可根据项目需求制定。</p><p>「频繁变动资源」：设置Cache-Control:no-cache，使浏览器每次都发送请求到服务器，配合Last-Modified/ETag验证资源是否有效<br>「不常变化资源」：设置Cache-Control:max-age=31536000，对文件名哈希处理，当代码修改后生成新的文件名，当HTML文件引入文件名发生改变才会下载最新文件</p><h1 id="Web-Worker"><a href="#Web-Worker" class="headerlink" title="Web Worker"></a>Web Worker</h1><p>在纯浏览器中，如何实现高性能的实时代码编译及转换？</p><p>Babel Repl(opens new window)<br>如果纯碎使用传统的 Javascript 实现，将会耗时过多阻塞主线程，有可能导致页面卡顿。</p><p>如果使用 Web Worker 交由额外的线程来做这件事，将会高效很多，基本上所有在浏览器端进行代码编译的功能都由 Web Worker 实现。</p><h1 id="WASM"><a href="#WASM" class="headerlink" title="WASM"></a>WASM</h1><ol><li>JS 性能低下</li><li>C++/Rust 高性能</li><li>使用 C++/Rust 编写代码，然后在 Javascript 环境运行<br>试举一例:</li></ol><p>在纯浏览器中，如何实现高性能的图片压缩？</p><p>基本上很难做到，Javascript 的性能与生态决定了实现图片压缩的艰难。</p><p>而借助于 WASM 就相当于借用了其它语言的生态。</p><p>1.libavif (opens new window): C语言写的 avif 解码编码库<br>2.libwebp (opens new window): C语言写的 webp 解码编码库<br>3.mozjpeg (opens new window): C语言写的 jpeg 解码编码库<br>4.oxipng (opens new window): Rust语言写的 png 优化库<br>而由于 WASM，完全可以把这些其它语言的生态移植到浏览器中，从而实现一个高性能的离线式的图片压缩工具。</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 前端性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在某某企业小程序优化思考(uniapp)</title>
      <link href="/performance-optimization/%E5%9C%A8%E6%9F%90%E6%9F%90%E4%BC%81%E4%B8%9A%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BC%98%E5%8C%96%E6%80%9D%E8%80%83(uniapp)/"/>
      <url>/performance-optimization/%E5%9C%A8%E6%9F%90%E6%9F%90%E4%BC%81%E4%B8%9A%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BC%98%E5%8C%96%E6%80%9D%E8%80%83(uniapp)/</url>
      
        <content type="html"><![CDATA[<ol><li><p>vuex 对启动耗时的影响<br>Vuex 是一个状态管理库，在启动阶段如果存在大量的业务逻辑，会使启动耗时增加。这是因为在启动过程中，需要初始化 Vuex 的状态和相关的模块，可能会触发一些异步操作和计算，导致启动时间延长。因此，在设计和使用 Vuex 时，需要注意避免在启动阶段执行过多的繁重操作，以减少启动耗时。</p></li><li><p>mixins 对启动耗时的影响<br>Mixins 是一种在组件中复用代码的机制，通过将相同的逻辑和功能抽离到 Mixins 中，可以在多个组件中共享使用。在启动阶段，如果组件使用了 Mixins，会在组件实例化时执行 Mixins 中的代码逻辑，因此会增加启动耗时。如果 Mixins 中存在大量或复杂的业务逻辑，会进一步增加启动耗时。因此，使用 Mixins 时需要注意控制逻辑的复杂度，避免影响启动性能。</p></li><li><p>子组件中的请求是从onReady 加载完再去调用请求的，所以是否组件中不要使用请求?<br>在小程序中，子组件的请求通常是在组件的 onReady 生命周期钩子函数中进行调用。由于 onReady 是在页面的渲染准备完成后调用的，此时页面已经可见，用户可以看到页面内容。因此，在 onReady 钩子中进行请求可能会导致页面加载完成后才开始请求数据，从而延长了页面加载时间。</p></li><li><p>挂载到原型上的东西 ,每次生成的页面都会执行这个数据 , 这里的影响多大?<br>当一些数据或方法挂载到小程序的原型对象上时，每次生成的页面都可以通过原型链访问到这些数据或方法。这样做的好处是可以实现数据和方法的全局共享和复用。</p></li><li><p>有没有根据包大小计算出来的 平均启动时间&#x2F;加载耗时<br>通常情况下，并没有一个直接根据包大小计算出来的平均启动时间或加载耗时的公式或算法。因为启动时间和加载耗时受到多个因素的影响，如网络环境、设备性能、代码复杂度等。<br>包大小的增加可能会导致下载时间变长，从而影响启动时间。然而，仅仅根据包大小无法准确预测启动时间的增加，还需要考虑其他因素的综合影响。因此，对于不同的小程序和具体场景，需要进行实际测试和评估来得出准确的启动时间和加载耗时。</p></li></ol><ul><li>计算最佳收益点</li><li>其实这里想表达的是否2M 和 1.5M的包下载时间的差距是否几乎不计?</li></ul><ol start="6"><li>从小程序加载流程上来讲，对于首次打开小程序用户，会去下载包，包大会造成下载时间变长（在相同网络条件下）；影响启动耗时的直接因素：<br>● 平台：不同的平台下（安卓、IOS）设备性能、操作系统、框架实现、优化方案存在较大的差异，启动耗时也存在较大的差异。只有分平台比较启动耗时（包括各阶段耗时）才有意义；<br> 1.怎么做到只是针对某个机型去判断?<br> 2.是不是要去处理慢的机型呢? 怎么处理是个问题<br>● 下载比例及大小：代码包下载和更新都会显著影响小程序启动耗时，在其他流程耗时稳定的情况下，下载比例升高会影响大盘启动耗时。<br>● 入口页面：不同页面启动时，根据所在分包的不同，需要下载的代码包数量和大小和代码注入量都存在差异。不同页面渲染耗时也存在差异。<br>● 机型分布：启动耗时和设备性能有较强关联，不同小程序或使用场景用户群体的差异可能导致机型分布的差异，进而影响大盘启动耗时。<br>● 网络环境：网络环境主要影响网络请求的耗时，如小程序信息获取、代码包下载等。<br>间接因素：<br>● 场景&#x2F;访问来源：不同场景下，用户访问的页面不同，新用户比例也有差异，对启动耗时会有一定影响。此外，用户访问的目的性和自身的等待意愿也有差异，也会影响打开率。<br> 1.这里可能存在有些页面分享进来的，但是这个页面其实是不允许直接进入的，可能会造成某些问题导致的耗时<br> 2.进入的页面不是首页，这是一种什么场景?<br>● 首次访问用户比例：用户首次访问小程序时，需要完整的进行小程序信息准备、代码包下载的流程，代码缓存也需要重新生成，启动耗时会比非首次访问高。<br>● 小程序版本更新：小程序版本更新时，用户需要更新小程序信息和代码包，代码缓存也需要重新生成，启动耗时会出现上涨。<br> 1.这个其实就是每次更新版本对启动时长的影响，特别是发布灰度的时候<br> 2.一段时间不发新版本,启动时间会降低。这里其实说明我们登报的人，他存在多次进来看的情况（这个是肯定的）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 前端性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全</title>
      <link href="/Web-Integration/web%E5%AE%89%E5%85%A8/"/>
      <url>/Web-Integration/web%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS（跨站脚本攻击）："><a href="#XSS（跨站脚本攻击）：" class="headerlink" title="XSS（跨站脚本攻击）："></a>XSS（跨站脚本攻击）：</h1><pre><code class="text">使用合适的编码和转义方式来处理输入和输出的数据。对用户输入进行验证和过滤，避免将恶意脚本插入到页面中。</code></pre><h1 id="CSRF（跨站请求伪造）："><a href="#CSRF（跨站请求伪造）：" class="headerlink" title="CSRF（跨站请求伪造）："></a>CSRF（跨站请求伪造）：</h1><pre><code class="text">在关键操作上使用随机生成的令牌（CSRF Token），并验证该令牌的合法性。设置合适的 SameSite Cookie 属性，限制跨站点访问。</code></pre><h1 id="点击劫持（Clickjacking）："><a href="#点击劫持（Clickjacking）：" class="headerlink" title="点击劫持（Clickjacking）："></a>点击劫持（Clickjacking）：</h1><pre><code class="text">使用 X-Frame-Options 或 Content-Security-Policy 来限制页面被嵌套到其他网站的情况。可以使用 JavaScript 检测页面是否在 iframe 中展示，并弹出警告或拒绝加载。</code></pre><h1 id="密码安全："><a href="#密码安全：" class="headerlink" title="密码安全："></a>密码安全：</h1><pre><code class="text">采用密码哈希算法（如 bcrypt）对用户密码进行加密存储，避免明文存储。强制要求用户设置强密码，并进行密码策略的验证（如长度、大小写字母、特殊字符等）。</code></pre><h1 id="客户端数据验证和过滤："><a href="#客户端数据验证和过滤：" class="headerlink" title="客户端数据验证和过滤："></a>客户端数据验证和过滤：</h1><pre><code class="text">不要依赖前端验证，一定要在后端进行数据验证和过滤。对客户端输入的数据进行严格验证，避免恶意输入和攻击。</code></pre><h1 id="安全更新和依赖管理："><a href="#安全更新和依赖管理：" class="headerlink" title="安全更新和依赖管理："></a>安全更新和依赖管理：</h1><pre><code class="text">及时更新和升级前端框架、库和依赖，以获取最新的安全修复和补丁。定期审查和监控项目的依赖项，确保没有包含已知的漏洞和安全问题。</code></pre><h1 id="HTTPS-的使用："><a href="#HTTPS-的使用：" class="headerlink" title="HTTPS 的使用："></a>HTTPS 的使用：</h1><pre><code class="text">在页面上使用 HTTPS 协议来加密数据传输，防止数据被窃取和篡改。配置合适的 TLS/SSL 加密套件和证书，确保通信的安全性。</code></pre><h1 id="安全审计和日志记录："><a href="#安全审计和日志记录：" class="headerlink" title="安全审计和日志记录："></a>安全审计和日志记录：</h1><pre><code class="text">记录用户操作日志，追溯异常行为和安全事件。定期进行安全审计，检查应用程序的漏洞和安全风险。</code></pre><h1 id="输入验证与过滤："><a href="#输入验证与过滤：" class="headerlink" title="输入验证与过滤："></a>输入验证与过滤：</h1><pre><code class="text">对用户输入进行验证和过滤，确保只接受预期的合法输入。使用白名单过滤，而不是黑名单过滤，避免遗漏恶意输入。</code></pre><h1 id="安全的跨域资源共享（CORS）配置："><a href="#安全的跨域资源共享（CORS）配置：" class="headerlink" title="安全的跨域资源共享（CORS）配置："></a>安全的跨域资源共享（CORS）配置：</h1><pre><code class="text">配置合适的 CORS 头信息，限制跨域请求的访问权限。设置合理的源和目标组合，防止未经授权的访问和信息泄露。</code></pre><h1 id="客户端存储的安全性："><a href="#客户端存储的安全性：" class="headerlink" title="客户端存储的安全性："></a>客户端存储的安全性：</h1><pre><code class="text">避免在客户端存储敏感信息，如密码、令牌等。使用合适的存储机制，如浏览器提供的 localStorage 或 sessionStorage，加密存储敏感数据。</code></pre><h1 id="CDN-安全："><a href="#CDN-安全：" class="headerlink" title="CDN 安全："></a>CDN 安全：</h1><pre><code class="text">如果使用内容分发网络（CDN），确保从可信任的来源获取资源并验证其完整性。配置适当的安全头部，如 Content Security Policy (CSP)。</code></pre><h1 id="防御点击劫持："><a href="#防御点击劫持：" class="headerlink" title="防御点击劫持："></a>防御点击劫持：</h1><pre><code class="text">通过在响应头中设置 X-Frame-Options 或 Content-Security-Policy，限制页面被嵌套到其他网站的情况。对于现代浏览器，可以使用 Frame-ancestors CSP 指令来进一步控制允许嵌套页面的来源。</code></pre><h1 id="定期安全审查和漏洞扫描："><a href="#定期安全审查和漏洞扫描：" class="headerlink" title="定期安全审查和漏洞扫描："></a>定期安全审查和漏洞扫描：</h1><pre><code class="text">定期进行安全审查，检查代码中的潜在漏洞和安全隐患。使用自动化工具进行漏洞扫描和代码静态分析，及时发现可能存在的安全问题。</code></pre><h1 id="消息传递的安全性："><a href="#消息传递的安全性：" class="headerlink" title="消息传递的安全性："></a>消息传递的安全性：</h1><pre><code class="text">对于敏感信息的传递，尽量使用加密算法加密数据。避免将敏感信息直接传递给前端，而是在后端进行敏感信息的处理和加密。</code></pre><h1 id="防御代码注入攻击："><a href="#防御代码注入攻击：" class="headerlink" title="防御代码注入攻击："></a>防御代码注入攻击：</h1><pre><code class="text">避免在前端中执行不受信任的代码。不要将用户输入直接拼接到代码字符串中，以防止代码注入攻击。</code></pre><h1 id="防御文件上传漏洞："><a href="#防御文件上传漏洞：" class="headerlink" title="防御文件上传漏洞："></a>防御文件上传漏洞：</h1><pre><code class="text">对用户上传的文件进行严格的验证和过滤，并使用独立的文件存储来避免安全问题。验证文件类型、大小和内容，确保只接受合法和安全的文件。</code></pre><h1 id="安全的第三方组件和库："><a href="#安全的第三方组件和库：" class="headerlink" title="安全的第三方组件和库："></a>安全的第三方组件和库：</h1><pre><code class="text">在使用第三方组件和库时，选择经过广泛审查和更新的可信来源。定期更新和升级第三方组件，以获取最新的安全修复和功能改进。</code></pre><h1 id="保护敏感信息："><a href="#保护敏感信息：" class="headerlink" title="保护敏感信息："></a>保护敏感信息：</h1><pre><code class="text">不要将敏感信息直接存储在前端，如密码、密钥等。使用加密算法对敏感信息进行加密，并在后端进行处理和存储。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web综合问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器渲染原理以及优化思路</title>
      <link href="/Web-Integration/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/"/>
      <url>/Web-Integration/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="浏览器渲染原理"><a href="#浏览器渲染原理" class="headerlink" title="浏览器渲染原理"></a>浏览器渲染原理</h1><pre><code class="text">1. 渲染过程：解析HTML：浏览器解析HTML代码，构建DOM树。解析CSS：浏览器解析CSS样式表，构建CSSOM树。构建渲染树：将DOM树和CSSOM树合并成渲染树，该树只包含需要显示元素的信息。布局（Layout）：计算每个元素的大小和位置。绘制（Paint）：根据计算好的布局信息，将每个元素绘制成屏幕上的像素。合成（Composite）：将绘制好的元素按正确的顺序合成到最终的图像上。2. 阻塞过程：脚本阻塞：当浏览器遇到&lt;script&gt;标签或执行JavaScript代码时，会暂停HTML解析和渲染，直到脚本执行完毕。样式加载阻塞：如果浏览器遇到外部CSS文件，会等待该文件下载和解析完毕后再继续渲染。资源加载阻塞：当浏览器遇到资源文件如图片、字体或其他媒体时，会等待资源下载和加载完毕后再继续渲染。3. 重绘与汇流：重绘（Repaint）：当元素的样式改变，但不影响布局时，浏览器只需要重新绘制元素的可视部分。汇流（Reflow）：当布局发生改变，例如改变元素的大小或位置时，浏览器需要重新计算并调整元素的布局和相关元素的位置。</code></pre><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><pre><code class="text">1. 减少阻塞时间：脚本加载优化：将JavaScript脚本放在页面底部，或者使用defer属性将其延迟执行，以免阻塞HTML解析和渲染过程。样式加载优化：将CSS样式表放在&lt;head&gt;标签中，避免样式表的加载阻塞页面渲染。资源加载优化：使用合适的缓存策略、减小资源文件的大小，以及使用CDN等方式来提高资源加载速度。2. 最小化重绘与汇流：批量修改样式：避免频繁读取和修改单个元素的样式属性，最好使用CSS类进行批量修改，这样可以减少重绘和汇流的次数。避免强制同步布局：在修改多个元素的样式时，避免强制同步布局，即尽量将布局相关的修改集中在一起，减少不必要的重绘和汇流。3.使用现代CSS特性：使用CSS动画代替JavaScript动画：CSS动画借助浏览器的硬件加速，性能更高，并且不会阻塞JavaScript主线程。使用CSS Grid 和 Flexbox 布局：这些现代的布局方式能够更有效地处理布局，减少重绘和汇流的次数。4.图片优化：使用适当的图片格式：根据图片特性选择合适的图片格式，例如JPEG、PNG、WebP等，以尽量减小文件大小。图片懒加载：只在视口范围内加载可见区域的图片，延迟加载其他图片，以提高页面加载速度。5. 代码优化：避免频繁操作DOM：减少对DOM的修改和查询次数，可以使用文档片段（DocumentFragment）来进行批量操作。压缩和合并代码：对CSS和JavaScript文件进行压缩和合并，减小文件体积，加快加载速度。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web综合问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器缓存机制</title>
      <link href="/Web-Integration/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
      <url>/Web-Integration/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="浏览器缓存机制"><a href="#浏览器缓存机制" class="headerlink" title="浏览器缓存机制"></a>浏览器缓存机制</h1><p>浏览器缓存机制是指浏览器在处理网页资源时，将一部分资源保存在本地存储中，以便下次请求相同资源时可以快速获取，从而提高网页加载速度和用户体验。以下是常见的浏览器缓存机制：</p><h1 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h1><ol><li>浏览器在第一次请求资源时，服务器通过响应头中的Cache-Control或Expires字段返回资源，并将这些信息保存在浏览器缓存中。在下一次请求相同资源时，浏览器会直接从缓存中读取，而不发起请求</li><li>常用的Cache-Control值有：</li></ol><ul><li>public：表示资源可以被所有用户及代理服务器缓存。</li><li>private：表示资源只能被单个用户缓存，不允许代理服务器缓存。</li><li>max-age：表示资源在缓存中的有效期，单位为秒。</li></ul><h1 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h1><ol><li>在资源过期后，浏览器会发送一个带有If-Modified-Since（Last-Modified）或If-None-Match（ETag）字段的请求到服务器，询问该资源是否有更新。如果服务器返回304 Not Modified状态码，则表示资源未发生变化，浏览器会直接从缓存中读取。</li><li>常用的响应头字段有：</li></ol><ul><li>Last-Modified：表示资源的最后修改时间。</li><li>ETag：表示资源的唯一标识符。</li></ul><h1 id="离线缓存"><a href="#离线缓存" class="headerlink" title="离线缓存"></a>离线缓存</h1><ol><li>HTML5提供了离线缓存机制，使用manifest文件来定义需要缓存的资源。浏览器在第一次访问网页时会下载manifest文件并根据文件中的信息缓存相应资源。在之后的访问中，即使处于离线状态，浏览器仍然能够加载并显示已缓存的页面。离线缓存可以提高网页的可访问性和性能。</li></ol><h1 id="缓存位置"><a href="#缓存位置" class="headerlink" title="缓存位置"></a>缓存位置</h1><ol><li><p>内存缓存（Memory Cache）：<br>内存缓存是最快的缓存位置，将资源直接保存在浏览器内存中。<br>内存缓存的读取速度非常快，可以快速响应请求，适用于频繁请求和临时性资源。<br>但是，内存缓存的容量有限，并且在浏览器关闭时会被清空。</p></li><li><p>硬盘缓存（Disk Cache）：<br>硬盘缓存将资源保存在硬盘上，相对于内存缓存来说读取速度较慢，但比重新请求资源要快得多。<br>硬盘缓存可以持久保存资源，并且在浏览器关闭后仍然可用。<br>硬盘缓存的容量相对较大，可以保存更多的资源。</p></li><li><p>服务端缓存：<br>服务端缓存是指将资源保存在服务器端，由服务器返回缓存的资源给浏览器。<br>服务端缓存可以利用类似缓存代理、CDN等方式来提升资源获取速度，减轻服务器的压力。<br>服务端缓存可以根据资源的过期时间或版本号来判断是否返回缓存资源。</p></li><li><p>Service Worker 缓存：<br>Service Worker 是运行在浏览器后台的脚本，可以拦截网络请求并自定义响应。<br>Service Worker 可以将资源保存在本地缓存中，实现离线访问或快速加载。<br>Service Worker 缓存具有灵活性和高度可自定义的特性，适用于离线应用、推送通知等场景。</p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过合理设置缓存策略，可以减少对服务器的请求次数，加快网页加载速度，降低网络流量消耗。同时，如果网页内容有更新，通过修改资源的版本号或过期时间等方式来使浏览器重新请求新的资源版本。</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web综合问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web综合问题</title>
      <link href="/Web-Integration/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%9D%A2%E8%AF%95/"/>
      <url>/Web-Integration/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="常见的浏览器内核有哪些？"><a href="#常见的浏览器内核有哪些？" class="headerlink" title="常见的浏览器内核有哪些？"></a>常见的浏览器内核有哪些？</h1><p>主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。<br>渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。<br>JS引擎则：解析和执行javascript来实现网页的动态效果。<br>最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。<br>常见内核<br>Trident 内核：IE, MaxThon, TT, The World, 360, 搜狗浏览器等。[又称 MSHTML]<br>Gecko 内核：Netscape6 及以上版本，FF, MozillaSuite &#x2F; SeaMonkey 等<br>Presto 内核：Opera7 及以上。 [Opera内核原为：Presto，现为：Blink;]<br>Webkit 内核：Safari, Chrome等。 [ Chrome的：Blink（WebKit 的分支）]</p><h1 id="网页前端性能优化的方式有哪些？"><a href="#网页前端性能优化的方式有哪些？" class="headerlink" title="网页前端性能优化的方式有哪些？"></a>网页前端性能优化的方式有哪些？</h1><p>1.压缩 css, js, 图片<br>2.减少 http 请求次数， 合并 css、js 、合并图片（雪碧图）<br>3.使用 CDN<br>4.减少 dom 元素数量<br>5.图片懒加载<br>6.静态资源另外用无 cookie 的域名<br>7.减少 dom 的访问（缓存 dom）<br>8.巧用事件委托<br>9.样式表置顶、脚本置低</p><h1 id="网页从输入网址到渲染完成经历了哪些过程？"><a href="#网页从输入网址到渲染完成经历了哪些过程？" class="headerlink" title="网页从输入网址到渲染完成经历了哪些过程？"></a>网页从输入网址到渲染完成经历了哪些过程？</h1><p>大致可以分为如下7步：</p><p>输入网址；<br>发送到DNS服务器，并获取域名对应的web服务器对应的ip地址；<br>与web服务器建立TCP连接；<br>浏览器向web服务器发送http请求；<br>web服务器响应请求，并返回指定url的数据（或错误信息，或重定向的新的url地址）；<br>浏览器下载web服务器返回的数据及解析html源文件；<br>生成DOM树，解析css和js，渲染页面，直至显示完成；</p><h1 id="线程与进程的区别？"><a href="#线程与进程的区别？" class="headerlink" title="线程与进程的区别？"></a>线程与进程的区别？</h1><p>一个程序至少有一个进程,一个进程至少有一个线程.<br>线程的划分尺度小于进程，使得多线程程序的并发性高。<br>另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。<br>线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。<br>从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。</p><h1 id="HTTP常见的状态码？"><a href="#HTTP常见的状态码？" class="headerlink" title="HTTP常见的状态码？"></a>HTTP常见的状态码？</h1><p>100 Continue 继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息<br>200 OK 正常返回信息<br>201 Created 请求成功并且服务器创建了新的资源<br>202 Accepted 服务器已接受请求，但尚未处理<br>301 Moved Permanently 请求的网页已永久移动到新位置。<br>302 Found 临时性重定向。<br>303 See Other 临时性重定向，且总是使用 GET 请求新的 URI。<br>304 Not Modified 自从上次请求后，请求的网页未修改过。<br>400 Bad Request 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。<br>401 Unauthorized 请求未授权。<br>403 Forbidden 禁止访问。<br>404 Not Found 找不到如何与 URI 相匹配的资源。<br>500 Internal Server Error 最常见的服务器端错误。<br>503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。</p><h1 id="图片懒加载？"><a href="#图片懒加载？" class="headerlink" title="图片懒加载？"></a>图片懒加载？</h1><p>当页面滚动的时间被触发 -&gt; 执行加载图片操作 -&gt; 判断图片是否在可视区域内 -&gt; 在，则动态将data-src的值赋予该图片</p><h1 id="移动端性能优化？"><a href="#移动端性能优化？" class="headerlink" title="移动端性能优化？"></a>移动端性能优化？</h1><p>尽量使用css3动画，开启硬件加速<br>适当使用touch时间代替click时间<br>避免使用css3渐变阴影效果<br>可以用transform: translateZ(0) 来开启硬件加速<br>不滥用float。float在渲染时计算量比较大，尽量减少使用<br>不滥用web字体。web字体需要下载，解析，重绘当前页面<br>合理使用requestAnimationFrame动画代替setTimeout<br>css中的属性（css3 transitions、css3 3D transforms、opacity、webGL、video）会触发GUP渲染，耗电</p><h1 id="TCP-传输的三次握手、四次挥手策略"><a href="#TCP-传输的三次握手、四次挥手策略" class="headerlink" title="TCP 传输的三次握手、四次挥手策略"></a>TCP 传输的三次握手、四次挥手策略</h1><p>三次握手：<br>为了准确无误地吧数据送达目标处，TCP协议采用了三次握手策略。用TCP协议把数据包送出去后，TCP不会对传送后的情况置之不理，他一定会向对方确认是否送达，握手过程中使用TCP的标志：SYN和ACK<br>发送端首先发送一个带SYN的标志的数据包给对方<br>接收端收到后，回传一个带有SYN&#x2F;ACK标志的数据包以示传达确认信息<br>最后，发送端再回传一个带ACK的标志的数据包，代表“握手”结束<br>如在握手过程中某个阶段莫明中断，TCP协议会再次以相同的顺序发送相同的数据包</p><p>断开一个TCP连接需要“四次挥手”<br>第一次挥手：主动关闭方发送一个FIN，用来关注主动方到被动关闭方的数据传送，也即是主动关闭方告诫被动关闭方：我已经不会再给你发数据了（在FIN包之前发送的数据，如果没有收到对应的ACK确认报文，主动关闭方依然会重发这些数据）。但是，此时主动关闭方还可以接受数据<br>第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号收到序号 +1（与SYN相同，一个 FIN占用一个序号）<br>第三次挥手：被动关闭方发送一个 FIN。用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会给你发送数据了<br>第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手</p><h1 id="HTTP-和-HTTPS，为什么HTTPS安全？"><a href="#HTTP-和-HTTPS，为什么HTTPS安全？" class="headerlink" title="HTTP 和 HTTPS，为什么HTTPS安全？"></a>HTTP 和 HTTPS，为什么HTTPS安全？</h1><p>HTTP协议通常承载与 TCP协议之上，在HTTP和TCP之间添加一个安全协议层（SSL或TSL），这个时候，就成了我们常说的HTTPS<br>默认HTTP的端口号为80，HTTPS的端口号为443<br>因为网络请求需要中间有很多的服务器路由的转发，中间的节点都可能篡改信息，而如果使用HTTPS，密钥在你和终点站才有，https之所有说比http安全，是因为他利用ssl&#x2F;tls协议传输。包含证书，流量转发，负载均衡，页面适配，浏览器适配，refer传递等，保障了传输过程的安全性</p><h1 id="axios和fetch区别对比"><a href="#axios和fetch区别对比" class="headerlink" title="axios和fetch区别对比"></a>axios和fetch区别对比</h1><p>axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，本质上也是对原生XHR的封装，只不过它是Promise的实现版本，符合最新的ES规范，它本身具有以下特征</p><p>从浏览器中创建 XMLHttpRequest<br>支持 Promise API<br>客户端支持防止CSRF<br>提供了一些并发请求的接口（重要，方便了很多的操作）<br>从 node.js 创建 http 请求<br>拦截请求和响应<br>转换请求和响应数据<br>取消请求<br>自动转换JSON数据<br>fetch优势：</p><p>语法简洁，更加语义化<br>基于标准 Promise 实现，支持 async&#x2F;await<br>同构方便，使用 isomorphic-fetch<br>更加底层，提供的API丰富（request, response）<br>脱离了XHR，是ES规范里新的实现方式<br>fetch存在问题</p><p>fetch是一个低层次的API，你可以把它考虑成原生的XHR，所以使用起来并不是那么舒服，需要进行封装。<br>fetch只对网络请求报错，对400，500都当做成功的请求，服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。<br>fetch默认不会带cookie，需要添加配置项： fetch(url, {credentials: ‘include’})<br>fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费<br>fetch没有办法原生监测请求的进度，而XHR可以</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web综合问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap</title>
      <link href="/front-end/Bootstrap/"/>
      <url>/front-end/Bootstrap/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Bootstrap？以及为什么要使⽤Bootstrap？"><a href="#什么是Bootstrap？以及为什么要使⽤Bootstrap？" class="headerlink" title="什么是Bootstrap？以及为什么要使⽤Bootstrap？"></a>什么是Bootstrap？以及为什么要使⽤Bootstrap？</h1><ol><li>Bootstrap 是⼀个⽤于快速开发 Web 应⽤程序和⽹站的前端框架。</li><li>Bootstrap 是基于 HTML 、 CSS 、 JAVASCRIPT 的</li><li>Bootstrap 具有移动设备优先、浏览器⽀持良好、容易上⼿、响应式设计等优点，所以Bootstrap 被⼴泛应⽤</li></ol><h1 id="使⽤Bootstrap时，要声明的⽂档类型是什么？以及为什么要这样声明？"><a href="#使⽤Bootstrap时，要声明的⽂档类型是什么？以及为什么要这样声明？" class="headerlink" title="使⽤Bootstrap时，要声明的⽂档类型是什么？以及为什么要这样声明？"></a>使⽤Bootstrap时，要声明的⽂档类型是什么？以及为什么要这样声明？</h1><ol><li>使⽤ Bootstrap 时，需要使⽤ HTML5 ⽂档类型（ Doctype ）。 <!DOCTYPE html></li><li>因为 Bootstrap 使⽤了⼀些 HTML5 元素和 CSS 属性，如果在 Bootstrap 创建的⽹⻚开头不使⽤ HTML5 的⽂档类型（ Doctype ），可能会⾯临⼀些浏览器显示不⼀致的问题，甚⾄可能⾯临⼀些特定情境下的不⼀致，以致于代码不能通过 W3C 标准的验证</li></ol><h1 id="什么是Bootstrap⽹格系统"><a href="#什么是Bootstrap⽹格系统" class="headerlink" title="什么是Bootstrap⽹格系统"></a>什么是Bootstrap⽹格系统</h1><ol><li>Bootstrap 包含了⼀个响应式的、移动设备优先的、不固定的⽹格系统，可以随着设备或视⼝⼤⼩的增加⽽适当地扩展到 12 列。它包含了⽤于简单的布局选项的预定义类，也包含了⽤于⽣成更多语义布局的功能强⼤的混合类</li><li>响应式⽹格系统随着屏幕或视⼝（ viewport ）尺⼨的增加，系统会⾃动分为最多 12列。</li></ol><h1 id="Bootstrap-⽹格系统（Grid-System）的⼯作原理"><a href="#Bootstrap-⽹格系统（Grid-System）的⼯作原理" class="headerlink" title="Bootstrap ⽹格系统（Grid System）的⼯作原理"></a>Bootstrap ⽹格系统（Grid System）的⼯作原理</h1><p>（1）⾏必须放置在 .container class 内，以便获得适当的对⻬（ alignment ）和内<br>边距（ padding ）。<br>（2）使⽤⾏来创建列的⽔平组。<br>（3）内容应该放置在列内，且唯有列可以是⾏的直接⼦元素。<br>（4）预定义的⽹格类，⽐如 .row 和 .col-xs-4 ，可⽤于快速创建⽹格布局。 LESS<br>混合类可⽤于更多语义布局。<br>（5）列通过内边距（ padding ）来创建列内容之间的间隙。该内边距是通过 .rows 上<br>的外边距（ margin ）取负，表示第⼀列和最后⼀列的⾏偏移。<br>（6）⽹格系统是通过指定您想要横跨的⼗⼆个可⽤的列来创建的。例如，要创建三个相等<br>的列，则使⽤三个 .col-xs-4</p><h1 id="对于各类尺⼨的设备，Bootstrap设置的class前缀分别是什么"><a href="#对于各类尺⼨的设备，Bootstrap设置的class前缀分别是什么" class="headerlink" title="对于各类尺⼨的设备，Bootstrap设置的class前缀分别是什么"></a>对于各类尺⼨的设备，Bootstrap设置的class前缀分别是什么</h1><ol><li>超⼩设备⼿机（ &lt;768px ）： .col-xs-*</li><li>⼩型设备平板电脑（ &gt;&#x3D;768px ）： .col-sm-*</li><li>中型设备台式电脑（ &gt;&#x3D;992px ）： .col-md-*</li><li>⼤型设备台式电脑（ &gt;&#x3D;1200px ）： .col-lg-*</li></ol><h1 id="Bootstrap-⽹格系统列与列之间的间隙宽度是多少"><a href="#Bootstrap-⽹格系统列与列之间的间隙宽度是多少" class="headerlink" title="Bootstrap ⽹格系统列与列之间的间隙宽度是多少"></a>Bootstrap ⽹格系统列与列之间的间隙宽度是多少</h1><p>间隙宽度为 30px （⼀个列的每边分别是 15px ）</p><h1 id="如果需要在⼀个标题的旁边创建副标题，可以怎样操作"><a href="#如果需要在⼀个标题的旁边创建副标题，可以怎样操作" class="headerlink" title="如果需要在⼀个标题的旁边创建副标题，可以怎样操作"></a>如果需要在⼀个标题的旁边创建副标题，可以怎样操作</h1><p>在元素两旁添加 <small> ，或者添加 .small 的 class</p><h1 id="⽤Bootstrap，如何设置⽂字的对⻬⽅式"><a href="#⽤Bootstrap，如何设置⽂字的对⻬⽅式" class="headerlink" title="⽤Bootstrap，如何设置⽂字的对⻬⽅式"></a>⽤Bootstrap，如何设置⽂字的对⻬⽅式</h1><ol><li>class&#x3D;”text-center” 设置居中⽂本</li><li>class&#x3D;”text-right” 设置向右对⻬⽂本</li><li>class&#x3D;”text-left” 设置向左对⻬⽂本</li></ol><h1 id="Bootstrap如何设置响应式表格？"><a href="#Bootstrap如何设置响应式表格？" class="headerlink" title="Bootstrap如何设置响应式表格？"></a>Bootstrap如何设置响应式表格？</h1><p>增加 class&#x3D;”table-responsive”</p><h1 id="使⽤Bootstrap创建垂直表单的基本步骤？"><a href="#使⽤Bootstrap创建垂直表单的基本步骤？" class="headerlink" title="使⽤Bootstrap创建垂直表单的基本步骤？"></a>使⽤Bootstrap创建垂直表单的基本步骤？</h1><p>（1）向⽗ <form> 元素添加 role&#x3D;”form” ；<br>（2）把标签和控件放在⼀个带有 class&#x3D;”form-group” 的 <div> 中，这是获取最佳间距<br>所必需的；<br>（3）向所有的⽂本元素 <input> 、 <textarea> 、 <select> 添加 class&#x3D;”form-control”</p><h1 id="使⽤Bootstrap创建⽔平表单的基本步骤？"><a href="#使⽤Bootstrap创建⽔平表单的基本步骤？" class="headerlink" title="使⽤Bootstrap创建⽔平表单的基本步骤？"></a>使⽤Bootstrap创建⽔平表单的基本步骤？</h1><p>（1）向⽗ <form> 元素添加 class&#x3D;”form-horizontal” ；<br>（2）把标签和控件放在⼀个带有 class&#x3D;”form-group” 的 <div> 中；<br>（3）向标签添加 class&#x3D;”control-label” 。</p><h1 id="使⽤Bootstrap如何创建表单控件的帮助⽂本？"><a href="#使⽤Bootstrap如何创建表单控件的帮助⽂本？" class="headerlink" title="使⽤Bootstrap如何创建表单控件的帮助⽂本？"></a>使⽤Bootstrap如何创建表单控件的帮助⽂本？</h1><p>增加 class&#x3D;”help-block” 的 span 标签或 p 标签。</p><h1 id="使⽤Bootstrap激活或禁⽤按钮要如何操作？"><a href="#使⽤Bootstrap激活或禁⽤按钮要如何操作？" class="headerlink" title="使⽤Bootstrap激活或禁⽤按钮要如何操作？"></a>使⽤Bootstrap激活或禁⽤按钮要如何操作？</h1><ol><li>激活按钮：给按钮增加 .active 的 class</li><li>禁⽤按钮：给按钮增加 disabled&#x3D;”disabled” 的属性</li></ol><h1 id="Bootstrap有哪些关于的class？"><a href="#Bootstrap有哪些关于的class？" class="headerlink" title="Bootstrap有哪些关于的class？"></a>Bootstrap有哪些关于的class？</h1><p>（1） .img-rounded 为图⽚添加圆⻆<br>（2） .img-circle 将图⽚变为圆形<br>（3） .img-thumbnail 缩略图功能<br>（4） .img-responsive 图⽚响应式 (将很好地扩展到⽗元素)</p><h1 id="Bootstrap中有关元素浮动及清除浮动的class？"><a href="#Bootstrap中有关元素浮动及清除浮动的class？" class="headerlink" title="Bootstrap中有关元素浮动及清除浮动的class？"></a>Bootstrap中有关元素浮动及清除浮动的class？</h1><p>（1） class&#x3D;”pull-left” 元素浮动到左边<br>（2） class&#x3D;”pull-right” 元素浮动到右边<br>（3） class&#x3D;”clearfix” 清除浮动</p><h1 id="除了屏幕阅读器外，其他设备上隐藏元素的class？"><a href="#除了屏幕阅读器外，其他设备上隐藏元素的class？" class="headerlink" title="除了屏幕阅读器外，其他设备上隐藏元素的class？"></a>除了屏幕阅读器外，其他设备上隐藏元素的class？</h1><p><code>class=&quot;sr-only</code></p><h1 id="Bootstrap如何制作下拉菜单？"><a href="#Bootstrap如何制作下拉菜单？" class="headerlink" title="Bootstrap如何制作下拉菜单？"></a>Bootstrap如何制作下拉菜单？</h1><p>（1）将下拉菜单包裹在 class&#x3D;”dropdown” 的 <div> 中；<br>（2）在触发下拉菜单的按钮中添加： class&#x3D;”btn dropdown-toggle”<br>id&#x3D;”dropdownMenu1” data-toggle&#x3D;”dropdown”<br>（3）在包裹下拉菜单的ul中添加： class&#x3D;”dropdown-menu” role&#x3D;”menu” aria-labelledby&#x3D;”dropdownMenu1”<br>（4）在下拉菜单的列表项中添加： role&#x3D;”presentation” 。其中，下拉菜单的标题要添<br>加 class&#x3D;”dropdown-header” ，选项部分要添加 tabindex&#x3D;”-1” 。</p><h1 id="Bootstrap如何制作按钮组？以及⽔平按钮组和垂直按钮组的优先级？"><a href="#Bootstrap如何制作按钮组？以及⽔平按钮组和垂直按钮组的优先级？" class="headerlink" title="Bootstrap如何制作按钮组？以及⽔平按钮组和垂直按钮组的优先级？"></a>Bootstrap如何制作按钮组？以及⽔平按钮组和垂直按钮组的优先级？</h1><p>（1）⽤ class&#x3D;”btn-group” 的 <div> 去包裹按钮组； class&#x3D;”btn-group-vertical” 可设置垂直按钮组。<br>（2） btn-group 的优先级⾼于 btn-group-vertical 的优先级。</p><h1 id="Bootstrap如何设置按钮的下拉菜单？"><a href="#Bootstrap如何设置按钮的下拉菜单？" class="headerlink" title="Bootstrap如何设置按钮的下拉菜单？"></a>Bootstrap如何设置按钮的下拉菜单？</h1><p>在⼀个 .btn-group 中放置按钮和下拉菜单即可。</p><h1 id="Bootstrap中的输⼊框组如何制作？"><a href="#Bootstrap中的输⼊框组如何制作？" class="headerlink" title="Bootstrap中的输⼊框组如何制作？"></a>Bootstrap中的输⼊框组如何制作？</h1><p>（1）把前缀或者后缀元素放在⼀个带有 class&#x3D;”input-group” 中的 <div> 中<br>（2）在该 <div> 内，在 class&#x3D;”input-group-addon” 的 <span> ⾥⾯放置额外的内<br>容；<br>（3）把 <span> 放在 <input> 元素的前⾯或后⾯。</p><h1 id="Bootstrap中的导航都有哪些？"><a href="#Bootstrap中的导航都有哪些？" class="headerlink" title="Bootstrap中的导航都有哪些？"></a>Bootstrap中的导航都有哪些？</h1><p>（1）导航元素：有 class&#x3D;”nav nav-tabs” 的标签⻚导航，还有 class&#x3D;”nav navpills” 的胶囊式标签⻚导航；<br>（2）导航栏： class&#x3D;”navbar navbar-default” role&#x3D;”navigation” ；<br>（3）⾯包屑导航： class&#x3D;”breadcrumb”</p><h1 id="Bootstrap中设置分⻚的class？"><a href="#Bootstrap中设置分⻚的class？" class="headerlink" title="Bootstrap中设置分⻚的class？"></a>Bootstrap中设置分⻚的class？</h1><ol><li>默认的分⻚： class&#x3D;”pagination”</li><li>默认的翻⻚： class&#x3D;”pager”</li></ol><h1 id="Bootstrap中显示标签的class？"><a href="#Bootstrap中显示标签的class？" class="headerlink" title="Bootstrap中显示标签的class？"></a>Bootstrap中显示标签的class？</h1><p>class&#x3D;”label”</p><h1 id="Bootstrap中如何制作徽章？"><a href="#Bootstrap中如何制作徽章？" class="headerlink" title="Bootstrap中如何制作徽章？"></a>Bootstrap中如何制作徽章？</h1><pre><code class="css">&lt;span class=&quot;badge&quot;&gt;26&lt;/span&gt;</code></pre><h1 id="Bootstrap中超⼤屏幕的作⽤是什么"><a href="#Bootstrap中超⼤屏幕的作⽤是什么" class="headerlink" title="Bootstrap中超⼤屏幕的作⽤是什么"></a>Bootstrap中超⼤屏幕的作⽤是什么</h1><pre><code class="text">设置 class=&quot;jumbotron&quot; 可以制作超⼤屏幕，该组件可以增加标题的⼤⼩并增加更多的外边距</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Bootstrap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从浏览器地址栏输⼊url到显示⻚⾯的步骤</title>
      <link href="/Web-Integration/%E8%AF%A6%E8%A7%A3%E4%BB%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E2%BC%8Aurl%E5%88%B0%E6%98%BE%E7%A4%BA%E2%BB%9A%E2%BE%AF/"/>
      <url>/Web-Integration/%E8%AF%A6%E8%A7%A3%E4%BB%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E2%BC%8Aurl%E5%88%B0%E6%98%BE%E7%A4%BA%E2%BB%9A%E2%BE%AF/</url>
      
        <content type="html"><![CDATA[<ol><li>在浏览器地址栏输⼊URL</li><li>浏览器查看缓存，如果请求资源在缓存中并且新鲜，跳转到转码步骤</li></ol><ul><li>如果资源未缓存，发起新请求</li><li>如果已缓存，检验是否⾜够新鲜，⾜够新鲜直接提供给客户端，否则与服务器进⾏验证。</li><li>检验新鲜通常有两个HTTP头进⾏控制 Expires 和 Cache-Control ：(  HTTP1.0提供Expires，值为⼀个绝对时间表示缓存新鲜⽇期<br>  HTTP1.1增加了Cache-Control: max-age&#x3D;,值为以秒为单位的最⼤新鲜时间)</li></ul><ol start="3"><li>浏览器解析URL获取协议，主机，端⼝，path</li><li>浏览器组装⼀个HTTP（GET）请求报⽂</li><li>浏览器获取主机ip地址，过程如下：</li></ol><ul><li>浏览器缓存:(浏览器会在本地进行DNS缓存，将之前解析过的域名和其对应的IP地址保存起来。当再次请求相同的域名时，浏览器会首先检查本地缓存中是否存在对应的记录)</li><li>本机缓存:(如果在浏览器缓存中找不到域名的IP地址，浏览器将查找操作系统（如Windows、Mac等）的本机DNS缓存。操作系统也会对DNS查询结果进行缓存，以提高性能和减少网络请求)</li><li>hosts⽂件:(如果在本机缓存中没有找到域名的IP地址，系统将查找操作系统的Hosts文件。Hosts文件是一个文本文件，可以手动配置域名和对应的IP地址映射关系)</li><li>路由器缓存:(如果在Hosts文件中找不到域名的IP地址，系统将向路由器发送DNS查询请求。某些路由器会在自身进行DNS缓存，以便快速响应本地网络设备的DNS查询)</li><li>ISP DNS缓存:(如果在路由器缓存中没有找到域名的IP地址，系统将向互联网服务提供商（ISP）的DNS服务器发送DNS查询请求。ISP的DNS服务器也会进行缓存，以提高DNS解析速度和网络访问效率)</li><li>DNS递归查询:(如果在ISP DNS缓存中找不到域名的IP地址，ISP的DNS服务器将发起递归查询。递归查询是指DNS服务器按照一定的顺序向上级DNS服务器发出查询请求，直到找到所需的IP地址或者查询失败。在递归查询过程中，可能会经过多个DNS服务器，这可能导致负载均衡使得每次获得的IP地址可能不一样)（可能存在负载均衡导致每次IP不⼀样）</li></ul><ol start="6"><li>打开⼀个socket与⽬标IP地址，端⼝建⽴TCP链接，三次握⼿如下：</li></ol><ul><li>客户端发送⼀个TCP的SYN&#x3D;1，Seq&#x3D;X的包到服务器端⼝</li><li>服务器发回SYN&#x3D;1， ACK&#x3D;X+1， Seq&#x3D;Y的响应包</li><li>客户端发送ACK&#x3D;Y+1， Seq&#x3D;Z</li></ul><ol start="7"><li>TCP链接建⽴后发送HTTP请求</li><li>服务器接受请求并解析，将请求转发到服务程序，如虚拟主机使⽤HTTP Host头部判断请求的服务程序</li><li>服务器检查HTTP请求头是否包含缓存验证信息如果验证缓存新鲜，返回304等对应状态码</li><li>处理程序读取完整请求并准备HTTP响应，可能需要查询数据库等操作</li><li>服务器将响应报⽂通过TCP连接发送回浏览器</li><li>浏览器接收HTTP响应，然后根据情况选择关闭TCP连接或者保留重⽤，关闭TCP连接的四<br>次握⼿如下：</li></ol><ul><li>主动⽅发送Fin&#x3D;1， Ack&#x3D;Z， Seq&#x3D; X报⽂</li><li>被动⽅发送ACK&#x3D;X+1， Seq&#x3D;Z报⽂</li><li>被动⽅发送Fin&#x3D;1， ACK&#x3D;X， Seq&#x3D;Y报⽂</li><li>主动⽅发送ACK&#x3D;Y， Seq&#x3D;X报⽂</li></ul><ol start="13"><li>浏览器检查响应状态吗：是否为1XX，3XX， 4XX， 5XX，这些情况处理与2XX不同</li><li>如果资源可缓存，进⾏缓存</li><li>对响应进⾏解码（例如gzip压缩）</li><li>根据资源类型决定如何处理（假设资源为HTML⽂档）</li><li>解析HTML⽂档，构件DOM树，下载资源，构造CSSOM树，执⾏js脚本，这些操作没有严格的先后顺序，以下分别解释</li><li>构建DOM树：</li></ol><ul><li>Tokenizing：根据HTML规范将字符流解析为标记</li><li>Lexing：词法分析将标记转换为对象并定义属性和规则</li><li>DOM construction：根据HTML标记关系将对象组成DOM树</li></ul><ol start="19"><li>解析过程中遇到图⽚、样式表、js⽂件，启动下载</li><li>构建CSSOM树：</li></ol><ul><li>Tokenizing：字符流转换为标记流</li><li>Node：根据标记创建节点</li><li>CSSOM：节点创建CSSOM树</li></ul><ol start="21"><li>根据DOM树和CSSOM树构建渲染树 :</li></ol><ul><li>从DOM树的根节点遍历所有可⻅节点，不可⻅节点包括：1） script , meta 这样本身<br>不可⻅的标签。2)被css隐藏的节点，如 display: none</li><li>对每⼀个可⻅节点，找到恰当的CSSOM规则并应⽤</li><li>发布可视节点的内容和计算样式</li></ul><ol start="22"><li>js解析如下：</li></ol><ul><li>浏览器创建Document对象并解析HTML，将解析到的元素和⽂本节点添加到⽂档中，此<br>时document.readystate为loading</li><li>HTML解析器遇到没有async和defer的script时，将他们添加到⽂档中，然后执⾏⾏内<br>或外部脚本。这些脚本会同步执⾏，并且在脚本下载和执⾏时解析器会暂停。这样就可<br>以⽤document.write()把⽂本插⼊到输⼊流中。同步脚本经常简单定义函数和注册事件<br>处理程序，他们可以遍历和操作script和他们之前的⽂档内容</li><li>当解析器遇到设置了async属性的script时，开始下载脚本并继续解析⽂档。脚本会在它下载完成后尽快执⾏，但是解析器不会停下来等它下载。异步脚本禁使⽤document.write()，它们可以访问⾃⼰script和之前的⽂档元素</li><li>当⽂档完成解析，document.readState变成interactive</li><li>所有defer脚本会按照在⽂档出现的顺序执⾏，延迟脚本能访问完整⽂档树，禁⽌使⽤document.write()</li><li>浏览器在Document对象上触发DOMContentLoaded事件</li><li>此时⽂档完全解析完成，浏览器可能还在等待如图⽚等内容加载，等这些内容完成载⼊并且所有异步脚本完成载⼊和执⾏，document.readState变complete，window触发load事件</li></ul><ol start="23"><li>显示⻚⾯（HTML解析过程中会逐步显示⻚⾯）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web综合问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域解决方案</title>
      <link href="/Web-Integration/%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/Web-Integration/%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是跨域？"><a href="#什么是跨域？" class="headerlink" title="什么是跨域？"></a>什么是跨域？</h1><pre><code class="text">在前端领域中，跨域是指浏览器允许向服务器发送跨域请求，从而克服Ajax只能**同源**使用的限制。什么是同源策略？**同源策略**是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指&quot;协议+域名+端口&quot;三者相同，即便两个不同的域名指向同一个ip地址，也非同源同源策略限制以下几种行为：- Cookie、LocalStorage 和 IndexDB 无法读取- DOM和JS对象无法获得- AJAX 请求不能发送举例说明：⽐如⼀个⿊客程序，他利⽤ Iframe 把真正的银⾏登录⻚⾯嵌到他的⻚⾯上，当你使⽤真实的⽤户名，密码登录时，他的⻚⾯就可以通过 Javascript 读取到你的表单中 input 中的内容，这样⽤户名，密码就轻松到⼿了。</code></pre><h1 id="JSONP跨域"><a href="#JSONP跨域" class="headerlink" title="JSONP跨域"></a>JSONP跨域</h1><p><strong>jsonp</strong>的原理就是利用<code>&lt;script&gt;</code>标签没有跨域限制，通过<code>&lt;script&gt;</code>标签src属性，发送带有callback参数的GET请求，服务端将接口返回数据拼凑到callback函数中，返回给浏览器，浏览器解析执行，从而前端拿到callback函数返回的数据。</p><p>1）原生JS实现：</p><pre><code class="text">&lt;script&gt;    var script = document.createElement(&#39;script&#39;);    script.type = &#39;text/javascript&#39;;    // 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数    script.src = &#39;http://www.domain2.com:8080/login?user=admin&amp;callback=handleCallback&#39;;    document.head.appendChild(script);    // 回调执行函数    function handleCallback(res) &#123;        alert(JSON.stringify(res));    &#125; &lt;/script&gt;</code></pre><p>服务端返回如下（返回时即执行全局函数）：</p><pre><code class="text">handleCallback(&#123;&quot;success&quot;: true, &quot;user&quot;: &quot;admin&quot;&#125;)</code></pre><p>2）jquery Ajax实现：</p><pre><code class="text">$.ajax(&#123;    url: &#39;http://www.domain2.com:8080/login&#39;,    type: &#39;get&#39;,    dataType: &#39;jsonp&#39;,  // 请求方式为jsonp    jsonpCallback: &quot;handleCallback&quot;,  // 自定义回调函数名    data: &#123;&#125;&#125;);</code></pre><p>3）Vue axios实现：</p><pre><code class="text">this.$http = axios;this.$http.jsonp(&#39;http://www.domain2.com:8080/login&#39;, &#123;    params: &#123;&#125;,    jsonp: &#39;handleCallback&#39;&#125;).then((res) =&gt; &#123;    console.log(res); &#125;)</code></pre><p>后端node.js代码：</p><pre><code class="text">var querystring = require(&#39;querystring&#39;);var http = require(&#39;http&#39;);var server = http.createServer();server.on(&#39;request&#39;, function(req, res) &#123;    var params = querystring.parse(req.url.split(&#39;?&#39;)[1]);    var fn = params.callback;    // jsonp返回设置    res.writeHead(200, &#123; &#39;Content-Type&#39;: &#39;text/javascript&#39; &#125;);    res.write(fn + &#39;(&#39; + JSON.stringify(params) + &#39;)&#39;);    res.end();&#125;);server.listen(&#39;8080&#39;);console.log(&#39;Server is running at port 8080...&#39;);</code></pre><p>jsonp的缺点：只能发送get一种请求。</p><h1 id="跨域资源共享（CORS）（后端配置跨域）"><a href="#跨域资源共享（CORS）（后端配置跨域）" class="headerlink" title="跨域资源共享（CORS）（后端配置跨域）"></a>跨域资源共享（CORS）（后端配置跨域）</h1><p><strong>CORS</strong>是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。<br>它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。<br>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。</p><p>浏览器将CORS跨域请求分为简单请求和非简单请求。</p><p>只要同时满足一下两个条件，就属于简单请求</p><p>(1)使用下列方法之一：</p><ul><li>head</li><li>get</li><li>post</li></ul><p>(2)请求的Heder是</p><ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Content-Type: 只限于三个值：application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data、text&#x2F;plain</li></ul><p>不同时满足上面的两个条件，就属于非简单请求。浏览器对这两种的处理，是不一样的。</p><p>简单请求</p><p>对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个Origin字段。</p><pre><code class="text">GET /cors HTTP/1.1Origin: http://api.bob.comHost: api.alice.comAccept-Language: en-USConnection: keep-aliveUser-Agent: Mozilla/5.0...</code></pre><p>上面的头信息中，Origin字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。</p><p>CORS请求设置的响应头字段，都以 Access-Control-开头:</p><p><strong>1）Access-Control-Allow-Origin</strong>：必选</p><p>它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。</p><p><strong>2）Access-Control-Allow-Credentials</strong>：可选</p><p>它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。</p><p><strong>3）Access-Control-Expose-Headers</strong>：可选</p><p>CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定。上面的例子指定，getResponseHeader(‘FooBar’)可以返回FooBar字段的值。</p><p>非简单请求</p><p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是PUT或DELETE，或者Content-Type字段的类型是application&#x2F;json。非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。</p><p>预检请求</p><p>预检”请求用的请求方法是OPTIONS，表示这个请求是用来询问的。请求头信息里面，关键字段是Origin，表示请求来自哪个源。除了Origin字段，”预检”请求的头信息包括两个特殊字段。</p><pre><code class="text">OPTIONS /cors HTTP/1.1Origin: http://api.bob.comAccess-Control-Request-Method: PUTAccess-Control-Request-Headers: X-Custom-HeaderHost: api.alice.comAccept-Language: en-USConnection: keep-aliveUser-Agent: Mozilla/5.0..</code></pre><p><strong>1）Access-Control-Request-Method</strong>：必选</p><p>用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是PUT。</p><p><strong>2）Access-Control-Request-Headers</strong>：可选</p><p>该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段，上例是X-Custom-Header。</p><p>预检请求的回应</p><p>服务器收到”预检”请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-Request-Headers字段以后，确认允许跨源请求，就可以做出回应。</p><p>HTTP回应中，除了关键的是Access-Control-Allow-Origin字段，其他CORS相关字段如下：</p><p><strong>1）Access-Control-Allow-Methods</strong>：必选</p><p>它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次”预检”请求。</p><p><strong>2）Access-Control-Allow-Headers</strong></p><p>如果浏览器请求包括Access-Control-Request-Headers字段，则Access-Control-Allow-Headers字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在”预检”中请求的字段。</p><p><strong>3）Access-Control-Allow-Credentials</strong>：可选</p><p>该字段与简单请求时的含义相同。</p><p><strong>4）Access-Control-Max-Age</strong>：可选</p><p>用来指定本次预检请求的有效期，单位为秒。</p><p>CORS跨域示例</p><p><strong>1）前端设置</strong>：</p><ul><li>原生ajax：</li></ul><pre><code class="text">var xhr = new XMLHttpRequest(); // IE8/9需用window.XDomainRequest兼容// 前端设置是否带cookiexhr.withCredentials = true;xhr.open(&#39;post&#39;, &#39;http://www.domain2.com:8080/login&#39;, true);xhr.setRequestHeader(&#39;Content-Type&#39;, &#39;application/x-www-form-urlencoded&#39;);xhr.send(&#39;user=admin&#39;);xhr.onreadystatechange = function() &#123;    if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123;        alert(xhr.responseText);    &#125;&#125;;</code></pre><ul><li>jquery ajax：</li></ul><pre><code class="text">$.ajax(&#123;    ...   xhrFields: &#123;       withCredentials: true    // 前端设置是否带cookie   &#125;,   crossDomain: true,   // 会让请求头中包含跨域的额外信息，但不会含cookie    ...&#125;);</code></pre><p><strong>2）服务端设置</strong>：</p><ul><li>nodejs代码</li></ul><pre><code class="text">var http = require(&#39;http&#39;);var server = http.createServer();var qs = require(&#39;querystring&#39;);server.on(&#39;request&#39;, function(req, res) &#123;    var postData = &#39;&#39;;    // 数据块接收中    req.addListener(&#39;data&#39;, function(chunk) &#123;        postData += chunk;    &#125;);    // 数据接收完毕    req.addListener(&#39;end&#39;, function() &#123;        postData = qs.parse(postData);        // 跨域后台设置        res.writeHead(200, &#123;            &#39;Access-Control-Allow-Credentials&#39;: &#39;true&#39;,     // 后端允许发送Cookie            &#39;Access-Control-Allow-Origin&#39;: &#39;http://www.domain1.com&#39;,    // 允许访问的域（协议+域名+端口）            /*              * 此处设置的cookie还是domain2的而非domain1，因为后端也不能跨域写cookie(nginx反向代理可以实现)，             * 但只要domain2中写入一次cookie认证，后面的跨域接口都能从domain2中获取cookie，从而实现所有的接口都能跨域访问             */            &#39;Set-Cookie&#39;: &#39;l=a123456;Path=/;Domain=www.domain2.com;HttpOnly&#39;  // HttpOnly的作用是让js无法读取cookie        &#125;);        res.write(JSON.stringify(postData));        res.end();    &#125;);&#125;);server.listen(&#39;8080&#39;);console.log(&#39;Server is running at port 8080...&#39;);</code></pre><h1 id="nginx代理跨域"><a href="#nginx代理跨域" class="headerlink" title="nginx代理跨域"></a>nginx代理跨域</h1><p>nginx代理跨域，实质和CORS跨域原理一样，通过配置文件设置请求响应头Access-Control-Allow-Origin…等字段。</p><p>1）nginx配置解决iconfont跨域</p><p>浏览器跨域访问js、css、img等常规静态资源被同源策略许可，但iconfont字体文件(eot|otf|ttf|woff|svg)例外，此时可在nginx的静态资源服务器中加入以下配置。</p><pre><code class="text">location / &#123;  add_header Access-Control-Allow-Origin *;&#125;</code></pre><p>2）nginx反向代理接口跨域</p><p>跨域问题：同源策略仅是针对浏览器的安全策略。服务器端调用HTTP接口只是使用HTTP协议，不需要同源策略，也就不存在跨域问题。</p><p>实现思路：通过Nginx配置一个代理服务器域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域访问。</p><p>nginx具体配置：</p><pre><code class="text">#proxy服务器server &#123;    listen       81;    server_name  www.domain1.com;    location / &#123;        proxy_pass   http://www.domain2.com:8080;  #反向代理        proxy_cookie_domain www.domain2.com www.domain1.com; #修改cookie里域名        index  index.html index.htm;        # 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用        add_header Access-Control-Allow-Origin http://www.domain1.com;  #当前端只跨域不带cookie时，可为*        add_header Access-Control-Allow-Credentials true;    &#125;&#125;</code></pre><h1 id="nodejs中间件代理跨域"><a href="#nodejs中间件代理跨域" class="headerlink" title="nodejs中间件代理跨域"></a>nodejs中间件代理跨域</h1><p>node中间件实现跨域代理，原理大致与nginx相同，都是通过启一个代理服务器，实现数据的转发，也可以通过设置cookieDomainRewrite参数修改响应头中cookie中域名，实现当前域的cookie写入，方便接口登录认证。</p><p><strong>1）非vue框架的跨域</strong></p><p>使用node + express + http-proxy-middleware搭建一个proxy服务器。</p><ul><li>前端代码：</li></ul><pre><code class="text">var xhr = new XMLHttpRequest();// 前端开关：浏览器是否读写cookiexhr.withCredentials = true;// 访问http-proxy-middleware代理服务器xhr.open(&#39;get&#39;, &#39;http://www.domain1.com:3000/login?user=admin&#39;, true);xhr.send();</code></pre><ul><li>中间件服务器代码：</li></ul><pre><code class="text">var express = require(&#39;express&#39;);var proxy = require(&#39;http-proxy-middleware&#39;);var app = express();app.use(&#39;/&#39;, proxy(&#123;    // 代理跨域目标接口    target: &#39;http://www.domain2.com:8080&#39;,    changeOrigin: true,    // 修改响应头信息，实现跨域并允许带cookie    onProxyRes: function(proxyRes, req, res) &#123;        res.header(&#39;Access-Control-Allow-Origin&#39;, &#39;http://www.domain1.com&#39;);        res.header(&#39;Access-Control-Allow-Credentials&#39;, &#39;true&#39;);    &#125;,    // 修改响应信息中的cookie域名    cookieDomainRewrite: &#39;www.domain1.com&#39;  // 可以为false，表示不修改&#125;));app.listen(3000);console.log(&#39;Proxy server is listen at port 3000...&#39;);</code></pre><p><strong>2）vue框架的跨域</strong></p><p>node + vue + webpack + webpack-dev-server搭建的项目，跨域请求接口，直接修改webpack.config.js配置。开发环境下，vue渲染服务和接口代理服务都是webpack-dev-server同一个，所以页面与代理接口之间不再跨域。</p><p>webpack.config.js部分配置：</p><pre><code class="text">module.exports = &#123;    entry: &#123;&#125;,    module: &#123;&#125;,    ...    devServer: &#123;        historyApiFallback: true,        proxy: [&#123;            context: &#39;/login&#39;,            target: &#39;http://www.domain2.com:8080&#39;,  // 代理跨域目标接口            changeOrigin: true,            secure: false,  // 当代理某些https服务报错时用            cookieDomainRewrite: &#39;www.domain1.com&#39;  // 可以为false，表示不修改        &#125;],        noInfo: true    &#125;&#125;</code></pre><h1 id="document-domain-iframe跨域"><a href="#document-domain-iframe跨域" class="headerlink" title="document.domain + iframe跨域"></a>document.domain + iframe跨域</h1><p>此方案仅限主域相同，子域不同的跨域应用场景。实现原理：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。</p><p>1）父窗口：(<span class="exturl" data-url="aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHA6Ly93d3cuZG9tYWluLmNvbS9hLmh0bWw=">http://www.domain.com/a.html</span>)</p><pre><code class="text">&lt;iframe id=&quot;iframe&quot; src=&quot;http://child.domain.com/b.html&quot;&gt;&lt;/iframe&gt;&lt;script&gt;    document.domain = &#39;domain.com&#39;;    var user = &#39;admin&#39;;&lt;/script&gt;</code></pre><p>1）子窗口：(<span class="exturl" data-url="aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHA6Ly9jaGlsZC5kb21haW4uY29tL2EuaHRtbA==">http://child.domain.com/a.html</span>)</p><pre><code class="text">&lt;script&gt;    document.domain = &#39;domain.com&#39;;    // 获取父窗口中变量    console.log(&#39;get js data from parent ---&gt; &#39; + window.parent.user);&lt;/script&gt;</code></pre><h1 id="location-hash-iframe跨域"><a href="#location-hash-iframe跨域" class="headerlink" title="location.hash + iframe跨域"></a>location.hash + iframe跨域</h1><p>实现原理： a欲与b跨域相互通信，通过中间页c来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。</p><p>具体实现：A域：a.html -&gt; B域：b.html -&gt; A域：c.html，a与b不同域只能通过hash值单向通信，b与c也不同域也只能单向通信，但c与a同域，所以c可通过parent.parent访问a页面所有对象。</p><p>1）a.html：(<span class="exturl" data-url="aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHA6Ly93d3cuZG9tYWluMS5jb20vYS5odG1s">http://www.domain1.com/a.html</span>)</p><pre><code class="text">&lt;iframe id=&quot;iframe&quot; src=&quot;http://www.domain2.com/b.html&quot; style=&quot;display:none;&quot;&gt;&lt;/iframe&gt;&lt;script&gt;    var iframe = document.getElementById(&#39;iframe&#39;);    // 向b.html传hash值    setTimeout(function() &#123;        iframe.src = iframe.src + &#39;#user=admin&#39;;    &#125;, 1000);        // 开放给同域c.html的回调方法    function onCallback(res) &#123;        alert(&#39;data from c.html ---&gt; &#39; + res);    &#125;&lt;/script&gt;</code></pre><p>2）b.html：(<span class="exturl" data-url="aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHA6Ly93d3cuZG9tYWluMi5jb20vYi5odG1s">http://www.domain2.com/b.html</span>)</p><pre><code class="text">&lt;iframe id=&quot;iframe&quot; src=&quot;http://www.domain1.com/c.html&quot; style=&quot;display:none;&quot;&gt;&lt;/iframe&gt;&lt;script&gt;    var iframe = document.getElementById(&#39;iframe&#39;);    // 监听a.html传来的hash值，再传给c.html    window.onhashchange = function () &#123;        iframe.src = iframe.src + location.hash;    &#125;;&lt;/script&gt;</code></pre><p>3）c.html：(<span class="exturl" data-url="aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHA6Ly93d3cuZG9tYWluMS5jb20vYy5odG1s">http://www.domain1.com/c.html</span>)</p><pre><code class="text">&lt;script&gt;    // 监听b.html传来的hash值    window.onhashchange = function () &#123;        // 再通过操作同域a.html的js回调，将结果传回        window.parent.parent.onCallback(&#39;hello: &#39; + location.hash.replace(&#39;#user=&#39;, &#39;&#39;));    &#125;;&lt;/script&gt;</code></pre><h1 id="window-name-iframe跨域"><a href="#window-name-iframe跨域" class="headerlink" title="window.name + iframe跨域"></a>window.name + iframe跨域</h1><p>window.name属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。</p><p>1）a.html：(<span class="exturl" data-url="aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHA6Ly93d3cuZG9tYWluMS5jb20vYS5odG1s">http://www.domain1.com/a.html</span>)</p><pre><code class="text">var proxy = function(url, callback) &#123;    var state = 0;    var iframe = document.createElement(&#39;iframe&#39;);    // 加载跨域页面    iframe.src = url;    // onload事件会触发2次，第1次加载跨域页，并留存数据于window.name    iframe.onload = function() &#123;        if (state === 1) &#123;            // 第2次onload(同域proxy页)成功后，读取同域window.name中数据            callback(iframe.contentWindow.name);            destoryFrame();        &#125; else if (state === 0) &#123;            // 第1次onload(跨域页)成功后，切换到同域代理页面            iframe.contentWindow.location = &#39;http://www.domain1.com/proxy.html&#39;;            state = 1;        &#125;    &#125;;    document.body.appendChild(iframe);    // 获取数据以后销毁这个iframe，释放内存；这也保证了安全（不被其他域frame js访问）    function destoryFrame() &#123;        iframe.contentWindow.document.write(&#39;&#39;);        iframe.contentWindow.close();        document.body.removeChild(iframe);    &#125;&#125;;// 请求跨域b页面数据proxy(&#39;http://www.domain2.com/b.html&#39;, function(data)&#123;    alert(data);&#125;);</code></pre><p>2）proxy.html：(<span class="exturl" data-url="aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHA6Ly93d3cuZG9tYWluMS5jb20vcHJveHkuaHRtbA==">http://www.domain1.com/proxy.html</span>)</p><p>中间代理页，与a.html同域，内容为空即可。</p><p>3）b.html：(<span class="exturl" data-url="aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHA6Ly93d3cuZG9tYWluMi5jb20vYi5odG1s">http://www.domain2.com/b.html</span>)</p><pre><code class="text">&lt;script&gt;    window.name = &#39;This is domain2 data!&#39;;&lt;/script&gt;</code></pre><p>通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</p><h1 id="postMessage跨域"><a href="#postMessage跨域" class="headerlink" title="postMessage跨域"></a>postMessage跨域</h1><p>postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：</p><ul><li>页面和其打开的新窗口的数据传递</li><li>多窗口之间消息传递</li><li>页面与嵌套的iframe消息传递</li><li>上面三个场景的跨域数据传递</li></ul><p>用法：postMessage(data,origin)方法接受两个参数：</p><ul><li><strong>data</strong>： html5规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用JSON.stringify()序列化。</li><li><strong>origin</strong>： 协议+主机+端口号，也可以设置为”*”，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为”&#x2F;“。</li></ul><p>1）a.html：(<span class="exturl" data-url="aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHA6Ly93d3cuZG9tYWluMS5jb20vYS5odG1s">http://www.domain1.com/a.html</span>)</p><pre><code class="text">&lt;iframe id=&quot;iframe&quot; src=&quot;http://www.domain2.com/b.html&quot; style=&quot;display:none;&quot;&gt;&lt;/iframe&gt;&lt;script&gt;           var iframe = document.getElementById(&#39;iframe&#39;);    iframe.onload = function() &#123;        var data = &#123;            name: &#39;aym&#39;        &#125;;        // 向domain2传送跨域数据        iframe.contentWindow.postMessage(JSON.stringify(data), &#39;http://www.domain2.com&#39;);    &#125;;    // 接受domain2返回数据    window.addEventListener(&#39;message&#39;, function(e) &#123;        alert(&#39;data from domain2 ---&gt; &#39; + e.data);    &#125;, false);&lt;/script&gt;</code></pre><p>2）b.html：(<span class="exturl" data-url="aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHA6Ly93d3cuZG9tYWluMi5jb20vYi5odG1s">http://www.domain2.com/b.html</span>)</p><pre><code class="text">&lt;script&gt;    // 接收domain1的数据    window.addEventListener(&#39;message&#39;, function(e) &#123;        alert(&#39;data from domain1 ---&gt; &#39; + e.data);        var data = JSON.parse(e.data);        if (data) &#123;            data.number = 16;            // 处理后再发回domain1            window.parent.postMessage(JSON.stringify(data), &#39;http://www.domain1.com&#39;);        &#125;    &#125;, false);&lt;/script&gt;</code></pre><h1 id="WebSocket协议跨域"><a href="#WebSocket协议跨域" class="headerlink" title="WebSocket协议跨域"></a>WebSocket协议跨域</h1><p>WebSocket protocol是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很好的实现。<br>原生WebSocket API使用起来不太方便，我们使用<span class="exturl" data-url="aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHA6Ly9Tb2NrZXQuaW8=">http://Socket.io</span>，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。</p><p>1）前端代码：</p><pre><code class="text">&lt;div&gt;user input：&lt;input type=&quot;text&quot;&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.bootcss.com/socket.io/2.2.0/socket.io.js&quot;&gt;&lt;/script&gt;&lt;script&gt;var socket = io(&#39;http://www.domain2.com:8080&#39;);// 连接成功处理socket.on(&#39;connect&#39;, function() &#123;    // 监听服务端消息    socket.on(&#39;message&#39;, function(msg) &#123;        console.log(&#39;data from server: ---&gt; &#39; + msg);     &#125;);    // 监听服务端关闭    socket.on(&#39;disconnect&#39;, function() &#123;         console.log(&#39;Server socket has closed.&#39;);     &#125;);&#125;);document.getElementsByTagName(&#39;input&#39;)[0].onblur = function() &#123;    socket.send(this.value);&#125;;&lt;/script&gt;</code></pre><p>2）Nodejs socket后台：</p><pre><code class="text">var http = require(&#39;http&#39;);var socket = require(&#39;socket.io&#39;);// 启http服务var server = http.createServer(function(req, res) &#123;    res.writeHead(200, &#123;        &#39;Content-type&#39;: &#39;text/html&#39;    &#125;);    res.end();&#125;);server.listen(&#39;8080&#39;);console.log(&#39;Server is running at port 8080...&#39;);// 监听socket连接socket.listen(server).on(&#39;connection&#39;, function(client) &#123;    // 接收信息    client.on(&#39;message&#39;, function(msg) &#123;        client.send(&#39;hello：&#39; + msg);        console.log(&#39;data from client: ---&gt; &#39; + msg);    &#125;);    // 断开处理    client.on(&#39;disconnect&#39;, function() &#123;        console.log(&#39;Client socket has closed.&#39;);     &#125;);&#125;);</code></pre><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><pre><code class="text">以上就是9种常见的跨域解决方案，jsonp（只支持get请求，支持老的IE浏览器）适合加载不同域名的js、css，img等静态资源；CORS（支持所有类型的HTTP请求，但浏览器IE10以下不支持）适合做ajax各种跨域请求；Nginx代理跨域和nodejs中间件跨域原理都相似，都是搭建一个服务器，直接在服务器端请求HTTP接口，这适合前后端分离的前端项目调后端接口。document.domain+iframe适合主域名相同，子域名不同的跨域请求。postMessage、websocket都是HTML5新特性，兼容性不是很好，只适用于主流浏览器和IE10+</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 跨域 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web综合问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React基础</title>
      <link href="/front-end/React%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80/"/>
      <url>/front-end/React%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="一：React-基础"><a href="#一：React-基础" class="headerlink" title="一：React 基础"></a>一：React 基础</h1><h2 id="1-jsx"><a href="#1-jsx" class="headerlink" title="1.jsx"></a>1.jsx</h2><h2 id="2-虚拟dom"><a href="#2-虚拟dom" class="headerlink" title="2.虚拟dom"></a>2.虚拟dom</h2><h1 id="二：组件化"><a href="#二：组件化" class="headerlink" title="二：组件化"></a>二：组件化</h1><h2 id="1-context"><a href="#1-context" class="headerlink" title="1.context"></a>1.context</h2><h2 id="2-ant-design"><a href="#2-ant-design" class="headerlink" title="2.ant-design"></a>2.ant-design</h2><h2 id="3-高阶组件"><a href="#3-高阶组件" class="headerlink" title="3.高阶组件"></a>3.高阶组件</h2><h1 id="三：react全家桶"><a href="#三：react全家桶" class="headerlink" title="三：react全家桶"></a>三：react全家桶</h1><h2 id="1-redux"><a href="#1-redux" class="headerlink" title="1.redux"></a>1.redux</h2><h2 id="2-react-router"><a href="#2-react-router" class="headerlink" title="2.react-router"></a>2.react-router</h2><h2 id="3-umi"><a href="#3-umi" class="headerlink" title="3.umi"></a>3.umi</h2><h2 id="4-dva"><a href="#4-dva" class="headerlink" title="4.dva"></a>4.dva</h2><h1 id="四：react源码"><a href="#四：react源码" class="headerlink" title="四：react源码"></a>四：react源码</h1><h2 id="1-虚拟dom构建"><a href="#1-虚拟dom构建" class="headerlink" title="1.虚拟dom构建"></a>1.虚拟dom构建</h2><h2 id="2-createElement"><a href="#2-createElement" class="headerlink" title="2.createElement"></a>2.createElement</h2><h2 id="3-Component"><a href="#3-Component" class="headerlink" title="3.Component"></a>3.Component</h2><h2 id="4-rander"><a href="#4-rander" class="headerlink" title="4.rander"></a>4.rander</h2><h1 id="五：react性能优化"><a href="#五：react性能优化" class="headerlink" title="五：react性能优化"></a>五：react性能优化</h1><h1 id="六：服务端渲染SSR"><a href="#六：服务端渲染SSR" class="headerlink" title="六：服务端渲染SSR"></a>六：服务端渲染SSR</h1><h2 id="1-next-js"><a href="#1-next-js" class="headerlink" title="1.next.js"></a>1.next.js</h2>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PM2</title>
      <link href="/front-end/PM2%20+%20linux/"/>
      <url>/front-end/PM2%20+%20linux/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是pm2"><a href="#什么是pm2" class="headerlink" title="什么是pm2"></a>什么是pm2</h1><p>pm2 是一个带有负载均衡功能的Node应用的进程管理器.<br>当你要把你的独立代码利用全部的服务器上的所有CPU，并保证进程永远都活着，0秒的重载， PM2是完美的。它非常适合IaaS结构，但不要把它用于PaaS方案（随后将开发Paas的解决方案）</p><h1 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h1><p>内建负载均衡（使用Node cluster 集群模块）<br>后台运行<br>0秒停机重载，我理解大概意思是维护升级的时候不需要停机.<br>具有Ubuntu和CentOS 的启动脚本<br>停止不稳定的进程（避免无限循环）<br>控制台检测<br>提供 HTTP API<br>远程控制和实时的接口API ( Nodejs 模块,允许和PM2进程管理器交互 )<br>测试过Nodejs v0.11 v0.10 v0.8版本，兼容CoffeeScript,基于Linux 和MacOS.</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>npm install -g pm2</p><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>pm2 start app.js -i 4 #后台运行pm2，启动4个app.js<br>                      # 也可以把’max’ 参数传递给 start<br>                      # 正确的进程数目依赖于Cpu的核心数目<br>pm2 start app.js –name my-api # 命名进程<br>pm2 list               # 显示所有进程状态<br>pm2 monit              # 监视所有进程<br>pm2 logs               # 显示所有进程日志<br>pm2 stop all           # 停止所有进程<br>pm2 restart all        # 重启所有进程<br>pm2 reload all         # 0秒停机重载进程 (用于 NETWORKED 进程)<br>pm2 stop 0             # 停止指定的进程<br>pm2 restart 0          # 重启指定的进程<br>pm2 startup            # 产生 init 脚本 保持进程活着<br>pm2 web                # 运行健壮的 computer API endpoint (<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo5NjE1Lw==">http://localhost:9615</span>)<br>pm2 delete 0           # 杀死指定的进程<br>pm2 delete all         # 杀死全部进程</p><h2 id="运行进程的不同方式："><a href="#运行进程的不同方式：" class="headerlink" title="运行进程的不同方式："></a>运行进程的不同方式：</h2><p>pm2 start app.js -i max  # 根据有效CPU数目启动最大进程数目<br>pm2 start app.js -i 3      # 启动3个进程<br>pm2 start app.js -x        #用fork模式启动 app.js 而不是使用 cluster<br>pm2 start app.js -x – -a 23   # 用fork模式启动 app.js 并且传递参数 (-a 23)<br>pm2 start app.js –name serverone  # 启动一个进程并把它命名为 serverone<br>pm2 stop serverone       # 停止 serverone 进程<br>pm2 start app.json        # 启动进程, 在 app.json里设置选项<br>pm2 start app.js -i max – -a 23        #在–之后给 app.js 传递参数<br>pm2 start app.js -i max -e err.log -o out.log  # 启动 并 生成一个配置文件</p><h2 id="你也可以执行用其他语言编写的app-fork-模式"><a href="#你也可以执行用其他语言编写的app-fork-模式" class="headerlink" title="你也可以执行用其他语言编写的app  ( fork 模式):"></a>你也可以执行用其他语言编写的app  ( fork 模式):</h2><p>pm2 start my-bash-script.sh    -x –interpreter bash<br>pm2 start my-python-script.py -x –interpreter python</p><p>0秒停机重载:<br>这项功能允许你重新载入代码而不用失去请求连接。<br>注意：<br>仅能用于web应用<br>运行于Node 0.11.x版本<br>运行于 cluster 模式（默认模式）<br>pm2 reload all<br>CoffeeScript:<br>pm2 start my_app.coffee  #这就是全部<br>PM2准备好为产品级服务了吗？<br>只需在你的服务器上测试<br>git clone <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1VuaXRlY2gvcG0yLmdpdA==">https://github.com/Unitech/pm2.git</span><br>cd pm2<br>npm install  # 或者 npm install –dev ，如果devDependencies 没有安装<br>npm test<br>pm2 list<br>列出由pm2管理的所有进程信息，还会显示一个进程会被启动多少次，因为没处理的异常。</p><p>pm2 monit<br>监视每个node进程的CPU和内存的使用情况。</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> PM2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PM2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript基础</title>
      <link href="/front-end/Typescript/"/>
      <url>/front-end/Typescript/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax、axios、fetch区别</title>
      <link href="/front-end/ajax%E3%80%81axios%E3%80%81fetch%E5%8C%BA%E5%88%AB/"/>
      <url>/front-end/ajax%E3%80%81axios%E3%80%81fetch%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="API-和用法："><a href="#API-和用法：" class="headerlink" title="API 和用法："></a>API 和用法：</h1><p>Ajax：Ajax（Asynchronous JavaScript and XML）是一种使用原生JavaScript编写的技术，通过XMLHttpRequest对象实现异步通信。使用Ajax需要手动编写相对复杂的代码来处理请求和响应。<br>Axios：Axios是一个基于Promise的HTTP客户端库，可以在浏览器和Node.js中使用。Axios提供了简单易用的API，可以更方便地发送异步请求，并且支持拦截器、取消请求等功能。<br>Fetch：Fetch是浏览器内置的基于Promise的API，用于发送网络请求。Fetch提供了更现代化的API，使用起来更简洁，但是对一些特殊情况的处理可能相对不够灵活。</p><h1 id="兼容性："><a href="#兼容性：" class="headerlink" title="兼容性："></a>兼容性：</h1><p>Ajax：Ajax可以在大多数现代浏览器中使用，包括较旧的IE版本。<br>Axios：Axios同样支持大多数现代浏览器，但不支持较旧的IE版本（如IE8及以下）。<br>Fetch：Fetch是现代浏览器的原生API，不支持较旧的IE版本（如IE11及以下）。</p><h1 id="功能特性："><a href="#功能特性：" class="headerlink" title="功能特性："></a>功能特性：</h1><p>Ajax：由于Ajax是原生JavaScript实现的，可以更自由地进行定制和扩展，例如处理文件上传、设置请求超时等。<br>Axios：Axios提供了许多方便的功能，如拦截器、自动转换请求和响应数据、取消请求、防止CSRF攻击等。<br>Fetch：Fetch具有基本的功能，但是在某些高级功能（如请求取消、超时控制等）方面相对不够完善，需要通过额外的代码来实现。</p><h1 id="错误处理："><a href="#错误处理：" class="headerlink" title="错误处理："></a>错误处理：</h1><p>Ajax：通过手动编写错误处理代码来处理请求过程中可能出现的错误。<br>Axios：Axios提供了统一的错误处理机制，可以通过拦截器全局处理请求和响应的错误。<br>Fetch：Fetch使用Promise进行错误处理，可以通过catch语句捕获和处理错误。</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 网络请求 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>babel</title>
      <link href="/front-end/babel/"/>
      <url>/front-end/babel/</url>
      
        <content type="html"><![CDATA[<h1 id="babel是什么"><a href="#babel是什么" class="headerlink" title="babel是什么"></a>babel是什么</h1><p>Babel 是一个流行的 JavaScript 编译工具，用于将新版本的 JavaScript 代码转换为向后兼容的旧版本 JavaScript 代码。</p><ol><li>插件（Plugins）和预设（Presets）：Babel 的核心功能是将新版本 JavaScript 转换成旧版本 JavaScript，这是通过使用插件和预设来实现的。插件是独立的功能模块，每个插件针对一种或多种特定的语法转换或转译任务。预设是插件的集合，提供了一组常用的插件配置，以便快速设置转译环境。</li></ol><p>例如，Babel 提供了一个 @babel&#x2F;preset-env 预设，该预设根据您指定的目标环境自动选择适当的插件，并根据需要进行转译。您可以根据项目的需要自定义配置并选择要使用的插件和预设。</p><ol start="2"><li>配置文件（.babelrc 或 babel.config.js）：Babel 使用配置文件来存储插件、预设和其他选项的配置信息。您可以在项目根目录下创建一个名为 .babelrc 的文件（JSON 格式），或者使用 babel.config.js 文件（JavaScript 模块格式）。配置文件中的内容包括指定要使用的插件和预设，以及其它选项，比如源码映射（source maps）和编译缓存等。</li></ol><p>通过配置文件，您可以灵活地配置 Babel 的转译规则，并可以为不同的项目和环境创建不同的配置文件。</p><ol start="3"><li>语法转换（Syntax Transformations）：Babel 提供了广泛的语法转换功能，使您能够使用最新的 JavaScript 语法并将其转换为向后兼容的旧版本 JavaScript 语法。这包括 ES6&#x2F;ES2015、ES7&#x2F;ES2016、ES8&#x2F;ES2017 等新标准的语法元素，例如箭头函数、解构赋值、模板字符串等。</li></ol><p>使用相应的插件，Babel 可以将这些新的语法转换为在较旧的 JavaScript 运行时上运行的代码。</p><ol start="4"><li>Polyfill：除了语法转换外，Babel 还提供了对一些新标准内置功能的支持，如 Promise、Generator、Set、Map 等。这些新功能在旧版本的 JavaScript 运行时中不可用，需要使用 Polyfill 来填充功能的缺失。</li></ol><p>Babel 的 @babel&#x2F;preset-env 预设可以根据您的配置目标自动添加必要的 Polyfill，以便代码在目标环境中正常运行。</p><ol start="5"><li>调试和开发工具：Babel 提供了一些辅助工具，帮助您进行调试和开发。其中之一是 Babel REPL（Read-Eval-Print Loop），它是一个在线工具，允许您输入和运行 ES6+ 代码，并查看转译之后的代码。</li></ol><p>另一个常用的工具是 Babel CLI（Command Line Interface），它允许您在命令行中使用 Babel，可以通过命令行快速进行转译和转换。</p><ol start="6"><li>结合构建工具：Babel 可以与许多构建工具进行集成，如 webpack、Rollup、Gulp 等。这些构建工具提供了对 Babel 的插件或加载器，使得在构建过程中自动运行 Babel 转译变得更加方便。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> babel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> babel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron</title>
      <link href="/front-end/electron/"/>
      <url>/front-end/electron/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Electron？"><a href="#什么是Electron？" class="headerlink" title="什么是Electron？"></a>什么是Electron？</h1><p>最最重要的⼀点， electron 实际上是⼀个套了 Chrome 的 nodeJS 程序</p><p>所以应该是从两个⽅⾯说开来<br>Chrome （⽆各种兼容性问题）<br>NodeJS （ NodeJS 能做的它也能做）</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gulp</title>
      <link href="/front-end/gulp/"/>
      <url>/front-end/gulp/</url>
      
        <content type="html"><![CDATA[<h1 id="gulp是什么"><a href="#gulp是什么" class="headerlink" title="gulp是什么"></a>gulp是什么</h1><ol><li><p>gulp 是前端开发过程中⼀种基于流的代码构建⼯具，是⾃动化项⽬的构建利器；它不仅能对⽹站资源进⾏优化，⽽且在开发过程中很多重复的任务能够使⽤正确的⼯具⾃动完成</p></li><li><p>Gulp的核⼼概念：流</p></li><li><p>流，简单来说就是建⽴在⾯向对象基础上的⼀种抽象的处理数据的⼯具。在流中，定义了⼀些处理数据的基本操作，如读取数据，写⼊数据等，程序员是对流进⾏所有操作的，⽽不⽤关⼼流的另⼀头数据的真正流向</p></li><li><p>gulp正是通过流和代码优于配置的策略来尽量简化任务编写的⼯作</p></li><li><p>Gulp的特点：</p></li></ol><ul><li>易于使⽤：通过代码优于配置的策略，gulp 让简单的任务简单，复杂的任务可管理</li><li>构建快速 利⽤ Node.js 流的威⼒，你可以快速构建项⽬并减少频繁的 IO 操作</li><li>易于学习 通过最少的 API ，掌握 gulp 毫不费⼒，构建⼯作尽在掌握：如同⼀系列流管道</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> gulp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css面试</title>
      <link href="/front-end/html+css%E9%9D%A2%E8%AF%95/"/>
      <url>/front-end/html+css%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h1><pre><code class="text">BFC 即 Block Formatting Contexts (块级格式化上下文)，它属于普通流，即：元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。只要元素满足下面任一条件即可触发 BFC 特性body 根元素浮动元素：float 除 none 以外的值绝对定位元素：position (absolute、fixed)display 为 inline-block、table-cells、flexoverflow 除了 visible 以外的值 (hidden、auto、scroll)</code></pre><h1 id="多种方式实现同心圆"><a href="#多种方式实现同心圆" class="headerlink" title="多种方式实现同心圆"></a>多种方式实现同心圆</h1><pre><code class="text">1.  2个view 相对定位 + 绝对定位2.  2个view  flex布局3.  1个view  使用伪元素</code></pre><h1 id="介绍一下-CSS-的盒子模型？"><a href="#介绍一下-CSS-的盒子模型？" class="headerlink" title="介绍一下 CSS 的盒子模型？"></a>介绍一下 CSS 的盒子模型？</h1><pre><code class="text">有两种， IE 盒子模型、W3C 盒子模型；盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；区 别： IE 的 content 部分把 border 和 padding 计算了进去;</code></pre><h1 id="css-选择器优先级？"><a href="#css-选择器优先级？" class="headerlink" title="css 选择器优先级？"></a>css 选择器优先级？</h1><pre><code class="text">!important &gt; 行内样式（比重1000）&gt; ID 选择器（比重100） &gt; 类选择器（比重10） &gt; 标签（比重1） &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性</code></pre><h1 id="垂直居中几种方式？"><a href="#垂直居中几种方式？" class="headerlink" title="垂直居中几种方式？"></a>垂直居中几种方式？</h1><pre><code class="text">1.单行文本: line-height = height2.图片: vertical-align: middle;3.absolute 定位: top: 50%;left: 50%;transform: translate(-50%, -50%);4.flex:display:flex;justify-content: center;  align-items: center</code></pre><h1 id="简明说一下-CSS-link-与-import-的区别和用法？"><a href="#简明说一下-CSS-link-与-import-的区别和用法？" class="headerlink" title="简明说一下 CSS link 与 @import 的区别和用法？"></a>简明说一下 CSS link 与 @import 的区别和用法？</h1><pre><code class="text">link 是 XHTML 标签，除了加载CSS外，还可以定义 RSS 等其他事务；@import 属于 CSS 范畴，只能加载 CSS。link 引用 CSS 时，在页面载入时同时加载；@import 需要页面网页完全载入以后加载。link 是 XHTML 标签，无兼容问题；@import 是在 CSS2.1 提出的，低版本的浏览器不支持。link 支持使用 Javascript 控制 DOM 去改变样式；而@import不支持。</code></pre><h1 id="rgba和opacity的透明效果有什么不同？"><a href="#rgba和opacity的透明效果有什么不同？" class="headerlink" title="rgba和opacity的透明效果有什么不同？"></a>rgba和opacity的透明效果有什么不同？</h1><pre><code class="text">opacity 会继承父元素的 opacity 属性，而 RGBA 设置的元素的后代元素不会继承不透明属性。</code></pre><h1 id="display-none和visibility-hidden的区别？"><a href="#display-none和visibility-hidden的区别？" class="headerlink" title="display:none和visibility:hidden的区别？"></a>display:none和visibility:hidden的区别？</h1><pre><code class="text">display:none 隐藏对应的元素，在文档布局中不再给它分配空间，它各边的元素会合拢，就当他从来不存在。visibility:hidden 隐藏对应的元素，但是在文档布局中仍保留原来的空间。</code></pre><h1 id="position的值，-relative和absolute分别是相对于谁进行定位的？"><a href="#position的值，-relative和absolute分别是相对于谁进行定位的？" class="headerlink" title="position的值， relative和absolute分别是相对于谁进行定位的？"></a>position的值， relative和absolute分别是相对于谁进行定位的？</h1><pre><code class="text">relative:相对定位，相对于自己本身在正常文档流中的位置进行定位。absolute:生成绝对定位，相对于最近一级定位不为static的父元素进行定位。fixed: （老版本IE不支持）生成绝对定位，相对于浏览器窗口或者frame进行定位。static:默认值，没有定位，元素出现在正常的文档流中。sticky:生成粘性定位的元素，容器的位置根据正常文档流计算得出。</code></pre><h1 id="画一条0-5px的直线？"><a href="#画一条0-5px的直线？" class="headerlink" title="画一条0.5px的直线？"></a>画一条0.5px的直线？</h1><pre><code class="text">考查的是css3的transformheight: 1px;transform: scale(0.5);</code></pre><h1 id="calc-support-media各自的含义及用法？"><a href="#calc-support-media各自的含义及用法？" class="headerlink" title="calc, support, media各自的含义及用法？"></a>calc, support, media各自的含义及用法？</h1><pre><code class="text">@support 主要是用于检测浏览器是否支持CSS的某个属性，其实就是条件判断，如果支持某个属性，你可以写一套样式，如果不支持某个属性，你也可以提供另外一套样式作为替补。calc() 函数用于动态计算长度值。 calc()函数支持 “+”, “-”, “*”, “/” 运算；@media 查询，你可以针对不同的媒体类型定义不同的样式。</code></pre><h1 id="1rem、1em、1vh、1px各自代表的含义？"><a href="#1rem、1em、1vh、1px各自代表的含义？" class="headerlink" title="1rem、1em、1vh、1px各自代表的含义？"></a>1rem、1em、1vh、1px各自代表的含义？</h1><pre><code class="text">1.remrem是全部的长度都相对于根元素元素。通常做法是给html元素设置一个字体大小，然后其他元素的长度单位就为rem。    2. em子元素字体大小的em是相对于父元素字体大小元素的width/height/padding/margin用em的话是相对于该元素的font-sizevw/vh全称是 Viewport Width 和 Viewport Height，视窗的宽度和高度，相当于 屏幕宽度和高度的 1%，不过，处理宽度的时候%单位更合适，处理高度的 话 vh 单位更好。    3. pxpx像素（Pixel）。相对长度单位。像素px是相对于显示器屏幕分辨率而言的。一般电脑的分辨率有&#123;19201024&#125;等不同的分辨率19201024 前者是屏幕宽度总共有1920个像素,后者则是高度为1024个像素</code></pre><h1 id="css画一个三角形？"><a href="#css画一个三角形？" class="headerlink" title="css画一个三角形？"></a>css画一个三角形？</h1><pre><code class="css">.a &#123;    width: 0;    height: 0;    border-width: 100px;    border-style: solid;    border-color: transparent #0099CC transparent transparent;    transform: rotate(90deg); /*顺时针旋转90°*/&#125;&lt;div class=&quot;a&quot;&gt;&lt;/div&gt;</code></pre><h1 id="HTML5里面都新增了那些新特性？"><a href="#HTML5里面都新增了那些新特性？" class="headerlink" title="HTML5里面都新增了那些新特性？"></a>HTML5里面都新增了那些新特性？</h1><pre><code class="text">1. HTML5新的语义标签article 独立的内容。aside 侧边栏。header 头部。nav 导航。section 文档中的节。footer 页脚。2. 画布(Canvas) API3. 地理(Geolocation) API4. 本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；5. sessionStorage 的数据在浏览器关闭后自动删除6. 新的技术webworker, websocket, Geolocation7. 拖拽释放(Drag and drop) API8. 音频、视频API(audio,video)9. 表单控件，calendar、date、time、email、url、searc</code></pre><h1 id="CSS3-里面都新增了那些新特性？"><a href="#CSS3-里面都新增了那些新特性？" class="headerlink" title="CSS3 里面都新增了那些新特性？"></a>CSS3 里面都新增了那些新特性？</h1><pre><code class="text">1. 发展历史：CSS于1996年发布，而CSS3是CSS的第三个主要版本，于2001年开始提出，但其功能逐渐得到实现并得以广泛支持直到近年来。2. 模块化：CSS3采用了模块化的方式来组织样式属性。每个模块专注于特定的功能，例如布局、动画、字体等。这使得开发人员可以根据需要选择特定的模块进行应用，而不需要引入整个CSS3规范。3. 新增功能：CSS3引入了许多新特性和功能，如圆角边框、阴影、渐变、过渡、动画、媒体查询、弹性盒子布局、网格布局等。这些功能扩展了网页设计师的能力，使其能够创建更丰富、更交互性的用户界面。4. 浏览器兼容性：传统的CSS规范在不同浏览器上的兼容性并不一致，需要使用特定的浏览器前缀进行适配。然而，CSS3的很多功能已经得到了主流浏览器的广泛支持，因此在一定程度上减少了兼容性的问题。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp框架原理</title>
      <link href="/front-end/uniapp%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86/"/>
      <url>/front-end/uniapp%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<pre><code class="text">UniApp 是一种基于 Vue.js 的跨平台应用开发框架，它可以使用统一的代码编写方式，同时在多个平台上进行应用程序的开发，包括iOS、Android、Web等。下面是 UniApp 的基本原理：1. 基于 Vue.js：UniApp 使用了 Vue.js 作为其基础框架，所以开发者可以利用 Vue.js 的语法和特性进行开发。2. 编译打包：开发者编写的 UniApp 代码会经过编译打包的过程，将代码转换为不同平台的运行代码。UniApp 提供了自动化的编译打包工具，根据配置信息和目标平台生成相应的应用程序代码。3. 平台适配层：在编译打包过程中，UniApp 会根据目标平台生成相应的平台适配层。这些适配层负责处理不同平台的差异，将统一的代码转化为特定平台的代码。4. 原生渲染引擎：对于 iOS 和 Android 平台，UniApp 会使用各自的原生渲染引擎来展示界面。例如，在 iOS 平台上使用的是 WebView + JavaScriptCore，而在 Android 平台上使用的是 WebView + V8。5. Web 平台渲染：对于 Web 平台，UniApp 会使用浏览器的渲染引擎来展示界面，将 Vue.js 编译后的代码直接在浏览器中运行。6. API 封装：UniApp 提供了一套统一的 API，包括网络请求、文件操作、设备信息等功能。这些 API 会根据不同平台进行封装和适配，使得开发者可以使用相同的代码调用不同平台的功能。总体来说，UniApp 的原理就是通过 Vue.js 作为基础框架，结合编译打包工具和平台适配层，将统一的代码转化为不同平台上的运行代码，并在不同平台上使用相应的渲染引擎展示界面，最终实现跨平台应用的开发和运行。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs基础</title>
      <link href="/front-end/nodejs/"/>
      <url>/front-end/nodejs/</url>
      
        <content type="html"><![CDATA[<h1 id="nodejs特点："><a href="#nodejs特点：" class="headerlink" title="nodejs特点："></a>nodejs特点：</h1><p>1、它是⼀个 Javascript 运⾏环境<br>2、依赖于 Chrome V8 引擎进⾏代码解释<br>3、事件驱动<br>4、⾮阻塞 I&#x2F;O<br>5、单进程，单线程</p><h1 id="nodejs优点："><a href="#nodejs优点：" class="headerlink" title="nodejs优点："></a>nodejs优点：</h1><p>⾼并发（最重要的优点）</p><h1 id="nodejs缺点："><a href="#nodejs缺点：" class="headerlink" title="nodejs缺点："></a>nodejs缺点：</h1><p>1、只⽀持单核 CPU ，不能充分利⽤ CPU<br>2、可靠性低，⼀旦代码某个环节崩溃，整个系统都崩溃</p><h2 id="性能瓶颈优化"><a href="#性能瓶颈优化" class="headerlink" title="性能瓶颈优化"></a>性能瓶颈优化</h2><ol><li>代码优化：对 Node.js 代码进行性能分析和优化，找出潜在的性能瓶颈并加以改进。可以采用以下策略：</li></ol><ul><li>使用异步操作：Node.js 的异步非阻塞模型是其高性能的基础。确保尽可能使用异步操作，减少阻塞和等待时间。</li><li>避免同步调用：避免过多的同步调用，因为它们会导致阻塞，并阻止其他请求的处理。</li><li>减少文件操作：文件操作通常比较耗时。尽量减少文件的读写次数，可以考虑使用缓存或者内存数据库来提高性能。</li><li>注意内存管理：不正确的内存管理可能导致内存泄漏和频繁的垃圾回收。注意及时释放不再使用的资源，避免内存问题。</li></ul><ol start="2"><li>并发处理：Node.js 对并发具有天然的优势，可以通过以下方式提高并发处理性能：</li></ol><ul><li>使用集群和负载均衡：通过使用多个 Node.js 实例构建集群，并使用负载均衡器将请求分发到不同的实例上，可以提高系统的并发处理能力。</li><li>使用线程池：Node.js 中的部分任务可以使用线程池进行处理，以释放事件循环线程，提高并发性能。</li></ul><ol start="3"><li><p>缓存数据：对于一些计算结果或者频繁读取的数据，可以采用缓存策略，将结果缓存起来，下次需要时直接从缓存中获取，避免重复计算或者频繁的数据库操作。</p></li><li><p>使用适当的第三方库：选择适当的第三方库和模块，可以优化代码的性能。例如，选择高性能的数据库驱动程序、HTTP 请求库等。</p></li><li><p>使用流式处理：对于大量数据的处理，使用流式处理方式可以减少内存消耗和提高处理效率。</p></li><li><p>监控和调优：对 Node.js 应用程序进行持续监控和性能调优，使用工具分析应用程序的运行情况，找出性能瓶颈，及时进行优化。</p></li><li><p>资源优化：合理配置服务器资源，包括 CPU、内存、网络等，以满足应用程序的需求。</p></li></ol><h1 id="一：nodejs-基础"><a href="#一：nodejs-基础" class="headerlink" title="一：nodejs 基础"></a>一：nodejs 基础</h1><h2 id="1-异步"><a href="#1-异步" class="headerlink" title="1.异步"></a>1.异步</h2><h2 id="2-io"><a href="#2-io" class="headerlink" title="2.io"></a>2.io</h2><h2 id="3-fs"><a href="#3-fs" class="headerlink" title="3.fs"></a>3.fs</h2><h1 id="二：nodeweb开发"><a href="#二：nodeweb开发" class="headerlink" title="二：nodeweb开发"></a>二：nodeweb开发</h1><h2 id="1-koa2"><a href="#1-koa2" class="headerlink" title="1.koa2"></a>1.koa2</h2><h2 id="2-router"><a href="#2-router" class="headerlink" title="2.router"></a>2.router</h2><h2 id="3-eggjs"><a href="#3-eggjs" class="headerlink" title="3.eggjs"></a>3.eggjs</h2><h1 id="三：鉴权"><a href="#三：鉴权" class="headerlink" title="三：鉴权"></a>三：鉴权</h1><h2 id="1-cookie"><a href="#1-cookie" class="headerlink" title="1.cookie"></a>1.cookie</h2><h2 id="2-jwt"><a href="#2-jwt" class="headerlink" title="2.jwt"></a>2.jwt</h2><h2 id="3-oauth"><a href="#3-oauth" class="headerlink" title="3.oauth"></a>3.oauth</h2><h1 id="四：数据库"><a href="#四：数据库" class="headerlink" title="四：数据库"></a>四：数据库</h1><h2 id="1-mysql"><a href="#1-mysql" class="headerlink" title="1.mysql"></a>1.mysql</h2><h2 id="2-redis"><a href="#2-redis" class="headerlink" title="2.redis"></a>2.redis</h2><h2 id="3-mongodb"><a href="#3-mongodb" class="headerlink" title="3.mongodb"></a>3.mongodb</h2><h1 id="五：中间件"><a href="#五：中间件" class="headerlink" title="五：中间件"></a>五：中间件</h1><h1 id="六：部署发布"><a href="#六：部署发布" class="headerlink" title="六：部署发布"></a>六：部署发布</h1><h2 id="1-PM2"><a href="#1-PM2" class="headerlink" title="1.PM2"></a>1.PM2</h2><h2 id="2-nginx"><a href="#2-nginx" class="headerlink" title="2.nginx"></a>2.nginx</h2><h2 id="3-docker"><a href="#3-docker" class="headerlink" title="3.docker"></a>3.docker</h2>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp编译到小程序</title>
      <link href="/front-end/uniapp%E7%BC%96%E8%AF%91%E5%88%B0%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>/front-end/uniapp%E7%BC%96%E8%AF%91%E5%88%B0%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<pre><code class="text">UniApp 支持将应用代码编译成小程序，包括微信小程序、支付宝小程序、百度小程序等。下面是 UniApp 编译到小程序的基本原理：1. 配置文件：在 UniApp 项目中，需要提供一个特定的配置文件 manifest.json，用于描述小程序的基本信息和配置。配置文件包括小程序的名称、图标、页面路径等。2. 编译过程：在使用 UniApp 提供的编译工具时，UniApp 会根据项目中的配置文件以及特定的编译规则，将项目代码转化为小程序可识别的代码。编译过程中，UniApp 将 Vue.js 的模板语法转换为小程序的 WXML，将样式转换为 WXSS，将逻辑代码转换为小程序的 JavaScript 代码。3. 平台适配层：与其他平台类似，UniApp 在编译过程中也会生成对应小程序平台的适配层代码，处理小程序平台的特定差异。4. 小程序框架：UniApp 编译后的代码会使用相应小程序框架进行运行。比如，在编译为微信小程序时，会调用微信小程序的框架进行渲染和交互，而编译为支付宝小程序时，则会调用支付宝小程序的框架。5. API 适配：UniApp 会对小程序平台的 API 进行封装适配，使得开发者可以使用相同的代码调用不同小程序平台的功能。UniApp 提供了一套统一的 API，封装了诸如网络请求、文件操作、设备信息等功能。总结来说，UniApp 编译到小程序的过程包括通过编译工具将项目代码转化为小程序可识别的代码，并生成小程序平台的适配层和调用相应的小程序框架进行渲染和交互。UniApp 还提供了一套统一的 API，使得开发者可以在不同小程序平台上使用相同的代码调用相应的功能。这样，开发者可以使用 UniApp 来开发一次代码，即可在多个小程序平台上进行发布和运行。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="/front-end/webpack/"/>
      <url>/front-end/webpack/</url>
      
        <content type="html"><![CDATA[<h1 id="对Webpack的理解"><a href="#对Webpack的理解" class="headerlink" title="对Webpack的理解"></a>对Webpack的理解</h1><p>Webpack 的主要作用是进行模块打包、编译兼容和能力扩展。通过分析模块的依赖关系，Webpack 可以将各个模块打包成一个或多个 bundle。它使用一条生产线的方式，通过一系列处理流程（loader）将源文件转换成输出结果，每个处理流程都有单一的职责，并存在依赖关系。插件则可以在特定的时机对生产线上的资源进行处理，监听事件来改变整个生产线的运作。Webpack 可以实现模块化打包、编译兼容以及提供各种能力扩展，例如按需加载、代码压缩等功能，从而提高开发效率、自动化程度和打包输出质量。</p><h1 id="webpack和vite的区别"><a href="#webpack和vite的区别" class="headerlink" title="webpack和vite的区别"></a>webpack和vite的区别</h1><p>工具本身定位不同<br>webpack是底层的东西，vite则是更上层的工具。webpack是配置化，灵活度极高的工具，vite是开箱即用，使用更简单的工具<br>原理不同<br>webpack是bundle，自己实现了一套模块导入导出机制。vite是利用浏览器的esm能力，是bundless。<br>优缺点<br>vite开箱即用，更加简单，基于浏览器esm，使得hmr更加优秀，达到极速的效果；webpack更加灵活，api以及插件生态更加丰富。<br>webpack先打包，再启动服务器，请求服务器时直接给予打包后的结果；vite直接启动服务器，请求哪个模块再对哪个模块进行实时编译。</p><h1 id="Webpack的打包过程-x2F-打包原理-x2F-构建流程"><a href="#Webpack的打包过程-x2F-打包原理-x2F-构建流程" class="headerlink" title="Webpack的打包过程&#x2F;打包原理&#x2F;构建流程"></a>Webpack的打包过程&#x2F;打包原理&#x2F;构建流程</h1><pre><code class="text">初始化：启动构建，读取与合并配置参数，加载plugin,实例化Compiler编译：从Entry出发，针对每个Module串行调用对应的Loader去翻译文件中的内容，再找到该Module依赖的Module，递归的进行编译处理输出：将编译后的Module组合成Chunk,将Chunk转换成文件，输出到文件系统中细节：Webpack CLI 通过 yargs模块解析 CLI 参数，并转化为配置对象option（单入口：Object，多入口：Array），调用 webpack(option) 创建 compiler 对象。如果有 option.plugin，则遍历调用plugin.apply()来注册 plugin，判断是否开启了 watch，如果开启则调用 compiler.watch，否则调用 compiler.run，开始构建。创建 Compilation 对象来收集全部资源和信息，然后触发 make 钩子。make阶段从入口开始递归所有依赖，每次遍历时调用对应Loader翻译文件中内容，然后生成AST，遍历AST找到下个依赖继续递归，根据入口和模块之间关系组装chunk，输出到dist中的一个文件内。在以上过程中，webpack会在特定的时间点（使用tapable模块）广播特定的事件，插件监听事件并执行相应的逻辑，并且插件可以调用webpack提供的api改变webpack的运行结果</code></pre><h1 id="loader的作用"><a href="#loader的作用" class="headerlink" title="loader的作用"></a>loader的作用</h1><pre><code class="text">webpack中的loader是一个函数，主要为了实现源码的转换，所以loader函数会以源码作为参数，比如，将ES6转换为ES5，将less转换为css，然后再将css转换为js，以便能嵌入到html文件中。默认情况下，webpack只支持对js和json文件进行打包，但是像css、html、png等其他类型的文件，webpack则无能为力。因此，就需要配置相应的loader进行文件内容的解析转换。</code></pre><h1 id="有哪些常见的Loader？他们是解决什么问题的？"><a href="#有哪些常见的Loader？他们是解决什么问题的？" class="headerlink" title="有哪些常见的Loader？他们是解决什么问题的？"></a>有哪些常见的Loader？他们是解决什么问题的？</h1><p>image-loader：加载并且压缩图片文件。<br>less-loader：加载并编译 LESS 文件。<br>sass-loader：加载并编译 SASS&#x2F;SCSS 文件。<br>css-loader：加载 CSS，支持模块化、压缩、文件导入等特性，使用css-loader必须要配合使用style-loader。<br>style-loader：用于将 CSS 编译完成的样式，挂载到页面的 style 标签上。需要注意 loader 执行顺序，style-loader 要放在第一位，loader 都是从后往前执行。<br>babel-loader：把 ES6 转换成 ES5<br>postcss-loader：扩展 CSS 语法，使用下一代 CSS，可以配合 autoprefixer 插件自动补齐 CSS3 前缀。<br>eslint-loader：通过 ESLint 检查 JavaScript 代码。<br>vue-loader：加载并编译 Vue 组件。<br>file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件 (处理图片和字体)<br>url-loader：与 file-loader 类似，区别是用户可以设置一个阈值，大于阈值会交给 file-loader 处理，小于阈值时返回文件 base64 形式编码 (处理图片和字体)。<br>source-map-loader：加载额外的 Source Map 文件，以方便断点调试。</p><h1 id="plugin的作用"><a href="#plugin的作用" class="headerlink" title="plugin的作用"></a>plugin的作用</h1><pre><code class="text">plugin是一个类，类中有一个apply()方法，主要用于Plugin的安装，可以在其中监听一些来自编译器发出的事件，在合适的时机做一些事情。webpack中的plugin赋予其各种灵活的功能，例如打包优化、资源管理、环境变量注入等，它们会运行在webpack的不同阶段（钩子 / 生命周期），贯穿了webpack整个编译周期。目的在于「解决 loader 无法实现的其他事」。</code></pre><h1 id="有哪些常见的Plugin？他们是解决什么问题的？"><a href="#有哪些常见的Plugin？他们是解决什么问题的？" class="headerlink" title="有哪些常见的Plugin？他们是解决什么问题的？"></a>有哪些常见的Plugin？他们是解决什么问题的？</h1><pre><code class="text">html-webpack-plugin：可以复制一个有结构的html文件，并自动引入打包输出的所有资源（JS/CSS）clean-webpack-plugin：重新打包自动清空 dist 目录mini-css-extract-plugin：提取 js 中的 css 成单独文件optimize-css-assets-webpack-plugin：压缩cssuglifyjs-webpack-plugin：压缩jscommons-chunk-plugin：提取公共代码define-plugin：定义环境变量</code></pre><h1 id="Webpack中Loader和Plugin的区别"><a href="#Webpack中Loader和Plugin的区别" class="headerlink" title="Webpack中Loader和Plugin的区别"></a>Webpack中Loader和Plugin的区别</h1><pre><code class="text">运行时机1.loader运行在编译阶段2.plugins 在整个周期都起作用使用方式Loader:1.下载 2.使用Plugin:1.下载 2.引用 3.使用loader是文件加载器，能够加载资源文件，并对这些文件进行一些处理，诸如编译、压缩等，最终一起打包到指定的文件中；plugin赋予了webpack各种灵活的功能，例如打包优化、资源管理、环境变量注入等，目的是解决 loader无法实现的其他事。在运行时机上，loader 运行在打包文件之前；plugin则是在整个编译周期都起作用。在配置上，loader在module.rules中配置，作为模块的解析规则，类型为数组。每一项都是一个 Object，内部包含了 test(类型文件)、loader、options (参数)等属性；plugin在 plugins中单独配置，类型为数组，每一项是一个 plugin 的实例，参数都通过构造函数传入。</code></pre><h1 id="如何解决循环依赖问题"><a href="#如何解决循环依赖问题" class="headerlink" title="如何解决循环依赖问题"></a>如何解决循环依赖问题</h1><p>Webpack 中将 require 替换为 webpack_require，会根据 moduleId 到 installedModules 找是否加载过，加载过则直接返回之前的 export，不会重复加载。</p><h1 id="plugin-生命周期"><a href="#plugin-生命周期" class="headerlink" title="plugin 生命周期"></a>plugin 生命周期</h1><p>在 Webpack 中，插件的生命周期可以分为以下几个阶段：</p><p>apply：该阶段是插件被安装时的初始化阶段，通常用于获取 Webpack 的 Compiler 对象以及进行一些初始化配置。<br>environment：该阶段是在初始化阶段后，确定了 Webpack 的环境变量后执行的，通常用于读取和修改环境相关的配置。<br>afterEnvironment：该阶段在 environment 阶段之后执行，用于处理和修改环境相关配置的最后机会。<br>afterResolvers：该阶段在解析器完成设置之后执行，可以对解析器进行修改和扩展。<br>entryOption：该阶段用于检索和修改入口文件列表。<br>afterPlugins：该阶段在插件注册完成后执行，通常用于处理和修改插件相关的配置。<br>afterCompile：该阶段在编译完成之后执行，可以访问编译生成的模块和依赖信息。<br>emit：该阶段在输出阶段之前执行，用于对最终的资源文件进行处理和优化。<br>done：该阶段在打包完成后执行，可以执行一些额外的任务。<br>要编写一个自定义插件（Plugin），可以按照以下步骤进行：</p><p>创建一个 JavaScript 文件，并导出一个类或一个函数作为插件的实现。插件类或函数需要具备 apply 方法。<br>在 apply 方法中，通过接收一个 compiler 参数来获取 Webpack 的 Compiler 对象，并通过调用 Compiler 提供的钩子函数来挂载插件的任务。<br>在合适的生命周期钩子函数中，编写需要执行的任务逻辑，可以是文件处理、资源优化、代码注入等操作。<br>在插件的配置中使用 new 关键字创建插件的实例，然后将它添加到 Webpack 的配置文件中的 plugins 数组中。</p><h1 id="webpack的热更新原理"><a href="#webpack的热更新原理" class="headerlink" title="webpack的热更新原理"></a>webpack的热更新原理</h1><pre><code class="text">热更新的核心就是客户端从服务端拉去更新后的文件，准确的说是 chunk diff (chunk 需要更新的部分)，实际上webpack-dev-server与浏览器之间维护了一个websocket，当本地资源发生变化时，webpack-dev-server会向浏览器推送更新，并带上构建时的hash，让客户端与上一次资源进行对比。客户端对比出差异后会向webpack-dev-server发起 Ajax 请求来获取更改内容(文件列表、hash)，这样客户端就可以再借助这些信息继续向webpack-dev-server发起 jsonp 请求获取该chunk的增量更新。后续的部分(拿到增量更新之后如何处理？哪些状态该保留？哪些又需要更新？)由HotModulePlugin 来完成，提供了相关 API 以供开发者针对自身场景进行处理，像react-hot-loader和vue-loader都是借助这些 API 实现热更新。详细：1、在 webpack 的 watch 模式下，文件系统中某一个文件发生修改，webpack 监听到文件变化，根据配置文件对模块重新编译打包，并将打包后的代码通过简单的 JavaScript 对象保存在内存中。2、webpack-dev-server 和 webpack 之间的接口交互，而在这一步，主要是 dev-server 的中间件webpack-dev-middleware 和 webpack 之间的交互，webpack-dev-middleware 调用 webpack 暴露的 API对代码变化进行监控，并且告诉 webpack，将代码打包到内存中。3、webpack-dev-server 对文件变化的一个监控，这一步不同于第一步，并不是监控代码变化重新打包。当我们在配置文件中配置了devServer.watchContentBase 为 true 的时候，Server 会监听这些配置文件夹中静态文件的变化，变化后会通知浏览器端对应用进行 live reload。注意，这儿是浏览器刷新，和 HMR 是两个概念4、webpack-dev-server 代码的工作，该步骤主要是通过 sockjs（webpack-dev-server 的依赖）在浏览器端和服务端之间建立一个 websocket 长连接，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，同时也包括第三步中 Server 监听静态文件变化的信息。浏览器端根据这些 socket 消息进行不同的操作。当然服务端传递的最主要信息还是新模块的 hash 值，后面的步骤根据这一 hash 值来进行模块热替换。webpack-dev-server/client 端并不能够请求更新的代码，也不会执行热更模块操作，而把这些工作又交回给了 webpack，webpack/hot/dev-server 的工作就是根据 webpack-dev-server/client 传给它的信息以及 dev-server 的配置决定是刷新浏览器呢还是进行模块热更新。当然如果仅仅是刷新浏览器，也就没有后面那些步骤了。HotModuleReplacement.runtime 是客户端 HMR 的中枢，它接收到上一步传递给他的新模块的 hash 值，它通过 JsonpMainTemplate.runtime 向 server 端发送 Ajax 请求，服务端返回一个 json，该 json 包含了所有要更新的模块的 hash 值，获取到更新列表后，该模块再次通过 jsonp 请求，获取到最新的模块代码。5、决定 HMR 成功与否的关键步骤，在该步骤中，HotModulePlugin 将会对新旧模块进行对比，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引用。最后一步，当 HMR 失败后，回退到 live reload 操作，也就是进行浏览器刷新来获取最新打包代码。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序</title>
      <link href="/front-end/%E5%BE%AE%E4%BF%A1%E2%BC%A9%E7%A8%8B%E5%BA%8F/"/>
      <url>/front-end/%E5%BE%AE%E4%BF%A1%E2%BC%A9%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="微信⼩程序有⼏个⽂件"><a href="#微信⼩程序有⼏个⽂件" class="headerlink" title="微信⼩程序有⼏个⽂件"></a>微信⼩程序有⼏个⽂件</h1><ol><li>WXSS (WeiXin Style Sheets) 是⼀套样式语⾔，⽤于描述 WXML 的组件样式， js逻辑处理，⽹络请求 json ⼩程序设置，如⻚⾯注册，⻚⾯标题及 tabBar 。</li><li>app.json 必须要有这个⽂件，如果没有这个⽂件，项⽬⽆法运⾏，因为微信框架把这个作为配置⽂件⼊⼝，整个⼩程序的全局配置。包括⻚⾯注册，⽹络设置，以及⼩程序的window 背景⾊，配置导航条样式，配置默认标题。</li><li>app.js 必须要有这个⽂件，没有也是会报错！但是这个⽂件创建⼀下就⾏ 什么都不需要写以后我们可以在这个⽂件中监听并处理⼩程序的⽣命周期函数、声明全局变量。</li><li>app.wxss 配置全局 css</li></ol><h1 id="微信⼩程序怎样跟事件传值"><a href="#微信⼩程序怎样跟事件传值" class="headerlink" title="微信⼩程序怎样跟事件传值"></a>微信⼩程序怎样跟事件传值</h1><p>给 HTML 元素添加 data-* 属性来传递我们需要的值，然后通过e.currentTarget.dataset 或 onload 的 param 参数获取。但 data -名称不能有⼤写字⺟和不可以存放对象</p><h1 id="⼩程序的-wxss-和-css-有哪些不⼀样的地⽅？"><a href="#⼩程序的-wxss-和-css-有哪些不⼀样的地⽅？" class="headerlink" title="⼩程序的 wxss 和 css 有哪些不⼀样的地⽅？"></a>⼩程序的 wxss 和 css 有哪些不⼀样的地⽅？</h1><ol><li>wxss 的图⽚引⼊需使⽤外链地址</li><li>没有 Body ；样式可直接使⽤ import 导⼊</li></ol><h1 id="⼩程序关联微信公众号如何确定⽤户的唯⼀性"><a href="#⼩程序关联微信公众号如何确定⽤户的唯⼀性" class="headerlink" title="⼩程序关联微信公众号如何确定⽤户的唯⼀性"></a>⼩程序关联微信公众号如何确定⽤户的唯⼀性</h1><p>使⽤ wx.getUserInfo ⽅法 withCredentials 为 true 时 可获取encryptedData ，⾥⾯有 union_id 。后端需要进⾏对称解密</p><h1 id="微信⼩程序与vue区别"><a href="#微信⼩程序与vue区别" class="headerlink" title="微信⼩程序与vue区别"></a>微信⼩程序与vue区别</h1><ol><li>⽣命周期不⼀样，微信⼩程序⽣命周期⽐较简单</li><li>数据绑定也不同，微信⼩程序数据绑定需要使⽤ <code>&#123;&#123;&#125;&#125;</code> ， vue 直接 : 就可以</li><li>显示与隐藏元素， vue 中，使⽤ v-if 和 v-show 控制元素的显示和隐藏，⼩程序中，使⽤ wx-if 和 hidden 控制元素的显示和隐藏</li><li>事件处理不同，⼩程序中，全⽤ bindtap(bind+event) ，或者catchtap(catch+event) 绑定事件, vue： 使⽤ v-on:event 绑定事件，或者使⽤@event 绑定事件</li><li>数据双向绑定也不也不⼀样在 vue 中,只需要再表单元素上加上 v-model ,然后再绑定data 中对应的⼀个值，当表单元素内容发⽣变化时， data 中对应的值也会相应改变，这是 vue ⾮常 nice 的⼀点。微信⼩程序必须获取到表单元素，改变的值，然后再把值赋给⼀个 data 中声明的变量。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端常见布局</title>
      <link href="/front-end/%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80/"/>
      <url>/front-end/%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<ol><li><p>流式布局（Flow Layout）：流式布局是基于元素在文档流中的位置进行自然排列的方式。元素会根据父容器的大小自动调整位置和大小。</p></li><li><p>浮动布局（Float Layout）：浮动布局使用 float 属性来使元素脱离文档流并进行排列。通过设置不同的浮动值，可以让元素向左或向右浮动，并实现多列布局。</p></li><li><p>定位布局（Positioned Layout）：定位布局使用 position 属性来控制元素的位置。常见的属性值包括 relative、absolute 和 fixed。通过设置元素的定位属性和偏移值，可以将元素精确地放置在指定位置。</p></li><li><p>弹性布局（Flexbox Layout）：弹性布局使用 flexbox 模型来实现灵活的布局。通过设置容器的 display 属性为 flex，可以指定元素以弹性布局方式排列。弹性布局提供了一套强大的属性和方法，用于控制元素的尺寸、位置和排列顺序。</p></li><li><p>表格布局（Table Layout）：表格布局使用 HTML 表格标签来实现布局。通过设置 table、tr 和 td 等标签来定义表格的结构和样式。</p></li><li><p>网格布局（Grid Layout）：网格布局是一种二维布局系统，通过将页面划分为网格来进行布局。可以使用 grid-template-columns 和 grid-template-rows 属性来定义行列的大小和数量。</p></li><li><p>百分比单位（Percentage）：百分比单位是相对于父元素的尺寸进行计算的单位。例如，设置一个元素的宽度为 50% 表示该元素的宽度是父元素宽度的一半。</p></li><li><p>rem 单位：rem 是相对于根元素（html）的字体大小进行计算的单位。通过设置根元素的字体大小，可以统一调整整个页面中的元素大小。</p></li><li><p>vw&#x2F;vh 单位：vw 表示相对于视口宽度的百分比，vh 表示相对于视口高度的百分比。这两个单位可以用来实现响应式布局，根据视口的大小动态调整元素的尺寸。</p></li><li><p>响应式布局（Responsive Layout）：响应式布局是一种根据不同设备屏幕大小和分辨率自适应调整布局的方式。通过使用媒体查询、弹性布局、网格布局等技术，使得网页在不同设备上都能显示出最佳效果。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号html js 实现登录</title>
      <link href="/front-end/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7html%20js%20%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95/"/>
      <url>/front-end/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7html%20js%20%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<pre><code class="JavaScript">1. 在微信公众平台上创建并配置好您的公众号，获取到相应的开发者ID（AppID）和密钥（AppSecret）。2. 在您的网页中引入微信 JS-SDK，以便与微信进行交互。可以使用以下 JS 代码进行引入：script src=&quot;http://res.wx.qq.com/open/js/jweixin-1.6.0.js&quot;&gt;&lt;/script&gt;3. 初始化微信 JS-SDK，设置相关配置信息，并在初始化完成后执行授权登录操作。可以使用以下 JS 代码进行初始化和授权登录操作：wx.config(&#123;    appId: &#39;YOUR_APP_ID&#39;,    timestamp: &#39;TIMESTAMP&#39;,    nonceStr: &#39;NONCE_STR&#39;,    signature: &#39;SIGNATURE&#39;,    jsApiList: [&#39;checkJsApi&#39;, &#39;chooseWXPay&#39;, &#39;openLocation&#39;, &#39;scanQRCode&#39;, &#39;authorize&#39;] // 需要使用的微信 API 列表&#125;);wx.ready(function() &#123;    // 在这里执行授权登录操作    wx.authorize(&#123;        scope: &#39;snsapi_base&#39;,        success: function(res) &#123;            // 用户同意授权，可以获取到用户的基本信息            var code = res.code; // 获取到授权登录的code            // 在这里可以将code发送到服务器进行进一步处理        &#125;,        fail: function(res) &#123;            // 用户拒绝授权或授权失败            console.log(res);        &#125;    &#125;);&#125;);请将 YOUR_APP_ID 替换为您的公众号的开发者ID，TIMESTAMP、NONCE_STR 和 SIGNATURE 替换为相应的值，这些信息可以通过后台服务器签名获取。4. 根据需要进行进一步的处理。在获得用户授权登录的code后，您可以将其发送到后台服务器，通过调用微信提供的接口来获取用户的详细信息或执行其他操作。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 微信公众号 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信公众号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号vue实现登录</title>
      <link href="/front-end/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7vue%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95/"/>
      <url>/front-end/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7vue%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<pre><code class="javascript">1. 在Vue项目中安装并引入微信 JS-SDK库（jweixin.js）。npm install weixin-js-sdk引入 import wx from &#39;weixin-js-sdk&#39;;2. 在Vue的组件中，创建一个用于授权登录的按钮，并定义触发登录的方法。&lt;template&gt;  &lt;div&gt;    &lt;button @click=&quot;wechatLogin&quot;&gt;微信登录&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;methods: &#123;  wechatLogin() &#123;    // 微信公众号授权登录的逻辑  &#125;&#125;3. 在微信授权登录的方法内部，进行微信 JS-SDK的初始化和授权登录操作。// 引入后端提供的获取微信 JS-SDK配置的接口import &#123; getWechatConfig &#125; from &#39;@/api/wechat&#39;; // 替换成实际的接口路径methods: &#123;  async wechatLogin() &#123;    const config = await getWechatConfig(); // 调用后端接口获取微信 JS-SDK的配置信息    wx.config(&#123;      debug: false,      appId: config.appId,      timestamp: config.timestamp,      nonceStr: config.nonceStr,      signature: config.signature,      jsApiList: [&#39;checkJsApi&#39;, &#39;authorize&#39;] // 需要使用的微信 API 列表    &#125;);    wx.error(function(res) &#123;      // 初始化失败的处理逻辑      console.error(&#39;微信 JS-SDK初始化失败:&#39;, res);    &#125;);    const vm = this;    wx.ready(function() &#123;      // 在这里执行授权登录操作      wx.authorize(&#123;        scope: &#39;snsapi_base&#39;,        success: function(res) &#123;          // 用户同意授权，可以获取到用户的基本信息          const code = res.code; // 获取到授权登录的code          // 在这里可以将code发送到服务器进行进一步处理          console.log(&#39;授权登录成功，code:&#39;, code);        &#125;,        fail: function(res) &#123;          // 用户拒绝授权或授权失败          console.log(&#39;授权登录失败:&#39;, res);        &#125;      &#125;);    &#125;);  &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 微信公众号 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信公众号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次vue转uniapp</title>
      <link href="/front-end/%E8%AE%B0%E4%B8%80%E6%AC%A1vue%E8%BD%ACuniapp/"/>
      <url>/front-end/%E8%AE%B0%E4%B8%80%E6%AC%A1vue%E8%BD%ACuniapp/</url>
      
        <content type="html"><![CDATA[<h1 id="vue的相关标签怎么转"><a href="#vue的相关标签怎么转" class="headerlink" title="vue的相关标签怎么转?"></a>vue的相关标签怎么转?</h1><pre><code class="text">div  header main section -&gt; viewspan -&gt; textul li -&gt; view ?  这个还不太确定，这个只要有样式类的情况下直接改img -&gt; image   这里注意的是转成uniapp的image标签要把宽高都设置一下      总结为只要有class类的情况下，基本上都是用的view</code></pre><h1 id="字体处理：-px-转-rpx-2倍化怎么处理？-全局样式怎么转化"><a href="#字体处理：-px-转-rpx-2倍化怎么处理？-全局样式怎么转化" class="headerlink" title="字体处理： px 转 rpx  2倍化怎么处理？ 全局样式怎么转化?"></a>字体处理： px 转 rpx  2倍化怎么处理？ 全局样式怎么转化?</h1><pre><code class="text">uniapp有个&lt;page-meta :root-font-size=&quot;&#39;12px&#39;&quot;/&gt;1rem 就是12px现在某个页面盒子得大小是22px  但是实际我需要得大小是44px  so  在不改变前面数字得情况下，1rem = 2px但是这个是有一定缺陷的，浏览器里最小的字体是12px ,如果字体大小已经写死的情况下就不能用了   so  其实还有一个办法，直接全局替换px 为 px * 2  </code></pre><h1 id="对于已经使用axios写得api接口，怎么快速转化成uniapp的请求方式"><a href="#对于已经使用axios写得api接口，怎么快速转化成uniapp的请求方式" class="headerlink" title="对于已经使用axios写得api接口，怎么快速转化成uniapp的请求方式"></a>对于已经使用axios写得api接口，怎么快速转化成uniapp的请求方式</h1><pre><code class="javascript">针对当前的项目，进行对函数导出和数据传入进行分布封装import config from &quot;@/config/index.js&quot;import store from &#39;@/store/index.js&#39;;export const requestApi = (options) =&gt; &#123;    const ppsessid = store.state.user.ppSessId    const sessid = store.state.user.sessId    const cid = store.state.env.cid    const publicHeaders = &#123;        &quot;Content-Type&quot;: &quot;application/json&quot;,        &#39;Accept&#39;: &#39;application/json&#39;,        &#39;X-Yf-CID&#39;: cid,        &#39;X-Yf-PPSessid&#39; : ppsessid,        &#39;X-Yf-Sessid&#39; : sessid    &#125;    return (function() &#123;        let &#123;            url,            method,            params,            data        &#125; = options        // console.log(&#39;options&#39;, options)        return new Promise((resolve, reject) =&gt; &#123;            uni.request(&#123;                url: config.url.devServer + url,                method: method || &#39;GET&#39;,                header: publicHeaders,                data: data || params,                success: (res) =&gt; &#123;                    resolve(res);                &#125;,                fail: (err) =&gt; &#123;                    reject(err);                &#125;            &#125;)        &#125;);    &#125;)(options)&#125;</code></pre><h1 id="vue中的good-storage-unaiapp的替代方案"><a href="#vue中的good-storage-unaiapp的替代方案" class="headerlink" title="vue中的good-storage    unaiapp的替代方案"></a>vue中的good-storage    unaiapp的替代方案</h1><pre><code class="javascript">这个js库其实就是一个操作缓存的库自己封装一个简单的对象即可解决let storage = &#123;&#125;storage.get = function(options) &#123;    uni.getStorageSync(options)&#125;storage.set = function(options) &#123;    uni.setStorageSync(options)&#125;storage.remove = function(options) &#123;    uni.removeStorageSync(options)&#125;</code></pre><h1 id="vue中的相关跳转"><a href="#vue中的相关跳转" class="headerlink" title="vue中的相关跳转"></a>vue中的相关跳转</h1><pre><code class="javascript">1.封装vue的原型对象。这个是最方便的，但是需要适配一些东西，? 可以试一下。2.push -&gt; navigateTo  replace -&gt; redirectToback  -&gt;         let pages = getCurrentPages(); // 当前页面                    let beforePage = pages[pages.length - 2]; // 上一页                    uni.navigateBack(&#123;                        success: function() &#123;                            beforePage.onLoad(); // 执行上一页的onLoad方法                        &#125;                    &#125;);</code></pre><h1 id="怎么快速的处理css样式完成转化"><a href="#怎么快速的处理css样式完成转化" class="headerlink" title="怎么快速的处理css样式完成转化"></a>怎么快速的处理css样式完成转化</h1><pre><code class="javascript">采取   1.就地取材2.转vue标签为类举个例子。 比如当前的页面p 标签哟样式，就直接，吧类名变成p ,然后p标签改为view</code></pre><h1 id="路由相关"><a href="#路由相关" class="headerlink" title="路由相关"></a>路由相关</h1><pre><code class="java">this.$route.query.canshu1      就是在 onload 里接收 options 里接收canshu1  </code></pre><h1 id="记一次ui-li-scss-转化的过程"><a href="#记一次ui-li-scss-转化的过程" class="headerlink" title="记一次ui li  scss 转化的过程"></a>记一次ui li  scss 转化的过程</h1><pre><code class="javascript">*****转化之前&lt;ul&gt;    &lt;template v-if=&quot;currentSku.coupon &amp;&amp; currentSku.coupon.length&quot;&gt;        &lt;li class=&quot;has-coupon&quot; v-for=&quot;(item, index) in currentSku.coupon.slice(0, 2)&quot;        :key=&quot;index&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/li&gt;    &lt;/template&gt;    &lt;li v-else&gt;暂无优惠券&lt;/li&gt;&lt;/ul&gt;.goods-tickets &#123;        ul &#123;          display: flex;          li &#123;            color: #378BF7;            &amp;.has-coupon &#123;              display: flex;              align-items: center;              height: 20px * 2;              font-size: 12px * 2;              padding: 0 9px * 2;              margin-right: 6px * 2;              background-color: #378BF7;              background-repeat: no-repeat;              position: relative;              overflow: hidden;              color: #FFFFFF;              &amp;:last-child &#123;                margin-right: 0;              &#125;              &amp;:before, &amp;:after &#123;                content: &#39;&#39;;                display: block;                position: absolute;                width: 8px * 2;                height: 8px * 2;                background-color: #FFF;                border-radius: 50%;                top: 50%;                transform: translateY(-50%);              &#125;              &amp;:before &#123;                left: -4px * 2;              &#125;              &amp;:after &#123;                right: -4px * 2;              &#125;            &#125;          &#125;        &#125;      &#125; *****转化过后&lt;view class=&quot;ul222&quot;&gt;    &lt;template v-if=&quot;currentSku.coupon &amp;&amp; currentSku.coupon.length&quot;&gt;        &lt;view class=&quot;has-coupon&quot; v-for=&quot;(item, index) in currentSku.coupon.slice(0, 2)&quot;        :key=&quot;index&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/view&gt;    &lt;/template&gt;    &lt;view v-else&gt;暂无优惠券&lt;/view&gt;&lt;/view&gt; .goods-tickets &#123;        .ul222 &#123;          display: flex;          view &#123;            color: #378BF7;            &amp;.has-coupon &#123;              display: flex;              align-items: center;              height: 20px * 2;              font-size: 12px * 2;              padding: 0 9px * 2;              margin-right: 6px * 2;              background-color: #378BF7;              background-repeat: no-repeat;              position: relative;              overflow: hidden;              color: #FFFFFF;              &amp;:last-child &#123;                margin-right: 0;              &#125;              &amp;:before, &amp;:after &#123;                content: &#39;&#39;;                display: block;                position: absolute;                width: 8px * 2;                height: 8px * 2;                background-color: #FFF;                border-radius: 50%;                top: 50%;                transform: translateY(-50%);              &#125;              &amp;:before &#123;                left: -4px * 2;              &#125;              &amp;:after &#123;                right: -4px * 2;              &#125;            &#125;          &#125;        &#125;      &#125;</code></pre><h1 id="uniapp的图片路径相关问题"><a href="#uniapp的图片路径相关问题" class="headerlink" title="uniapp的图片路径相关问题"></a>uniapp的图片路径相关问题</h1><p>编译成H5 的时候图片在哪里都无所谓</p><p>编译成小程序 的时候图片必须要在 static 下</p><h1 id="分包应该在项目改写之前"><a href="#分包应该在项目改写之前" class="headerlink" title="分包应该在项目改写之前"></a>分包应该在项目改写之前</h1><p>不然后面又得改写跳转路径</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端相关适配方案</title>
      <link href="/front-end/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/"/>
      <url>/front-end/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="参考文档-得先了解视口的概念"><a href="#参考文档-得先了解视口的概念" class="headerlink" title="参考文档 得先了解视口的概念"></a>参考文档 得先了解视口的概念</h1><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM0MDAzMTQvYXJ0aWNsZS9kZXRhaWxzLzEyNTQ4ODM3Ng==">https://blog.csdn.net/u013400314/article/details/125488376</span></p><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81MjU1NTIyNDg=">https://zhuanlan.zhihu.com/p/525552248</span></p><h1 id="移动端适配常见的方法"><a href="#移动端适配常见的方法" class="headerlink" title="移动端适配常见的方法"></a>移动端适配常见的方法</h1><ol><li>视口（Viewport）设置：视口是指用户在浏览器中看到的网页的可见区域。在移动设备上，默认的视口宽度通常比设备的实际屏幕宽度要宽，这样会导致页面缩小显示。为了解决这个问题，可以通过设置视口的宽度等于设备的屏幕宽度，使页面按照设备的实际尺寸进行显示。</li></ol><pre><code class="html">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code></pre><ol start="2"><li>媒体查询（Media Queries）：媒体查询是一种CSS技术，通过检测设备的特性（如屏幕宽度、像素密度等）来应用不同的CSS样式。通过使用媒体查询，可以针对不同的屏幕尺寸应用不同的样式，从而实现响应式布局。</li></ol><pre><code class="css">@media (max-width: 768px) &#123;  /* 在宽度小于等于768px时应用的样式 */&#125;</code></pre><ol start="3"><li><p>弹性布局（Flexbox）：Flexbox布局是一种灵活的布局模型，可以以响应式的方式自动调整元素的位置和大小，适应不同尺寸的屏幕。通过使用Flexbox布局，可以方便地实现移动端页面的自适应布局。</p></li><li><p>图片适配：在移动端适配中，图片的尺寸也需要进行适配。可以使用CSS的max-width: 100%属性来确保图片在不超出父容器宽度的情况下按比例缩放。</p></li></ol><pre><code class="css">img &#123;  max-width: 100%;  height: auto;&#125;</code></pre><ol start="5"><li>rem单位：rem（root em）是相对于根元素的字体大小的单位。通过设置根元素的字体大小，可以实现基于视口尺寸的动态适配。可以结合媒体查询和rem单位来实现根据屏幕尺寸改变布局和字体大小。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 移动端适配 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端适配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端设计模式</title>
      <link href="/front-end/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/front-end/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="MVC（Model-View-Controller）模式："><a href="#MVC（Model-View-Controller）模式：" class="headerlink" title="MVC（Model-View-Controller）模式："></a>MVC（Model-View-Controller）模式：</h1><pre><code class="text">将应用程序分为三个核心组件：模型（数据）、视图（用户界面）和控制器（处理逻辑）。模型负责数据操作和状态管理，视图负责用户界面展示，控制器负责调度模型和视图之间的交互。</code></pre><h1 id="MVVM（Model-View-ViewModel）模式："><a href="#MVVM（Model-View-ViewModel）模式：" class="headerlink" title="MVVM（Model-View-ViewModel）模式："></a>MVVM（Model-View-ViewModel）模式：</h1><pre><code class="text">类似于 MVC 模式，将应用程序分为三个组件：模型、视图和视图模型。视图模型是视图和模型之间的连接层，负责将模型数据绑定到视图并处理视图上的用户事件。</code></pre><h1 id="单例模式（Singleton-Pattern）："><a href="#单例模式（Singleton-Pattern）：" class="headerlink" title="单例模式（Singleton Pattern）："></a>单例模式（Singleton Pattern）：</h1><pre><code class="text">保证一个类只有一个实例，并提供一个全局的访问点。在前端开发中，常用于管理全局状态、共享资源、日志记录等。</code></pre><h1 id="观察者模式（Observer-Pattern）："><a href="#观察者模式（Observer-Pattern）：" class="headerlink" title="观察者模式（Observer Pattern）："></a>观察者模式（Observer Pattern）：</h1><pre><code class="text">定义了一种一对多的依赖关系，当一个对象状态发生变化时，其所有依赖者会被通知并自动更新。常用于实现事件系统、订阅/发布模式等。</code></pre><h1 id="工厂模式（Factory-Pattern）："><a href="#工厂模式（Factory-Pattern）：" class="headerlink" title="工厂模式（Factory Pattern）："></a>工厂模式（Factory Pattern）：</h1><pre><code class="text">通过一个工厂对象创建其他对象，隐藏对象创建的细节，提供统一的接口。常用于创建具有相似功能的对象，实现对象的解耦和复用。</code></pre><h1 id="适配器模式（Adapter-Pattern）："><a href="#适配器模式（Adapter-Pattern）：" class="headerlink" title="适配器模式（Adapter Pattern）："></a>适配器模式（Adapter Pattern）：</h1><pre><code class="text">将一个类的接口转换成另一个客户端所期望的接口，使得原本不兼容的类可以一起工作。常用于兼容不同版本的 API、封装第三方库等。</code></pre><h1 id="策略模式（Strategy-Pattern）："><a href="#策略模式（Strategy-Pattern）：" class="headerlink" title="策略模式（Strategy Pattern）："></a>策略模式（Strategy Pattern）：</h1><pre><code class="text">定义了一系列算法，并将每个算法封装成独立的对象，使得它们可以相互替换。常用于根据不同的情况选择不同的处理策略，提高代码的灵活性和可维护性。</code></pre><h1 id="装饰者模式（Decorator-Pattern）："><a href="#装饰者模式（Decorator-Pattern）：" class="headerlink" title="装饰者模式（Decorator Pattern）："></a>装饰者模式（Decorator Pattern）：</h1><pre><code class="text">动态地给对象添加额外的功能，同时不改变其接口。常用于对已有对象进行包装，增强其功能或修改其行为。</code></pre><h1 id="策略工厂模式（Strategy-Factory-Pattern）："><a href="#策略工厂模式（Strategy-Factory-Pattern）：" class="headerlink" title="策略工厂模式（Strategy Factory Pattern）："></a>策略工厂模式（Strategy Factory Pattern）：</h1><pre><code class="text">结合策略模式和工厂模式，通过工厂类动态创建策略对象。常用于根据配置或条件动态选择并创建不同的策略对象。</code></pre><h1 id="组合模式（Composite-Pattern）："><a href="#组合模式（Composite-Pattern）：" class="headerlink" title="组合模式（Composite Pattern）："></a>组合模式（Composite Pattern）：</h1><pre><code class="text">将对象组合成树形结构，以表示“部分-整体”的层次关系。常用于处理树形数据结构，实现递归操作。</code></pre><h1 id="享元模式（Flyweight-Pattern）："><a href="#享元模式（Flyweight-Pattern）：" class="headerlink" title="享元模式（Flyweight Pattern）："></a>享元模式（Flyweight Pattern）：</h1><pre><code class="text">共享对象以减少内存占用，用于有效支持大量细粒度的对象。常用于优化性能和内存消耗，特别是在大规模数据渲染时。</code></pre><h1 id="外观模式（Facade-Pattern）："><a href="#外观模式（Facade-Pattern）：" class="headerlink" title="外观模式（Facade Pattern）："></a>外观模式（Facade Pattern）：</h1><pre><code class="text">提供了一个简化的接口，隐藏了底层复杂的逻辑和调用。常用于提供统一的接口，简化复杂系统的使用。</code></pre><h1 id="命令模式（Command-Pattern）："><a href="#命令模式（Command-Pattern）：" class="headerlink" title="命令模式（Command Pattern）："></a>命令模式（Command Pattern）：</h1><pre><code class="text">将请求封装成一个对象，使得可以用不同的请求对客户进行参数化。常用于实现撤销、重做、延迟执行等操作。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 前端设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解ajax</title>
      <link href="/front-end/%E8%AF%A6%E8%A7%A3ajax/"/>
      <url>/front-end/%E8%AF%A6%E8%A7%A3ajax/</url>
      
        <content type="html"><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ4MDQxODc3L2FydGljbGUvZGV0YWlscy8xMjY1NDUwMTU=">参考博客</span></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 网络请求 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>event loop</title>
      <link href="/js-base/event%20loop/"/>
      <url>/js-base/event%20loop/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是event-loop"><a href="#什么是event-loop" class="headerlink" title="什么是event loop"></a>什么是event loop</h1><ol><li><p>JavaScript中的事件循环（Event Loop）是一种机制，用于管理异步任务的执行顺序和调度。它确保JavaScript的单线程执行模型能够处理异步任务，并保持代码的执行顺序</p></li><li><p>事件循环的工作原理如下：</p></li><li><p>执行栈（Call Stack）：JavaScript代码的执行顺序通过执行栈来管理，每个函数调用都会将其对应的执行上下文压入执行栈，然后按照先入后出的顺序执行。</p></li><li><p>任务队列（Task Queue）：除了执行栈外，事件循环还会维护多个任务队列，包括宏任务队列（Macro Task Queue）和微任务队列（Micro Task Queue）。<br>- 微任务（Micro Task）：微任务包括Promise、MutationObserver、process.nextTick（Node.js）等。微任务会被推入微任务队列。<br>- 宏任务（Macro Task）：宏任务包括定时器（setTimeout、setInterval）、I&#x2F;O 操作（例如文件读写、网络请求）、UI 交互事件（例如点击事件、键盘事件）、requestAnimationFrame（用于优化动画效果的定时器）等。宏任务会被推入宏任务队列。</p></li><li><p>事件循环（Event Loop）：当执行栈为空时，事件循环会首先处理微任务队列中的所有任务，然后再从宏任务队列中选取一个任务执行。执行完该任务后，再次处理微任务，不断循环执行，直到所有任务完成。</p></li></ol><h1 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h1><p>进程是指操作系统中正在运行的一个应用程序，它具有独立的内存空间和系统资源，并且可以执行多个任务。每个进程包含一个或多个线程，线程是进程中的执行单元，用于执行实际的计算任务。</p><h1 id="执行栈"><a href="#执行栈" class="headerlink" title="执行栈"></a>执行栈</h1><p>执行栈是一种数据结构，用于管理函数的调用顺序。当一个函数被调用时，它的上下文（包括参数、局部变量等）会被压入执行栈中，被称为帧。当函数执行完成后，对应的帧会从执行栈中弹出，控制权交给调用该函数的地方。</p><h1 id="为什么JavaScript是单线程，而不是多线程"><a href="#为什么JavaScript是单线程，而不是多线程" class="headerlink" title="为什么JavaScript是单线程，而不是多线程"></a>为什么JavaScript是单线程，而不是多线程</h1><p>JavaScript最初设计为单线程的语言，原因如下：</p><p>简单性：单线程模型简化了语言本身的复杂性和实现难度。<br>安全性：多线程需要处理共享内存的同步问题，容易导致死锁、竞态条件等问题。而单线程避免了这些问题，使得编写和调试代码更加安全。<br>兼容性：JavaScript最初主要用于浏览器中，而多线程模型在浏览器环境中可能导致页面无响应、卡顿等用户体验问题。</p><h1 id="浏览器与-Node-事件（有何区别）"><a href="#浏览器与-Node-事件（有何区别）" class="headerlink" title="浏览器与 Node 事件（有何区别）"></a>浏览器与 Node 事件（有何区别）</h1><ol><li>实现机制：浏览器事件循环是根据 HTML5 规范实现的，而 Node.js 事件循环则是基于 libuv 库实现的。</li><li>宿主环境：浏览器事件循环运行在浏览器环境中，而 Node.js 事件循环则运行在服务器端的 Node.js 环境中。</li><li>宏任务和微任务队列：浏览器事件循环中有一个宏任务队列和一个微任务队列，分别用于存储不同类型的任务。而 Node.js 事件循环中没有明确的宏任务队列和微任务队列的概念，在不同阶段会处理不同类型的任务，但任务的分类和执行顺序略有不同。</li><li>API 和事件回调：尽管浏览器和 Node.js 都提供了一些异步操作的 API（如定时器、网络请求等），但两者的底层实现和事件回调机制不完全相同。例如，在浏览器中，可以使用 setTimeout、setInterval 等方法创建定时器，而在 Node.js 中，可以使用 setTimeout、setInterval、setImmediate 等方法。此外，浏览器还支持 DOM 相关的事件回调，而 Node.js 则支持文件 I&#x2F;O、网络 I&#x2F;O 等事件回调。</li><li>默认宏任务数量限制：浏览器对于连续的宏任务（如多个 setTimeout 回调）有一个最小间隔（通常是 4 毫秒），这是为了避免过度占用 CPU 资源。而 Node.js 没有类似的限制，默认情况下可以连续执行多个宏任务。</li></ol><h2 id="浏览器事件循环的执行顺序如下："><a href="#浏览器事件循环的执行顺序如下：" class="headerlink" title="浏览器事件循环的执行顺序如下："></a>浏览器事件循环的执行顺序如下：</h2><ol><li>执行同步任务：从宏任务队列中取出一个任务，执行该任务，直到队列为空。</li><li>执行微任务：从微任务队列中取出一个任务，执行该任务，直到队列为空。</li><li>渲染：更新页面的渲染，并检查是否需要进行重新绘制或重排。</li><li>检查输入事件：检查并处理用户的输入，例如点击、滚动等。</li><li>更新页面显示：将更改后的页面内容显示给用户。</li><li>进入下一轮事件循环。</li></ol><h2 id="Node-js-事件循环的执行顺序如下："><a href="#Node-js-事件循环的执行顺序如下：" class="headerlink" title="Node.js 事件循环的执行顺序如下："></a>Node.js 事件循环的执行顺序如下：</h2><ol><li>执行同步任务：从事件队列中取出一个任务，执行该任务，直到队列为空。</li><li>执行下一个异步阶段：依次执行定时器（Timers）、待执行的 I&#x2F;O 回调（I&#x2F;O callbacks）、空闲回调（idle, prepare）等异步阶段的回调函数。</li><li>执行微任务：从微任务队列中取出一个任务，执行该任务，直到队列为空。</li><li>检查计时器：检查是否有计时器已经到期，如果有，则执行相应的计时器回调。</li><li>检查待定的操作：检查是否有待定的操作（例如关闭服务器），如果有，则执行相应的操作。</li><li>进入下一轮事件循环。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js面试</title>
      <link href="/js-base/javascript%E9%9D%A2%E8%AF%95/"/>
      <url>/js-base/javascript%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="JS-数据类型"><a href="#JS-数据类型" class="headerlink" title="JS 数据类型 ?"></a>JS 数据类型 ?</h1><pre><code class="javascript">1.数字（Number）：表示数值，包括整数和浮点数。例如：42, 3.14。2.字符串（String）：表示文本数据，用于存储和操作字符序列。字符串可以使用单引号或双引号括起来。例如：&#39;Hello&#39;, &quot;World&quot;。3.布尔值（Boolean）：表示逻辑值，只有两个取值：true 和 false。布尔值常用于条件判断和逻辑运算。4.空值（Null）：表示空值或不存在的对象。当变量被赋值为 null 时，表示该变量没有任何值。5.未定义（Undefined）：表示变量声明了但未赋值。如果一个变量没有初始化，它的值就是 undefined。6.符号（Symbol）：ES6 引入的新数据类型，表示独一无二的值。符号通常用作对象属性的键。除了这些基本数据类型，JavaScript 还提供了一种复杂类型：7.对象（Object）：表示复合值，可包含多个键值对。键是字符串或符号，值可以是任意类型。对象是 JavaScript 中最常见的数据类型之一，例如数组、函数等都是对象。</code></pre><h1 id="判断一个值是什么类型有哪些方法？"><a href="#判断一个值是什么类型有哪些方法？" class="headerlink" title="判断一个值是什么类型有哪些方法？"></a>判断一个值是什么类型有哪些方法？</h1><pre><code class="javascript">typeof 操作符：typeof 操作符用于检查一个值的类型。它返回一个表示该值类型的字符串。常见的返回值包括 &quot;number&quot;、&quot;string&quot;、&quot;boolean&quot;、&quot;object&quot;、&quot;function&quot;、&quot;undefined&quot;、&quot;symbol&quot;。例如：javascripttypeof 42; // &quot;number&quot;typeof &quot;Hello&quot;; // &quot;string&quot;typeof true; // &quot;boolean&quot;typeof undefined; // &quot;undefined&quot;typeof null; // &quot;object&quot;（注意这是一个历史遗留问题）typeof Symbol(&quot;symbol&quot;); // &quot;symbol&quot;typeof &#123;&#125;; // &quot;object&quot;typeof []; // &quot;object&quot;typeof function() &#123;&#125;; // &quot;function&quot;instanceof 操作符：instanceof 操作符用于检查一个对象是否属于某个构造函数的实例。它返回一个布尔值。例如：javascriptvar arr = [];arr instanceof Array; // truearr instanceof Object; // true，因为 Array 是 Object 的派生类var date = new Date();date instanceof Date; // truedate instanceof Object; // true，因为 Date 是 Object 的派生类constructor 属性：constructor 属性是对象的内置属性，指向创建该对象的构造函数。可以通过比较对象的 constructor 属性与预期构造函数来判断对象的类型。例如：javascriptvar num = 42;num.constructor === Number; // truevar str = &quot;Hello&quot;;str.constructor === String; // truevar bool = true;bool.constructor === Boolean; // trueObject.prototype.toString：Object 的原型对象上具有 toString 方法，可以通过调用该方法来获取一个值的类型字符串。例如：javascriptvar obj = &#123;&#125;;Object.prototype.toString.call(obj); // &quot;[object Object]&quot;var arr = [];Object.prototype.toString.call(arr); // &quot;[object Array]&quot;var date = new Date();Object.prototype.toString.call(date); // &quot;[object Date]&quot;总结：1：在`JavaScript`里使用`typeof`判断数据类型，只能区分**基本类型**，即：`number`、`string`、`undefined`、`boolean`、`object`。2：对于`null`、`array`、`function`、`object`来说，使用`typeof`都会统一返回`object`字符串。3：要想区分对象、数组、函数、单纯使用`typeof`是不行的。在JS中，可以通过`Object.prototype.toString.call()`方法，判断某个对象之属于哪种内置类型。分为`null`、`string`、`boolean`、`number`、`undefined`、`array`、`function`、`object`、`date`、`math`。4：constructor 本来是用于标识对象类型的。5：一般认为 instanceof 操作符是确定对象类型 更可靠的方式。  let obj = &#123;&#125;  let num1 = 1  console.log(typeof obj)   //object  console.log(obj instanceof Object)  //true  console.log(obj.constructor) //ƒ Object() &#123; [native code] &#125;  console.log( Object.prototype.toString.call(1)) // [object Number]  console.log(Object.prototype.toString.call(obj)) // [object Object]</code></pre><h1 id="null-和-undefined-的区别？"><a href="#null-和-undefined-的区别？" class="headerlink" title="null 和 undefined 的区别？"></a>null 和 undefined 的区别？</h1><pre><code class="javascript">undefined 通常表示缺少预期的值或变量尚未初始化。它是一个全局对象的属性，也可以通过声明变量但不进行赋值来获得该值。null 表示明确地指定一个变量为空值，一般用于表示对象或变量没有有效的值。它是一个关键字，不是全局对象的属性。</code></pre><h1 id="怎么判断一个变量arr的话是否为数组（此题用-typeof-不行）？"><a href="#怎么判断一个变量arr的话是否为数组（此题用-typeof-不行）？" class="headerlink" title="怎么判断一个变量arr的话是否为数组（此题用 typeof 不行）？"></a>怎么判断一个变量arr的话是否为数组（此题用 typeof 不行）？</h1><pre><code class="javascript">如果你不想使用 typeof 来判断一个变量是否为数组，可以使用 Array.isArray() 方法。这个方法会检查给定的值是否为一个数组，并返回一个布尔值。以下是一个示例：javascriptvar arr = [1, 2, 3];console.log(Array.isArray(arr)); // 输出 truevar obj = &#123;&#125;;console.log(Array.isArray(obj)); // 输出 false在上述示例中，Array.isArray() 方法被用来检查变量 arr 是否为数组。如果 arr 是一个数组，则返回 true；否则，返回 false。如果需要兼容老版本的浏览器，可以使用以下代码来实现类似的功能：javascriptfunction isArray(arr) &#123;  return Object.prototype.toString.call(arr) === &#39;[object Array]&#39;;&#125;var arr = [1, 2, 3];console.log(isArray(arr)); // 输出 truevar obj = &#123;&#125;;console.log(isArray(obj)); // 输出 false</code></pre><h1 id="“-x3D-x3D-x3D-”、“-x3D-x3D-”的区别？"><a href="#“-x3D-x3D-x3D-”、“-x3D-x3D-”的区别？" class="headerlink" title="“ &#x3D;&#x3D;&#x3D;”、“ &#x3D;&#x3D;”的区别？"></a>“ &#x3D;&#x3D;&#x3D;”、“ &#x3D;&#x3D;”的区别？</h1><pre><code class="javascript">==，当且仅当两个运算数相等时，它返回 true，即不检查数据类型===，只有在无需类型转换运算数就相等的情况下，才返回 true，需要检查数据类型</code></pre><h1 id="eval是做什么的？"><a href="#eval是做什么的？" class="headerlink" title="eval是做什么的？"></a>eval是做什么的？</h1><pre><code class="javascript">它的功能是把对应的字符串解析成 JS 代码并运行；应该避免使用 eval，不安全，非常耗性能（2次，一次解析成 js 语句，一次执行）。</code></pre><h1 id="箭头函数有哪些特点？"><a href="#箭头函数有哪些特点？" class="headerlink" title="箭头函数有哪些特点？"></a>箭头函数有哪些特点？</h1><pre><code class="javascript">不需要function关键字来创建函数省略return关键字改变this指向</code></pre><h1 id="var、let、const-区别？"><a href="#var、let、const-区别？" class="headerlink" title="var、let、const 区别？"></a>var、let、const 区别？</h1><pre><code class="javascript">var具有函数作用域，变量提升，并且可以重复声明。let和const具有块级作用域，没有变量提升，而且不允许重复声明（在同一个作用域内）。let声明的变量可重新赋值，而const声明的变量是常量，不可重新赋值。</code></pre><h1 id="new操作符具体干了什么呢？"><a href="#new操作符具体干了什么呢？" class="headerlink" title="new操作符具体干了什么呢？"></a>new操作符具体干了什么呢？</h1><pre><code class="javascript">1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。2、属性和方法被加入到 this 引用的对象中。3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。</code></pre><h1 id="JSON-的了解？"><a href="#JSON-的了解？" class="headerlink" title="JSON 的了解？"></a>JSON 的了解？</h1><pre><code class="javascript">JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小</code></pre><h1 id="document-write-和-innerHTML-的区别？"><a href="#document-write-和-innerHTML-的区别？" class="headerlink" title="document.write 和 innerHTML 的区别？"></a>document.write 和 innerHTML 的区别？</h1><pre><code class="javascript">document.write 只能重绘整个页面innerHTML 可以重绘页面的一部分</code></pre><h1 id="ajax过程？"><a href="#ajax过程？" class="headerlink" title="ajax过程？"></a>ajax过程？</h1><pre><code class="javascript">(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象.(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.(3)设置响应HTTP请求状态变化的函数.(4)发送HTTP请求.(5)获取异步调用返回的数据.(6)使用JavaScript和DOM实现局部刷新.</code></pre><h1 id="请解释一下-JavaScript-的同源策略？"><a href="#请解释一下-JavaScript-的同源策略？" class="headerlink" title="请解释一下 JavaScript 的同源策略？"></a>请解释一下 JavaScript 的同源策略？</h1><pre><code class="javascript">概念:同源策略是客户端脚本（尤其是Netscape Navigator2.0，其目的是防止某个文档或脚本从多个不同源装载。这里的同源策略指的是：协议，域名，端口相同，同源策略是一种安全协议。指一段脚本只能读取来自同一来源的窗口和文档的属性。</code></pre><h1 id="介绍一下闭包和闭包常用场景？"><a href="#介绍一下闭包和闭包常用场景？" class="headerlink" title="介绍一下闭包和闭包常用场景？"></a>介绍一下闭包和闭包常用场景？</h1><pre><code class="javascript">闭包是指有权访问另一个函数作用域中的变量的函数，创建闭包常见方式，就是在一个函数的内部创建另一个函数使用闭包主要为了设计私有的方法和变量，闭包的优点是可以避免变量的污染，缺点是闭包会常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。在js中，函数即闭包，只有函数才会产生作用域的概念。闭包有三个特性：函数嵌套函数函数内部可以引用外部的参数和变量参数和变量不会被垃圾回收机制回收应用场景，设置私有变量的方法不适用场景：返回闭包的函数是个非常大的函数闭包的缺点就是常驻内存，会增大内存使用量，使用不当会造成内存泄漏</code></pre><h1 id="javascript的内存-垃圾-回收机制？"><a href="#javascript的内存-垃圾-回收机制？" class="headerlink" title="javascript的内存(垃圾)回收机制？"></a>javascript的内存(垃圾)回收机制？</h1><pre><code class="javascript">垃圾回收器会每隔一段时间找出那些不再使用的内存，然后为其释放内存一般使用标记清除方法(mark and sweep), 当变量进入环境标记为进入环境，离开环境标记为离开环境垃圾回收器会在运行的时候给存储在内存中的所有变量加上标记，然后去掉环境中的变量以及被环境中变量所引用的变量（闭包），在这些完成之后仍存在标记的就是要删除的变量了还有引用计数方法(reference counting), 在低版本IE中经常会出现内存泄露，很多时候就是因为其采用引用计数方式进行垃圾回收。引用计数的策略是跟踪记录每个值被使用的次数，当声明了一个 变量并将一个引用类型赋值给该变量的时候这个值的引用次数就加1，如果该变量的值变成了另外一个，则这个值得引用次数减1，当这个值的引用次数变为0的时 候，说明没有变量在使用，这个值没法被访问了，因此可以将其占用的空间回收，这样垃圾回收器会在运行的时候清理掉引用次数为0的值占用的空间。在IE中虽然JavaScript对象通过标记清除的方式进行垃圾回收，但BOM与DOM对象却是通过引用计数回收垃圾的， 也就是说只要涉及BOM及DOM就会出现循环引用问题。</code></pre><h1 id="事件队列（宏任务微任务）"><a href="#事件队列（宏任务微任务）" class="headerlink" title="事件队列（宏任务微任务）"></a>事件队列（宏任务微任务）</h1><pre><code class="微任务和宏任务的本质区别。">可以分为微任务（micro task）队列和宏任务（macro task）队列。微任务一般比宏任务先执行，并且微任务队列只有一个，宏任务队列可能有多个。另外我们常见的点击和键盘等事件也属于宏任务。下面我们看一下常见宏任务和常见微任务。常见宏任务：setTimeout()setInterval()setImmediate()常见微任务：promise.then()、promise.catch()new MutaionObserver()process.nextTick()微任务和宏任务的本质区别。宏任务特征：有明确的异步任务需要执行和回调；需要其他异步线程支持。微任务特征：没有明确的异步任务需要执行，只有回调；不需要其他异步线程支持。</code></pre><h1 id="async-x2F-await"><a href="#async-x2F-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h1><pre><code class="javascript">async 是一个通过异步执行并隐式返回 Promise 作为结果的函数。是Generator函数的语法糖，并对Generator函数进行了改进。改进：内置执行器，无需手动执行 next() 方法。更好的语义更广的适用性：co模块约定，yield命令后面只能是 Thunk 函数或 Promise 对象，而async函数的await命令后面，可以是 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时会自动转成立即 resolved 的 Promise 对象）。返回值是 Promise，比 Generator 函数返回的 Iterator 对象方便，可以直接使用 then() 方法进行调用。async 隐式返回 Promise 作为结果的函数，那么可以简单理解为，await后面的函数执行完毕时，await会产生一个微任务(Promise.then是微任务)。</code></pre><h1 id="JavaScript-是单线程的，浏览器是多进程的"><a href="#JavaScript-是单线程的，浏览器是多进程的" class="headerlink" title="JavaScript 是单线程的，浏览器是多进程的"></a>JavaScript 是单线程的，浏览器是多进程的</h1><pre><code class="javascript">每打开一个新网页就会创建一个渲染进程渲染进程是多线程的负责页面渲染的 GUI 渲染线程负责JavaScript的执行的 JavaScript 引擎线程，负责浏览器事件循环的事件触发线程，注意这不归 JavaScript 引擎线程管负责定时器的定时触发器线程，setTimeout 中低于 4ms 的时间间隔算为4ms负责XMLHttpRequest的异步 http 请求线程GUI 渲染线程与 JavaScript 引擎线程是互斥的单线程JavaScript是因为避免 DOM 渲染的冲突，web worker 支持多线程，但是 web worker 不能访问 window 对象，document 对象等。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中的事件</title>
      <link href="/js-base/js%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E6%B5%81/"/>
      <url>/js-base/js%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h1><p>事件流描述的是从页面中接收事件的顺序。在浏览器中，事件流分为三个阶段：捕获阶段、目标阶段和冒泡阶段。</p><h1 id="事件的三个阶段"><a href="#事件的三个阶段" class="headerlink" title="事件的三个阶段"></a>事件的三个阶段</h1><p>捕获阶段（Capture Phase）：事件从最外层的元素开始向内层元素逐级捕获，直到达到触发事件的目标元素。<br>目标阶段（Target Phase）：事件到达目标元素，触发事件处理函数。<br>冒泡阶段（Bubble Phase）：事件从目标元素开始向外层元素逐级冒泡，直到达到最外层的元素。</p><h1 id="事件的代理有何委托"><a href="#事件的代理有何委托" class="headerlink" title="事件的代理有何委托"></a>事件的代理有何委托</h1><p>事件代理（Event Delegation）是指将事件处理程序绑定到其父元素上，通过冒泡阶段来处理子元素触发的事件。这样可以减少事件处理程序的数量，提高性能和代码简洁度。</p><p>事件代理的优点：</p><ol><li>动态绑定：对新增的子元素也能够起作用，无需为每个子元素都绑定事件处理程序。</li><li>减少内存消耗：不需要为每个子元素都创建事件处理程序，只需一个事件处理程序即可。</li><li>提高性能：减少事件处理程序的数量，避免了大量的事件绑定和解绑操作。</li></ol><h1 id="如何派发事件"><a href="#如何派发事件" class="headerlink" title="如何派发事件"></a>如何派发事件</h1><p>在浏览器中，可以使用 JavaScript 来手动派发事件。常用的方法是使用 dispatchEvent() 方法。具体步骤如下：</p><p>创建一个合适的事件对象，可以使用 new Event(type, options) 或者 document.createEvent()。<br>使用 element.dispatchEvent(event) 方法将事件派发给指定元素。 注意：派发事件时需要确保目标元素和事件处理程序的关联，否则事件处理程序不会执行。</p><p>例如，可以创建一个点击事件并派发给按钮元素：</p><pre><code class="javascript">javascriptconst button = document.querySelector(&#39;button&#39;);const clickEvent = new Event(&#39;click&#39;);button.dispatchEvent(clickEvent);</code></pre><p>以上是基于浏览器环境中的事件派发方式，而在 Node.js 环境中，可以使用 EventEmitter API 来自定义事件，并通过 emit() 方法派发事件。</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Array处理数据的方法总结</title>
      <link href="/js-base/js%E5%85%B3%E4%BA%8EArray%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/js-base/js%E5%85%B3%E4%BA%8EArray%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="创建数组的方式有2种"><a href="#创建数组的方式有2种" class="headerlink" title="创建数组的方式有2种"></a>创建数组的方式有2种</h1><pre><code class="javascript">1. 一种是构造函数的方式 一个是字面量的方式，最好使用字面量的方式2. 因为不管Array或者String本身也是构造函数        Array = String;        let aa = new Array(1,2,3,4,5);        console.log(aa);  //string        let bb = [1,2,3,4];        console.log(bb); //[1,2,3,4]</code></pre><h1 id="ECMAScript的数组每个槽位可以存储任意类型的数据，而且ECMAScript数组也是动态大小的，会随着数据的添加自动增长"><a href="#ECMAScript的数组每个槽位可以存储任意类型的数据，而且ECMAScript数组也是动态大小的，会随着数据的添加自动增长" class="headerlink" title="ECMAScript的数组每个槽位可以存储任意类型的数据，而且ECMAScript数组也是动态大小的，会随着数据的添加自动增长"></a>ECMAScript的数组每个槽位可以存储任意类型的数据，而且ECMAScript数组也是动态大小的，会随着数据的添加自动增长</h1><pre><code class="javascript">    let arr = [1,&#39;1&#39;,[1,2,3,4],&#123;obj1:11,obj2:[1,2,3,4]&#125;];</code></pre><h1 id="某些方法调用用会修改自身的数组"><a href="#某些方法调用用会修改自身的数组" class="headerlink" title="某些方法调用用会修改自身的数组?"></a>某些方法调用用会修改自身的数组?</h1><pre><code class="text">push(): 将一个或多个元素添加到数组的末尾，并返回新的长度。该方法会直接修改原数组。pop(): 移除并返回数组的最后一个元素。该方法会直接修改原数组。shift(): 移除并返回数组的第一个元素。该方法会直接修改原数组。unshift(): 将一个或多个元素添加到数组的开头，并返回新的长度。该方法会直接修改原数组。splice(): 在指定位置插入、删除或替换元素，并返回被删除的元素组成的新数组。该方法会直接修改原数组。sort(): 对数组进行排序。该方法会直接修改原数组。reverse(): 颠倒数组中元素的顺序。该方法会直接修改原数组。</code></pre><h1 id="数组排列位置"><a href="#数组排列位置" class="headerlink" title="数组排列位置"></a>数组排列位置</h1><pre><code class="javascript">1. 用for循环随机打乱位数组置  var Arr = [4, 1, 67, 12, 45, 121, 3];        function randArr(arr) &#123;            for (var i = 0; i &lt; arr.length; i++) &#123;                var iRand = parseInt(arr.length * Math.random());                var temp = arr[i];                arr[i] = arr[iRand];                arr[iRand] = temp;        &#125;        return arr;&#125;2. 使用sort方法错误打乱位数组置 arr.sort(function () &#123;            return (0.5 - Math.random());        &#125;);3. reverse()方法是倒序交换位置 会改变原来的数组  let newarr = arr.reverse()          console.log(newarr === arr)  //true4. 利用sort()对数组对象某个值进行升序排序 let arr = [&#123; &#39;a&#39;: 1, &#39;b&#39;: 2 &#125;, &#123; &#39;a&#39;: 466, &#39;b&#39;: 2 &#125;, &#123; &#39;a&#39;: 623, &#39;b&#39;: 2 &#125;, &#123; &#39;a&#39;: 7, &#39;b&#39;: 2 &#125;, &#123; &#39;a&#39;: 67, &#39;b&#39;: 2 &#125;]        function creatCompare(propertyName) &#123; //根据哪个属性值排序            return function (obj1, obj2) &#123;                //对象两两比较                let value1 = obj1[propertyName];                let value2 = obj2[propertyName];                if (value1 &lt; value2) &#123;                    return -1                &#125; else if (value1 &gt; value2) &#123;                    return 1                &#125; else &#123;                    return 0                &#125;            &#125;        &#125;        let newarr = arr.sort(creatCompare(&#39;a&#39;))        console.log(newarr)</code></pre><h1 id="数组的转换方法"><a href="#数组的转换方法" class="headerlink" title="数组的转换方法"></a>数组的转换方法</h1><pre><code class="javascript">1. 数组转成字符串        let color = [&#39;green&#39;,&#39;red&#39;,&#39;pink&#39;]        console.log(color.join())  // green,red,pink        console.log(color.join(&#39;,&#39;)) // green,red,pink        console.log(color.join(&#39;|&#39;))  // green|red|pink2. 以下这种方法只能转成以逗号分隔的字符串        let colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];         alert(colors.toString()); // red,blue,green        alert(colors.valueOf()); // red,blue,green        alert(colors); // red,blue,green3. 扩展：字符串转数组        console.log(color.join(&#39;|&#39;).split(&#39;|&#39;)) //[&#39;green&#39;,&#39;red&#39;,&#39;pink&#39;]</code></pre><h1 id="栈方法"><a href="#栈方法" class="headerlink" title="栈方法"></a>栈方法</h1><pre><code class="javascript">    let arr = [1,2,3,4];    arr.push(5); //向数组末尾添加5    let poparr = arr.pop();   //取得数组末尾的值，并且删除    console.log(arr);  //[1,2,3,4]</code></pre><h1 id="队列方法"><a href="#队列方法" class="headerlink" title="队列方法"></a>队列方法</h1><pre><code class="javascript">    let arr = [1,2,3,4];    let shiftarr = arr.shift(); //删除数组第一项并取得    arr.unshift(1); //向数组第一项添加    console.log(arr); // [1,2,3,4]</code></pre><h1 id="数组增删改"><a href="#数组增删改" class="headerlink" title="数组增删改"></a>数组增删改</h1><pre><code class="javascript">    let arr = [1,2,3,4]1.删除        arr.splice(1,1) //传入2个参数，第一个数数组开始位置，第二个是删除的数量    console.log(arr)   //[1,3,4] 2.插入    arr.splice(1,0,2) //传入3个参数  第一个参数是开始位置，第二个是要删除的数量，要插入的元素       console.log(arr) //[1,2,3,4]3.替换    arr.splice(3,0,4,5,6)  //方法同插入  ，在序列为3的位置后面，删除0个，添加 4，5，6    console.log(arr) //[1, 2, 3, 4, 5, 6, 4]</code></pre><h1 id="数组相关的操作方法"><a href="#数组相关的操作方法" class="headerlink" title="数组相关的操作方法"></a>数组相关的操作方法</h1><pre><code class="javascript">    let arr = [1,2,3,4,5]    1. 拼接2个数组  返回一个新的数组,不改变原来的数组    let zenarr = arr.concat(6,7,8)    console.log(zenarr) // [1, 2, 3, 4, 5, 6, 7, 8]    2. concat方法不传参数对数组进行第一层的深拷贝    let arr = [1,2,3];    let newarr = arr.concat()    3.数组截取    遵循左包，右不包    console.log(arr.slice(1))  //[2,3,4]    console.log(arr.slice(2))   //[3,4]    console.log(arr.slice(2,4)) //[3,4] 4.slice方法不传参数对数组进行第一层深拷贝    let arr = [1,2,3,4]    let slicearr = arr.slice()    console.log(slicearr) //返回跟原来一样的新数组   [1,2,3,4]</code></pre><h1 id="搜索和位置方法"><a href="#搜索和位置方法" class="headerlink" title="搜索和位置方法"></a>搜索和位置方法</h1><pre><code class="javascript">1.indexOf从索为0开始搜索   lastIndexOf从最后一项开始搜索        let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1];        alert(numbers.indexOf(4)); // 3        alert(numbers.lastIndexOf(4)); // 5        alert(numbers.includes(4)); // true        alert(numbers.indexOf(4, 4)); // 5        alert(numbers.lastIndexOf(4, 4)); // 3        alert(numbers.includes(4, 7)); // false        let person = &#123; name: &quot;Nicholas&quot; &#125;;        let people = [&#123; name: &quot;Nicholas&quot; &#125;];        let morePeople = [person];        alert(people.indexOf(person)); // -1        alert(morePeople.indexOf(person)); // 0        alert(people.includes(person)); // false        alert(morePeople.includes(person)); // true2. 使用includes()方法判断数组里有无某数据          function test(fruit) &#123;        const redFruits = [&#39;apple&#39;, &#39;strawberry&#39;, &#39;cherry&#39;, &#39;cranberries&#39;];        if (redFruits.includes(fruit)) &#123;            console.log(&#39;存在&#39;);        &#125;else&#123;            console.log(&#39;不存在&#39;)        &#125;    &#125;</code></pre><h1 id="断言函数的运用"><a href="#断言函数的运用" class="headerlink" title="断言函数的运用"></a>断言函数的运用</h1><pre><code class="javascript">//找到匹配项后，这两个方法都不再继续搜索。 //可以说是查询判断里性能最好的方法        const people = [            &#123;                name: &quot;Matt&quot;,                age: 27            &#125;,            &#123;                name: &quot;Nicholas&quot;,                age: 29            &#125;        ];        alert(people.find((element, index, array) =&gt; element.age &lt; 28));        // &#123;name: &quot;Matt&quot;, age: 27&#125;        alert(people.findIndex((element, index, array) =&gt; element.age &lt; 28));        // 0//其实也可以当做循环使用        const evens = [2, 4, 6];        evens.find((element, index, array) =&gt; &#123;            console.log(element);            console.log(index);             console.log(array);            return element === 4;        &#125;);// 2// 0// [2, 4, 6]// 4// 1// [2, 4, 6]</code></pre><h1 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h1><pre><code class="text">every()：对数组每一项都运行传入的函数，如果对每一项函数都返回 true，则这个方法返回 true。filter()：对数组每一项都运行传入的函数，函数返回 true 的项会组成数组之后返回。forEach()：对数组每一项都运行传入的函数，没有返回值。map()：对数组每一项都运行传入的函数，返回由每次函数调用的结果构成的数组。some()：对数组每一项都运行传入的函数，如果有一项函数返回 true，则这个方法返回 true。这些方法都不改变调用它们的数组,会重新返回一个数组</code></pre><h1 id="归并方法"><a href="#归并方法" class="headerlink" title="归并方法"></a>归并方法</h1><pre><code class="javascript">reduce()        //每一项都加1        let arr = [1,1,2,3,4,5]        const res = arr.reduce(function(prev,cur)&#123;            return [...prev,cur + 1]        &#125;,[])        //数组求和        const text = [&#123;            id: 1,            sex: 0        &#125;, &#123;            id: 2,            sex: 1        &#125;, &#123;            id: 3,            sex: 1        &#125;]        const res = text.reduce(function (prev, cur, index, array) &#123;            return prev + cur.id        &#125;, 0)        // 计算数组每个元素出现的次数        const arr = [1, 1, 2, 3, 4]        const rescount = arr.reduce(function (prev, cur, index, array) &#123;            if (cur in prev) &#123;                prev[cur]++            &#125; else &#123;                prev[cur] = 1            &#125;            return prev        &#125;, &#123;&#125;)                //取出最大值         const res = arr.reduce(function(prev,cur)&#123;           return prev &lt;= cur ? prev = cur : prev = prev        &#125;,0)        //数组去重        const res = arr.reduce(function(prev,cur)&#123;            return !prev.includes(cur) ? [...prev,cur] : prev        &#125;,[])        // 将二维数组转化为一维        const arrer = [[0, 1], [2, 3], [4, 5]]        const arrerres = arrer.reduce(function (prev, cur) &#123;            return prev.concat(cur)        &#125;, [])        // 将多维数组转化为一维        let arr = [[0, 1], [2, 3], [4, [5, 6, 7]]]        const newArr = function (arr) &#123;            return arr.reduce((pre, cur) =&gt; pre.concat(Array.isArray(cur) ? newArr(cur) : cur), [])        &#125;reduceRight()</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于String包装类型处理数据的总结</title>
      <link href="/js-base/js%E5%85%B3%E4%BA%8EString%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E7%9A%84%E6%80%BB%E7%BB%93/"/>
      <url>/js-base/js%E5%85%B3%E4%BA%8EString%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E7%9A%84%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="创建字符串的方式有3种"><a href="#创建字符串的方式有3种" class="headerlink" title="创建字符串的方式有3种"></a>创建字符串的方式有3种</h1><pre><code class="javascript">1. 使用单引号或双引号: 可以使用单引号（&#39;）或双引号（&quot;）来创建字符串。例如：let str = &#39;Hello World&#39;; 或 let str = &quot;Hello World&quot;2. 使用模板字面量（Template literals）：模板字面量是ES6引入的一种创建字符串的方式，使用反引号包裹字符串内容。这种方式可以包含变量和表达式，并支持多行字符串。例如：    let name = &#39;Alice&#39;;    let greeting = `Hello $&#123;name&#125;, welcome!`;3.使用String对象的构造函数：可以使用new关键字和String对象的构造函数来创建字符串。例如：let str = new String(&#39;Hello World&#39;);</code></pre><h1 id="字符串拼接-不改变原来的字符串，-返回一个新的字符串"><a href="#字符串拼接-不改变原来的字符串，-返回一个新的字符串" class="headerlink" title="字符串拼接  不改变原来的字符串， 返回一个新的字符串"></a>字符串拼接  不改变原来的字符串， 返回一个新的字符串</h1><pre><code class="javascript">1.采用concat方法    let stringvalue = &#39;hello&#39;    let result = stringvalue.concat(&#39;world&#39;) //可以接受多个参数，用逗号分开    console.log(result)  //  hello world    console.log(stringvalue) //hello     2. 采用 加号 +  实现快速拼接    let a = &#39;hello&#39;    let b = a + &#39;world&#39;    console.log(a)  // hello    console.log(b) //hello world</code></pre><h1 id="字符串提取"><a href="#字符串提取" class="headerlink" title="字符串提取"></a>字符串提取</h1><pre><code class="javascript">    let stringvalue = &#39;hello world&#39;    console.log(stringValue.slice(3)); // &quot;lo world&quot;    console.log(stringValue.substring(3)); // &quot;lo world&quot;    console.log(stringValue.substr(3)); // &quot;lo world&quot;    console.log(stringValue.slice(3, 7)); // &quot;lo w&quot;    console.log(stringValue.substring(3, 7)); // &quot;lo w&quot;    console.log(stringValue.substr(3, 7)); // &quot;lo worl&quot; //clice 单个参数是 左不包后面全要 (]        2个参数是 左不包，后包  (]//substring 单个参数是 左不包后面全要 (]         2个参数是 左包，后包   []//substr 单个参数是 左包后面全要  []           2个参数是 左包，第二个参数是截取个数  []</code></pre><h1 id="字符串位置方法"><a href="#字符串位置方法" class="headerlink" title="字符串位置方法"></a>字符串位置方法</h1><pre><code class="javascript">1. indexOf和lastIndexOf的区别就是前者是从前面开始寻找，后者是从后面开始寻找    let stringvalue = &#39;hello world&#39;    console.log(stringvalue.indexOf(&quot;o&quot;)) // 4    console.log(stringvalue.lastIndexOf(&quot;o&quot;)) // 7    传入第二个参数的时候，第二个参数代表从哪个序列开始寻找    console.log(stringValue.indexOf(&quot;o&quot;, 6)); // 7    console.log(stringValue.lastIndexOf(&quot;o&quot;, 6)); // 4 2. 寻找某段字符串里的某个字符，并全部记录它的序列位置    let stringValue = &quot;Lorem ipsum dolor sit amet, consectetur adipisicing elit&quot;;    let positions = new Array();    let pos = stringValue.indexOf(&quot;e&quot;);     while(pos &gt; -1)&#123;         positions.push(pos)        pos = stringValue.indexOf(&#39;e&#39;, pos + 1)    &#125;    console.log(positions)  // [3,24,32,35,52]</code></pre><h1 id="查看字符串里是否包含某个-字符串-或者字符"><a href="#查看字符串里是否包含某个-字符串-或者字符" class="headerlink" title="查看字符串里是否包含某个 字符串 或者字符"></a>查看字符串里是否包含某个 字符串 或者字符</h1><pre><code class="javascript">1.有三种方法可以判断      let message = &quot;foobarbaz&quot;;    console.log(message.startsWith(&quot;foo&quot;)); // true    console.log(message.startsWith(&quot;bar&quot;)); // false    console.log(message.endsWith(&quot;baz&quot;)); // true    console.log(message.endsWith(&quot;bar&quot;)); // false    console.log(message.includes(&quot;bar&quot;)); // true    console.log(message.includes(&quot;qux&quot;)); // false startsWith()检查开始于索引 0 的匹配项 endsWith()检查开始于索引(string.length - substring.length)的匹配项includes()检查整个字符串基本就是使用includes就完事了</code></pre><h1 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h1><pre><code class="javascript">    作用：删除2边空格 原字符串不受到影响 返回一个新的字符串    let stringValue = &quot; hello world &quot;;    let trimmedStringValue = stringValue.trim();    console.log(stringValue); // &quot; hello world &quot;    console.log(trimmedStringValue); // &quot;hello world&quot; 扩展：trimLeft()和 trimRight()方法分别用于从字符串开始和末尾清理空格符。</code></pre><h1 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h1><pre><code class="javascript">    作用：复制多次字符串 原字符串不受影响  返回一个新的字符串    let stringvalue = &#39;ha&#39;    console.log(stringvalue.repeat(12).concat(&#39; yyyy&#39;))  // hahahahahahahahahahahaha yyyy扩展：padStart()和 padEnd()方法会复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件。这两个方法的第一个参数是长度，第二个参数是可选的填充字符串，默认为空格</code></pre><h1 id="字符串迭代与解构简单的运用，原理参考js高程"><a href="#字符串迭代与解构简单的运用，原理参考js高程" class="headerlink" title="字符串迭代与解构简单的运用，原理参考js高程"></a>字符串迭代与解构简单的运用，原理参考js高程</h1><pre><code class="javascript">    let arr = []    let str = &#39;asddd&#39;    arr = [...str]    console.log(arr)  //[&quot;a&quot;, &quot;s&quot;, &quot;d&quot;, &quot;d&quot;, &quot;d&quot;]</code></pre><h1 id="字符串大小转换"><a href="#字符串大小转换" class="headerlink" title="字符串大小转换"></a>字符串大小转换</h1><pre><code class="javascript">    let stringValue = &quot;hello world&quot;;    console.log(stringValue.toLocaleUpperCase()); // &quot;HELLO WORLD&quot;    console.log(stringValue.toUpperCase()); // &quot;HELLO WORLD&quot;    console.log(stringValue.toLocaleLowerCase()); // &quot;hello world&quot;    console.log(stringValue.toLowerCase()); // &quot;hello world&quot; 原来就有的是 toUpperCase 和 toLowerCase ，但是在很多地区，地区特定的方法与通用的方法是一样的。但在少数语言中（如土耳其语），Unicode 大小写转换需应用特殊规则，要使用地区特定的方法才能实现正确转换。推荐使用 toLocaleUpperCase 和 toLocaleLowerCase记忆方法是一个是Up是向上 就是放大</code></pre><h1 id="字符串替换-简单用法"><a href="#字符串替换-简单用法" class="headerlink" title="字符串替换  简单用法"></a>字符串替换  简单用法</h1><pre><code class="javascript">    let text = &quot;cat, bat, sat, fat&quot;;    let result = text.replace(&quot;at&quot;, &quot;ond&quot;);    console.log(result); // &quot;cond, bat, sat, fat&quot;    配合正则表达式的高级用法    result = text.replace(/a t/g, &quot;ond&quot;);    console.log(result); // &quot;cond, bond, sond, fond&quot; </code></pre><h1 id="计算输入的字符个数"><a href="#计算输入的字符个数" class="headerlink" title="计算输入的字符个数"></a>计算输入的字符个数</h1><pre><code class="javascript">    getByteLen(val) &#123;        var len = 0        for (var i = 0; i &lt; val.length; i++) &#123;        var a = val.charAt(i)        if (a.match(/[^\x00-\xff]/gi) != null) &#123;            len += 2        &#125; else &#123;            len += 1        &#125;        &#125;        return len    &#125;</code></pre><h1 id="实现方法为将字符串按某个字符切割成若干个字符串，并以数组形式返回"><a href="#实现方法为将字符串按某个字符切割成若干个字符串，并以数组形式返回" class="headerlink" title="实现方法为将字符串按某个字符切割成若干个字符串，并以数组形式返回"></a>实现方法为将字符串按某个字符切割成若干个字符串，并以数组形式返回</h1><pre><code class="javascript">    var s = &quot;abc,abcd,aaa&quot;;    ss = s.split(&quot;,&quot;);// 在每个逗号(,)处进行分解  [&quot;abc&quot;, &quot;abcd&quot;, &quot;aaa&quot;]    var s1 = &quot;helloworld&quot;;    ss1 = s1.split(&#39;&#39;);  //[&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;, &quot;w&quot;, &quot;o&quot;, &quot;r&quot;, &quot;l&quot;, &quot;d&quot;]</code></pre><h1 id="其它方法"><a href="#其它方法" class="headerlink" title="其它方法"></a>其它方法</h1><pre><code class="javascript">    let mseesage = new String(&#39;hello&#39;)    console.log(mseesage.length)  //返回字符串的长度  5    console.log(mseesage.charAt(0))  //返回某个索引值  h    console.log(mseesage.charCodeAt(0))  //字符编码  h的字符编码是108</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈call和apply和bind</title>
      <link href="/js-base/js%E6%B5%85%E8%B0%88call%E5%92%8Capply%E5%92%8Cbind/"/>
      <url>/js-base/js%E6%B5%85%E8%B0%88call%E5%92%8Capply%E5%92%8Cbind/</url>
      
        <content type="html"><![CDATA[<h1 id="call-x2F-apply-x2F-bind-的作用"><a href="#call-x2F-apply-x2F-bind-的作用" class="headerlink" title="call&#x2F;apply&#x2F;bind 的作用"></a>call&#x2F;apply&#x2F;bind 的作用</h1><ol><li><p>call、apply和bind 都是 JavaScript 中用于改变函数执行上下文（Context）的方法。</p></li><li><p>先来解释下什么是执行上下文<br>JavaScript中的执行上下文（Execution Context）是指代码被执行时的环境。每当JavaScript代码执行时，都会创建一个执行上下文，并且这些执行上下文可以组成一个执行上下文栈（Execution Context Stack）。</p></li></ol><p>2.1执行上下文包含了以下三个重要的组成部分：</p><p>2.1.1变量对象（Variable Object）：用于存储在上下文中定义的变量、函数声明和函数参数。它包括函数的形参、函数声明、变量声明等。<br>2.1.2作用域链（Scope Chain）：作用域链是一个由当前执行上下文的变量对象和所有外部环境的变量对象组成的链。它用来查找和解析变量和函数标识符。<br>2.1.3this 值：this 值指定了函数的执行上下文中的当前对象，它根据函数的调用方式动态绑定。</p><ol start="3"><li>执行上下文的生命周期可以总结为以下几个阶段：</li></ol><p>3.1 创建阶段（Creation Phase）：在进入执行阶段之前，JavaScript 引擎会先创建执行上下文。</p><p>3.1.1创建变量对象<br>3.1.2建立作用域链<br>3.1.3确定 this 的指向</p><p>3.2 执行阶段（Execution Phase）：执行阶段是执行上下文中实际执行代码的阶段。</p><p>3.2.1 执行代码，逐行执行</p><p>每当函数调用时，都会创建一个新的执行上下文，并将其推入执行上下文栈的顶部。当函数执行完毕后，其执行上下文会从栈中弹出，控制权会回到调用该函数的执行上下文。</p><p>了解和理解执行上下文对于理解 JavaScript 中的变量作用域、作用域链以及 this 的指向等都非常重要。</p><h1 id="call-x2F-apply-x2F-bind-的使用"><a href="#call-x2F-apply-x2F-bind-的使用" class="headerlink" title="call&#x2F;apply&#x2F;bind 的使用"></a>call&#x2F;apply&#x2F;bind 的使用</h1><pre><code class="javascript">1. call: call 方法可以在指定的上下文中调用函数，并且可以传入多个参数。function greet(name) &#123;  console.log(`Hello, $&#123;name&#125;!`);&#125;greet.call(null, &#39;Alice&#39;); // 输出：Hello, Alice!在上述例子中，我们使用 call 方法将函数 greet 在 null 上下文中进行调用，并传入参数 &#39;Alice&#39;。2. apply: apply 方法与 call 类似，也可以在指定的上下文中调用函数，但参数以数组的形式传递。function greet(name, age) &#123;  console.log(`Hello, $&#123;name&#125;! You are $&#123;age&#125; years old.`);&#125;greet.apply(null, [&#39;Alice&#39;, 25]); // 输出：Hello, Alice! You are 25 years old.在上述例子中，我们使用 apply 方法将函数 greet 在 null 上下文中进行调用，并传入参数 &#39;Alice&#39; 和 25，这两个参数被放在一个数组中传递给 apply 方法。3. bind: bind 方法不会立即调用函数，而是创建一个新函数，并将指定的上下文绑定到该函数。绑定后的函数可以稍后调用，并传入参数。function greet(name) &#123;  console.log(`Hello, $&#123;name&#125;!`);&#125;const greetAlice = greet.bind(null, &#39;Alice&#39;);greetAlice(); // 输出：Hello, Alice!在上述例子中，我们使用 bind 方法将函数 greet 绑定到 null 上下文，同时传入参数 &#39;Alice&#39;。返回的绑定后的函数 greetAlice 可以在稍后的时候执行，而不需要再次传入参数。</code></pre><h1 id="call的模拟实现"><a href="#call的模拟实现" class="headerlink" title="call的模拟实现"></a>call的模拟实现</h1><pre><code class="javascript">// 模拟实现call方法Function.prototype.myCall = function (context, ...args) &#123;  // 判断是否传入了上下文，若未传入，默认为全局对象window  context = context || window;  // 将当前函数设为上下文对象的一个属性  context.fn = this;  // 调用函数并传入参数  const result = context.fn(...args);  // 删除临时添加的函数属性  delete context.fn;  // 返回函数执行结果  return result;&#125;;</code></pre><h1 id="apply的模拟实现"><a href="#apply的模拟实现" class="headerlink" title="apply的模拟实现"></a>apply的模拟实现</h1><pre><code class="javascript">// 模拟实现apply方法Function.prototype.myApply = function (context, args) &#123;  // 判断是否传入了上下文，若未传入，默认为全局对象window  context = context || window;  // 将当前函数设为上下文对象的一个属性  context.fn = this;  // 调用函数并传入参数  const result = context.fn(...args);  // 删除临时添加的函数属性  delete context.fn;  // 返回函数执行结果  return result;&#125;;</code></pre><h1 id="bind的模拟实现"><a href="#bind的模拟实现" class="headerlink" title="bind的模拟实现"></a>bind的模拟实现</h1><pre><code class="javascript">Function.prototype.myBind = function (context, ...args) &#123;  const fn = this; // 当前函数  return function (...innerArgs) &#123;    return fn.apply(context, [...args, ...innerArgs]);  &#125;;&#125;;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js原型，原型链</title>
      <link href="/js-base/js%E5%8E%9F%E5%9E%8B%EF%BC%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>/js-base/js%E5%8E%9F%E5%9E%8B%EF%BC%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="原型规则"><a href="#原型规则" class="headerlink" title="原型规则"></a>原型规则</h1><ol><li>所有的引用类型(数组、函数、对象)都具有对象特性，即可自由扩展属性</li><li>所有的引用类型(数组、对象、函数)有一个__proto__ 属性，属性值是一个普通的对象</li><li>所有的函数都有一个prototype属性，属性值也是一个普通的对象</li><li>所有的引用类型(数组、对象、函数),__proto__属性指向它的构造函数的prototype属性</li><li>当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么回去他的__proto__(即它的构造函数的prototype中寻找)</li></ol><h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><pre><code class="javascript">function Person(name)&#123;    this.name = name&#125;let obj = new Person(&#39;jack&#39;)console.log(obj.__proto__ == Person.prototype)console.log(Person.prototype.__proto__ == Object.prototype)console.log(Object.prototype__proto__ == null)// 其实原始类型的__proto__  也是 Object.prototypeconsole.log(String.prototype__proto__ == Object.prototype)</code></pre><h1 id="图解原型链"><a href="#图解原型链" class="headerlink" title="图解原型链"></a>图解原型链</h1><p><img data-src="/images/fe/yxl.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组扁平化</title>
      <link href="/js-base/%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96/"/>
      <url>/js-base/%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<pre><code class="javascript">let arr = [1, [2, [3, 4, 5]]]// 1.递归function flatten(arr) &#123;    let newarr = [];    for (let i = 0; i &lt; arr.length; i++) &#123;        const element = arr[i];        if (Array.isArray(element)) &#123;            newarr = newarr.concat(flatten(element))        &#125; else &#123;            newarr.push(element)        &#125;    &#125;    return newarr&#125;// 2.reducefunction flatten(arr) &#123;    // reduce特点：能够把返回值给到下一次遍历的pre    return arr.reduce((pre, cur) =&gt; &#123;        return pre.concat(Array.isArray(cur) ? flatten(cur) : cur)    &#125;, [])&#125;// 3.toString + split  function flatten(arr) &#123;    // return arr.toString() // 1,2,3,4,5    return arr.toString().split(&#39;,&#39;) // [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;]&#125;// 4. 不用递归使用循环直接判断数组是不是包含数组function flatten(arr) &#123;    while (arr.some(arr =&gt; Array.isArray(arr))) &#123;        arr = [].concat(...arr)    &#125;    return arr&#125;//5.es6提供flat Infinity无限次console.log(arr.flat(Infinity))// 6.正则function flatten(arr) &#123;    let str = JSON.z(arr);    str = str.replace(/(\[|\])/g, &quot;&quot;);    str = &quot;[&quot; + str + &quot;]&quot;;    return JSON.parse(str);&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise</title>
      <link href="/js-base/promise/"/>
      <url>/js-base/promise/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是promise"><a href="#什么是promise" class="headerlink" title="什么是promise"></a>什么是promise</h1><p>Promise 是异步编程的一种解决方案： 从语法上讲，promise是一个对象，从它可以获取异步操作的消息；从本意上讲，它是承诺，承诺它过一段时间会给你一个结果。 promise有三种状态：**pending(等待态)，fulfiled(成功态)，rejected(失败态)**；状态一旦改变，就不会再变。创造promise实例后，它会立即执行</p><h1 id="promise用来解决什么问题"><a href="#promise用来解决什么问题" class="headerlink" title="promise用来解决什么问题"></a>promise用来解决什么问题</h1><ol><li>回调地狱（Callback Hell）：在多个异步操作嵌套执行的情况下，使用传统的回调函数会导致代码结构混乱、可读性差，并且难以维护。Promise 可以通过链式调用的方式，使代码更加清晰易读，避免回调地狱的问题。</li><li>统一返回错误处理 catch </li><li>统一返回处理结果 then</li><li>并行异步操作的协调：有些场景下，需要同时执行多个异步操作，并在所有操作完成后进行进一步处理。Promise 提供了 Promise.all 方法，可以接收一个包含多个 Promise 对象的数组，并在所有 Promise 对象都成功解决后才返回结果，这样可以方便地协调并行异步操作。 </li><li>多个异步操作的竞态条件控制：有时候需要多个异步操作并发执行，但只需要获取最先完成的结果。Promise 提供了 Promise.race 方法，可以接收一个包含多个 Promise 对象的数组，并在其中任何一个 Promise 对象首次解决或拒绝后即返回结果，方便控制竞态条件。</li></ol><h1 id="promise的基础用法"><a href="#promise的基础用法" class="headerlink" title="promise的基础用法"></a>promise的基础用法</h1><pre><code class="javascript">1： Promise是一个构造函数，自己身上有all、reject、resolve这几个眼熟的方法，原型上有then、catch等同样很眼熟的方法。      let p = new Promise((resolve, reject) =&gt; &#123;          //执行异步操作          setTimeout(() =&gt; &#123;              console.log(&#39;执行完成&#39;)              resolve(&#39;我是成功！！&#39;)          &#125;, 2000);      &#125;)上段代码会直接执行 2秒后输出 &#39;执行完成&#39;Promise的构造函数接收一个参数：函数，并且这个函数需要传入两个参数：resolve：异步操作执行成功后的回调函数reject：异步操作执行失败后的回调函数2：then 链式操作的用法  从表面上看，Promise只是能够简化层层回调的写法，而实质上，Promise的精髓是“状态”，用维护状态、传递状态的方式来使得回调函数能够及时调用，它比传递callback函数要简单、灵活的多。所以使用Promise的正确场景是这样的：      p.then((data) =&gt; &#123;          console.log(data)      &#125;)3：reject的用法 把Promise的状态置为rejected，这样我们在then中就能捕捉到，然后执行“失败”情况的回调。看下面的代码。      let p = new Promise((resolve, reject) =&gt; &#123;          //执行异步操作          setTimeout(() =&gt; &#123;              let num = Math.ceil(Math.random()*10) //生成1 - 10的随机数               if(num &lt;= 5)&#123;                   resolve(num)               &#125;else&#123;                   reject(&#39;数字是大于5的&#39;)               &#125;          &#125;, 1000);      &#125;)      p.then((data) =&gt; &#123;          console.log(&#39;resolve&#39;,data)      &#125;,(err) =&gt; &#123;          console.log(&#39;rejeced&#39;,err)      &#125;)产生以一个随机数，如果大于5就会使用reject  错误(err)输出&#39;数字是大于5&#39;4：catch的用法 (前面的代码有错误可以报出来，不要promise是无法执行下来的)我们知道Promise对象除了then方法，还有一个catch方法，它是做什么用的呢？其实它和then的第二个参数一样，用来指定reject的回调。用法是这样：      let p = new Promise((resolve, reject) =&gt; &#123;          //执行异步操作          setTimeout(() =&gt; &#123;              let num = Math.ceil(Math.random()*10) //生成1 - 10的随机数               if(num &lt;= 5)&#123;                   resolve(num)               &#125;else&#123;                   reject(&#39;数字是大于5的&#39;)               &#125;          &#125;, 1000);      &#125;)      p.then((data) =&gt; &#123;          console.log(&#39;resolve&#39;,data)  // 假设随机数是 3  那么输出 resolve 为 3          console.log(aaaa)  //aaaa是没有被定义的      &#125;,(err) =&gt; &#123;          console.log(&#39;rejeced&#39;,err)      &#125;).catch((err) =&gt; &#123;          console.log(&#39;rejeced&#39;,err)  //  这里报错 ： rejeced ReferenceError: aaaa is not defined      &#125;)在resolve的回调中，我们console.log(somedata);而aaaa这个变量是没有被定义的。如果我们不用Promise，代码运行到这里就直接在控制台报错了，不往下运行了。</code></pre><h1 id="all的用法"><a href="#all的用法" class="headerlink" title="all的用法"></a>all的用法</h1><pre><code class="javascript">1:all的用法：谁跑的慢，以谁为准执行回调。all接收一个数组参数，里面的值最终都算返回Promise对象2:Promise的all方法提供了并行执行异步操作的能力，并且在所有异步操作执行完后才执行回调。看下面的例子：        let promise1 = new Promise((resolve, reject) =&gt; &#123;            setTimeout(() =&gt; &#123;                var num = Math.ceil(Math.random() * 10); //生成1-10的随机数                if (num &lt;= 5) &#123;                    resolve(num);                &#125;                else &#123;                    reject(&#39;数字太大了1&#39;);                &#125;            &#125;)        &#125;)        let promise2 = new Promise((resolve, reject) =&gt; &#123;            setTimeout(() =&gt; &#123;                var num = Math.ceil(Math.random() * 10); //生成1-10的随机数                if (num &lt;= 5) &#123;                    resolve(num);                &#125;                else &#123;                    reject(&#39;数字太大了2&#39;);                &#125;            &#125;)        &#125;)        let promise3 = new Promise((resolve, reject) =&gt; &#123;            setTimeout(() =&gt; &#123;                var num = Math.ceil(Math.random() * 10); //生成1-10的随机数                if (num &lt;= 5) &#123;                    resolve(num);                &#125;                else &#123;                    reject(&#39;数字太大了3&#39;);                &#125;            &#125;)        &#125;)        let p = Promise.all([promise1, promise2, promise3])        p.then(function (res) &#123;            //三个都成功则成功 res返回 [p1,p2,p3] 结果的数组            console.log(res)        &#125;, function (err) &#123;            //只要有失败，则失败  err 返回在哪个promise失败的回调            console.log(err)        &#125;)有了all，你就可以并行执行多个异步操作，并且在一个回调中处理所有的返回数据，是不是很酷？有一个场景是很适合用这个的，一些游戏类的素材比较多的应用，打开网页时，预先加载需要用到的各种资源如图片、flash以及各种静态文件。所有的都加载完后，我们再进行页面的初始化。</code></pre><h1 id="race的用法"><a href="#race的用法" class="headerlink" title="race的用法"></a>race的用法</h1><pre><code class="javascript">1:race的用法：谁跑的快，以谁为准执行回调2：race的使用场景：比如我们可以用race给某个异步请求设置超时时间，并且在超时后执行相应的操作，代码如下        //请求某个图片资源        function requestImg() &#123;            var p = new Promise((resolve, reject) =&gt; &#123;                var img = new Image();                img.onload = function () &#123;                    resolve(img);                &#125;                img.src = &#39;图片的路径&#39;;            &#125;);            return p;        &#125;        //延时函数，用于给请求计时        function timeout() &#123;            var p = new Promise((resolve, reject) =&gt; &#123;                setTimeout(() =&gt; &#123;                    reject(&#39;图片请求超时&#39;);                &#125;, 5000);            &#125;);            return p;        &#125;        Promise.race([requestImg(), timeout()]).then((data) =&gt; &#123;            console.log(data);        &#125;).catch((err) =&gt; &#123;            console.log(err);        &#125;);requestImg函数会异步请求一张图片，我把地址写为&quot;图片的路径&quot;，所以肯定是无法成功请求到的。timeout函数是一个延时5秒的异步操作。我们把这两个返回Promise对象的函数放进race，于是他俩就会赛跑，如果5秒之内图片请求成功了，那么遍进入then方法，执行正常的流程。如果5秒钟图片还未成功返回，那么timeout就跑赢了，则进入catch，报出“图片请求超时”的信息。</code></pre><h1 id="promise-上有哪些方法"><a href="#promise-上有哪些方法" class="headerlink" title="promise 上有哪些方法"></a>promise 上有哪些方法</h1><ol><li><p>Promise.prototype.then(onFulfilled, onRejected)：添加对 Promise 成功或失败状态的处理函数。onFulfilled 是当 Promise 成功时执行的回调函数，onRejected 是当 Promise 失败时执行的回调函数。该方法返回一个新的 Promise 对象，可以通过链式调用 then 方法来实现对异步操作的连续处理。</p></li><li><p>Promise.prototype.catch(onRejected)：添加对 Promise 失败状态的处理函数。相当于调用 then(undefined, onRejected)。该方法也返回一个新的 Promise 对象。</p></li><li><p>Promise.prototype.finally(onFinally)：添加一个回调函数，在 Promise 执行结束后无论成功或失败都会执行该函数。可以用于清理工作或处理一些需要在最后执行的逻辑。该方法返回一个新的 Promise 对象。</p></li><li><p>Promise.resolve(value)：返回一个以给定值解析后的 Promise 对象。如果给定的值是一个 Promise 对象，则直接返回该对象，否则创建一个新的 Promise 对象并使用给定的值进行解析。</p></li><li><p>Promise.reject(reason)：返回一个以给定原因拒绝的 Promise 对象。</p></li><li><p>Promise.all(iterable)：接收一个可迭代对象（例如数组或类数组对象），并返回一个新的 Promise 对象。该 Promise 对象在所有输入的 Promise 对象都成功解析后才会成功解析，并将解析结果按顺序作为数组传递。如果其中任何一个 Promise 对象失败，则整个 Promise.all 操作会立即失败。</p></li><li><p>Promise.race(iterable)：接收一个可迭代对象，并返回一个新的 Promise 对象。该 Promise 对象在输入的 Promise 对象中有任何一个完成（无论成功或失败）时就会完成，并采用第一个完成的 Promise 的结果。</p></li><li><p>Promise.allSettled(iterable)：接收一个可迭代对象，并返回一个新的 Promise 对象。该 Promise 对象在所有输入的 Promise 对象都完成后才会完成，不管是成功还是失败，结果会作为数组传递给回调函数。</p></li><li><p>Promise.any(iterable)：接收一个可迭代对象，并返回一个新的 Promise 对象。该 Promise 对象在输入的 Promise 对象中有任何一个成功解析时就会成功解析，并采用第一个成功解析的 Promise 的结果。如果所有 Promise 都失败，则整个 Promise.any 操作会立即失败。</p></li></ol><h1 id="手写一个promise"><a href="#手写一个promise" class="headerlink" title="手写一个promise"></a>手写一个promise</h1><pre><code class="javascript">    // 三种状态    const PENDING = &quot;pending&quot;;    const RESOLVED = &quot;resolved&quot;;    const REJECTED = &quot;rejected&quot;;    // promise 接收⼀个函数参数，该函数会⽴即执⾏    function MyPromise(fn) &#123;        let _this = this;        _this.currentState = PENDING;        _this.value = undefined;        // ⽤于保存 then 中的回调，只有当 promise        // 状态为 pending 时才会缓存，并且每个实例⾄多缓存⼀个        _this.resolvedCallbacks = [];        _this.rejectedCallbacks = [];        _this.resolve = function (value) &#123;            if (value instanceof MyPromise) &#123;                // 如果 value 是个 Promise，递归执⾏                return value.then(_this.resolve, _this.reject)            &#125;            setTimeout(() =&gt; &#123; // 异步执⾏，保证执⾏顺序                if (_this.currentState === PENDING) &#123;                    _this.currentState = RESOLVED;                    _this.value = value;                    _this.resolvedCallbacks.forEach(cb =&gt; cb());                &#125;            &#125;)        &#125;;        _this.reject = function (reason) &#123;            setTimeout(() =&gt; &#123; // 异步执⾏，保证执⾏顺序                if (_this.currentState === PENDING) &#123;                    _this.currentState = REJECTED;                    _this.value = reason;                    _this.rejectedCallbacks.forEach(cb =&gt; cb());                &#125;            &#125;)        &#125;        // ⽤于解决以下问题        // new Promise(() =&gt; throw Error(&#39;error))        try &#123;            fn(_this.resolve, _this.reject);        &#125; catch (e) &#123;            _this.reject(e);        &#125;    &#125;    MyPromise.prototype.then = function (onResolved, onRejected) &#123;        var self = this;        // 规范 2.2.7，then 必须返回⼀个新的 promise        var promise2;        // 规范 2.2.onResolved 和 onRejected 都为可选参数        // 如果类型不是函数需要忽略，同时也实现了透传        // Promise.resolve(4).then().then((value) =&gt; console.log(value))        onResolved = typeof onResolved === &#39;function&#39; ? onResolved : v =&gt; v;        onRejected = typeof onRejected === &#39;function&#39; ? onRejected : r =&gt; r        if (self.currentState === RESOLVED) &#123;            return (promise2 = new MyPromise(function (resolve, reject) &#123;                // 规范 2.2.4，保证 onFulfilled，onRjected 异步执⾏                // 所以⽤了 setTimeout 包裹下                setTimeout(function () &#123;                    try &#123;                        var x = onResolved(self.value);                        resolutionProcedure(promise2, x, resolve, reject);                    &#125; catch (reason) &#123;                        reject(reason);                    &#125;                &#125;);            &#125;));        &#125;        if (self.currentState === REJECTED) &#123;            return (promise2 = new MyPromise(function (resolve, reject) &#123;                setTimeout(function () &#123;                    // 异步执⾏onRejected                    try &#123;                        var x = onRejected(self.value);                        resolutionProcedure(promise2, x, resolve, reject);                    &#125; catch (reason) &#123;                        reject(reason);                    &#125;                &#125;);            &#125;));        &#125;        if (self.currentState === PENDING) &#123;            return (promise2 = new MyPromise(function (resolve, reject) &#123;                self.resolvedCallbacks.push(function () &#123;                    // 考虑到可能会有报错，所以使⽤ try/catch 包裹                    try &#123;                        var x = onResolved(self.value);                        resolutionProcedure(promise2, x, resolve, reject);                    &#125; catch (r) &#123;                        reject(r);                    &#125;                &#125;);                self.rejectedCallbacks.push(function () &#123;                    try &#123;                        var x = onRejected(self.value);                        resolutionProcedure(promise2, x, resolve, reject);                    &#125; catch (r) &#123;                        reject(r);                    &#125;                &#125;);            &#125;));        &#125;    &#125;;</code></pre><h1 id="promise经典案例加深理解"><a href="#promise经典案例加深理解" class="headerlink" title="promise经典案例加深理解"></a>promise经典案例加深理解</h1><pre><code class="javascript">1.const promise = new Promise((resolve, reject) =&gt; &#123;  console.log(1)  resolve()  console.log(2)&#125;)promise.then(() =&gt; &#123;  console.log(3)&#125;)console.log(4)输出:  1 2 4 3解释:  Promise构造函数是同步执行的,promsie.then 中的函数是异步执行的 </code></pre><pre><code class="javascript">2.const promise1 = new Promise((resolve, reject) =&gt; &#123;  setTimeout(() =&gt; &#123;    resolve(&#39;success&#39;)  &#125;, 1000)&#125;)const promise2 = promise1.then(() =&gt; &#123;  throw new Error(&#39;error!!!&#39;)&#125;)console.log(&#39;promise1&#39;, promise1)console.log(&#39;promise2&#39;, promise2)setTimeout(() =&gt; &#123;  console.log(&#39;promise1&#39;, promise1)  console.log(&#39;promise2&#39;, promise2)&#125;, 2000)输出:promise1 Promise &#123; &lt;pending&gt; &#125;promise2 Promise &#123; &lt;pending&gt; &#125;promise1 Promise &#123; &lt;fulfilled&gt;: &quot;success&quot; &#125;promise2 Promise &#123; &lt;rejected&gt;: Error: error!!! at promise1.then (…) &#125;解释：创建 Promise promise1，1 秒后变为已兑现状态。使用 then 方法将回调函数添加到 promise1 上并创建了 promise2。在第一轮事件循环结束前，打印 promise1 和 promise2，它们都是待定状态。在第二轮事件循环开始时，promise1 变为已兑现状态，promise2 变为已拒绝状态。</code></pre><pre><code class="javascript">3.const promise = new Promise((resolve, reject) =&gt; &#123;  resolve(&#39;success1&#39;)  reject(&#39;error&#39;)  resolve(&#39;success2&#39;)&#125;)promise  .then((res) =&gt; &#123;    console.log(&#39;then: &#39;, res)  &#125;)  .catch((err) =&gt; &#123;    console.log(&#39;catch: &#39;, err)  &#125;)输出: success1解释：构造函数中的 resolve 或 reject 只有第一次执行有效，多次调用没有任何作用，呼应代码二结论：promise 状态一旦改变则不能再变。</code></pre><pre><code class="javascript">4.Promise.resolve(1)  .then((res) =&gt; &#123;    console.log(res)    return 2  &#125;)  .catch((err) =&gt; &#123;    return 3  &#125;)  .then((res) =&gt; &#123;    console.log(res)  &#125;)输出:  1,2解释：promise 可以链式调用。提起链式调用我们通常会想到通过 return this 实现，不过 Promise 并不是这样实现的。promise 每次调用 .then 或者 .catch 都会返回一个新的 promise，从而实现了链式调用。</code></pre><pre><code class="javascript">5.const promise = new Promise((resolve, reject) =&gt; &#123;  setTimeout(() =&gt; &#123;    console.log(&#39;once&#39;)    resolve(&#39;success&#39;)  &#125;, 1000)&#125;)const start = Date.now()promise.then((res) =&gt; &#123;  console.log(res, Date.now() - start)&#125;)promise.then((res) =&gt; &#123;  console.log(res, Date.now() - start)&#125;)输出:oncesuccess 1000success 1000解释：promise 的 .then 或者 .catch 可以被调用多次，但这里 Promise 构造函数只执行一次。或者说 promise 内部状态一经改变，并且有了一个值，那么后续每次调用 .then 或者 .catch 都会直接拿到该值</code></pre><pre><code class="javascript">6.Promise.resolve()  .then(() =&gt; &#123;    return new Error(&#39;error!!!&#39;)  &#125;)  .then((res) =&gt; &#123;    console.log(&#39;then: &#39;, res)  &#125;)  .catch((err) =&gt; &#123;    console.log(&#39;catch: &#39;, err)  &#125;)输出:then: Error: error!!!    at Promise.resolve.then (...)    at ...                             解释：.then 或者 .catch 中 return 一个 error 对象并不会抛出错误，所以不会被后续的 .catch 捕获，需要改成其中一种：                                                       </code></pre><pre><code class="javascript">7.const promise = Promise.resolve()  .then(() =&gt; &#123;    return promise  &#125;)promise.catch(console.error)输出:TypeError: Chaining cycle detected for promise #&lt;Promise&gt;    at &lt;anonymous&gt;    at process._tickCallback (internal/process/next_tick.js:188:7)    at Function.Module.runMain (module.js:667:11)    at startup (bootstrap_node.js:187:16)    at bootstrap_node.js:607:3解释：.then 或 .catch 返回的值不能是 promise 本身，否则会造成死循环。类似于：process.nextTick(function tick () &#123;  console.log(&#39;tick&#39;)  process.nextTick(tick)&#125;)</code></pre><pre><code class="javascript">8.Promise.resolve(1)  .then(2)  .then(Promise.resolve(3))  .then(console.log)输出: 1解释：.then 或者 .catch 的参数期望是函数，传入非函数则会发生值穿透。</code></pre><pre><code class="javascript">9.Promise.resolve()  .then(function success (res) &#123;    throw new Error(&#39;error&#39;)  &#125;, function fail1 (e) &#123;    console.error(&#39;fail1: &#39;, e)  &#125;)  .catch(function fail2 (e) &#123;    console.error(&#39;fail2: &#39;, e)  &#125;)输出:fail2: Error: error    at success (...)    at ...                解释：.then 可以接收两个参数，第一个是处理成功的函数，第二个是处理错误的函数。.catch 是 .then 第二个参数的简便写法，但是它们用法上有一点需要注意：.then 的第二个处理错误的函数捕获不了第一个处理成功的函数抛出的错误，而后续的 .catch 可以捕获之前的错误。当然以下代码也可以：            </code></pre><pre><code class="javascript">10.process.nextTick(() =&gt; &#123;  console.log(&#39;nextTick&#39;)&#125;)Promise.resolve()  .then(() =&gt; &#123;    console.log(&#39;then&#39;)  &#125;)setImmediate(() =&gt; &#123;  console.log(&#39;setImmediate&#39;)&#125;)console.log(&#39;end&#39;)输出:endnextTickthensetImmediate解释：process.nextTick 和 promise.then 都属于 microtask，而 setImmediate 属于 macrotask，在事件循环的 check 阶段执行。事件循环的每个阶段（macrotask）之间都会执行 microtask，事件循环的开始会先执行一次 microtask。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css性能优化篇</title>
      <link href="/performance-optimization/css%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AF%87/"/>
      <url>/performance-optimization/css%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="加载性能"><a href="#加载性能" class="headerlink" title="加载性能"></a>加载性能</h1><pre><code class="text">（1）合并和压缩 CSS 文件以减少文件大小。（2）css单一样式：当需要下边距和左边距的时候，很多时候选择:margin:top 0 bottom 0;但margin-bottom:bottom;margin-left:left;执行的效率更高。（3）减少使用@import,而建议使用link，因为后者在页面加载时一起加载，前者是等待页面加载完成之后再进行加载。（4）延迟或异步加载 CSS 文件，特别是对于首屏渲染来说。（5）使用 CDN（内容分发网络）来加速 CSS 文件的加载。（6）利用浏览器缓存机制，设置适当的缓存头信息。</code></pre><h1 id="选择器性能"><a href="#选择器性能" class="headerlink" title="选择器性能"></a>选择器性能</h1><pre><code class="text">（1）关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）。CSS选择符是从右到左进行匹配的。当使用后代选择器的时候，浏览器会遍历所有子元素来确定是否是指定的元素等等；（2）如果规则拥有ID选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们了）。（3）避免使用通配规则，如*&#123;&#125;计算次数惊人！只对需要用到的元素进行选择。（4）尽量少的去对标签进行选择，而是用class。（5）尽量少的去使用后代选择器，降低选择器的权重值。后代选择器的开销是最高的，尽量将选择器的深度降到最低，最高不要超过三层，更多的使用类来关联每一个标签元素。（6）了解哪些属性是可以通过继承而来的，然后避免对这些属性重复指定规则。</code></pre><h1 id="渲染性能"><a href="#渲染性能" class="headerlink" title="渲染性能"></a>渲染性能</h1><pre><code class="text">（1）慎重使用高性能属性：浮动、定位。（2）最小化重绘和重排操作，尽量在一次渲染中完成所有样式的修改。（3）去除空规则：｛｝。空规则的产生原因一般来说是为了预留样式。去除这些空规则无疑能减少css文档体积。（4）属性值为0时，不加单位。（5）属性值为浮动小数0.**，可以省略小数点之前的0。（6）标准化各种浏览器前缀：带浏览器前缀的在前。标准属性在后。（7）不使用@import前缀，它会影响css的加载速度。（8）选择器优化嵌套，尽量避免层级过深。（9）css雪碧图，同一页面相近部分的小图标，方便使用，减少页面的请求次数，但是同时图片本身会变大，使用时，优劣考虑清楚，再使用。（10）正确使用display的属性，由于display的作用，某些样式组合会无效，徒增样式体积的同时也影响解析性能。（11）不滥用web字体。对于中文网站来说WebFonts可能很陌生，国外却很流行。web fonts通常体积庞大，而且一些浏览器在下载web fonts时会阻塞页面渲染损伤性能。（12）使用硬件加速特性（如 transform 和 opacity）来提高动画的性能。</code></pre><h1 id="可维护性、健壮性"><a href="#可维护性、健壮性" class="headerlink" title="可维护性、健壮性"></a>可维护性、健壮性</h1><pre><code class="text">（1）将具有相同属性的样式抽离出来，整合并通过class在页面中进行使用，提高css的可维护性。（2）样式与内容分离：将css代码定义到外部css中。（3）使用模块化的 CSS 结构，将样式分成独立的模块或组件。（4）使用注释和良好的命名规范，使样式易于理解和维护。（5）遵循代码风格指南和最佳实践，减少冗余和不必要的样式。（6）使用 CSS 预处理器（如 Sass 或 Less）来提高样式代码的可维护性和重用性。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 前端性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web Worker</title>
      <link href="/performance-optimization/Web%20Worker/"/>
      <url>/performance-optimization/Web%20Worker/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Web-Worker"><a href="#什么是Web-Worker" class="headerlink" title="什么是Web Worker"></a>什么是Web Worker</h1><p>Web Worker 是 HTML5 提供的一项技术，用于在后台运行 JavaScript 脚本，以提高页面的性能和响应能力。Web Worker 可以在独立的线程中执行代码，与主线程并行工作，从而不阻塞页面的渲染和用户交互。</p><h1 id="以下是-Web-Worker-的一些关键特点："><a href="#以下是-Web-Worker-的一些关键特点：" class="headerlink" title="以下是 Web Worker 的一些关键特点："></a>以下是 Web Worker 的一些关键特点：</h1><ol><li>独立线程：Web Worker 在后台运行，与主线程并行工作，由浏览器自动创建、管理和销毁。它不会阻塞主线程的执行，因此可以提高页面的响应速度。</li><li>无访问 DOM：由于 Web Worker 运行在独立的线程中，它不能直接访问页面的 DOM 元素，也不能操作界面。这样可以保证数据的安全性和线程之间的隔离。</li><li>通信机制：Web Worker 通过消息传递的方式与主线程进行通信。主线程可以向 Web Worker 发送消息，Web Worker 处理完任务后再将结果返回给主线程。</li><li>脚本外部化：Web Worker 的脚本文件必须是单独的外部文件，不能直接将代码写在 HTML 页面中。这样可以提高代码的可维护性和重用性。</li></ol><h1 id="使用-Web-Worker-可以实现以下功能："><a href="#使用-Web-Worker-可以实现以下功能：" class="headerlink" title="使用 Web Worker 可以实现以下功能："></a>使用 Web Worker 可以实现以下功能：</h1><ol><li>执行复杂计算：将一些耗时的计算任务放到 Web Worker 中执行，避免阻塞页面渲染和用户交互。</li><li>处理大量数据：当需要处理大量的数据或进行复杂的数据操作时，可以将这些操作放到 Web Worker 中进行并发处理。</li><li>后台加载资源：Web Worker 可以在后台加载数据、解析文件等操作，提前准备好数据，以便在需要时快速响应。</li><li>实时通信：Web Worker 与主线程之间可以进行实时的双向通信，例如传递消息、更新进度等。</li></ol><h1 id="需要注意的"><a href="#需要注意的" class="headerlink" title="需要注意的"></a>需要注意的</h1><ol><li>Web Worker 仅在支持 HTML5 的现代浏览器中可用。并且由于 Web Worker 运行在独立线程中，因此需要考虑线程安全和数据同步的问题。</li></ol><h1 id="vue3-使用Web-Worker"><a href="#vue3-使用Web-Worker" class="headerlink" title="vue3 使用Web Worker"></a>vue3 使用Web Worker</h1><pre><code class="vue">worker.vue 组件内容&lt;script setup&gt;import &#123; onMounted, reactive &#125; from &#39;vue&#39;;const sortedData = reactive([])onMounted(() =&gt; &#123;    // 创建 Web Worker    const code = `    self.onmessage = function(event) &#123;      const data = event.data;        // 在后台线程进行排序      const sortedData = data.sort();        // 将排序结果发送给主线程      self.postMessage(sortedData);    &#125;;  `;    const blob = new Blob([code], &#123; type: &#39;text/javascript&#39; &#125;);    const worker = new Worker(URL.createObjectURL(blob));   // 这里的worker 得用本地创建的文件    // 接收来自 Web Worker 的消息    worker.onmessage = (event) =&gt; &#123;        const sortedDataResult = event.data;        sortedData.length = 0; // 清空数组        sortedData.push(...sortedDataResult); // 更新排序结果到 sortedData    &#125;;    // 发送数据给 Web Worker    const data = [5, 2, 8, 4, 1, 9];    worker.postMessage(data);&#125;)&lt;/script&gt;&lt;template&gt;    &lt;ul&gt;        &lt;li v-for=&quot;number in sortedData&quot; :key=&quot;number&quot;&gt;&#123;&#123; number &#125;&#125;&lt;/li&gt;    &lt;/ul&gt;&lt;/template&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 前端性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何渲染⼏万条数据并不卡住界⾯</title>
      <link href="/performance-optimization/%E5%A6%82%E4%BD%95%E6%B8%B2%E6%9F%93%E2%BC%8F%E4%B8%87%E6%9D%A1%E6%95%B0%E6%8D%AE%E5%B9%B6%E4%B8%8D%E5%8D%A1%E4%BD%8F%E7%95%8C%E2%BE%AF/"/>
      <url>/performance-optimization/%E5%A6%82%E4%BD%95%E6%B8%B2%E6%9F%93%E2%BC%8F%E4%B8%87%E6%9D%A1%E6%95%B0%E6%8D%AE%E5%B9%B6%E4%B8%8D%E5%8D%A1%E4%BD%8F%E7%95%8C%E2%BE%AF/</url>
      
        <content type="html"><![CDATA[<pre><code class="javascript">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;ul&gt;控件&lt;/ul&gt;    &lt;script&gt;        setTimeout(() =&gt; &#123;            // 插⼊⼗万条数据            const total = 100000            // ⼀次插⼊ 20 条，如果觉得性能不好就减少            const once = 20            // 渲染数据总共需要⼏次            const loopCount = total / once            let countOfRender = 0            let ul = document.querySelector(&quot;ul&quot;);            function add() &#123;                // 优化性能，插⼊不会造成回流                const fragment = document.createDocumentFragment();                for (let i = 0; i &lt; once; i++) &#123;                    const li = document.createElement(&quot;li&quot;);                    li.innerText = Math.floor(Math.random() * total);                    fragment.appendChild(li);                &#125;                ul.appendChild(fragment);                countOfRender += 1;                loop();            &#125;            function loop() &#123;                if (countOfRender &lt; loopCount) &#123;                    window.requestAnimationFrame(add);                &#125;            &#125;            loop();        &#125;, 0);    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><pre><code class="text">requestAnimationFrame 是一个在浏览器中用于执行动画的函数。它是浏览器提供的一个 API，用于优化动画的性能和流畅度。通常情况下，我们使用 setTimeout 或 setInterval 来创建动画效果。但是，这些方法存在一些问题：它们不会考虑浏览器的渲染过程，会导致动画在某些情况下出现卡顿或闪烁。相比之下，requestAnimationFrame 使用了浏览器的刷新率来决定何时执行回调函数。它会在下一次浏览器重绘之前调用回调函数，确保动画的更新与浏览器的渲染同步。使用 requestAnimationFrame 可以获得以下好处：性能优化：使用 requestAnimationFrame 可以让浏览器自行决定最佳的帧率来执行动画，避免了不必要的计算和绘制，提高了性能。节省资源：当页面被标签页或窗口最小化时，requestAnimationFrame 会自动停止执行，节省了 CPU 和电池的消耗。避免卡顿：requestAnimationFrame 可以与浏览器的垂直同步（vertical synchronization）协同工作，避免了卡顿和撕裂（tearing）等问题。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 前端性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序首屏性能优化</title>
      <link href="/performance-optimization/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%A6%96%E5%B1%8F%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/performance-optimization/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%A6%96%E5%B1%8F%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="优化的核心"><a href="#优化的核心" class="headerlink" title="优化的核心"></a>优化的核心</h1><h2 id="关于耗时"><a href="#关于耗时" class="headerlink" title="关于耗时"></a>关于耗时</h2><ol><li>首屏耗时与用户设备、所在网络环境、程序代码有很大关系。线上环境有2&#x2F;3的运气成分。</li><li>理论上相同地域访问 https 比访问 ip 慢，但小程序要求必须使用 https。</li><li>小程序启动时由微信加载代码包，与服务域名无关，进入页面后才会发起首次网络请求，某些用户环境出现 ERR_CONNECTION_RESET，导致上报的 API 接口及首屏耗时因网络不通畅爆表</li></ol><h2 id="前端性能监控（RUM）-接入"><a href="#前端性能监控（RUM）-接入" class="headerlink" title="前端性能监控（RUM） 接入"></a>前端性能监控（RUM） 接入</h2><ol><li>RUM 是腾讯提供的一款前端监控方案，只需在控制台上创建业务系统和应用，获取上报 ID；通过安装 npm 依赖配置 JSON 就可以实现测速和日志的收集。</li><li>注意：在小程序中，要按照小程序规则开启 NPM 构建。<br>必须将  <span class="exturl" data-url="aHR0cHM6Ly9hZWdpcy5xcS5jb20v">https://aegis.qq.com</span>  添加到 request 合法域名中，否则 RUM 控制台中没有正式版本的数据。一般会在 devTools 中开启忽略合法域名校验，为了方便开发调试调用开发环境，而忽略这个配置。</li></ol><h2 id="图片资源"><a href="#图片资源" class="headerlink" title="图片资源"></a>图片资源</h2><ol><li>常见图片可以采用JPG、PNG、WEBP、雪碧图或字体图标实现，可搜索到的描述大概都是不同格式适用的不同场景，以及从占用带宽上的描述。</li></ol><p>1.首先要选择合适的图片格式<br>1.1照片图片使用 webP。<br>1.2复杂的图形使用 PNG 或 JPG，看哪个格式的文件小。<br>1.3有透明度的图形使用 PNG 或 webP。<br>1.4可能缩放的图形、图标等使用 SVG。<br>1.5动态图尽量不使用 GIF，无法使用 CSS 的用视频替代。</p><ol start="2"><li><p>在小程序中，只有网络图片且在基础库高于 2.9.0 的微信上可以使用 webp ，目前绝大多数的微信用户基础库以及高于 2.16.0版本库，因此<br>可以对互联网图片转换为 webp  格式，减小网络加载耗时。</p></li><li><p>目前没有查到关于这几种方式显示图片资源的页面渲染耗时分析。</p></li></ol><h2 id="JS-优化"><a href="#JS-优化" class="headerlink" title="JS 优化"></a>JS 优化</h2><ol><li>首先排查在主线程上不要使用同步方法，减小主线程阻塞。</li><li>开启小程序中的代码按需注入，避免没有使用的代码注入到小程序运行环境中，影响注入耗时和内存占用。</li><li>生产环境去掉不必要的日志打印</li></ol><h2 id="CSS-优化"><a href="#CSS-优化" class="headerlink" title="CSS 优化"></a>CSS 优化</h2><p>因为构建 CSSOM 树时会阻塞页面的解析，因此需要：</p><ol><li>删除没有使用的 CSS 代码</li><li>减小 CSS 文件大小，如 #FFFFFF -&gt; #FFF ， 0px -&gt; 0，不要使用 Base64 编码的图片。<br> 使用css检测工具PurgeCSS  Unused-CSS。</li></ol><h1 id="具体的优化方法"><a href="#具体的优化方法" class="headerlink" title="具体的优化方法"></a>具体的优化方法</h1><h2 id="资源优化"><a href="#资源优化" class="headerlink" title="资源优化"></a>资源优化</h2><ol><li>按照页面访问的频次，将图片资源分成常用的和不常用的，将常用的放入小程序代码包通过本地加载，将不常用的转换成 webp 放到服务器。</li><li>减小代码包体积：压缩代码包中的图片资源，对 PNG 格式的透明图设置更少的颜色数；通过依赖分析，更换体积更小的 markdown 渲染依赖。从 1M+下降到280K+</li></ol><h2 id="网络优化"><a href="#网络优化" class="headerlink" title="网络优化"></a>网络优化</h2><ol><li>由于只有一台华北地区的服务器，为解决不同地域和运营商的访问速度，开启全站动态加速。通过某测速网站看到可解析到70+个独立 IP，并且不同地区的用户会访问到同运营商较近的 IP，然后由 DCDN 通过内部线路转发用户到服务器的请求。</li><li>通过分析，首次请求时需要进行域名的解析和建连，后续的请求会复用该链路，解析和 SSL 等时间为0。通过某测速网站可看到平均响应时间在 0.3s，考虑到链路复用，网络请求时间会在 60ms 左右。</li><li>对不经常变更且频繁访问的接口，在 DCDN 中设置静态缓存，并触发接口预热，将接口的响应缓存到 DCDN 的二级节点上。这样用户发起这些请求时，直接由 DCDN 做出应答而不回源到真实服务器处理。</li><li>在服务端和客户端开启 http&#x2F;2 协议支持。由于小程序中无高并发请求，自测没有明显改善。</li><li>对超过 1kb 的响应体开启 gzip 压缩。</li><li>对服务端的图片等静态资源设置浏览器缓存。</li><li>由于小程序不像 BAT 这么大用户量和高频的访问，根据 DNS 的解析机制，各地运营商如果有缓存 DNS的解析结果就不会向跟 DNS 进行解析，利用网站测速提供的服务，发送 GET 测速，让各地运营商缓存 DNS 结果。</li><li>开启 OCSP Stapling，提高证书的校验性能。</li><li>小程序使用中，服务端会调用 api.weixin.qq.com 换取用户的 openid，通过调用微信公众平台接口获取该域名的各个 ip 地址，在服务器执行 ping 命令，找到最快的一个ip，写入host文件。从 40ms 降低到 28.8ms。</li></ol><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><ol><li>代码中对图片标签开启懒加载。</li><li>减小冗余的 <view> 层次嵌套。</li><li>为 data 赋初始值，避免在网络请求结束后赋值引起页面元素的位置变动。</li><li>开启代码的按需注入</li><li>采用 DCDN 后，各地域各运营商的绝大部分网络请求会在 0.3s 内到达，因此删除了网络请求起止的 loading 浮层动画。</li><li>原来为了真机调试方便，把网络请求、自定义组件的响应等打印到了 vConsole 中。目前线上生产环境删除了所有的日志打印。</li><li>删除了部分无用的 css 代码。优化的部分 css 样式的选择器。</li><li>亲测使用骨架屏只会让人感觉页面非白屏了，但会增加首屏的时间。</li></ol><h2 id="业务逻辑"><a href="#业务逻辑" class="headerlink" title="业务逻辑"></a>业务逻辑</h2><ol><li>所有新用户（首次访问）最初进入小程序时，页面和 data 中的数据都是一样的。将这些数据作为 data 的默认值（这里是把请求数据放在vue(cteated) uniapp(onLoad) ），直接显示出来，网络请求到达后，由于 data 内容不变，不会发生页面的重新渲染。</li><li>用户使用程序后，将从网络请求中获取的用户数据存储到 storage 中。</li><li>对于长列表改为数据分页加载。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 前端性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>支付宝小程序性能优化方案</title>
      <link href="/performance-optimization/%E6%94%AF%E4%BB%98%E5%AE%9D%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/"/>
      <url>/performance-optimization/%E6%94%AF%E4%BB%98%E5%AE%9D%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="支付宝小程序"><a href="#支付宝小程序" class="headerlink" title="支付宝小程序"></a>支付宝小程序</h1><h2 id="核心要优化的东西"><a href="#核心要优化的东西" class="headerlink" title="核心要优化的东西"></a>核心要优化的东西</h2><ol><li>由于网络问题存在，所以这点应该去减少包的加载大小</li></ol><ul><li>图片等一些文件的大小</li><li>最后是分包 ,但是2M以内，其实分包没有实际的意义</li></ul><ol start="2"><li>js 和 css 的优化</li></ol><h2 id="更多的优化渠道"><a href="#更多的优化渠道" class="headerlink" title="更多的优化渠道"></a>更多的优化渠道</h2><ol><li>支付宝小程序内有相关的检测能力工具</li><li>支付宝有性能研究群对接</li></ol><h2 id="可以研究的方向"><a href="#可以研究的方向" class="headerlink" title="可以研究的方向"></a>可以研究的方向</h2><ol><li>有些机型是存在打不开的情况的，并非所有的都是网络造成的问题</li><li>每个机型的启动首屏加载时间都是不同的， 可以认为中高端手机启动时间就是小于低端手机</li><li>小程序打开就涉及内存，平均每个页面需要的内存在250 - 450之间当前页面内存的大小，直接影响下一个页面打开的时间</li></ol><ul><li>某些手机的打开内存固定超过某个值 就会显示过高的</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 前端性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssm整合</title>
      <link href="/rear-end/java/ssm%E6%95%B4%E5%90%88/"/>
      <url>/rear-end/java/ssm%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h1><h2 id="1-SSM整合"><a href="#1-SSM整合" class="headerlink" title="1.SSM整合"></a>1.SSM整合</h2><h3 id="1-0-步骤分析"><a href="#1-0-步骤分析" class="headerlink" title="1.0 步骤分析"></a>1.0 步骤分析</h3><p>​我们先来分析下如何把Spring,SpringMVC,Mybatis整合到一起。</p><h4 id="1-0-1-步骤"><a href="#1-0-1-步骤" class="headerlink" title="1.0.1 步骤"></a>1.0.1 步骤</h4><p>①Spring整合上Mybatis</p><p>​通过Service层Dao层都注入Spring容器中</p><p>②引入配置SpringMVC</p><p>​把Controller层注入SpringMVC容器中</p><p>③让web项目启动时自动读取Spring配置文件来创建Spring容器</p><p>​可以使用ContextLoaderListener来实现Spring容器的创建。</p><h4 id="1-0-2-常见疑惑"><a href="#1-0-2-常见疑惑" class="headerlink" title="1.0.2 常见疑惑"></a>1.0.2 常见疑惑</h4><ul><li><p>为什么要用两个容器？</p><p>因为Controller如果不放在MVC容器中会没有效果，无法处理请求。而Service如果不放在Spring容器中，声明式事务也无法使用。</p></li><li><p>SpringMVC容器中的Controller需要依赖Service，能从Spring容器中获取到所依赖的Service对象嘛？</p><p>Spring容器相当于是父容器，MVC容器相当于是子容器。子容器除了可以使用自己容器中的对象外还可以使用父容器中的对象。</p></li><li><p>是如何实现这样父子容器的关系的？</p><p>具体可以看源码解析阶段的视频。但是我们目前可以用代码模拟下。</p></li><li><p>是什么时候让两个容器产生这种父子容器的关系的？</p><p>在ContextLoaderListener中，会在创建好容器后把容器存入servletContext域。这样在DispatcherServlet启动时，创建完SpringMVC容器后会从servletContext域中获取到Spring容器对象，设置为其父容器,这样子容器就能获取到父容器中的bean了。详情请见源码解析视频。</p></li></ul><p>SpringMVC容器中的Controller需要依赖Service，能从Spring容器中获取到所依赖的Service对象嘛？</p><p>是如何实现这样父子容器的关系的？</p><h3 id="1-1-准备工作"><a href="#1-1-准备工作" class="headerlink" title="1.1 准备工作"></a>1.1 准备工作</h3><p>引入所有依赖</p><pre><code class="xml"> &lt;!--Spring-context--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework&lt;/groupId&gt;            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;            &lt;version&gt;5.1.9.RELEASE&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--AOP相关依赖--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.aspectj&lt;/groupId&gt;            &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;            &lt;version&gt;1.8.13&lt;/version&gt;        &lt;/dependency&gt;        &lt;!-- spring-jdbc --&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework&lt;/groupId&gt;            &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;            &lt;version&gt;5.1.9.RELEASE&lt;/version&gt;        &lt;/dependency&gt;        &lt;!-- mybatis整合到Spring的整合包 --&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;            &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;            &lt;version&gt;2.0.4&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--mybatis依赖--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;            &lt;version&gt;3.5.4&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--log4j依赖，打印mybatis日志--&gt;        &lt;dependency&gt;            &lt;groupId&gt;log4j&lt;/groupId&gt;            &lt;artifactId&gt;log4j&lt;/artifactId&gt;            &lt;version&gt;1.2.17&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--分页查询，pagehelper--&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;            &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;            &lt;version&gt;4.0.0&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--mysql驱动--&gt;        &lt;dependency&gt;            &lt;groupId&gt;mysql&lt;/groupId&gt;            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;            &lt;version&gt;5.1.47&lt;/version&gt;        &lt;/dependency&gt;        &lt;!-- druid数据源 --&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;            &lt;artifactId&gt;druid&lt;/artifactId&gt;            &lt;version&gt;1.1.16&lt;/version&gt;        &lt;/dependency&gt;        &lt;!-- junit --&gt;        &lt;dependency&gt;            &lt;groupId&gt;junit&lt;/groupId&gt;            &lt;artifactId&gt;junit&lt;/artifactId&gt;            &lt;version&gt;4.12&lt;/version&gt;        &lt;/dependency&gt;        &lt;!-- spring整合junit的依赖 --&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework&lt;/groupId&gt;            &lt;artifactId&gt;spring-test&lt;/artifactId&gt;            &lt;version&gt;5.1.9.RELEASE&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;            &lt;version&gt;1.18.12&lt;/version&gt;            &lt;scope&gt;provided&lt;/scope&gt;        &lt;/dependency&gt;        &lt;!-- servlet依赖 --&gt;        &lt;dependency&gt;            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;            &lt;version&gt;3.1.0&lt;/version&gt;            &lt;scope&gt;provided&lt;/scope&gt;        &lt;/dependency&gt;        &lt;!--jsp依赖 --&gt;        &lt;dependency&gt;            &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;            &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;            &lt;version&gt;2.1&lt;/version&gt;            &lt;scope&gt;provided&lt;/scope&gt;        &lt;/dependency&gt;        &lt;!--springmvc的依赖--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework&lt;/groupId&gt;            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;            &lt;version&gt;5.1.9.RELEASE&lt;/version&gt;        &lt;/dependency&gt;        &lt;!-- jackson，帮助进行json转换--&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;            &lt;version&gt;2.9.0&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--commons文件上传，如果需要文件上传功能，需要添加本依赖--&gt;        &lt;dependency&gt;            &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;            &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;            &lt;version&gt;1.4&lt;/version&gt;        &lt;/dependency&gt;</code></pre><p>数据库初始化语句</p><pre><code class="mysql">CREATE DATABASE /*!32312 IF NOT EXISTS*/`mybatis_db` /*!40100 DEFAULT CHARACTER SET utf8 */;USE `mybatis_db`;DROP TABLE IF EXISTS `user`;CREATE TABLE `user` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `username` varchar(50) DEFAULT NULL,  `age` int(11) DEFAULT NULL,  `address` varchar(50) DEFAULT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;insert  into `user`(`id`,`username`,`age`,`address`) values (1,&#39;UZI&#39;,19,&#39;上海&#39;),(2,&#39;PDD&#39;,25,&#39;上海&#39;);</code></pre><h3 id="1-2-相关配置"><a href="#1-2-相关配置" class="headerlink" title="1.2 相关配置"></a>1.2 相关配置</h3><h4 id="①整合Spring和Mybatis"><a href="#①整合Spring和Mybatis" class="headerlink" title="①整合Spring和Mybatis"></a>①整合Spring和Mybatis</h4><p>在resources目录下创建Spring核心配置文件： <strong>applicationContext.xml</strong> 内容如下</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;    &lt;!--组件扫描，排除controller--&gt;    &lt;context:component-scan base-package=&quot;com.sangeng&quot;&gt;        &lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;&gt;&lt;/context:exclude-filter&gt;    &lt;/context:component-scan&gt;    &lt;!--读取properties文件--&gt;    &lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;&gt;&lt;/context:property-placeholder&gt;    &lt;!--创建连接池注入容器--&gt;    &lt;bean class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; id=&quot;dataSource&quot;&gt;        &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;    &lt;!--spring整合mybatis后控制的创建获取SqlSessionFactory的对象--&gt;    &lt;bean class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot; id=&quot;sessionFactory&quot;&gt;        &lt;!--配置连接池--&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;        &lt;!--配置mybatis配置文件的路径--&gt;        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;    &lt;!--mapper扫描配置，扫描到的mapper对象会被注入Spring容器中--&gt;    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot; id=&quot;mapperScannerConfigurer&quot;&gt;        &lt;property name=&quot;basePackage&quot; value=&quot;com.sangeng.dao&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;    &lt;!--开启aop注解支持--&gt;    &lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;    &lt;!--声明式事务相关配置--&gt;    &lt;bean class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot; id=&quot;transactionManager&quot;&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;    &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;&gt;&lt;/tx:annotation-driven&gt;&lt;/beans&gt;</code></pre><p>在resources目录下创建<strong>jdbc.properties</strong> 文件，内容如下：</p><pre><code class="properties">jdbc.url=jdbc:mysql://localhost:3306/mybatis_db?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTCjdbc.driver=com.mysql.jdbc.Driverjdbc.username=rootjdbc.password=root</code></pre><p>在resources目录下创建<strong>mybatis-config.xml</strong> ，内容如下：</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;    &lt;settings&gt;        &lt;!--指定使用log4j打印Mybatis日志--&gt;        &lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot;/&gt;    &lt;/settings&gt;    &lt;!--配置别名包--&gt;    &lt;typeAliases&gt;        &lt;package name=&quot;com.sangeng.domain&quot;&gt;&lt;/package&gt;    &lt;/typeAliases&gt;    &lt;plugins&gt;        &lt;!-- 注意：分页助手的插件，配置在通用mapper之前 --&gt;        &lt;plugin interceptor=&quot;com.github.pagehelper.PageHelper&quot;&gt;            &lt;!-- 指定方言 --&gt;            &lt;property name=&quot;dialect&quot; value=&quot;mysql&quot;/&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/configuration&gt;</code></pre><p>在resources目录下创建<strong>log4j.properties</strong> ，内容如下：</p><pre><code class="properties">### direct log messages to stdout ###log4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.Target=System.outlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n### direct messages to file mylog.log ###log4j.appender.file=org.apache.log4j.FileAppenderlog4j.appender.file.File=c:/mylog.loglog4j.appender.file.layout=org.apache.log4j.PatternLayoutlog4j.appender.file.layout.ConversionPattern=%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n### set log levels - for more verbose logging change &#39;info&#39; to &#39;debug&#39; ###log4j.rootLogger=debug, stdout</code></pre><h4 id="②SpringMVC引入"><a href="#②SpringMVC引入" class="headerlink" title="②SpringMVC引入"></a>②SpringMVC引入</h4><p>在resources目录下创建<strong>spring-mvc.xml</strong> ，内容如下：</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;       xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;    &lt;!--         SpringMVC只扫描controller包即可     --&gt;    &lt;context:component-scan base-package=&quot;com.sangeng.controller&quot;/&gt;    &lt;!-- 解决静态资源访问问题，如果不加mvc:annotation-driven会导致无法访问handler--&gt;    &lt;mvc:default-servlet-handler/&gt;    &lt;!--解决响应乱码--&gt;    &lt;mvc:annotation-driven&gt;        &lt;mvc:message-converters&gt;            &lt;bean class=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;                &lt;constructor-arg value=&quot;utf-8&quot;/&gt;            &lt;/bean&gt;        &lt;/mvc:message-converters&gt;    &lt;/mvc:annotation-driven&gt;    &lt;!--配置视图解析器  前后端不分离项目使用--&gt;&lt;!--    &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot; id=&quot;viewResolver&quot;&gt;        &amp;lt;!&amp;ndash;要求拼接的前缀&amp;ndash;&amp;gt;        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/page/&quot;&gt;&lt;/property&gt;        &amp;lt;!&amp;ndash;要拼接的后缀&amp;ndash;&amp;gt;        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;--&gt;    &lt;!--配置拦截器--&gt;&lt;!--    &lt;mvc:interceptors&gt;        &lt;mvc:interceptor&gt;            &amp;lt;!&amp;ndash;            &amp;ndash;&amp;gt;            &lt;mvc:mapping path=&quot;/**&quot;/&gt;            &amp;lt;!&amp;ndash;配置排除拦截的路径&amp;ndash;&amp;gt;            &lt;mvc:exclude-mapping path=&quot;/&quot;/&gt;            &amp;lt;!&amp;ndash;配置拦截器对象注入容器&amp;ndash;&amp;gt;            &lt;bean class=&quot;&quot;&gt;&lt;/bean&gt;        &lt;/mvc:interceptor&gt;    &lt;/mvc:interceptors&gt;--&gt;    &lt;!--          文件上传解析器          注意：id 必须为 multipartResolver          如果需要上传文件时可以放开相应配置      --&gt;    &lt;!--&lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;--&gt;        &lt;!--&amp;lt;!&amp;ndash; 设置默认字符编码 &amp;ndash;&amp;gt;--&gt;        &lt;!--&lt;property name=&quot;defaultEncoding&quot; value=&quot;utf-8&quot;/&gt;--&gt;        &lt;!--&amp;lt;!&amp;ndash; 一次请求上传的文件的总大小的最大值，单位是字节&amp;ndash;&amp;gt;--&gt;        &lt;!--&lt;property name=&quot;maxUploadSize&quot; value=&quot;#&#123;1024*1024*100&#125;&quot;/&gt;--&gt;        &lt;!--&amp;lt;!&amp;ndash; 每个上传文件大小的最大值，单位是字节&amp;ndash;&amp;gt;--&gt;        &lt;!--&lt;property name=&quot;maxUploadSizePerFile&quot; value=&quot;#&#123;1024*1024*50&#125;&quot;/&gt;--&gt;    &lt;!--&lt;/bean&gt;--&gt;&lt;/beans&gt;</code></pre><p>修改web.xml文件</p><pre><code class="xml"> &lt;servlet&gt;        &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;        &lt;!--            为DispatcherServlet提供初始化参数的            设置springmvc配置文件的路径                name是固定的，必须是contextConfigLocation                value指的是SpringMVC配置文件的位置         --&gt;        &lt;init-param&gt;            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;            &lt;param-value&gt;classpath:spring-mvc.xml&lt;/param-value&gt;        &lt;/init-param&gt;        &lt;!--            指定项目启动就初始化DispatcherServlet         --&gt;        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;    &lt;/servlet&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;        &lt;!--             /           表示当前servlet映射除jsp之外的所有请求（包含静态资源）             *.do        表示.do结尾的请求路径才能被SpringMVC处理(老项目会出现)             /*          表示当前servlet映射所有请求（包含静态资源,jsp），不应该使用其配置DispatcherServlet         --&gt;        &lt;url-pattern&gt;/&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;    &lt;!--乱码处理过滤器，由SpringMVC提供--&gt;    &lt;!-- 处理post请求乱码 --&gt;    &lt;filter&gt;        &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;        &lt;init-param&gt;            &lt;!-- name固定不变，value值根据需要设置 --&gt;            &lt;param-name&gt;encoding&lt;/param-name&gt;            &lt;param-value&gt;UTF-8&lt;/param-value&gt;        &lt;/init-param&gt;    &lt;/filter&gt;    &lt;filter-mapping&gt;        &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;        &lt;!-- 所有请求都设置utf-8的编码 --&gt;        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;    &lt;/filter-mapping&gt;</code></pre><h4 id="③Spring整合入web项目"><a href="#③Spring整合入web项目" class="headerlink" title="③Spring整合入web项目"></a>③Spring整合入web项目</h4><p>​让web项目启动的时候就能够创建Spring容器。可以使用Spring提供的监听器ContextLoaderListener，所以我们需要再web.xml中配置这个监听器,并且配置上Spring配置文件的路径。</p><pre><code class="xml">    &lt;!--配置spring的配置文件路径--&gt;    &lt;context-param&gt;        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;        &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;    &lt;/context-param&gt;    &lt;!--配置监听器，可以再应用被部署的时候创建spring容器--&gt;    &lt;listener&gt;        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;    &lt;/listener&gt;</code></pre><h3 id="1-3-编写Controller-Service，Dao"><a href="#1-3-编写Controller-Service，Dao" class="headerlink" title="1.3 编写Controller,Service，Dao"></a>1.3 编写Controller,Service，Dao</h3><p>​我们来编写根据id查询用户的接口来进行测试</p><pre><code class="java">@RestControllerpublic class UserController &#123;    @Autowired    private UserService userService;    @GetMapping(&quot;/user/&#123;id&#125;&quot;)    public User findById(@PathVariable(&quot;id&quot;) Integer id)&#123;        User user = userService.findById(id);        return user;    &#125;&#125;</code></pre><pre><code class="java">public interface UserService &#123;    User findById(Integer id);&#125;</code></pre><pre><code class="java">@Servicepublic class UserServiceImpl implements UserService &#123;    @Autowired    private UserDao userDao;    public User findById(Integer id) &#123;        return userDao.findById(id);    &#125;&#125;</code></pre><pre><code class="java">public interface UserDao &#123;    /**     * 根据id查询用户     * @param id     * @return     */    User findById(Integer id);&#125;</code></pre><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &gt;&lt;mapper namespace=&quot;com.sangeng.dao.UserDao&quot;&gt;    &lt;select id=&quot;findById&quot; resultType=&quot;com.sangeng.domain.User&quot;&gt;        select * from user where id = #&#123;id&#125;    &lt;/select&gt;&lt;/mapper&gt;</code></pre><h2 id="2-案例"><a href="#2-案例" class="headerlink" title="2.案例"></a>2.案例</h2><h3 id="2-0-响应格式统一"><a href="#2-0-响应格式统一" class="headerlink" title="2.0 响应格式统一"></a>2.0 响应格式统一</h3><p>​我们要保证一个项目中所有接口返回的数据格式的统一。这样无论是前端还是移动端开发获取到我们的数据后都能更方便的进行统一处理。</p><p>​所以我们定义以下结果封装类</p><pre><code class="java">@JsonInclude(JsonInclude.Include.NON_NULL)public class ResponseResult&lt;T&gt; &#123;    /**     * 状态码     */    private Integer code;    /**     * 提示信息，如果有错误时，前端可以获取该字段进行提示     */    private String msg;    /**     * 查询到的结果数据，     */    private T data;    public ResponseResult(Integer code, String msg) &#123;        this.code = code;        this.msg = msg;    &#125;    public ResponseResult(Integer code, T data) &#123;        this.code = code;        this.data = data;    &#125;    public Integer getCode() &#123;        return code;    &#125;    public void setCode(Integer code) &#123;        this.code = code;    &#125;    public String getMsg() &#123;        return msg;    &#125;    public void setMsg(String msg) &#123;        this.msg = msg;    &#125;    public T getData() &#123;        return data;    &#125;    public void setData(T data) &#123;        this.data = data;    &#125;    public ResponseResult(Integer code, String msg, T data) &#123;        this.code = code;        this.msg = msg;        this.data = data;    &#125;&#125;</code></pre><p>之前的接口修改为 ：</p><pre><code class="java">@RestControllerpublic class UserController &#123;    @Autowired    private UserService userService;    @GetMapping(&quot;/user/&#123;id&#125;&quot;)    public ResponseResult findById(@PathVariable(&quot;id&quot;) Integer id)&#123;        User user = userService.findById(id);        if(user==null)&#123;            //说明没有对应的用户            return new ResponseResult(500,&quot;没有该用户&quot;);        &#125;        return new ResponseResult(200,&quot;操作成功&quot;,user);    &#125;&#125;</code></pre><h3 id="2-1-查询所有用户"><a href="#2-1-查询所有用户" class="headerlink" title="2.1 查询所有用户"></a>2.1 查询所有用户</h3><pre><code class="java">@RestControllerpublic class UserController &#123;    @Autowired    private UserService userService;    //省略其他无关代码    @GetMapping(&quot;/user&quot;)    public ResponseResult findAll()&#123;        List&lt;User&gt; list = userService.findAll();        return new ResponseResult(200,&quot;操作成功&quot;,list);    &#125;&#125;</code></pre><pre><code class="java">public interface UserService &#123;    User findById(Integer id);    List&lt;User&gt; findAll();&#125;</code></pre><pre><code class="java">@Servicepublic class UserServiceImpl implements UserService &#123;    @Autowired    private UserDao userDao;    //省略其他无关代码    public List&lt;User&gt; findAll() &#123;        return userDao.findAll();    &#125;&#125;</code></pre><pre><code class="java">public interface UserDao &#123;    //省略其他无关代码    List&lt;User&gt; findAll();&#125;</code></pre><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &gt;&lt;mapper namespace=&quot;com.sangeng.dao.UserDao&quot;&gt;    &lt;select id=&quot;findAll&quot; resultType=&quot;com.sangeng.domain.User&quot;&gt;        select * from user    &lt;/select&gt;&lt;/mapper&gt;</code></pre><h3 id="2-2-分页查询用户"><a href="#2-2-分页查询用户" class="headerlink" title="2.2 分页查询用户"></a>2.2 分页查询用户</h3><p>​分页查询的结果除了要包含查到的用户数据外还要有当前页数，每页条数，总记录数这些分页数据。</p><p>分页数据封装类</p><pre><code class="java">public class PageResult&lt;T&gt; &#123;    private Integer currentPage;    private Integer pageSize;    private Integer total;        private List&lt;T&gt; data;    public PageResult(Integer currentPage, Integer pageSize, Integer total, List&lt;T&gt; data) &#123;        this.currentPage = currentPage;        this.pageSize = pageSize;        this.total = total;        this.data = data;    &#125;    public Integer getCurrentPage() &#123;        return currentPage;    &#125;    public void setCurrentPage(Integer currentPage) &#123;        this.currentPage = currentPage;    &#125;    public Integer getPageSize() &#123;        return pageSize;    &#125;    public void setPageSize(Integer pageSize) &#123;        this.pageSize = pageSize;    &#125;    public Integer getTotal() &#123;        return total;    &#125;    public void setTotal(Integer total) &#123;        this.total = total;    &#125;    public List&lt;T&gt; getData() &#123;        return data;    &#125;    public void setData(List&lt;T&gt; data) &#123;        this.data = data;    &#125;&#125;</code></pre><pre><code class="java">@RestControllerpublic class UserController &#123;    @Autowired    private UserService userService;    @GetMapping(&quot;/user/&#123;pageSize&#125;/&#123;pageNum&#125;&quot;)    public ResponseResult findByPage(@PathVariable(&quot;pageSize&quot;) Integer pageSize,@PathVariable(&quot;pageNum&quot;) Integer pageNum)&#123;        PageResult pageResult =  userService.findByPage(pageSize,pageNum);        return new ResponseResult(200,&quot;操作成功&quot;,pageResult);    &#125;&#125;</code></pre><pre><code class="java">@Servicepublic class UserServiceImpl implements UserService &#123;    @Autowired    private UserDao userDao;    public PageResult findByPage(Integer pageSize, Integer pageNum) &#123;        PageHelper.startPage(pageNum,pageSize);        List&lt;User&gt; list = userDao.findAll();        PageInfo pageInfo = new PageInfo(list);        PageResult pageResult = new PageResult(pageInfo.getPageNum(),pageInfo.getPageSize(), (int) pageInfo.getTotal(),list);        return pageResult;    &#125;&#125;</code></pre><h3 id="2-3-插入用户"><a href="#2-3-插入用户" class="headerlink" title="2.3 插入用户"></a>2.3 插入用户</h3><p>Controller层</p><pre><code class="java">    @PostMapping(&quot;/user&quot;)    public ResponseResult insertUser(@RequestBody User user)&#123;        userService.insertUser(user);        return new ResponseResult(200,&quot;操作成功&quot;);    &#125;</code></pre><p>Service层</p><p>在Service接口中增加方法定义</p><pre><code class="java">    void insertUser(User user);</code></pre><p>实现类中实现该方法:</p><pre><code class="java">  public void insertUser(User user) &#123;        userDao.insertUser(user);    &#125;</code></pre><p>Dao层</p><p>在接口中定义方法</p><pre><code class="java">    void insertUser(User user);</code></pre><p>在mapper映射文件中</p><pre><code class="xml">    &lt;insert id=&quot;insertUser&quot;&gt;        insert into user values(null,#&#123;username&#125;,#&#123;age&#125;,#&#123;address&#125;)    &lt;/insert&gt;</code></pre><p>测试</p><pre><code class="json">&#123;&quot;username&quot;:&quot;三更草堂&quot;,&quot;age&quot;:15,&quot;address&quot;:&quot;请问&quot;&#125;</code></pre><h3 id="2-4-删除用户"><a href="#2-4-删除用户" class="headerlink" title="2.4 删除用户"></a>2.4 删除用户</h3><p>Controller层</p><pre><code class="java">    @DeleteMapping(&quot;/user/&#123;id&#125;&quot;)    public ResponseResult deleteUser(@PathVariable(&quot;id&quot;) Integer id)&#123;        userService.deleteUser(id);        return new ResponseResult(200,&quot;操作成功&quot;);    &#125;</code></pre><p>Service层</p><p>在Service接口中增加方法定义</p><pre><code class="java">    void deleteUser(Integer id);</code></pre><p>实现类中实现该方法:</p><pre><code class="java">    public void deleteUser(Integer id) &#123;        userDao.deleteUser(id);    &#125;</code></pre><p>Dao层</p><p>在接口中定义方法</p><pre><code class="java">    void deleteUser(Integer id);</code></pre><p>在mapper映射文件中</p><pre><code class="xml">    &lt;delete id=&quot;deleteUser&quot;&gt;        delete from user where id = #&#123;id&#125;    &lt;/delete&gt;</code></pre><h3 id="2-5-更新用户"><a href="#2-5-更新用户" class="headerlink" title="2.5 更新用户"></a>2.5 更新用户</h3><p>Controller层</p><pre><code class="java">    @PutMapping(&quot;/user&quot;)    public ResponseResult updateUser(@RequestBody User user)&#123;        userService.updateUser(user);        return new ResponseResult(200,&quot;操作成功&quot;);    &#125;</code></pre><p>Service层</p><p>在Service接口中增加方法定义</p><pre><code class="java">    void updateUser(User user);</code></pre><p>实现类中实现该方法:</p><pre><code class="java">    public void updateUser(User user) &#123;        userDao.updateUser(user);    &#125;</code></pre><p>Dao层</p><p>在接口中定义方法</p><pre><code class="java">    void updateUser(User user);</code></pre><p>在mapper映射文件中</p><pre><code class="xml">    &lt;update id=&quot;updateUser&quot;&gt;        update user set username = #&#123;username&#125;,age = #&#123;age&#125;,address = #&#123;address&#125; where id = #&#123;id&#125;    &lt;/update&gt;</code></pre><h2 id="3-异常统一处理"><a href="#3-异常统一处理" class="headerlink" title="3.异常统一处理"></a>3.异常统一处理</h2><p>​我们可以使用@ControllerAdvice实现对异常的统一处理。让异常出现时也能返回响应一个JSON。</p><p>​代码如下：</p><pre><code class="java">@ControllerAdvicepublic class SGControllerAdvice &#123;    @ExceptionHandler(Exception.class)    @ResponseBody    public ResponseResult handleException(Exception e)&#123;        return new ResponseResult(500,e.getMessage());    &#125;&#125;</code></pre><h2 id="4-拦截器"><a href="#4-拦截器" class="headerlink" title="4.拦截器"></a>4.拦截器</h2><pre><code class="java">public class SGHandlerInterceptor implements HandlerInterceptor &#123;    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;        System.out.println(&quot;preHandle&quot;);        return true;    &#125;    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;        System.out.println(&quot;postHandle&quot;);    &#125;    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;        System.out.println(&quot;afterCompletion&quot;);    &#125;&#125;</code></pre><pre><code class="xml">    &lt;!--配置拦截器--&gt;        &lt;mvc:interceptors&gt;            &lt;mvc:interceptor&gt;                &lt;!--                --&gt;                &lt;mvc:mapping path=&quot;/**&quot;/&gt;                &lt;!--配置排除拦截的路径--&gt;                &lt;!--&lt;mvc:exclude-mapping path=&quot;/&quot;/&gt;--&gt;                &lt;!--配置拦截器对象注入容器--&gt;                &lt;bean class=&quot;com.sangeng.interceptor.SGHandlerInterceptor&quot;&gt;&lt;/bean&gt;            &lt;/mvc:interceptor&gt;        &lt;/mvc:interceptors&gt;</code></pre><h2 id="5-声明式事务"><a href="#5-声明式事务" class="headerlink" title="5.声明式事务"></a>5.声明式事务</h2><p>​已经做好了相应的配置，只要在service方法上加上注解即可</p><pre><code class="java">    @Transactional    public void test() &#123;        userDao.insertUser(new User(null,&quot;test1&quot;,11,&quot;cc&quot;));//        System.out.println(1/0);        userDao.insertUser(new User(null,&quot;test2&quot;,12,&quot;cc2&quot;));    &#125;</code></pre><h2 id="6-AOP"><a href="#6-AOP" class="headerlink" title="6.AOP"></a>6.AOP</h2><p>​注意，自己去使用AOP进行增强时，应该是对Service进行增强。不能对Controller进行增强，因为切面类会被放入父容器，而我们的Controller是在子容器中的。父容器不能访问子容器。</p><p>​并且我们如果需要对Controller进行增强，使用拦截器也会更加的好用。</p><pre><code class="java">@Aspect@Componentpublic class SGAspect &#123;    //定义切点    @Pointcut(&quot;execution(* com.sangeng.service..*.*(..))&quot;)    public void pt()&#123;    &#125;    //进行增强    @Before(&quot;pt()&quot;)    public void before()&#123;        System.out.println(&quot;before&quot;);    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> ssm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Step.16 彻底搞懂Vue中keep-alive的魔法-上</title>
      <link href="/computer-science/vueyuanma/dosc/16%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82Vue%E4%B8%ADkeep-alive%E7%9A%84%E9%AD%94%E6%B3%95-%E4%B8%8B/"/>
      <url>/computer-science/vueyuanma/dosc/16%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82Vue%E4%B8%ADkeep-alive%E7%9A%84%E9%AD%94%E6%B3%95-%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="23e83edc353565b58bd82938c7c2e621ed567ef69e9dfbd876d7fbea8b94e376"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Vue </category>
          
          <category> vue2.x源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Step.15 彻底搞懂Vue中keep-alive的魔法-上</title>
      <link href="/computer-science/vueyuanma/dosc/15%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82Vue%E4%B8%ADkeep-alive%E7%9A%84%E9%AD%94%E6%B3%95-%E4%B8%8A/"/>
      <url>/computer-science/vueyuanma/dosc/15%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82Vue%E4%B8%ADkeep-alive%E7%9A%84%E9%AD%94%E6%B3%95-%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="49ccb1d8cddba3bb0df2950ca2bd417e7c93f639088677986d9a9237811b0d2f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Vue </category>
          
          <category> vue2.x源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Step.14 动态组件的深入分析</title>
      <link href="/computer-science/vueyuanma/dosc/14%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6%E7%9A%84%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90/"/>
      <url>/computer-science/vueyuanma/dosc/14%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6%E7%9A%84%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="568c28f6244d65bf9ab8f91bca7ab8dd65179067f79d43ec6422efbb383339ce"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Vue </category>
          
          <category> vue2.x源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Step.13 你真的了解v-model的语法糖了吗</title>
      <link href="/computer-science/vueyuanma/dosc/13%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BA%86%E8%A7%A3v-model%E7%9A%84%E8%AF%AD%E6%B3%95%E7%B3%96%E4%BA%86%E5%90%97/"/>
      <url>/computer-science/vueyuanma/dosc/13%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BA%86%E8%A7%A3v-model%E7%9A%84%E8%AF%AD%E6%B3%95%E7%B3%96%E4%BA%86%E5%90%97/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="64d3a45e518d925e41789153fc004f9c430b4538848877cc00f379524536a5fb"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Vue </category>
          
          <category> vue2.x源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Step.12 vue插槽，你想了解的都在这里</title>
      <link href="/computer-science/vueyuanma/dosc/12vue%E6%8F%92%E6%A7%BD%EF%BC%8C%E4%BD%A0%E6%83%B3%E4%BA%86%E8%A7%A3%E7%9A%84%E9%83%BD%E5%9C%A8%E8%BF%99%E9%87%8C/"/>
      <url>/computer-science/vueyuanma/dosc/12vue%E6%8F%92%E6%A7%BD%EF%BC%8C%E4%BD%A0%E6%83%B3%E4%BA%86%E8%A7%A3%E7%9A%84%E9%83%BD%E5%9C%A8%E8%BF%99%E9%87%8C/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0d880c02091dfa6f5e89f9a2bac2df722c8ed150f4ceed1e31bc68c570e78a46"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Vue </category>
          
          <category> vue2.x源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Step.11 揭秘Vue的事件机制</title>
      <link href="/computer-science/vueyuanma/dosc/11%E6%8F%AD%E7%A7%98Vue%E7%9A%84%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/"/>
      <url>/computer-science/vueyuanma/dosc/11%E6%8F%AD%E7%A7%98Vue%E7%9A%84%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="52a3b5aac6edd1035edde16c15b85a6a22d405b404f74ec0f9399ce097eee5ad"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Vue </category>
          
          <category> vue2.x源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Step.10 来，跟我一起实现diff算法</title>
      <link href="/computer-science/vueyuanma/dosc/10%E6%9D%A5%EF%BC%8C%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%AE%9E%E7%8E%B0diff%E7%AE%97%E6%B3%95/"/>
      <url>/computer-science/vueyuanma/dosc/10%E6%9D%A5%EF%BC%8C%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%AE%9E%E7%8E%B0diff%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ad9f54282372fdabf8f02d45a522a56c1d2502511ea69940324213672c1d1bff"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Vue </category>
          
          <category> vue2.x源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Step.9 深入响应式系统构建-下</title>
      <link href="/computer-science/vueyuanma/dosc/9%E6%B7%B1%E5%85%A5%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%9E%84%E5%BB%BA-%E4%B8%8B/"/>
      <url>/computer-science/vueyuanma/dosc/9%E6%B7%B1%E5%85%A5%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%9E%84%E5%BB%BA-%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>上一节，我们深入分析了以<code>data,computed</code>为数据创建响应式系统的过程，并对其中依赖收集和派发更新的过程进行了详细的分析。然而在使用和分析过程中依然存在或多或少的问题，这一节我们将针对这些问题展开分析，最后我们也会分析一下<code>watch</code>的响应式过程。这篇文章将作为响应式系统分析的完结篇。</p></blockquote><h2 id="7-12-数组检测"><a href="#7-12-数组检测" class="headerlink" title="7.12 数组检测"></a>7.12 数组检测</h2><p>在之前介绍数据代理章节，我们已经详细介绍过<code>Vue</code>数据代理的技术是利用了<code>Object.defineProperty</code>,<code>Object.defineProperty</code>让我们可以方便的利用存取描述符中的<code>getter/setter</code>来进行数据的监听,在<code>get,set</code>钩子中分别做不同的操作，达到数据拦截的目的。然而<code>Object.defineProperty</code>的<code>get,set</code>方法只能检测到对象属性的变化，对于数组的变化(例如插入删除数组元素等操作)，<code>Object.defineProperty</code>却无法达到目的,这也是利用<code>Object.defineProperty</code>进行数据监控的缺陷，虽然<code>es6</code>中的<code>proxy</code>可以完美解决这一问题，但毕竟有兼容性问题，所以我们还需要研究<code>Vue</code>在<code>Object.defineProperty</code>的基础上如何对数组进行监听检测。</p><h3 id="7-12-1-数组方法的重写"><a href="#7-12-1-数组方法的重写" class="headerlink" title="7.12.1 数组方法的重写"></a>7.12.1 数组方法的重写</h3><p>既然数组已经不能再通过数据的<code>getter,setter</code>方法去监听变化了，<code>Vue</code>的做法是对数组方法进行重写，在保留原数组功能的前提下，对数组进行额外的操作处理。也就是重新定义了数组方法。</p><pre><code class="js">var arrayProto = Array.prototype;// 新建一个继承于Array的对象var arrayMethods = Object.create(arrayProto);// 数组拥有的方法var methodsToPatch = [  &#39;push&#39;,  &#39;pop&#39;,  &#39;shift&#39;,  &#39;unshift&#39;,  &#39;splice&#39;,  &#39;sort&#39;,  &#39;reverse&#39;];</code></pre><p><code>arrayMethods</code>是基于原始<code>Array</code>类为原型继承的一个对象类，由于原型链的继承，<code>arrayMethod</code>拥有数组的所有方法，接下来对这个新的数组类的方法进行改写。</p><pre><code class="js">methodsToPatch.forEach(function (method) &#123;  // 缓冲原始数组的方法  var original = arrayProto[method];  // 利用Object.defineProperty对方法的执行进行改写  def(arrayMethods, method, function mutator () &#123;&#125;);&#125;);function def (obj, key, val, enumerable) &#123;    Object.defineProperty(obj, key, &#123;      value: val,      enumerable: !!enumerable,      writable: true,      configurable: true    &#125;);  &#125;</code></pre><p>这里对数组方法设置了代理，当执行<code>arrayMethods</code>的数组方法时，会代理执行<code>mutator</code>函数，这个函数的具体实现，我们放到数组的派发更新中介绍。</p><p><strong>仅仅创建一个新的数组方法合集是不够的，我们在访问数组时，如何不调用原生的数组方法，而是将过程指向这个新的类，这是下一步的重点。</strong></p><p>回到数据初始化过程，也就是执行<code>initData</code>阶段，上一篇内容花了大篇幅介绍过数据初始化会为<code>data</code>数据创建一个<code>Observer</code>类，当时我们只讲述了<code>Observer</code>类会为每个非数组的属性进行数据拦截，重新定义<code>getter,setter</code>方法,除此之外对于数组类型的数据，我们有意跳过分析了。这里，我们重点看看对于数组拦截的处理。</p><pre><code class="js">var Observer = function Observer (value) &#123;  this.value = value;  this.dep = new Dep();  this.vmCount = 0;  // 将__ob__属性设置成不可枚举属性。外部无法通过遍历获取。  def(value, &#39;__ob__&#39;, this);  // 数组处理  if (Array.isArray(value)) &#123;    if (hasProto) &#123;      protoAugment(value, arrayMethods);    &#125; else &#123;      copyAugment(value, arrayMethods, arrayKeys);    &#125;    this.observeArray(value);  &#125; else &#123;  // 对象处理    this.walk(value);  &#125;&#125;</code></pre><p>数组处理的分支分为两个，<code>hasProto</code>的判断条件，<code>hasProto</code>用来判断当前环境下是否支持<code>__proto__</code>属性。而数组的处理会根据是否支持这一属性来决定执行<code>protoAugment, copyAugment</code>过程，</p><pre><code class="js">// __proto__属性的判断var hasProto = &#39;__proto__&#39; in &#123;&#125;;</code></pre><p><strong>当支持<code>__proto__</code>时，执行<code>protoAugment</code>会将当前数组的原型指向新的数组类<code>arrayMethods</code>,如果不支持<code>__proto__</code>，则通过代理设置，在访问数组方法时代理访问新数组类中的数组方法。</strong></p><pre><code class="js">//直接通过原型指向的方式function protoAugment (target, src) &#123;  target.__proto__ = src;&#125;// 通过数据代理的方式function copyAugment (target, src, keys) &#123;  for (var i = 0, l = keys.length; i &lt; l; i++) &#123;    var key = keys[i];    def(target, key, src[key]);  &#125;&#125;</code></pre><p>有了这两步的处理，接下来我们在实例内部调用<code>push, unshift</code>等数组的方法时，会执行<code>arrayMethods</code>类的方法。这也是数组进行依赖收集和派发更新的前提。</p><h3 id="7-12-2-依赖收集"><a href="#7-12-2-依赖收集" class="headerlink" title="7.12.2 依赖收集"></a>7.12.2 依赖收集</h3><p>由于数据初始化阶段会利用<code>Object.definePrototype</code>进行数据访问的改写，数组的访问同样会被<code>getter</code>所拦截。由于是数组，拦截过程会做特殊处理，后面我们再看看<code>dependArray</code>的原理。</p><pre><code class="js">function defineReactive###1() &#123;  ···  var childOb = !shallow &amp;&amp; observe(val);  Object.defineProperty(obj, key, &#123;        enumerable: true,        configurable: true,        get: function reactiveGetter () &#123;          var value = getter ? getter.call(obj) : val;          if (Dep.target) &#123;            dep.depend();            if (childOb) &#123;              childOb.dep.depend();              if (Array.isArray(value)) &#123;                dependArray(value);              &#125;            &#125;          &#125;          return value        &#125;,        set() &#123;&#125;&#125; </code></pre><p><code>childOb</code>是标志属性值是否为基础类型的标志，<code>observe</code>如果遇到基本类型数据，则直接返回，不做任何处理，如果遇到对象或者数组则会递归实例化<code>Observer</code>，会为每个子属性设置响应式数据，最终返回<code>Observer</code>实例。而实例化<code>Observer</code>又回到之前的老流程：<br>  <strong>添加<code>__ob__</code>属性，如果遇到数组则进行原型重指向，遇到对象则定义<code>getter,setter</code>，这一过程前面分析过，就不再阐述。</strong></p><p>在访问到数组时，由于<code>childOb</code>的存在，会执行<code>childOb.dep.depend();</code>进行依赖收集，该<code>Observer</code>实例的<code>dep</code>属性会收集当前的<code>watcher</code>作为依赖保存，<code>dependArray</code>保证了如果数组元素是数组或者对象，需要递归去为内部的元素收集相关的依赖。</p><pre><code class="js">function dependArray (value) &#123;    for (var e = (void 0), i = 0, l = value.length; i &lt; l; i++) &#123;      e = value[i];      e &amp;&amp; e.__ob__ &amp;&amp; e.__ob__.dep.depend();      if (Array.isArray(e)) &#123;        dependArray(e);      &#125;    &#125;  &#125;</code></pre><p>我们可以通过截图看最终依赖收集的结果。</p><p>收集前</p><p><img data-src="/images/img/7.1.png"></p><p>收集后</p><p><img data-src="/images/img/7.2.png"></p><h3 id="7-12-3-派发更新"><a href="#7-12-3-派发更新" class="headerlink" title="7.12.3 派发更新"></a>7.12.3 派发更新</h3><p>当调用数组的方法去添加或者删除数据时，数据的<code>setter</code>方法是无法拦截的，所以我们唯一可以拦截的过程就是调用数组方法的时候，前面介绍过，数组方法的调用会代理到新类<code>arrayMethods</code>的方法中,而<code>arrayMethods</code>的数组方法是进行重写过的。具体我们看他的定义。</p><pre><code class="js"> methodsToPatch.forEach(function (method) &#123;    var original = arrayProto[method];    def(arrayMethods, method, function mutator () &#123;      var args = [], len = arguments.length;      while ( len-- ) args[ len ] = arguments[ len ];      // 执行原数组方法      var result = original.apply(this, args);      var ob = this.__ob__;      var inserted;      switch (method) &#123;        case &#39;push&#39;:        case &#39;unshift&#39;:          inserted = args;          break        case &#39;splice&#39;:          inserted = args.slice(2);          break      &#125;      if (inserted) &#123; ob.observeArray(inserted); &#125;      // notify change      ob.dep.notify();      return result    &#125;);  &#125;);</code></pre><p><code>mutator</code>是重写的数组方法，首先会调用原始的数组方法进行运算，这保证了与原始数组类型的方法一致性，<code>args</code>保存了数组方法调用传递的参数。之后取出数组的<code>__ob__</code>也就是之前保存的<code>Observer</code>实例，调用<code>ob.dep.notify();</code>进行依赖的派发更新，前面知道了。<code>Observer</code>实例的<code>dep</code>是<code>Dep</code>的实例，他收集了需要监听的<code>watcher</code>依赖，而<code>notify</code>会对依赖进行重新计算并更新。具体看<code>Dep.prototype.notify = function notify () &#123;&#125;</code>函数的分析，这里也不重复赘述。</p><p>回到代码中，<code>inserted</code>变量用来标志数组是否是增加了元素，如果增加的元素不是原始类型，而是数组对象类型，则需要触发<code>observeArray</code>方法，对每个元素进行依赖收集。</p><pre><code class="js">Observer.prototype.observeArray = function observeArray (items) &#123;  for (var i = 0, l = items.length; i &lt; l; i++) &#123;    observe(items[i]);  &#125;&#125;;</code></pre><p><strong>总的来说。数组的改变不会触发<code>setter</code>进行依赖更新，所以<code>Vue</code>创建了一个新的数组类，重写了数组的方法，将数组方法指向了新的数组类。同时在访问到数组时依旧触发<code>getter</code>进行依赖收集，在更改数组时，触发数组新方法运算，并进行依赖的派发。</strong></p><p>现在我们回过头看看Vue的官方文档对于数组检测时的注意事项：</p><blockquote><p><code>Vue</code> 不能检测以下数组的变动:</p><ul><li>当你利用索引直接设置一个数组项时，例如：<code>vm.items[indexOfItem] = newValue</code></li><li>当你修改数组的长度时，例如：<code>vm.items.length = newLength</code></li></ul></blockquote><p>显然有了上述的分析我们很容易理解数组检测带来的弊端，即使<code>Vue</code>重写了数组的方法，以便在设置数组时进行拦截处理，但是不管是通过索引还是直接修改长度，都是无法触发依赖更新的。</p><h2 id="7-13-对象检测异常"><a href="#7-13-对象检测异常" class="headerlink" title="7.13 对象检测异常"></a>7.13 对象检测异常</h2><p>我们在实际开发中经常遇到一种场景，对象<code>test: &#123; a: 1 &#125;</code>要添加一个属性<code>b</code>,这时如果我们使用<code>test.b = 2</code>的方式去添加，这个过程<code>Vue</code>是无法检测到的，理由也很简单。我们在对对象进行依赖收集的时候，会为对象的每个属性都进行收集依赖，而直接通过<code>test.b</code>添加的新属性并没有依赖收集的过程，因此当之后数据<code>b</code>发生改变时也不会进行依赖的更新。</p><p>了解决这一问题，<code>Vue</code>提供了<code>Vue.set(object, propertyName, value)</code>的静态方法和<code>vm.$set(object, propertyName, value)</code>的实例方法，我们看具体怎么完成新属性的依赖收集过程。</p><pre><code class="js">Vue.set = setfunction set (target, key, val) &#123;    //target必须为非空对象    if (isUndef(target) || isPrimitive(target)    ) &#123;      warn((&quot;Cannot set reactive property on undefined, null, or primitive value: &quot; + ((target))));    &#125;    // 数组场景，调用重写的splice方法，对新添加属性收集依赖。    if (Array.isArray(target) &amp;&amp; isValidArrayIndex(key)) &#123;      target.length = Math.max(target.length, key);      target.splice(key, 1, val);      return val    &#125;    // 新增对象的属性存在时，直接返回新属性，触发依赖收集    if (key in target &amp;&amp; !(key in Object.prototype)) &#123;      target[key] = val;      return val    &#125;    // 拿到目标源的Observer 实例    var ob = (target).__ob__;    if (target._isVue || (ob &amp;&amp; ob.vmCount)) &#123;      warn(        &#39;Avoid adding reactive properties to a Vue instance or its root $data &#39; +        &#39;at runtime - declare it upfront in the data option.&#39;      );      return val    &#125;    // 目标源对象本身不是一个响应式对象，则不需要处理    if (!ob) &#123;      target[key] = val;      return val    &#125;    // 手动调用defineReactive，为新属性设置getter,setter    defineReactive###1(ob.value, key, val);    ob.dep.notify();    return val  &#125;</code></pre><p>按照分支分为不同的四个处理逻辑：</p><ol><li>目标对象必须为非空的对象，可以是数组，否则抛出异常。</li><li>如果目标对象是数组时，调用数组的<code>splice</code>方法，而前面分析数组检测时，遇到数组新增元素的场景，会调用<code>ob.observeArray(inserted)</code>对数组新增的元素收集依赖。</li><li>新增的属性值在原对象中已经存在，则手动访问新的属性值，这一过程会触发依赖收集。</li><li>手动定义新属性的<code>getter,setter</code>方法，并通过<code>notify</code>触发依赖更新。</li></ol><h2 id="7-14-nextTick"><a href="#7-14-nextTick" class="headerlink" title="7.14 nextTick"></a>7.14 nextTick</h2><p>在上一节的内容中，我们说到数据修改时会触发<code>setter</code>方法进行依赖的派发更新，而更新时会将每个<code>watcher</code>推到队列中，等待下一个<code>tick</code>到来时再执行<code>DOM</code>的渲染更新操作。这个就是异步更新的过程。为了说明异步更新的概念，需要牵扯到浏览器的事件循环机制和最优的渲染时机问题。由于这不是文章的主线，我只用简单的语言概述。</p><h3 id="7-14-1-事件循环机制"><a href="#7-14-1-事件循环机制" class="headerlink" title="7.14.1 事件循环机制"></a>7.14.1 事件循环机制</h3><ol><li>完整的事件循环机制需要了解两种异步队列：<code>macro-task</code>和<code>micro-task</code></li><li><code>macro-task</code>常见的有 <code>setTimeout, setInterval, setImmediate, script脚本, I/O操作，UI渲染</code></li><li><code>micro-task</code>常见的有 <code>promise, process.nextTick, MutationObserver</code>等</li><li>完整事件循环流程为：<br>  4.1 <code>micro-task</code>空，<code>macro-task</code>队列只有<code>script</code>脚本，推出<code>macro-task</code>的<code>script</code>任务执行，脚本执行期间产生的<code>macro-task，micro-task</code>推到对应的队列中<br>  4.2 执行全部<code>micro-task</code>里的微任务事件<br>  4.3 执行<code>DOM</code>操作，渲染更新页面<br>  4.4 执行<code>web worker</code>等相关任务<br>  4.5 循环，取出<code>macro-task</code>中一个宏任务事件执行，重复4的操作。</li></ol><p>从上面的流程中我们可以发现，最好的渲染过程发生在微任务队列的执行过程中，此时他离页面渲染过程最近，因此我们可以借助微任务队列来实现异步更新，它可以让复杂批量的运算操作运行在JS层面，而视图的渲染只关心最终的结果，这大大降低了性能的损耗。</p><p>举一个这一做法好处的例子：<br>  由于<code>Vue</code>是数据驱动视图更新渲染，如果我们在一个操作中重复对一个响应式数据进行计算，例如 在一个循环中执行<code>this.num ++ </code>一千次，由于响应式系统的存在，数据变化触发<code>setter</code>，<code>setter</code>触发依赖派发更新，更新调用<code>run</code>进行视图的重新渲染。这一次循环，视图渲染要执行一千次，很明显这是很浪费性能的，我们只需要关注最后第一千次在界面上更新的结果而已。所以利用异步更新显得格外重要。</p><h3 id="7-14-2-基本实现"><a href="#7-14-2-基本实现" class="headerlink" title="7.14.2 基本实现"></a>7.14.2 基本实现</h3><p><code>Vue</code>用一个<code>queue</code>收集依赖的执行，在下次微任务执行的时候统一执行<code>queue</code>中<code>Watcher</code>的<code>run</code>操作,与此同时，相同<code>id</code>的<code>watcher</code>不会重复添加到<code>queue</code>中,因此也不会重复执行多次的视图渲染。我们看<code>nextTick</code>的实现。</p><pre><code class="js">// 原型上定义的方法Vue.prototype.$nextTick = function (fn) &#123;  return nextTick(fn, this)&#125;;// 构造函数上定义的方法Vue.nextTick = nextTick;// 实际的定义var callbacks = [];function nextTick (cb, ctx) &#123;    var _resolve;    // callbacks是维护微任务的数组。    callbacks.push(function () &#123;      if (cb) &#123;        try &#123;          cb.call(ctx);        &#125; catch (e) &#123;          handleError(e, ctx, &#39;nextTick&#39;);        &#125;      &#125; else if (_resolve) &#123;        _resolve(ctx);      &#125;    &#125;);    if (!pending) &#123;      pending = true;      // 将维护的队列推到微任务队列中维护      timerFunc();    &#125;    // nextTick没有传递参数，且浏览器支持Promise,则返回一个promise对象    if (!cb &amp;&amp; typeof Promise !== &#39;undefined&#39;) &#123;      return new Promise(function (resolve) &#123;        _resolve = resolve;      &#125;)    &#125;  &#125;</code></pre><p><code>nextTick</code>定义为一个函数，使用方式为<code>Vue.nextTick( [callback, context] )</code>,当<code>callback</code>经过<code>nextTick</code>封装后，<code>callback</code>会在下一个<code>tick</code>中执行调用。从实现上，<code>callbacks</code>是一个维护了需要在下一个<code>tick</code>中执行的任务的队列，它的每个元素都是需要执行的函数。<code>pending</code>是判断是否在等待执行微任务队列的标志。而<code>timerFunc</code>是真正将任务队列推到微任务队列中的函数。我们看<code>timerFunc</code>的实现。</p><p>1.如果浏览器执行<code>Promise</code>,那么默认以<code>Promsie</code>将执行过程推到微任务队列中。</p><pre><code class="js">var timerFunc;if (typeof Promise !== &#39;undefined&#39; &amp;&amp; isNative(Promise)) &#123;  var p = Promise.resolve();  timerFunc = function () &#123;    p.then(flushCallbacks);    // 手机端的兼容代码    if (isIOS) &#123; setTimeout(noop); &#125;  &#125;;  // 使用微任务队列的标志  isUsingMicroTask = true;&#125;</code></pre><p><code>flushCallbacks</code>是异步更新的函数，他会取出callbacks数组的每一个任务，执行任务，具体定义如下：</p><pre><code class="js">function flushCallbacks () &#123;  pending = false;  var copies = callbacks.slice(0);  // 取出callbacks数组的每一个任务，执行任务  callbacks.length = 0;  for (var i = 0; i &lt; copies.length; i++) &#123;    copies[i]();  &#125;&#125;</code></pre><p>2.不支持<code>promise</code>,支持<code>MutataionObserver</code></p><pre><code class="js">else if (!isIE &amp;&amp; typeof MutationObserver !== &#39;undefined&#39; &amp;&amp; (    isNative(MutationObserver) ||    // PhantomJS and iOS 7.x    MutationObserver.toString() === &#39;[object MutationObserverConstructor]&#39;  )) &#123;    var counter = 1;    var observer = new MutationObserver(flushCallbacks);    var textNode = document.createTextNode(String(counter));    observer.observe(textNode, &#123;      characterData: true    &#125;);    timerFunc = function () &#123;      counter = (counter + 1) % 2;      textNode.data = String(counter);    &#125;;    isUsingMicroTask = true;  &#125;</code></pre><p>3.如果不支持微任务方法，则会使用宏任务方法，<code>setImmediate</code>会先被使用</p><pre><code class="js"> else if (typeof setImmediate !== &#39;undefined&#39; &amp;&amp; isNative(setImmediate)) &#123;    // Fallback to setImmediate.    // Techinically it leverages the (macro) task queue,    // but it is still a better choice than setTimeout.    timerFunc = function () &#123;      setImmediate(flushCallbacks);    &#125;;  &#125;</code></pre><p>4.所有方法都不适合，会使用宏任务方法中的<code>setTimeout</code></p><pre><code class="js">else &#123;  timerFunc = function () &#123;    setTimeout(flushCallbacks, 0);  &#125;;&#125;</code></pre><p><strong>当<code>nextTick</code>不传递任何参数时，可以作为一个<code>promise</code>用</strong>，例如：</p><pre><code class="js">nextTick().then(() =&gt; &#123;&#125;)</code></pre><h3 id="7-14-3-使用场景"><a href="#7-14-3-使用场景" class="headerlink" title="7.14.3 使用场景"></a>7.14.3 使用场景</h3><p>说了这么多原理性的东西，回过头来看看<code>nextTick</code>的使用场景，由于异步更新的原理，我们在某一时间改变的数据并不会触发视图的更新，而是需要等下一个<code>tick</code>到来时才会更新视图，下面是一个典型场景：</p><pre><code class="js">&lt;input v-if=&quot;show&quot; type=&quot;text&quot; ref=&quot;myInput&quot;&gt;// jsdata() &#123;  show: false&#125;,mounted() &#123;  this.show = true;  this.$refs.myInput.focus();// 报错&#125;</code></pre><p>数据改变时，视图并不会同时改变，因此需要使用<code>nextTick</code></p><pre><code class="js">mounted() &#123;  this.show = true;  this.$nextTick(function() &#123;    this.$refs.myInput.focus();// 正常  &#125;)&#125;</code></pre><h2 id="7-15-watch"><a href="#7-15-watch" class="headerlink" title="7.15 watch"></a>7.15 watch</h2><p>到这里，关于响应式系统的分析大部分内容已经分析完毕，我们上一节还遗留着一个问题，<code>Vue</code>对用户手动添加的<code>watch</code>如何进行数据拦截。我们先看看两种基本的使用形式。</p><pre><code class="js">// watch选项var vm = new Vue(&#123;  el: &#39;#app&#39;,  data() &#123;    return &#123;      num: 12    &#125;  &#125;,  watch: &#123;    num() &#123;&#125;  &#125;&#125;)vm.num = 111// $watch api方式vm.$watch(&#39;num&#39;, function() &#123;&#125;, &#123;  deep: ,  immediate: ,&#125;)</code></pre><h3 id="7-15-1-依赖收集"><a href="#7-15-1-依赖收集" class="headerlink" title="7.15.1 依赖收集"></a>7.15.1 依赖收集</h3><p>我们以<code>watch</code>选项的方式来分析<code>watch</code>的细节，同样从初始化说起，初始化数据会执行<code>initWatch</code>,<code>initWatch</code>的核心是<code>createWatcher</code>。</p><pre><code class="js">function initWatch (vm, watch) &#123;    for (var key in watch) &#123;      var handler = watch[key];      // handler可以是数组的形式，执行多个回调      if (Array.isArray(handler)) &#123;        for (var i = 0; i &lt; handler.length; i++) &#123;          createWatcher(vm, key, handler[i]);        &#125;      &#125; else &#123;        createWatcher(vm, key, handler);      &#125;    &#125;  &#125;  function createWatcher (vm,expOrFn,handler,options) &#123;    // 针对watch是对象的形式，此时回调回选项中的handler    if (isPlainObject(handler)) &#123;      options = handler;      handler = handler.handler;    &#125;    if (typeof handler === &#39;string&#39;) &#123;      handler = vm[handler];    &#125;    return vm.$watch(expOrFn, handler, options)  &#125;</code></pre><p>无论是选项的形式，还是<code>api</code>的形式，最终都会调用实例的<code>$watch</code>方法，其中<code>expOrFn</code>是监听的字符串，<code>handler</code>是监听的回调函数，<code>options</code>是相关配置。我们重点看看<code>$watch</code>的实现。</p><pre><code class="js">Vue.prototype.$watch = function (expOrFn,cb,options) &#123;    var vm = this;    if (isPlainObject(cb)) &#123;      return createWatcher(vm, expOrFn, cb, options)    &#125;    options = options || &#123;&#125;;    options.user = true;    var watcher = new Watcher(vm, expOrFn, cb, options);    // 当watch有immediate选项时，立即执行cb方法，即不需要等待属性变化，立刻执行回调。    if (options.immediate) &#123;      try &#123;        cb.call(vm, watcher.value);      &#125; catch (error) &#123;        handleError(error, vm, (&quot;callback for immediate watcher \&quot;&quot; + (watcher.expression) + &quot;\&quot;&quot;));      &#125;    &#125;    return function unwatchFn () &#123;      watcher.teardown();    &#125;  &#125;;&#125;</code></pre><p><code>$watch</code>的核心是创建一个<code>user watcher</code>,<code>options.user</code>是当前用户定义<code>watcher</code>的标志。如果有<code>immediate</code>属性，则立即执行回调函数。<br>而实例化<code>watcher</code>时会执行一次<code>getter</code>求值，这时，<code>user watcher</code>会作为依赖被数据所收集。这个过程可以参考<code>data</code>的分析。</p><pre><code class="js">var Watcher = function Watcher() &#123;  ···  this.value = this.lazy      ? undefined      : this.get();&#125;Watcher.prototype.get = function get() &#123;  ···  try &#123;    // getter回调函数，触发依赖收集    value = this.getter.call(vm, vm);  &#125; &#125;</code></pre><h3 id="7-15-2-派发更新"><a href="#7-15-2-派发更新" class="headerlink" title="7.15.2 派发更新"></a>7.15.2 派发更新</h3><p><code>watch</code>派发更新的过程很好理解，数据发生改变时，<code>setter</code>拦截对依赖进行更新，而此前<code>user watcher</code>已经被当成依赖收集了。这个时候依赖的更新就是回调函数的执行。</p><h2 id="7-16-小结"><a href="#7-16-小结" class="headerlink" title="7.16 小结"></a>7.16 小结</h2><p>这一节是响应式系统构建的完结篇，<code>data,computed</code>如何进行响应式系统设计，这在上一节内容已经详细分析，这一节针对一些特殊场景做了分析。例如由于<code>Object.defineProperty</code>自身的缺陷，无法对数组的新增删除进行拦截检测，因此<code>Vue</code>对数组进行了特殊处理，重写了数组的方法，并在方法中对数据进行拦截。我们也重点介绍了<code>nextTick</code>的原理，利用浏览器的事件循环机制来达到最优的渲染时机。文章的最后补充了<code>watch</code>在响应式设计的原理，用户自定义的<code>watch</code>会创建一个依赖，这个依赖在数据改变时会执行回调。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Vue </category>
          
          <category> vue2.x源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Step.8 深入响应式系统构建-中</title>
      <link href="/computer-science/vueyuanma/dosc/8%E6%B7%B1%E5%85%A5%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%9E%84%E5%BB%BA-%E4%B8%AD/"/>
      <url>/computer-science/vueyuanma/dosc/8%E6%B7%B1%E5%85%A5%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%9E%84%E5%BB%BA-%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>为了深入介绍响应式系统的内部实现原理，我们花了一整节的篇幅介绍了数据(包括<code>data, computed,props</code>)如何初始化成为响应式对象的过程。有了响应式数据对象的知识，上一节的后半部分我们还在保留源码结构的基础上构建了一个以<code>data</code>为数据的响应式系统，而这一节，我们继续深入响应式系统内部构建的细节，详细分析<code>Vue</code>在响应式系统中对<code>data,computed</code>的处理。</p></blockquote><h2 id="7-8-相关概念"><a href="#7-8-相关概念" class="headerlink" title="7.8 相关概念"></a>7.8 相关概念</h2><p>在构建简易式响应式系统的时候，我们引出了几个重要的概念，他们都是响应式原理设计的核心，我们先简单回顾一下：</p><ul><li><code>Observer</code>类，实例化一个<code>Observer</code>类会通过<code>Object.defineProperty</code>对数据的<code>getter,setter</code>方法进行改写，在<code>getter</code>阶段进行<strong>依赖的收集</strong>,在数据发生更新阶段，触发<code>setter</code>方法进行<strong>依赖的更新</strong></li><li><code>watcher</code>类，实例化<code>watcher</code>类相当于创建一个依赖，简单的理解是数据在哪里被使用就需要产生了一个依赖。当数据发生改变时，会通知到每个依赖进行更新，前面提到的渲染<code>wathcer</code>便是渲染<code>dom</code>时使用数据产生的依赖。</li><li><code>Dep</code>类，既然<code>watcher</code>理解为每个数据需要监听的依赖，那么对这些依赖的收集和通知则需要另一个类来管理，这个类便是<code>Dep</code>,<code>Dep</code>需要做的只有两件事，收集依赖和派发更新依赖。</li></ul><p>这是响应式系统构建的三个基本核心概念，也是这一节的基础，如果还没有印象，请先回顾上一节对<strong>极简风响应式系统的构建</strong>。</p><h2 id="7-9-data"><a href="#7-9-data" class="headerlink" title="7.9 data"></a>7.9 data</h2><h3 id="7-9-1-问题思考"><a href="#7-9-1-问题思考" class="headerlink" title="7.9.1 问题思考"></a>7.9.1 问题思考</h3><p>在开始分析<code>data</code>之前，我们先抛出几个问题让读者思考，而答案都包含在接下来内容分析中。</p><ul><li><p>前面已经知道，<code>Dep</code>是作为管理依赖的容器，那么这个容器在什么时候产生？也就是实例化<code>Dep</code>发生在什么时候？</p></li><li><p><code>Dep</code>收集了什么类型的依赖？即<code>watcher</code>作为依赖的分类有哪些，分别是什么场景，以及区别在哪里？</p></li><li><p><code>Observer</code>这个类具体对<code>getter,setter</code>方法做了哪些事情？</p></li><li><p>手写的<code>watcher</code>和页面数据渲染监听的<code>watch</code>如果同时监听到数据的变化，优先级怎么排？</p></li><li><p>有了依赖的收集是不是还有依赖的解除，依赖解除的意义在哪里？</p></li></ul><p>带着这几个问题，我们开始对<code>data</code>的响应式细节展开分析。</p><h3 id="7-9-2-依赖收集"><a href="#7-9-2-依赖收集" class="headerlink" title="7.9.2 依赖收集"></a>7.9.2 依赖收集</h3><p><code>data</code>在初始化阶段会实例化一个<code>Observer</code>类，这个类的定义如下(忽略数组类型的<code>data</code>):</p><pre><code class="js">// initData function initData(data) &#123;  ···  observe(data, true)&#125;// observefunction observe(value, asRootData) &#123;  ···  ob = new Observer(value);  return ob&#125;// 观察者类，对象只要设置成拥有观察属性，则对象下的所有属性都会重写getter和setter方法，而getter，setting方法会进行依赖的收集和派发更新var Observer = function Observer (value) &#123;    ···    // 将__ob__属性设置成不可枚举属性。外部无法通过遍历获取。    def(value, &#39;__ob__&#39;, this);    // 数组处理    if (Array.isArray(value)) &#123;        ···    &#125; else &#123;      // 对象处理      this.walk(value);    &#125;  &#125;;function def (obj, key, val, enumerable) &#123;  Object.defineProperty(obj, key, &#123;    value: val,    enumerable: !!enumerable, // 是否可枚举    writable: true,    configurable: true  &#125;);&#125;</code></pre><p><code>Observer</code>会为<code>data</code>添加一个<code>__ob__</code>属性， <code>__ob__</code>属性是作为响应式对象的标志，同时<code>def</code>方法确保了该属性是不可枚举属性，即外界无法通过遍历获取该属性值。除了标志响应式对象外，<code>Observer</code>类还调用了原型上的<code>walk</code>方法，遍历对象上每个属性进行<code>getter,setter</code>的改写。</p><pre><code class="js">Observer.prototype.walk = function walk (obj) &#123;    // 获取对象所有属性，遍历调用defineReactive###1进行改写    var keys = Object.keys(obj);    for (var i = 0; i &lt; keys.length; i++) &#123;        defineReactive###1(obj, keys[i]);    &#125;&#125;;</code></pre><p><code>defineReactive###1</code>是响应式构建的核心，它会先<strong>实例化一个<code>Dep</code>类，即为每个数据都创建一个依赖的管理</strong>，之后利用<code>Object.defineProperty</code>重写<code>getter,setter</code>方法。这里我们只分析依赖收集的代码。</p><pre><code class="js">function defineReactive###1 (obj,key,val,customSetter,shallow) &#123;    // 每个数据实例化一个Dep类，创建一个依赖的管理    var dep = new Dep();    var property = Object.getOwnPropertyDescriptor(obj, key);    // 属性必须满足可配置    if (property &amp;&amp; property.configurable === false) &#123;      return    &#125;    // cater for pre-defined getter/setters    var getter = property &amp;&amp; property.get;    var setter = property &amp;&amp; property.set;    // 这一部分的逻辑是针对深层次的对象，如果对象的属性是一个对象，则会递归调用实例化Observe类，让其属性值也转换为响应式对象    var childOb = !shallow &amp;&amp; observe(val);    Object.defineProperty(obj, key, &#123;      enumerable: true,      configurable: true,s      get: function reactiveGetter () &#123;        var value = getter ? getter.call(obj) : val;        if (Dep.target) &#123;          // 为当前watcher添加dep数据          dep.depend();          if (childOb) &#123;            childOb.dep.depend();            if (Array.isArray(value)) &#123;              dependArray(value);            &#125;          &#125;        &#125;        return value      &#125;,      set: function reactiveSetter (newVal) &#123;&#125;    &#125;);  &#125;</code></pre><p>主要看<code>getter</code>的逻辑，我们知道当<code>data</code>中属性值被访问时，会被<code>getter</code>函数拦截，根据我们旧有的知识体系可以知道，实例挂载前会创建一个渲染<code>watcher</code>。</p><pre><code class="js">new Watcher(vm, updateComponent, noop, &#123;  before: function before () &#123;    if (vm._isMounted &amp;&amp; !vm._isDestroyed) &#123;      callHook(vm, &#39;beforeUpdate&#39;);    &#125;  &#125;&#125;, true /* isRenderWatcher */);</code></pre><p>与此同时，<code>updateComponent</code>的逻辑会执行实例的挂载，在这个过程中，模板会被优先解析为<code>render</code>函数，而<code>render</code>函数转换成<code>Vnode</code>时，会访问到定义的<code>data</code>数据，这个时候会触发<code>gettter</code>进行依赖收集。而此时数据收集的依赖就是这个渲染<code>watcher</code>本身。</p><p>代码中依赖收集阶段会做下面几件事：</p><ol><li><strong>为当前的<code>watcher</code>(该场景下是渲染<code>watcher</code>)添加拥有的数据</strong>。</li><li><strong>为当前的数据收集需要监听的依赖</strong></li></ol><p>如何理解这两点？我们先看代码中的实现。<code>getter</code>阶段会执行<code>dep.depend()</code>,这是<code>Dep</code>这个类定义在原型上的方法。</p><pre><code class="js">dep.depend();Dep.prototype.depend = function depend () &#123;    if (Dep.target) &#123;      Dep.target.addDep(this);    &#125;  &#125;;</code></pre><p><code>Dep.target</code>为当前执行的<code>watcher</code>,在渲染阶段，<code>Dep.target</code>为组件挂载时实例化的渲染<code>watcher</code>,因此<code>depend</code>方法又会调用当前<code>watcher</code>的<code>addDep</code>方法为<code>watcher</code>添加依赖的数据。</p><pre><code class="js">Watcher.prototype.addDep = function addDep (dep) &#123;    var id = dep.id;    if (!this.newDepIds.has(id)) &#123;      // newDepIds和newDeps记录watcher拥有的数据      this.newDepIds.add(id);      this.newDeps.push(dep);      // 避免重复添加同一个data收集器      if (!this.depIds.has(id)) &#123;        dep.addSub(this);      &#125;    &#125;  &#125;;</code></pre><p>其中<code>newDepIds</code>是具有唯一成员是<code>Set</code>数据结构，<code>newDeps</code>是数组，他们用来记录当前<code>watcher</code>所拥有的数据，这一过程会进行逻辑判断，避免同一数据添加多次。</p><p><code>addSub</code>为每个数据依赖收集器添加需要被监听的<code>watcher</code>。</p><pre><code class="js">Dep.prototype.addSub = function addSub (sub) &#123;  //将当前watcher添加到数据依赖收集器中    this.subs.push(sub);&#125;;</code></pre><ol start="3"><li><strong><code>getter</code>如果遇到属性值为对象时，会为该对象的每个值收集依赖</strong></li></ol><p>这句话也很好理解，如果我们将一个值为基本类型的响应式数据改变成一个对象，此时新增对象里的属性，也需要设置成响应式数据。</p><ol start="4"><li><strong>遇到属性值为数组时，进行特殊处理</strong>，这点放到后面讲。</li></ol><p><strong>通俗的总结一下依赖收集的过程，每个数据就是一个依赖管理器，而每个使用数据的地方就是一个依赖。当访问到数据时，会将当前访问的场景作为一个依赖收集到依赖管理器中，同时也会为这个场景的依赖收集拥有的数据。</strong></p><h3 id="7-9-3-派发更新"><a href="#7-9-3-派发更新" class="headerlink" title="7.9.3 派发更新"></a>7.9.3 派发更新</h3><p>在分析依赖收集的过程中，可能会有不少困惑，为什么要维护这么多的关系？在数据更新时，这些关系会起到什么作用？带着疑惑，我们来看看派发更新的过程。<br>在数据发生改变时，会执行定义好的<code>setter</code>方法，我们先看源码。</p><pre><code class="js">Object.defineProperty(obj,key, &#123;  ···  set: function reactiveSetter (newVal) &#123;      var value = getter ? getter.call(obj) : val;      // 新值和旧值相等时，跳出操作      if (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;        return      &#125;      ···      // 新值为对象时，会为新对象进行依赖收集过程      childOb = !shallow &amp;&amp; observe(newVal);      dep.notify();    &#125;&#125;)</code></pre><p>派发更新阶段会做以下几件事：</p><ul><li><strong>判断数据更改前后是否一致，如果数据相等则不进行任何派发更新操作</strong>。</li><li><strong>新值为对象时，会对该值的属性进行依赖收集过程</strong>。</li><li><strong>通知该数据收集的<code>watcher</code>依赖,遍历每个<code>watcher</code>进行数据更新</strong>,这个阶段是调用该数据依赖收集器的<code>dep.notify</code>方法进行更新的派发。</li></ul><pre><code class="js">Dep.prototype.notify = function notify () &#123;    var subs = this.subs.slice();    if (!config.async) &#123;      // 根据依赖的id进行排序      subs.sort(function (a, b) &#123; return a.id - b.id; &#125;);    &#125;    for (var i = 0, l = subs.length; i &lt; l; i++) &#123;      // 遍历每个依赖，进行更新数据操作。      subs[i].update();    &#125;  &#125;;</code></pre><ul><li><strong>更新时会将每个<code>watcher</code>推到队列中，等待下一个<code>tick</code>到来时取出每个<code>watcher</code>进行<code>run</code>操作</strong></li></ul><pre><code class="js"> Watcher.prototype.update = function update () &#123;    ···    queueWatcher(this);  &#125;;</code></pre><p><code>queueWatcher</code>方法的调用，会将数据所收集的依赖依次推到<code>queue</code>数组中,数组会在下一个事件循环<code>&#39;tick&#39;</code>中根据缓冲结果进行视图更新。而在执行视图更新过程中，难免会因为数据的改变而在渲染模板上添加新的依赖，这样又会执行<code>queueWatcher</code>的过程。所以需要有一个标志位来记录是否处于异步更新过程的队列中。这个标志位为<code>flushing</code>,当处于异步更新过程时，新增的<code>watcher</code>会插入到<code>queue</code>中。</p><pre><code class="js">function queueWatcher (watcher) &#123;    var id = watcher.id;    // 保证同一个watcher只执行一次    if (has[id] == null) &#123;      has[id] = true;      if (!flushing) &#123;        queue.push(watcher);      &#125; else &#123;        var i = queue.length - 1;        while (i &gt; index &amp;&amp; queue[i].id &gt; watcher.id) &#123;          i--;        &#125;        queue.splice(i + 1, 0, watcher);      &#125;      ···      nextTick(flushSchedulerQueue);    &#125;  &#125;</code></pre><p><code>nextTick</code>的原理和实现先不讲，概括来说，<code>nextTick</code>会缓冲多个数据处理过程，等到下一个事件循环<code>tick</code>中再去执行<code>DOM</code>操作，<strong>它的原理，本质是利用事件循环的微任务队列实现异步更新</strong>。</p><p>当下一个<code>tick</code>到来时，会执行<code>flushSchedulerQueue</code>方法，它会拿到收集的<code>queue</code>数组(这是一个<code>watcher</code>的集合),并对数组依赖进行排序。为什么进行排序呢？源码中解释了三点：</p><blockquote><ul><li>组件创建是先父后子，所以组件的更新也是先父后子，因此需要保证父的渲染<code>watcher</code>优先于子的渲染<code>watcher</code>更新。</li><li><strong>用户自定义的<code>watcher</code>,称为<code>user watcher</code>。 <code>user watcher</code>和<code>render watcher</code>执行也有先后，由于<code>user watchers</code>比<code>render watcher</code>要先创建，所以<code>user watcher</code>要优先执行</strong>。</li><li>如果一个组件在父组件的 <code>watcher</code> 执行阶段被销毁，那么它对应的 <code>watcher</code> 执行都可以被跳过。</li></ul></blockquote><pre><code class="js">function flushSchedulerQueue () &#123;    currentFlushTimestamp = getNow();    flushing = true;    var watcher, id;    // 对queue的watcher进行排序    queue.sort(function (a, b) &#123; return a.id - b.id; &#125;);    // 循环执行queue.length，为了确保由于渲染时添加新的依赖导致queue的长度不断改变。    for (index = 0; index &lt; queue.length; index++) &#123;      watcher = queue[index];      // 如果watcher定义了before的配置，则优先执行before方法      if (watcher.before) &#123;        watcher.before();      &#125;      id = watcher.id;      has[id] = null;      watcher.run();      // in dev build, check and stop circular updates.      if (has[id] != null) &#123;        circular[id] = (circular[id] || 0) + 1;        if (circular[id] &gt; MAX_UPDATE_COUNT) &#123;          warn(            &#39;You may have an infinite update loop &#39; + (              watcher.user                ? (&quot;in watcher with expression \&quot;&quot; + (watcher.expression) + &quot;\&quot;&quot;)                : &quot;in a component render function.&quot;            ),            watcher.vm          );          break        &#125;      &#125;    &#125;    // keep copies of post queues before resetting state    var activatedQueue = activatedChildren.slice();    var updatedQueue = queue.slice();    // 重置恢复状态，清空队列    resetSchedulerState();    // 视图改变后，调用其他钩子    callActivatedHooks(activatedQueue);    callUpdatedHooks(updatedQueue);    // devtool hook    /* istanbul ignore if */    if (devtools &amp;&amp; config.devtools) &#123;      devtools.emit(&#39;flush&#39;);    &#125;  &#125;</code></pre><p><code>flushSchedulerQueue</code>阶段，重要的过程可以总结为四点：</p><blockquote><ul><li>对<code>queue</code>中的<code>watcher</code>进行排序，原因上面已经总结。</li><li>遍历<code>watcher</code>,如果当前<code>watcher</code>有<code>before</code>配置，则执行<code>before</code>方法，对应前面的渲染<code>watcher</code>:在渲染<code>watcher</code>实例化时，我们传递了<code>before</code>函数，即在下个<code>tick</code>更新视图前，会调用<code>beforeUpdate</code>生命周期钩子。</li><li>执行<code>watcher.run</code>进行修改的操作。</li><li>重置恢复状态，这个阶段会将一些流程控制的状态变量恢复为初始值，并清空记录<code>watcher</code>的队列。</li></ul></blockquote><pre><code class="js">new Watcher(vm, updateComponent, noop, &#123;  before: function before () &#123;    if (vm._isMounted &amp;&amp; !vm._isDestroyed) &#123;      callHook(vm, &#39;beforeUpdate&#39;);    &#125;  &#125;&#125;, true /* isRenderWatcher */);</code></pre><p>重点看看<code>watcher.run()</code>的操作。</p><pre><code class="js">Watcher.prototype.run = function run () &#123;    if (this.active) &#123;      var value = this.get();      if ( value !== this.value || isObject(value) || this.deep ) &#123;        // 设置新值        var oldValue = this.value;        this.value = value;        // 针对user watcher，暂时不分析        if (this.user) &#123;          try &#123;            this.cb.call(this.vm, value, oldValue);          &#125; catch (e) &#123;            handleError(e, this.vm, (&quot;callback for watcher \&quot;&quot; + (this.expression) + &quot;\&quot;&quot;));          &#125;        &#125; else &#123;          this.cb.call(this.vm, value, oldValue);        &#125;      &#125;    &#125;  &#125;;</code></pre><p>首先会执行<code>watcher.prototype.get</code>的方法，得到数据变化后的当前值，之后会对新值做判断，如果判断满足条件，则执行<code>cb</code>,<code>cb</code>为实例化<code>watcher</code>时传入的回调。</p><p>在分析<code>get</code>方法前，回头看看<code>watcher</code>构造函数的几个属性定义</p><pre><code class="js">var watcher = function Watcher(  vm, // 组件实例  expOrFn, // 执行函数  cb, // 回调  options, // 配置  isRenderWatcher // 是否为渲染watcher) &#123;  this.vm = vm;    if (isRenderWatcher) &#123;      vm._watcher = this;    &#125;    vm._watchers.push(this);    // options    if (options) &#123;      this.deep = !!options.deep;      this.user = !!options.user;      this.lazy = !!options.lazy;      this.sync = !!options.sync;      this.before = options.before;    &#125; else &#123;      this.deep = this.user = this.lazy = this.sync = false;    &#125;    this.cb = cb;    this.id = ++uid$2; // uid for batching    this.active = true;    this.dirty = this.lazy; // for lazy watchers    this.deps = [];    this.newDeps = [];    this.depIds = new _Set();    this.newDepIds = new _Set();    this.expression = expOrFn.toString();    // parse expression for getter    if (typeof expOrFn === &#39;function&#39;) &#123;      this.getter = expOrFn;    &#125; else &#123;      this.getter = parsePath(expOrFn);      if (!this.getter) &#123;        this.getter = noop;        warn(          &quot;Failed watching path: \&quot;&quot; + expOrFn + &quot;\&quot; &quot; +          &#39;Watcher only accepts simple dot-delimited paths. &#39; +          &#39;For full control, use a function instead.&#39;,          vm        );      &#125;    &#125;    // lazy为计算属性标志，当watcher为计算watcher时，不会理解执行get方法进行求值    this.value = this.lazy      ? undefined      : this.get();  &#125;</code></pre><p>方法<code>get</code>的定义如下：</p><pre><code class="js">Watcher.prototype.get = function get () &#123;    pushTarget(this);    var value;    var vm = this.vm;    try &#123;      value = this.getter.call(vm, vm);    &#125; catch (e) &#123;     ···    &#125; finally &#123;      ···      // 把Dep.target恢复到上一个状态，依赖收集过程完成      popTarget();      this.cleanupDeps();    &#125;    return value  &#125;;</code></pre><p><code>get</code>方法会执行<code>this.getter</code>进行求值，在当前渲染<code>watcher</code>的条件下,<code>getter</code>会执行视图更新的操作。这一阶段会<strong>重新渲染页面组件</strong></p><pre><code class="js">new Watcher(vm, updateComponent, noop, &#123; before: () =&gt; &#123;&#125; &#125;, true);updateComponent = function () &#123;  vm._update(vm._render(), hydrating);&#125;;</code></pre><p>执行完<code>getter</code>方法后，最后一步会进行依赖的清除，也就是<code>cleanupDeps</code>的过程。</p><blockquote><p>关于依赖清除的作用，我们列举一个场景： 我们经常会使用<code>v-if</code>来进行模板的切换，切换过程中会执行不同的模板渲染，如果A模板监听a数据，B模板监听b数据，当渲染模板B时，如果不进行旧依赖的清除，在B模板的场景下，a数据的变化同样会引起依赖的重新渲染更新，这会造成性能的浪费。因此旧依赖的清除在优化阶段是有必要。</p></blockquote><pre><code class="js">// 依赖清除的过程  Watcher.prototype.cleanupDeps = function cleanupDeps () &#123;    var i = this.deps.length;    while (i--) &#123;      var dep = this.deps[i];      if (!this.newDepIds.has(dep.id)) &#123;        dep.removeSub(this);      &#125;    &#125;    var tmp = this.depIds;    this.depIds = this.newDepIds;    this.newDepIds = tmp;    this.newDepIds.clear();    tmp = this.deps;    this.deps = this.newDeps;    this.newDeps = tmp;    this.newDeps.length = 0;  &#125;;</code></pre><p>把上面分析的总结成依赖派发更新的最后两个点</p><ul><li><strong>执行<code>run</code>操作会执行<code>getter</code>方法,也就是重新计算新值，针对渲染<code>watcher</code>而言，会重新执行<code>updateComponent</code>进行视图更新</strong></li><li><strong>重新计算<code>getter</code>后，会进行依赖的清除</strong></li></ul><h2 id="7-10-computed"><a href="#7-10-computed" class="headerlink" title="7.10 computed"></a>7.10 computed</h2><p>计算属性设计的初衷是用于简单运算的，毕竟在模板中放入太多的逻辑会让模板过重且难以维护。在分析<code>computed</code>时，我们依旧遵循依赖收集和派发更新两个过程进行分析。</p><h3 id="7-10-1-依赖收集"><a href="#7-10-1-依赖收集" class="headerlink" title="7.10.1 依赖收集"></a>7.10.1 依赖收集</h3><p><code>computed</code>的初始化过程，**会遍历<code>computed</code>的每一个属性值，并为每一个属性实例化一个<code>computed watcher</code>**，其中<code>&#123; lazy: true&#125;</code>是<code>computed watcher</code>的标志，最终会调用<code>defineComputed</code>将数据设置为响应式数据，对应源码如下：</p><pre><code class="js">function initComputed() &#123;  ···  for(var key in computed) &#123;    watchers[key] = new Watcher(        vm,        getter || noop,        noop,        computedWatcherOptions      );  &#125;  if (!(key in vm)) &#123;    defineComputed(vm, key, userDef);  &#125;&#125;// computed watcher的标志，lazy属性为truevar computedWatcherOptions = &#123; lazy: true &#125;;</code></pre><p><code>defineComputed</code>的逻辑和分析<code>data</code>的逻辑相似，最终调用<code>Object.defineProperty</code>进行数据拦截。具体的定义如下：</p><pre><code class="js">function defineComputed (target,key,userDef) &#123;  // 非服务端渲染会对getter进行缓存  var shouldCache = !isServerRendering();  if (typeof userDef === &#39;function&#39;) &#123;    //     sharedPropertyDefinition.get = shouldCache      ? createComputedGetter(key)      : createGetterInvoker(userDef);    sharedPropertyDefinition.set = noop;  &#125; else &#123;    sharedPropertyDefinition.get = userDef.get      ? shouldCache &amp;&amp; userDef.cache !== false        ? createComputedGetter(key)        : createGetterInvoker(userDef.get)      : noop;    sharedPropertyDefinition.set = userDef.set || noop;  &#125;  if (sharedPropertyDefinition.set === noop) &#123;    sharedPropertyDefinition.set = function () &#123;      warn(        (&quot;Computed property \&quot;&quot; + key + &quot;\&quot; was assigned to but it has no setter.&quot;),        this      );    &#125;;  &#125;  Object.defineProperty(target, key, sharedPropertyDefinition);&#125;</code></pre><p>在非服务端渲染的情形，计算属性的计算结果会被缓存，缓存的意义在于，<strong>只有在相关响应式数据发生变化时，<code>computed</code>才会重新求值，其余情况多次访问计算属性的值都会返回之前计算的结果，这就是缓存的优化</strong>，<code>computed</code>属性有两种写法，一种是函数，另一种是对象，其中对象的写法需要提供<code>getter</code>和<code>setter</code>方法。</p><p>当访问到<code>computed</code>属性时，会触发<code>getter</code>方法进行依赖收集，看看<code>createComputedGetter</code>的实现。</p><pre><code class="js">function createComputedGetter (key) &#123;    return function computedGetter () &#123;      var watcher = this._computedWatchers &amp;&amp; this._computedWatchers[key];      if (watcher) &#123;        if (watcher.dirty) &#123;          watcher.evaluate();        &#125;        if (Dep.target) &#123;          watcher.depend();        &#125;        return watcher.value      &#125;    &#125;  &#125;</code></pre><p><code>createComputedGetter</code>返回的函数在执行过程中会先拿到属性的<code>computed watcher</code>,<code>dirty</code>是标志是否已经执行过计算结果，如果执行过则不会执行<code>watcher.evaluate</code>重复计算，这也是缓存的原理。</p><pre><code class="js">Watcher.prototype.evaluate = function evaluate () &#123;    // 对于计算属性而言 evaluate的作用是执行计算回调    this.value = this.get();    this.dirty = false;  &#125;;</code></pre><p><code>get</code>方法前面介绍过，会调用实例化<code>watcher</code>时传递的执行函数，在<code>computer watcher</code>的场景下，执行函数是计算属性的计算函数，他可以是一个函数，也可以是对象的<code>getter</code>方法。</p><blockquote><p>列举一个场景避免和<code>data</code>的处理脱节，<code>computed</code>在计算阶段，如果访问到<code>data</code>数据的属性值，会触发<code>data</code>数据的<code>getter</code>方法进行依赖收集，根据前面分析，<code>data</code>的<code>Dep</code>收集器会将当前<code>watcher</code>作为依赖进行收集，而这个<code>watcher</code>就是<code>computed watcher</code>，并且会为当前的<code>watcher</code>添加访问的数据<code>Dep</code></p></blockquote><p>回到计算执行函数的<code>this.get()</code>方法，<code>getter</code>执行完成后同样会进行依赖的清除，原理和目的参考<code>data</code>阶段的分析。<code>get</code>执行完毕后会进入<code>watcher.depend</code>进行依赖的收集。收集过程和<code>data</code>一致,将当前的<code>computed watcher</code>作为依赖收集到数据的依赖收集器<code>Dep</code>中。</p><p>这就是<code>computed</code>依赖收集的完整过程，对比<code>data</code>的依赖收集，<code>computed</code>会对运算的结果进行缓存，避免重复执行运算过程。</p><h3 id="7-10-2-派发更新"><a href="#7-10-2-派发更新" class="headerlink" title="7.10.2 派发更新"></a>7.10.2 派发更新</h3><p>派发更新的条件是<code>data</code>中数据发生改变，所以大部分的逻辑和分析<code>data</code>时一致，我们做一个总结。</p><ul><li>当计算属性依赖的数据发生更新时，由于数据的<code>Dep</code>收集过<code>computed watch</code>这个依赖，所以会调用<code>dep</code>的<code>notify</code>方法，对依赖进行状态更新。</li><li>此时<code>computed watcher</code>和之前介绍的<code>watcher</code>不同，它不会立刻执行依赖的更新操作，而是通过一个<code>dirty</code>进行标记。我们再回头看<code>依赖更新</code>的代码。</li></ul><pre><code class="js">Dep.prototype.notify = function() &#123;  ···   for (var i = 0, l = subs.length; i &lt; l; i++) &#123;      subs[i].update();    &#125;&#125;Watcher.prototype.update = function update () &#123;  // 计算属性分支    if (this.lazy) &#123;    this.dirty = true;  &#125; else if (this.sync) &#123;    this.run();  &#125; else &#123;    queueWatcher(this);  &#125;&#125;;</code></pre><p>由于<code>lazy</code>属性的存在，<code>update</code>过程不会执行状态更新的操作，只会将<code>dirty</code>标记为<code>true</code>。</p><ul><li>由于<code>data</code>数据拥有渲染<code>watcher</code>这个依赖，所以同时会执行<code>updateComponent</code>进行视图重新渲染,而<code>render</code>过程中会访问到计算属性,此时由于<code>this.dirty</code>值为<code>true</code>,又会对计算属性重新求值。</li></ul><h2 id="7-11-小结"><a href="#7-11-小结" class="headerlink" title="7.11 小结"></a>7.11 小结</h2><p>我们在上一节的理论基础上深入分析了<code>Vue</code>如何利用<code>data,computed</code>构建响应式系统。响应式系统的核心是利用<code>Object.defineProperty</code>对数据的<code>getter,setter</code>进行拦截处理，处理的核心是在访问数据时对数据所在场景的依赖进行收集，在数据发生更改时，通知收集过的依赖进行更新。这一节我们详细的介绍了<code>data,computed</code>对响应式的处理，两者处理逻辑存在很大的相似性但却各有的特性。源码中会<code>computed</code>的计算结果进行缓存，避免了在多个地方使用时频繁重复计算的问题。由于篇幅有限，对于用户自定义的<code>watcher</code>我们会放到下一小节分析。文章还留有一个疑惑，依赖收集时如果遇到的数据是数组时应该怎么处理，这些疑惑都会在之后的文章一一解开。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Vue </category>
          
          <category> vue2.x源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中的深浅拷贝</title>
      <link href="/js-base/js%E4%B8%AD%E7%9A%84%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <url>/js-base/js%E4%B8%AD%E7%9A%84%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<p>1：深浅拷贝的区别</p><p>首先要知道一点的就是，JavaScript的数据类型的分为基本数据类型和引用类型，</p><p>对于基本数据类型的拷贝，并没有深浅拷贝的区别，我们所说的深浅拷贝都是对于<strong>引用数据类型</strong>而言的</p><p><strong>浅拷贝的概念</strong></p><p>浅拷贝的意思就是只复制引用，而未复制真正的值。</p><pre><code class="javascript">       // 定义一个数组       let arr = [1,2,3,4,5]       // 定义一个对象       let obj = &#123;a:&#39;a&#39;,b:&#39;b&#39;,c:[1,2,3,4,5],d:&#123;dd:&#39;dd&#39;&#125;&#125;           //赋值这个数组给另一个变量       let clonearr = arr       //赋值这个数组给另一个对象       let cloneobj = obj         // 打印一下拷贝的数据，嗯，是个原本来的一样的       console.log(clonearr) // [1,2,3,4,5]       console.log(cloneobj) // &#123;a:&#39;a&#39;,b:&#39;b&#39;,c:Array[3],d:&#123;dd:&#39;dd&#39;&#125;&#125;            // 这个时候操作来了，我们给这个克隆的数组添加数据 克隆的对象也修改数据        clonearr.push(6)        cloneobj.a = &#123;aa:&#39;aa&#39;&#125;        //打印2个数组   发现arr是和修改过的clonearr是一样的        console.log(arr)  // [1,2,3,4,5,6]        console.log(clonearr) // [1,2,3,4,5,6]        //打印2个对象   发现obj是和修改过的cloneobj是一样的        console.log(obj); // &#123;a:&#123;aa:&#39;aa&#39;&#125;,b:&#39;b&#39;,c:Array[3],d:&#123;dd:&#39;dd&#39;&#125;&#125;        console.log(cloneobj); // &#123;a:&#123;aa:&#39;aa&#39;&#125;,b:&#39;b&#39;,c:Array[3],d:&#123;dd:&#39;dd&#39;&#125;&#125; </code></pre><h6 id="1：深拷贝有哪些方式？"><a href="#1：深拷贝有哪些方式？" class="headerlink" title="1：深拷贝有哪些方式？"></a>1：深拷贝有哪些方式？</h6><pre><code class="javascript">深拷贝就是对目标的完全拷贝，不像浅拷贝那样只是复制了一层引用，就连值也都复制了。只要进行了深拷贝，它们老死不相往来，谁也不会影响谁。目前实现深拷贝的方法不多，主要是两种：1. 利用 `JSON` 对象中的 `parse` 和 `stringify`2. 利用递归来实现每一层都重新创建对象并赋值`JSON.stringify` 是将一个 `JavaScript` 值转成一个 `JSON` 字符串。`JSON.parse` 是将一个 `JSON` 字符串转成一个 `JavaScript` 值或对象。</code></pre><p><strong>使用JSON.stringify(obj)的缺点</strong></p><pre><code class="javascript">   确实是深拷贝，也很方便。但是，这个方法只能适用于一些简单的情况。比如下面这样的一个对象就不适用：   const obj = &#123;          name:&#39;gsq&#39;,          hello:function()&#123;              console.log(&#39;gsq&#39;);          &#125;      &#125;      const cloneobj = JSON.parse(JSON.stringify(obj))      console.log(obj) // &#123;name: &quot;gsq&quot;, hello: ƒ&#125;      console.log(cloneobj) //  &#123;name: &quot;gsq&quot;&#125;</code></pre><p><strong>注意</strong>：使用 JSON.parse(JSON.stringify(obj)) 进行深拷贝 对   <code>undefined</code>、<code>function</code>、<code>symbol</code> 会在转换过程中被忽略。。。</p><p><strong>递归的方法</strong></p><p>递归的思想就很简单了，就是对每一层的数据都实现一次 <code>创建对象-&gt;对象赋值</code> 的操作，简单粗暴上代码：</p><p><strong>这种方式就不存在<code>undefined</code>、<code>function</code>、<code>symbol</code> 被忽略了</strong></p><pre><code class="javascript">function deepClone(source)&#123;  const targetObj = source.constructor === Array ? [] : &#123;&#125;; // 判断复制的目标是数组还是对象  for(let keys in source)&#123; // 遍历目标    if(source.hasOwnProperty(keys))&#123;      if(source[keys] &amp;&amp; typeof source[keys] === &#39;object&#39;)&#123; // 如果值是对象，就递归一下        targetObj[keys] = source[keys].constructor === Array ? [] : &#123;&#125;;        targetObj[keys] = deepClone(source[keys]);      &#125;else&#123; // 如果不是，就直接赋值        targetObj[keys] = source[keys];      &#125;    &#125;   &#125;  return targetObj;&#125;</code></pre><h6 id="2：浅拷贝有哪些方式"><a href="#2：浅拷贝有哪些方式" class="headerlink" title="2：浅拷贝有哪些方式"></a>2：浅拷贝有哪些方式</h6><p>1：concat</p><pre><code class="javascript">        const arr = [1,2,3,4,5];        const clonearr = arr.concat();console.log(arr === clonearr)  // false</code></pre><p>2：slice</p><pre><code class="javascript">    let arr1 = [1,2,3,4]    let arr2 = arr1.slice()console.log(arr1 === arr2) //false</code></pre><p>3：es6之  <code>Object.assign()</code></p><pre><code class="javascript">    let obj = &#123;&#39;a&#39; : 1, &#39;b&#39; : 2&#125;    let cloneobj = Object.assign(&#123;&#125;,obj)console.log(obj === cloneobj) //false    </code></pre><p>4：es6扩展运算符 …</p><pre><code class="javascript">        let arr = [1,2,3,4]        let clonearr = [...arr]console.log(arr === clonearr) //false</code></pre><p>5：es6 from方法</p><pre><code class="javascript">        const a1 = [1, 2, 3, 4];        const a2 = Array.from(a1); console.log(a1 === a2) //false</code></pre><p>6：使用map方法</p><pre><code class="javascript">        const arr = [1,2,3,4]        let clonearr = arr.map(item =&gt; item)console.log(arr === clonearr)</code></pre><p>7：自定义函数浅拷贝</p><pre><code class="javascript">function shallowClone(source) &#123;  const targetObj = source.constructor === Array ? [] : &#123;&#125;; // 判断复制的目标是数组还是对象  for (let keys in source) &#123; // 遍历目标    if (source.hasOwnProperty(keys)) &#123;      targetObj[keys] = source[keys];    &#125;  &#125;  return targetObj;&#125;</code></pre><p><strong>总结</strong>：</p><ol><li>赋值运算符 <code>=</code> 实现的是浅拷贝，只拷贝对象的引用值；</li><li>JavaScript 中数组和对象自带的拷贝方法都是“首层深拷贝”；</li><li><code>JSON.stringify</code> 实现的是深拷贝，但是对目标对象有要求，转化的值不能是<code>function</code>，<code>undefined</code>，<code>symbol</code> ；</li><li>若想真正意义上的深拷贝，请递归。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Step.7 深入响应式系统构建-上</title>
      <link href="/computer-science/vueyuanma/dosc/7%E6%B7%B1%E5%85%A5%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%9E%84%E5%BB%BA-%E4%B8%8A/"/>
      <url>/computer-science/vueyuanma/dosc/7%E6%B7%B1%E5%85%A5%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%9E%84%E5%BB%BA-%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<blockquote><p>从这一小节开始，正式进入<code>Vue</code>源码的核心，也是难点之一，响应式系统的构建。这一节将作为分析响应式构建过程源码的入门，主要分为两大块,第一块是针对响应式数据<code>props,methods,data,computed,wather</code>初始化过程的分析，另一块则是在保留源码设计理念的前提下，尝试手动构建一个基础的响应式系统。有了这两个基础内容的铺垫，下一篇进行源码具体细节的分析会更加得心应手。</p></blockquote><h2 id="7-1-数据初始化"><a href="#7-1-数据初始化" class="headerlink" title="7.1 数据初始化"></a>7.1 数据初始化</h2><p>回顾一下之前的内容，我们对<code>Vue</code>源码的分析是从初始化开始，初始化<code>_init</code>会执行一系列的过程，这个过程包括了配置选项的合并，数据的监测代理，最后才是实例的挂载。而在实例挂载前还有意忽略了一个重要的过程，<strong>数据的初始化</strong>(即<code>initState(vm)</code>)。<code>initState</code>的过程，是对数据进行响应式设计的过程，过程会针对<code>props,methods,data,computed</code>和<code>watch</code>做数据的初始化处理，并将他们转换为响应式对象，接下来我们会逐步分析每一个过程。</p><pre><code class="js">function initState (vm) &#123;  vm._watchers = [];  var opts = vm.$options;  // 初始化props  if (opts.props) &#123; initProps(vm, opts.props); &#125;  // 初始化methods  if (opts.methods) &#123; initMethods(vm, opts.methods); &#125;  // 初始化data  if (opts.data) &#123;    initData(vm);  &#125; else &#123;    // 如果没有定义data，则创建一个空对象，并设置为响应式    observe(vm._data = &#123;&#125;, true /* asRootData */);  &#125;  // 初始化computed  if (opts.computed) &#123; initComputed(vm, opts.computed); &#125;  // 初始化watch  if (opts.watch &amp;&amp; opts.watch !== nativeWatch) &#123;    initWatch(vm, opts.watch);  &#125;&#125;</code></pre><h2 id="7-2-initProps"><a href="#7-2-initProps" class="headerlink" title="7.2 initProps"></a>7.2 initProps</h2><p>简单回顾一下<code>props</code>的用法，父组件通过属性的形式将数据传递给子组件，子组件通过<code>props</code>属性接收父组件传递的值。</p><pre><code class="js">// 父组件&lt;child :test=&quot;test&quot;&gt;&lt;/child&gt;var vm = new Vue(&#123;  el: &#39;#app&#39;,  data() &#123;    return &#123;      test: &#39;child&#39;    &#125;  &#125;&#125;)// 子组件Vue.component(&#39;child&#39;, &#123;  template: &#39;&lt;div&gt;&#123;&#123;test&#125;&#125;&lt;/div&gt;&#39;,  props: [&#39;test&#39;]&#125;)</code></pre><p>因此分析<code>props</code>需要分析父组件和子组件的两个过程，我们先看父组件对传递值的处理。按照以往文章介绍的那样，父组件优先进行模板编译得到一个<code>render</code>函数，在解析过程中遇到子组件的属性，<code>:test=test</code>会被解析成<code>&#123; attrs: &#123;test： test&#125;&#125;</code>并作为子组件的<code>render</code>函数存在，如下所示:</p><pre><code class="js">with()&#123;..._c(&#39;child&#39;,&#123;attrs:&#123;&quot;test&quot;:test&#125;&#125;)&#125;</code></pre><p><code>render</code>解析<code>Vnode</code>的过程遇到<code>child</code>这个子占位符节点，因此会进入创建子组件<code>Vnode</code>的过程，创建子<code>Vnode</code>过程是调用<code>createComponent</code>,这个阶段我们在组件章节有分析过，在组件的高级用法也有分析过，最终会调用<code>new Vnode</code>去创建子<code>Vnode</code>。而对于<code>props</code>的处理，<code>extractPropsFromVNodeData</code>会对<code>attrs</code>属性进行规范校验后，最后会把校验后的结果以<code>propsData</code>属性的形式传入<code>Vnode</code>构造器中。总结来说，<code>props</code>传递给占位符组件的写法，会以<code>propsData</code>的形式作为子组件<code>Vnode</code>的属性存在。下面会分析具体的细节。</p><pre><code class="js">// 创建子组件过程function createComponent() &#123;  // props校验  var propsData = extractPropsFromVNodeData(data, Ctor, tag);  ···  // 创建子组件vnode  var vnode = new VNode(    (&quot;vue-component-&quot; + (Ctor.cid) + (name ? (&quot;-&quot; + name) : &#39;&#39;)),    data, undefined, undefined, undefined, context,    &#123; Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children &#125;,    asyncFactory  );&#125;</code></pre><h3 id="7-2-1-props的命名规范"><a href="#7-2-1-props的命名规范" class="headerlink" title="7.2.1 props的命名规范"></a>7.2.1 props的命名规范</h3><p>先看检测<code>props</code>规范性的过程。**<code>props</code>编译后的结果有两种，其中<code>attrs</code>前面分析过，是编译生成<code>render</code>函数针对属性的处理，而<code>props</code>是针对用户自写<code>render</code>函数的属性值。**因此需要同时对这两种方式进行校验。</p><pre><code class="js">function extractPropsFromVNodeData (data,Ctor,tag) &#123;  // Ctor为子类构造器  ···  var res = &#123;&#125;;  // 子组件props选项  var propOptions = Ctor.options.props;  // data.attrs针对编译生成的render函数，data.props针对用户自定义的render函数  var attrs = data.attrs;  var props = data.props;  if (isDef(attrs) || isDef(props)) &#123;    for (var key in propOptions) &#123;      // aB 形式转成 a-b      var altKey = hyphenate(key);      &#123;          var keyInLowerCase = key.toLowerCase();          if (            key !== keyInLowerCase &amp;&amp;            attrs &amp;&amp; hasOwn(attrs, keyInLowerCase)          ) &#123;            // 警告          &#125;        &#125;    &#125;  &#125;&#125;</code></pre><p>重点说一下源码在这一部分的处理，<strong>HTML对大小写是不敏感的，所有的浏览器会把大写字符解释为小写字符，因此我们在使用<code>DOM</code>中的模板时，cameCase(驼峰命名法)的<code>props</code>名需要使用其等价的 <code>kebab-case</code> (短横线分隔命名) 命代替</strong>。<br><strong>即： <code>&lt;child :aB=&quot;test&quot;&gt;&lt;/child&gt;</code>需要写成<code>&lt;child :a-b=&quot;test&quot;&gt;&lt;/child&gt;</code></strong></p><h3 id="7-2-2-响应式数据props"><a href="#7-2-2-响应式数据props" class="headerlink" title="7.2.2 响应式数据props"></a>7.2.2 响应式数据props</h3><p>刚才说到分析<code>props</code>需要两个过程，前面已经针对父组件对<code>props</code>的处理做了描述，而对于子组件而言，我们是通过<code>props</code>选项去接收父组件传递的值。我们再看看子组件对<code>props</code>的处理：</p><p>子组件处理<code>props</code>的过程，是发生在父组件<code>_update</code>阶段，这个阶段是<code>Vnode</code>生成真实节点的过程，期间会遇到子<code>Vnode</code>,这时会调用<code>createComponent</code>去实例化子组件。而实例化子组件的过程又回到了<code>_init</code>初始化，此时又会经历选项的合并，针对<code>props</code>选项，最终会统一成<code>&#123;props: &#123; test: &#123; type: null &#125;&#125;&#125;</code>的写法。接着会调用<code>initProps</code>, <code>initProps</code>做的事情，简单概括一句话就是，将组件的<code>props</code>数据设置为响应式数据。</p><pre><code class="js">function initProps (vm, propsOptions) &#123;  var propsData = vm.$options.propsData || &#123;&#125;;  var loop = function(key) &#123;    ···    defineReactive(props,key,value,cb)；    if (!(key in vm)) &#123;      proxy(vm, &quot;_props&quot;, key);    &#125;  &#125;  // 遍历props，执行loop设置为响应式数据。  for (var key in propsOptions) loop( key );&#125;</code></pre><p>其中<code>proxy(vm, &quot;_props&quot;, key);</code>为<code>props</code>做了一层代理，用户通过<code>vm.XXX</code>可以代理访问到<code>vm._props</code>上的值。针对<code>defineReactive</code>,本质上是利用<code>Object.defineProperty</code>对数据的<code>getter,setter</code>方法进行重写，具体的原理可以参考数据代理章节的内容，在这小节后半段也会有一个基本的实现。</p><h2 id="7-3-initMethods"><a href="#7-3-initMethods" class="headerlink" title="7.3 initMethods"></a>7.3 initMethods</h2><p><code>initMethod</code>方法和这一节介绍的响应式没有任何的关系，他的实现也相对简单，主要是保证<code>methods</code>方法定义必须是函数，且命名不能和<code>props</code>重复，最终会将定义的方法都挂载到根实例上。</p><pre><code class="js">function initMethods (vm, methods) &#123;    var props = vm.$options.props;    for (var key in methods) &#123;      &#123;        // method必须为函数形式        if (typeof methods[key] !== &#39;function&#39;) &#123;          warn(            &quot;Method \&quot;&quot; + key + &quot;\&quot; has type \&quot;&quot; + (typeof methods[key]) + &quot;\&quot; in the component definition. &quot; +            &quot;Did you reference the function correctly?&quot;,            vm          );        &#125;        // methods方法名不能和props重复        if (props &amp;&amp; hasOwn(props, key)) &#123;          warn(            (&quot;Method \&quot;&quot; + key + &quot;\&quot; has already been defined as a prop.&quot;),            vm          );        &#125;        //  不能以_ or $.这些Vue保留标志开头        if ((key in vm) &amp;&amp; isReserved(key)) &#123;          warn(            &quot;Method \&quot;&quot; + key + &quot;\&quot; conflicts with an existing Vue instance method. &quot; +            &quot;Avoid defining component methods that start with _ or $.&quot;          );        &#125;      &#125;      // 直接挂载到实例的属性上,可以通过vm[method]访问。      vm[key] = typeof methods[key] !== &#39;function&#39; ? noop : bind(methods[key], vm);    &#125;  &#125;</code></pre><h2 id="7-4-initData"><a href="#7-4-initData" class="headerlink" title="7.4 initData"></a>7.4 initData</h2><p><code>data</code>在初始化选项合并时会生成一个函数，只有在执行函数时才会返回真正的数据，所以<code>initData</code>方法会先执行拿到组件的<code>data</code>数据，并且会对对象每个属性的命名进行校验，保证不能和<code>props，methods</code>重复。最后的核心方法是<code>observe</code>,<code>observe</code>方法是将<strong>数据对象标记为响应式对象</strong>，并对对象的每个属性进行响应式处理。与此同时，和<code>props</code>的代理处理方式一样，<code>proxy</code>会对<code>data</code>做一层代理，直接通过<code>vm.XXX</code>可以代理访问到<code>vm._data</code>上挂载的对象属性。</p><pre><code class="js">function initData(vm) &#123;  var data = vm.$options.data;  // 根实例时，data是一个对象，子组件的data是一个函数，其中getData会调用函数返回data对象  data = vm._data = typeof data === &#39;function&#39;? getData(data, vm): data || &#123;&#125;;  var keys = Object.keys(data);  var props = vm.$options.props;  var methods = vm.$options.methods;  var i = keys.length;  while (i--) &#123;    var key = keys[i];    &#123;      // 命名不能和方法重复      if (methods &amp;&amp; hasOwn(methods, key)) &#123;        warn((&quot;Method \&quot;&quot; + key + &quot;\&quot; has already been defined as a data property.&quot;),vm);      &#125;    &#125;    // 命名不能和props重复    if (props &amp;&amp; hasOwn(props, key)) &#123;      warn(&quot;The data property \&quot;&quot; + key + &quot;\&quot; is already declared as a prop. &quot; + &quot;Use prop default value instead.&quot;,vm);    &#125; else if (!isReserved(key)) &#123;      // 数据代理，用户可直接通过vm实例返回data数据      proxy(vm, &quot;_data&quot;, key);    &#125;  &#125;  // observe data  observe(data, true /* asRootData */);&#125;</code></pre><p><strong>最后讲讲<code>observe</code>,<code>observe</code>具体的行为是将数据对象添加一个不可枚举的属性<code>__ob__</code>，标志对象是一个响应式对象，并且拿到每个对象的属性值，重写<code>getter,setter</code>方法，使得每个属性值都是响应式数据。详细的代码我们后面分析。</strong></p><h2 id="7-5-initComputed"><a href="#7-5-initComputed" class="headerlink" title="7.5 initComputed"></a>7.5 initComputed</h2><p>和上面的分析方法一样，<code>initComputed</code>是<code>computed</code>数据的初始化,不同之处在于以下几点：</p><ol><li><code>computed</code>可以是对象，也可以是函数，但是对象必须有<code>getter</code>方法,因此如果<code>computed</code>中的属性值是对象时需要进行验证。</li><li>针对<code>computed</code>的每个属性，要创建一个监听的依赖，也就是实例化一个<code>watcher</code>,<code>watcher</code>的定义，可以暂时理解为数据使用的依赖本身，一个<code>watcher</code>实例代表多了一个需要被监听的数据依赖。</li></ol><p>除了不同点，<code>initComputed</code>也会将每个属性设置成响应式的数据，同样的，也会对<code>computed</code>的命名做检测，防止与<code>props,data</code>冲突。</p><pre><code class="js">function initComputed (vm, computed) &#123;  ···  for (var key in computed) &#123;      var userDef = computed[key];      var getter = typeof userDef === &#39;function&#39; ? userDef : userDef.get;      // computed属性为对象时，要保证有getter方法      if (getter == null) &#123;        warn((&quot;Getter is missing for computed property \&quot;&quot; + key + &quot;\&quot;.&quot;),vm);      &#125;      if (!isSSR) &#123;        // 创建computed watcher        watchers[key] = new Watcher(vm,getter || noop,noop,computedWatcherOptions);      &#125;      if (!(key in vm)) &#123;        // 设置为响应式数据        defineComputed(vm, key, userDef);      &#125; else &#123;        // 不能和props，data命名冲突        if (key in vm.$data) &#123;          warn((&quot;The computed property \&quot;&quot; + key + &quot;\&quot; is already defined in data.&quot;), vm);        &#125; else if (vm.$options.props &amp;&amp; key in vm.$options.props) &#123;          warn((&quot;The computed property \&quot;&quot; + key + &quot;\&quot; is already defined as a prop.&quot;), vm);        &#125;      &#125;    &#125;&#125;</code></pre><p>显然<code>Vue</code>提供了很多种数据供开发者使用，但是分析完后发现每个处理的核心都是将数据转化成响应式数据，有了响应式数据，如何构建一个响应式系统呢？前面提到的<code>watcher</code>又是什么东西？构建响应式系统还需要其他的东西吗？接下来我们尝试着去实现一个极简风的响应式系统。</p><h2 id="7-6-极简风的响应式系统"><a href="#7-6-极简风的响应式系统" class="headerlink" title="7.6 极简风的响应式系统"></a>7.6 极简风的响应式系统</h2><p><code>Vue</code>的响应式系统构建是比较复杂的，直接进入源码分析构建的每一个流程会让理解变得困难，因此我觉得在尽可能保留源码的设计逻辑下,用最小的代码构建一个最基础的响应式系统是有必要的。对<code>Dep,Watcher,Observer</code>概念的初步认识，也有助于下一篇对响应式系统设计细节的分析。</p><h3 id="7-6-1-框架搭建"><a href="#7-6-1-框架搭建" class="headerlink" title="7.6.1 框架搭建"></a>7.6.1 框架搭建</h3><p>我们以<code>MyVue</code>作为类响应式框架，框架的搭建不做赘述。我们模拟<code>Vue</code>源码的实现思路，实例化<code>MyVue</code>时会传递一个选项配置，精简的代码只有一个<code>id</code>挂载元素和一个数据对象<code>data</code>。模拟源码的思路，我们在实例化时会先进行数据的初始化，这一步就是响应式的构建，我们稍后分析。数据初始化后开始进行真实<code>DOM</code>的挂载。</p><pre><code class="js">var vm = new MyVue(&#123;  id: &#39;#app&#39;,  data: &#123;    test: 12  &#125;&#125;)// myVue.js(function(global) &#123;  class MyVue &#123;      constructor(options) &#123;        this.options = options;        // 数据的初始化        this.initData(options);        let el = this.options.id;        // 实例的挂载        this.$mount(el);      &#125;      initData(options) &#123;      &#125;      $mount(el) &#123;      &#125;    &#125;&#125;(window))</code></pre><h3 id="7-6-2-设置响应式对象-Observer"><a href="#7-6-2-设置响应式对象-Observer" class="headerlink" title="7.6.2 设置响应式对象 - Observer"></a>7.6.2 设置响应式对象 - Observer</h3><p>首先引入一个类<code>Observer</code>,这个类的目的是将数据变成响应式对象，利用<code>Object.defineProperty</code>对数据的<code>getter,setter</code>方法进行改写。在数据读取<code>getter</code>阶段我们会进行<strong>依赖的收集</strong>，在数据的修改<code>setter</code>阶段，我们会进行<strong>依赖的更新</strong>(这两个概念的介绍放在后面)。因此在数据初始化阶段，我们会利用<code>Observer</code>这个类将数据对象修改为相应式对象，而这是所有流程的基础。</p><pre><code class="js">class MyVue &#123;  initData(options) &#123;    if(!options.data) return;    this.data = options.data;    // 将数据重置getter，setter方法    new Observer(options.data);  &#125;&#125;// Observer类的定义class Observer &#123;  constructor(data) &#123;    // 实例化时执行walk方法对每个数据属性重写getter，setter方法    this.walk(data)  &#125;  walk(obj) &#123;    const keys = Object.keys(obj);    for(let i = 0;i&lt; keys.length; i++) &#123;      // Object.defineProperty的处理逻辑      defineReactive(obj, keys[i])    &#125;  &#125;&#125;</code></pre><h3 id="7-6-3-依赖本身-Watcher"><a href="#7-6-3-依赖本身-Watcher" class="headerlink" title="7.6.3 依赖本身 - Watcher"></a>7.6.3 依赖本身 - Watcher</h3><p>我们可以这样理解，一个<code>Watcher</code>实例就是一个依赖，数据不管是在渲染模板时使用还是在用户计算时使用，都可以算做一个需要监听的依赖，<code>watcher</code>中记录着这个依赖监听的状态，以及如何更新操作的方法。</p><pre><code class="js">// 监听的依赖class Watcher &#123;  constructor(expOrFn, isRenderWatcher) &#123;    this.getter = expOrFn;    // Watcher.prototype.get的调用会进行状态的更新。    this.get();  &#125;  get() &#123;&#125;&#125;</code></pre><p>那么哪个时间点会实例化<code>watcher</code>并更新数据状态呢？显然在渲染数据到真实<code>DOM</code>时可以创建<code>watcher</code>。<code>$mount</code>流程前面章节介绍过，会经历模板生成<code>render</code>函数和<code>render</code>函数渲染真实<code>DOM</code>的过程。我们对代码做了精简，<code>updateView</code>浓缩了这一过程。</p><pre><code class="js">class MyVue &#123;  $mount(el) &#123;    // 直接改写innerHTML    const updateView = _ =&gt; &#123;      let innerHtml = document.querySelector(el).innerHTML;      let key = innerHtml.match(/&#123;(\w+)&#125;/)[1];      document.querySelector(el).innerHTML = this.options.data[key]    &#125;    // 创建一个渲染的依赖。    new Watcher(updateView, true)  &#125;&#125;</code></pre><h3 id="7-6-4-依赖管理-Dep"><a href="#7-6-4-依赖管理-Dep" class="headerlink" title="7.6.4 依赖管理 - Dep"></a>7.6.4 依赖管理 - Dep</h3><p><code>watcher</code>如果理解为每个数据需要监听的依赖，那么<code>Dep</code> 可以理解为对依赖的一种管理。数据可以在渲染中使用，也可以在计算属性中使用。相应的每个数据对应的<code>watcher</code>也有很多。而我们在更新数据时，如何通知到数据相关的每一个依赖，这就需要<code>Dep</code>进行通知管理了。并且浏览器同一时间只能更新一个<code>watcher</code>,所以也需要一个属性去记录当前更新的<code>watcher</code>。而<code>Dep</code>这个类只需要做两件事情，将依赖进行收集，派发依赖进行更新。</p><pre><code class="js">let uid = 0;class Dep &#123;  constructor() &#123;    this.id = uid++;    this.subs = []  &#125;  // 依赖收集  depend() &#123;    if(Dep.target) &#123;      // Dep.target是当前的watcher,将当前的依赖推到subs中      this.subs.push(Dep.target)    &#125;  &#125;  // 派发更新  notify() &#123;    const subs = this.subs.slice();    for (var i = 0, l = subs.length; i &lt; l; i++) &#123;       // 遍历dep中的依赖，对每个依赖执行更新操作      subs[i].update();    &#125;  &#125;&#125;Dep.target = null;</code></pre><h3 id="7-6-5-依赖管理过程-defineReactive"><a href="#7-6-5-依赖管理过程-defineReactive" class="headerlink" title="7.6.5 依赖管理过程 - defineReactive"></a>7.6.5 依赖管理过程 - defineReactive</h3><p>我们看看数据拦截的过程。前面的<code>Observer</code>实例化最终会调用<code>defineReactive</code>重写<code>getter,setter</code>方法。这个方法开始会实例化一个<code>Dep</code>,也就是创建一个数据的依赖管理。在重写的<code>getter</code>方法中会进行依赖的收集，也就是调用<code>dep.depend</code>的方法。在<code>setter</code>阶段，比较两个数不同后，会调用依赖的派发更新。即<code>dep.notify</code></p><pre><code class="js">const defineReactive = (obj, key) =&gt; &#123;  const dep = new Dep();  const property = Object.getOwnPropertyDescriptor(obj);  let val = obj[key]  if(property &amp;&amp; property.configurable === false) return;  Object.defineProperty(obj, key, &#123;    configurable: true,    enumerable: true,    get() &#123;      // 做依赖的收集      if(Dep.target) &#123;        dep.depend()      &#125;      return val    &#125;,    set(nval) &#123;      if(nval === val) return      // 派发更新      val = nval      dep.notify();    &#125;  &#125;)&#125;</code></pre><p>回过头来看<code>watcher</code>,实例化<code>watcher</code>时会将<code>Dep.target</code>设置为当前的<code>watcher</code>,执行完状态更新函数之后，再将<code>Dep.target</code>置空。这样在收集依赖时只要将<code>Dep.target</code>当前的<code>watcher push</code>到<code>Dep</code>的<code>subs</code>数组即可。而在派发更新阶段也只需要重新更新状态即可。</p><pre><code class="js">class Watcher &#123;  constructor(expOrFn, isRenderWatcher) &#123;    this.getter = expOrFn;    // Watcher.prototype.get的调用会进行状态的更新。    this.get();  &#125;  get() &#123;    // 当前执行的watcher    Dep.target = this    this.getter()    Dep.target = null;  &#125;  update() &#123;    this.get()  &#125;&#125;</code></pre><h3 id="7-6-6-结果"><a href="#7-6-6-结果" class="headerlink" title="7.6.6 结果"></a>7.6.6 结果</h3><p>一个极简的响应式系统搭建完成。在精简代码的同时，保持了源码设计的思想和逻辑。有了这一步的基础，接下来深入分析源码中每个环节的实现细节会更加简单。</p><h2 id="7-7-小结"><a href="#7-7-小结" class="headerlink" title="7.7 小结"></a>7.7 小结</h2><p>这一节内容，我们正式进入响应式系统的介绍，前面在数据代理章节，我们学过<code>Object.defineProperty</code>,这是一个用来进行数据拦截的方法，而响应式系统构建的基础就是数据的拦截。我们先介绍了<code>Vue</code>内部在初始化数据的过程，最终得出的结论是，不管是<code>data,computed</code>,还是其他的用户定义数据，最终都是调用<code>Object.defineProperty</code>进行数据拦截。而文章的最后，我们在保留源码设计思想和逻辑的前提下，构建出了一个简化版的响应式系统。完整的功能有助于我们下一节对源码具体实现细节的分析和思考。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Vue </category>
          
          <category> vue2.x源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Step.6 组件高级用法</title>
      <link href="/computer-science/vueyuanma/dosc/6%E7%BB%84%E4%BB%B6%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/"/>
      <url>/computer-science/vueyuanma/dosc/6%E7%BB%84%E4%BB%B6%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我们知道，组件是<code>Vue</code>体系的核心，熟练使用组件是掌握<code>Vue</code>进行开发的基础。上一节中，我们深入了解了<code>Vue</code>组件注册到使用渲染的完整流程。这一节我们会在上一节的基础上介绍组件的两个高级用法：异步组件和函数式组件。</p></blockquote><h2 id="6-1-异步组件"><a href="#6-1-异步组件" class="headerlink" title="6.1 异步组件"></a>6.1 异步组件</h2><h3 id="6-1-1-使用场景"><a href="#6-1-1-使用场景" class="headerlink" title="6.1.1 使用场景"></a>6.1.1 使用场景</h3><p><code>Vue</code>作为单页面应用遇到最棘手的问题是首屏加载时间的问题，单页面应用会把页面脚本打包成一个文件，这个文件包含着所有业务和非业务的代码，而脚本文件过大也是造成首页渲染速度缓慢的原因。因此作为首屏性能优化的课题，最常用的处理方法是对文件的拆分和代码的分离。按需加载的概念也是在这个前提下引入的。我们往往会把一些非首屏的组件设计成异步组件，部分不影响初次视觉体验的组件也可以设计为异步组件。这个思想就是<strong>按需加载</strong>。通俗点理解，按需加载的思想让应用在需要使用某个组件时才去请求加载组件代码。我们借助<code>webpack</code>打包后的结果会更加直观。</p><p><img data-src="/images/img/6.1.png"></p><p><img data-src="/images/img/6.2.png"><br><code>webpack</code>遇到异步组件，会将其从主脚本中分离，减少脚本体积，加快首屏加载时间。当遇到场景需要使用该组件时，才会去加载组件脚本。</p><h3 id="6-1-2-工厂函数"><a href="#6-1-2-工厂函数" class="headerlink" title="6.1.2 工厂函数"></a>6.1.2 工厂函数</h3><p><code>Vue</code>中允许用户通过工厂函数的形式定义组件，这个工厂函数会异步解析组件定义，组件需要渲染的时候才会触发该工厂函数，加载结果会进行缓存，以供下一次调用组件时使用。<br>具体使用：</p><pre><code class="js">// 全局注册：Vue.component(&#39;asyncComponent&#39;, function(resolve, reject) &#123;  require([&#39;./test.vue&#39;], resolve)&#125;)// 局部注册：var vm = new Vue(&#123;  el: &#39;#app&#39;,  template: &#39;&lt;div id=&quot;app&quot;&gt;&lt;asyncComponent&gt;&lt;/asyncComponent&gt;&lt;/div&gt;&#39;,  components: &#123;    asyncComponent: (resolve, reject) =&gt; require([&#39;./test.vue&#39;], resolve),    // 另外写法    asyncComponent: () =&gt; import(&#39;./test.vue&#39;),  &#125;&#125;)</code></pre><h3 id="6-1-3-流程分析"><a href="#6-1-3-流程分析" class="headerlink" title="6.1.3 流程分析"></a>6.1.3 流程分析</h3><p>有了上一节组件注册的基础，我们来分析异步组件的实现逻辑。简单回忆一下上一节的流程，实例的挂载流程分为根据渲染函数创建<code>Vnode</code>和根据<code>Vnode</code>产生真实节点的过程。期间创建<code>Vnode</code>过程，如果遇到子的占位符节点会调用<code>creatComponent</code>,这里会为子组件做选项合并和钩子挂载的操作，并创建一个以<code>vue-component-</code>为标记的子<code>Vnode</code>,而异步组件的处理逻辑也是在这个阶段处理。</p><pre><code class="js">// 创建子组件过程  function createComponent (    Ctor, // 子类构造器    data,    context, // vm实例    children, // 子节点    tag // 子组件占位符  ) &#123;    ···    // 针对局部注册组件创建子类构造器    if (isObject(Ctor)) &#123;      Ctor = baseCtor.extend(Ctor);    &#125;    // 异步组件分支    var asyncFactory;    if (isUndef(Ctor.cid)) &#123;      // 异步工厂函数      asyncFactory = Ctor;      // 创建异步组件函数      Ctor = resolveAsyncComponent(asyncFactory, baseCtor);      if (Ctor === undefined) &#123;        return createAsyncPlaceholder(          asyncFactory,          data,          context,          children,          tag        )      &#125;    &#125;    ···    // 创建子组件vnode    var vnode = new VNode(      (&quot;vue-component-&quot; + (Ctor.cid) + (name ? (&quot;-&quot; + name) : &#39;&#39;)),      data, undefined, undefined, undefined, context,      &#123; Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children &#125;,      asyncFactory    );    return vnode  &#125;</code></pre><p><strong>工厂函数的用法使得<code>Vue.component(name, options)</code>的第二个参数不是一个对象，因此不论是全局注册还是局部注册，都不会执行<code>Vue.extend</code>生成一个子组件的构造器，</strong>所以<code>Ctor.cid</code>不会存在，代码会进入异步组件的分支。</p><p>异步组件分支的核心是<code>resolveAsyncComponent</code>,它的处理逻辑分支众多，我们先关心工厂函数处理部分。</p><pre><code class="js">function resolveAsyncComponent (    factory,    baseCtor  ) &#123;    if (!isDef(factory.owners)) &#123;      // 异步请求成功处理      var resolve = function() &#123;&#125;      // 异步请求失败处理      var reject = function() &#123;&#125;      // 创建子组件时会先执行工厂函数，并将resolve和reject传入      var res = factory(resolve, reject);      // resolved 同步返回      return factory.loading        ? factory.loadingComp        : factory.resolved    &#125;  &#125;</code></pre><p>如果经常使用<code>promise</code>进行开发，我们很容易发现，这部分代码像极了<code>promsie</code>原理内部的实现，针对异步组件工厂函数的写法，大致可以总结出以下三个步骤：</p><ol><li>定义异步请求成功的函数处理，定义异步请求失败的函数处理；</li><li>执行组件定义的工厂函数；</li><li>同步返回请求成功的函数处理。</li></ol><p><code>resolve, reject</code>的实现，都是<code>once</code>方法执行的结果，所以我们先关注一下高级函数<code>once</code>的原理。<strong>为了防止当多个地方调用异步组件时，<code>resolve,reject</code>不会重复执行，<code>once</code>函数保证了函数在代码只执行一次。也就是说，<code>once</code>缓存了已经请求过的异步组件</strong></p><pre><code class="js">// once函数保证了这个调用函数只在系统中调用一次function once (fn) &#123;  // 利用闭包特性将called作为标志位  var called = false;  return function () &#123;    // 调用过则不再调用    if (!called) &#123;      called = true;      fn.apply(this, arguments);    &#125;  &#125;&#125;</code></pre><p>成功<code>resolve</code>和失败<code>reject</code>的详细处理逻辑如下： </p><pre><code class="js">// 成功处理var resolve = once(function (res) &#123;  // 转成组件构造器，并将其缓存到resolved属性中。  factory.resolved = ensureCtor(res, baseCtor);  if (!sync) &#123;    //强制更新渲染视图    forceRender(true);  &#125; else &#123;    owners.length = 0;  &#125;&#125;);// 失败处理var reject = once(function (reason) &#123;  warn(    &quot;Failed to resolve async component: &quot; + (String(factory)) +    (reason ? (&quot;\nReason: &quot; + reason) : &#39;&#39;)  );  if (isDef(factory.errorComp)) &#123;    factory.error = true;    forceRender(true);  &#125;&#125;);</code></pre><p>异步组件加载完毕，会调用<code>resolve</code>定义的方法，方法会通过<code>ensureCtor</code>将加载完成的组件转换为组件构造器，并存储在<code>resolved</code>属性中，其中 <code>ensureCtor</code>的定义为：</p><pre><code class="js">function ensureCtor (comp, base) &#123;    if (comp.__esModule ||(hasSymbol &amp;&amp; comp[Symbol.toStringTag] === &#39;Module&#39;)) &#123;      comp = comp.default;    &#125;    // comp结果为对象时，调用extend方法创建一个子类构造器    return isObject(comp)      ? base.extend(comp)      : comp  &#125;</code></pre><p>组件构造器创建完毕，会进行一次视图的重新渲染，<strong>由于<code>Vue</code>是数据驱动视图渲染的，而组件在加载到完毕的过程中，并没有数据发生变化，因此需要手动强制更新视图。</strong><code>forceRender</code>函数的内部会拿到每个调用异步组件的实例，执行原型上的<code>$forceUpdate</code>方法，这部分的知识等到响应式系统时介绍。</p><p>异步组件加载失败后，会调用<code>reject</code>定义的方法，方法会提示并标记错误，最后同样会强制更新视图。</p><p>回到异步组件创建的流程，执行异步过程会同步为加载中的异步组件创建一个注释节点<code>Vnode</code></p><pre><code class="js">  function createComponent ()&#123;    ···    // 创建异步组件函数    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);    if (Ctor === undefined) &#123;      // 创建注释节点      return createAsyncPlaceholder(asyncFactory,data,context,children,tag)    &#125;  &#125;</code></pre><p><code>createAsyncPlaceholder</code>的定义也很简单,其中<code>createEmptyVNode</code>之前有介绍过，是创建一个注释节点<code>vnode</code>，而<code>asyncFactory,asyncMeta</code>都是用来标注该节点为异步组件的临时节点和相关属性。</p><pre><code class="js">// 创建注释Vnodefunction createAsyncPlaceholder (factory,data,context,children,tag) &#123;  var node = createEmptyVNode();  node.asyncFactory = factory;  node.asyncMeta = &#123; data: data, context: context, children: children, tag: tag &#125;;  return node&#125;</code></pre><p>执行<code>forceRender</code>触发组件的重新渲染过程时，又会再次调用<code>resolveAsyncComponent</code>,这时返回值<code>Ctor</code>不再为 <code>undefined</code>了，因此会正常走组件的<code>render,patch</code>过程。这时，旧的注释节点也会被取代。</p><h3 id="6-1-4-Promise异步组件"><a href="#6-1-4-Promise异步组件" class="headerlink" title="6.1.4 Promise异步组件"></a>6.1.4 Promise异步组件</h3><p>异步组件的第二种写法是在工厂函数中返回一个<code>promise</code>对象，我们知道<code>import</code>是<code>es6</code>引入模块加载的用法，但是<code>import</code>是一个静态加载的方法，它会优先模块内的其他语句执行。因此引入了<code>import()</code>,<code>import()</code>是一个运行时加载模块的方法，可以用来类比<code>require()</code>方法，区别在于前者是一个异步方法，后者是同步的，且<code>import()</code>会返回一个<code>promise</code>对象。</p><p>具体用法：</p><pre><code class="js">Vue.component(&#39;asyncComponent&#39;, () =&gt; import(&#39;./test.vue&#39;))</code></pre><p>源码依然走着异步组件处理分支，并且大部分的处理过程还是工厂函数的逻辑处理，区别在于执行异步函数后会返回一个<code>promise</code>对象，成功加载则执行<code>resolve</code>,失败加载则执行<code>reject</code>.</p><pre><code class="js">var res = factory(resolve, reject);// res是返回的promiseif (isObject(res)) &#123;  if (isPromise(res)) &#123;    if (isUndef(factory.resolved)) &#123;      // 核心处理      res.then(resolve, reject);    &#125;  &#125;&#125;</code></pre><p>其中<code>promise</code>对象的判断最简单的是判断是否有<code>then</code>和<code>catch</code>方法：</p><pre><code class="js"> // 判断promise对象的方法  function isPromise (val) &#123;    return (isDef(val) &amp;&amp; typeof val.then === &#39;function&#39; &amp;&amp; typeof val.catch === &#39;function&#39;)  &#125;</code></pre><h3 id="6-1-5-高级异步组件"><a href="#6-1-5-高级异步组件" class="headerlink" title="6.1.5 高级异步组件"></a>6.1.5 高级异步组件</h3><p>为了在操作上更加灵活，比如使用<code>loading</code>组件处理组件加载时间过长的等待问题，使用<code>error</code>组件处理加载组件失败的错误提示等，<code>Vue</code>在2.3.0+版本新增了返回对象形式的异步组件格式，对象中可以定义需要加载的组件<code>component</code>,加载中显示的组件<code>loading</code>,加载失败的组件<code>error</code>,以及各种延时超时设置，源码同样进入异步组件分支。</p><pre><code class="js">Vue.component(&#39;asyncComponent&#39;, () =&gt; (&#123;  // 需要加载的组件 (应该是一个 `Promise` 对象)  component: import(&#39;./MyComponent.vue&#39;),  // 异步组件加载时使用的组件  loading: LoadingComponent,  // 加载失败时使用的组件  error: ErrorComponent,  // 展示加载时组件的延时时间。默认值是 200 (毫秒)  delay: 200,  // 如果提供了超时时间且组件加载也超时了，  // 则使用加载失败时使用的组件。默认值是：`Infinity`  timeout: 3000&#125;))</code></pre><p>异步组件函数执行后返回一个对象，并且对象的<code>component</code>执行会返回一个<code>promise</code>对象，因此进入高级异步组件处理分支。</p><pre><code class="js">if (isObject(res)) &#123;  if (isPromise(res)) &#123;&#125;  // 返回对象，且res.component返回一个promise对象，进入分支  // 高级异步组件处理分支  else if (isPromise(res.component)) &#123;    // 和promise异步组件处理方式相同    res.component.then(resolve, reject);    ···  &#125;&#125;</code></pre><p>异步组件会等待响应成功失败的结果，与此同时，代码继续同步执行。高级选项设置中如果设置了<code>error</code>和<code>loading</code>组件，会同时创建两个子类的构造器,</p><pre><code class="js">if (isDef(res.error)) &#123;  // 异步错误时组件的处理，创建错误组件的子类构造器，并赋值给errorComp  factory.errorComp = ensureCtor(res.error, baseCtor);&#125;if (isDef(res.loading)) &#123;  // 异步加载时组件的处理，创建错误组件的子类构造器，并赋值给errorComp  factory.loadingComp = ensureCtor(res.loading, baseCtor);&#125;</code></pre><p>如果存在<code>delay</code>属性,则通过<code>settimeout</code>设置<code>loading</code>组件显示的延迟时间。<code>factory.loading</code>属性用来标注是否是显示<code>loading</code>组件。</p><pre><code class="js">if (res.delay === 0) &#123;  factory.loading = true;&#125; else &#123;  // 超过时间会成功加载，则执行失败结果  setTimeout(function () &#123;    if (isUndef(factory.resolved) &amp;&amp; isUndef(factory.error)) &#123;      factory.loading = true;      forceRender(false);    &#125;  &#125;, res.delay || 200);&#125;</code></pre><p>如果在<code>timeout</code>时间内，异步组件还未执行<code>resolve</code>的成功结果，即<code>resolve</code>没有赋值,则进行<code>reject</code>失败处理。</p><p>接下来依然是渲染注释节点或者渲染<code>loading</code>组件，等待异步处理结果，根据处理结果重新渲染视图节点，相似过程不再阐述。</p><h3 id="6-1-6-wepack异步组件用法"><a href="#6-1-6-wepack异步组件用法" class="headerlink" title="6.1.6 wepack异步组件用法"></a>6.1.6 wepack异步组件用法</h3><p><code>webpack</code>作为<code>Vue</code>应用构建工具的标配，我们需要知道<code>Vue</code>如何结合<code>webpack </code>进行异步组件的代码分离，并且需要关注分离后的文件名，这个名字在<code>webpack</code>中称为<code>chunkName</code>。<code>webpack</code>为异步组件的加载提供了两种写法。</p><ul><li><code>require.ensure</code>:它是<code>webpack</code>传统提供给异步组件的写法，在编译时，<code>webpack</code>会静态地解析代码中的 <code>require.ensure()</code>，同时将模块添加到一个分开的 <code>chunk</code> 中，其中函数的第三个参数为分离代码块的名字。修改后的代码写法如下：</li></ul><pre><code class="js">Vue.component(&#39;asyncComponent&#39;, function (resolve, reject) &#123;   require.ensure([], function () &#123;     resolve(require(&#39;./test.vue&#39;));   &#125;, &#39;asyncComponent&#39;); // asyncComponent为chunkname&#125;)</code></pre><ul><li><code>import(/* webpackChunkName: &quot;asyncComponent&quot; */, component)</code>: 有了<code>es6</code>,<code>import</code>的写法是现今官方最推荐的做法，其中通过注释<code>webpackChunkName</code>来指定分离后组件模块的命名。修改后的写法如下：</li></ul><pre><code class="js">Vue.component(&#39;asyncComponent&#39;, () =&gt; import(/* webpackChunkName: &quot;asyncComponent&quot; */, &#39;./test.vue&#39;))</code></pre><p>至此，我们已经掌握了所有异步组件的写法，并深入了解了其内部的实现细节。我相信全面的掌握异步组件对今后单页面性能优化方面会起到积极的指导作用。</p><h2 id="6-2-函数式组件"><a href="#6-2-函数式组件" class="headerlink" title="6.2 函数式组件"></a>6.2 函数式组件</h2><p><code>Vue</code>提供了一种可以让组件变为无状态、无实例的函数化组件。从原理上说，一般子组件都会经过实例化的过程，而单纯的函数组件并没有这个过程，它可以简单理解为一个中间层，只处理数据，不创建实例，也是由于这个行为，它的渲染开销会低很多。实际的应用场景是，当我们需要在多个组件中选择一个来代为渲染，或者在将<code>children,props,data</code>等数据传递给子组件前进行数据处理时，我们都可以用函数式组件来完成，它本质上也是对组件的一个外部包装。</p><h3 id="6-2-1-使用场景"><a href="#6-2-1-使用场景" class="headerlink" title="6.2.1 使用场景"></a>6.2.1 使用场景</h3><ul><li>定义两个组件对象，<code>test1，test2</code></li></ul><pre><code class="js">var test1 = &#123;  props: [&#39;msg&#39;],  render: function (createElement, context) &#123;    return createElement(&#39;h1&#39;, this.msg)  &#125;&#125;var test2 = &#123;  props: [&#39;msg&#39;],  render: function (createElement, context) &#123;    return createElement(&#39;h2&#39;, this.msg)  &#125;&#125;</code></pre><ul><li>定义一个函数式组件，它会根据计算结果选择其中一个组件进行选项</li></ul><pre><code class="js">Vue.component(&#39;test3&#39;, &#123;  // 函数式组件的标志 functional设置为true  functional: true,  props: [&#39;msg&#39;],  render: function (createElement, context) &#123;    var get = function() &#123;      return test1    &#125;    return createElement(get(), context)  &#125;&#125;)</code></pre><ul><li>函数式组件的使用</li></ul><pre><code class="js">&lt;test3 :msg=&quot;msg&quot; id=&quot;test&quot;&gt;&lt;/test3&gt;new Vue(&#123;  el: &#39;#app&#39;,  data: &#123;    msg: &#39;test&#39;  &#125;&#125;)</code></pre><ul><li>最终渲染的结果为：</li></ul><pre><code class="js">&lt;h2&gt;test&lt;/h2&gt;</code></pre><h3 id="6-2-2-源码分析"><a href="#6-2-2-源码分析" class="headerlink" title="6.2.2 源码分析"></a>6.2.2 源码分析</h3><p>函数式组件会在组件的对象定义中，将<code>functional</code>属性设置为<code>true</code>，这个属性是区别普通组件和函数式组件的关键。同样的在遇到子组件占位符时，会进入<code>createComponent</code>进行子组件<code>Vnode</code>的创建。<strong>由于<code>functional</code>属性的存在，代码会进入函数式组件的分支中，并返回<code>createFunctionalComponent</code>调用的结果。</strong>注意，执行完<code>createFunctionalComponent</code>后，后续创建子<code>Vnode</code>的逻辑不会执行，这也是之后在创建真实节点过程中不会有子<code>Vnode</code>去实例化子组件的原因。(无实例)</p><pre><code class="js">function createComponent()&#123;  ···  if (isTrue(Ctor.options.functional)) &#123;    return createFunctionalComponent(Ctor, propsData, data, context, children)  &#125;&#125;</code></pre><p><code>createFunctionalComponent</code>方法会对传入的数据进行检测和合并，实例化<code>FunctionalRenderContext</code>，最终调用函数式组件自定义的<code>render</code>方法执行渲染过程。</p><pre><code class="js">function createFunctionalComponent(  Ctor, // 函数式组件构造器  propsData, // 传入组件的props  data, // 占位符组件传入的attr属性  context, // vue实例  children// 子节点)&#123;  // 数据检测合并  var options = Ctor.options;  var props = &#123;&#125;;  var propOptions = options.props;  if (isDef(propOptions)) &#123;    for (var key in propOptions) &#123;      props[key] = validateProp(key, propOptions, propsData || emptyObject);    &#125;  &#125; else &#123;    // 合并attrs    if (isDef(data.attrs)) &#123; mergeProps(props, data.attrs); &#125;    // 合并props    if (isDef(data.props)) &#123; mergeProps(props, data.props); &#125;  &#125;  var renderContext = new FunctionalRenderContext(data,props,children,contextVm,Ctor);  // 调用函数式组件中自定的render函数  var vnode = options.render.call(null, renderContext._c, renderContext)&#125;</code></pre><p>而<code>FunctionalRenderContext</code>这个类最终的目的是定义一个和真实组件渲染不同的<code>render</code>方法。</p><pre><code class="js">function FunctionalRenderContext() &#123;  // 省略其他逻辑  this._c = function (a, b, c, d) &#123; return createElement(contextVm, a, b, c, d, needNormalization); &#125;;&#125;</code></pre><p>执行<code>render</code>函数的过程，又会递归调用<code>createElement</code>的方法，这时的组件已经是真实的组件，开始执行正常的组件挂载流程。</p><p>问题：为什么函数式组件需要定义一个不同的<code>createElement</code>方法？- 函数式组件<code>createElement</code>和以往唯一的不同是，最后一个参数的不同，之前章节有说到，<code>createElement</code>会根据最后一个参数决定是否对子<code>Vnode</code>进行拍平，一般情况下，<code>children</code>编译生成结果都是<code>Vnode</code>类型，只有函数式组件比较特殊，它可以返回一个数组，这时候拍平就是有必要的。我们看下面的例子：</p><pre><code class="js">Vue.component(&#39;test&#39;, &#123;    functional: true,    render: function (createElement, context) &#123;      return context.slots().default    &#125;  &#125;) &lt;test&gt;      &lt;p&gt;slot1&lt;/p&gt;      &lt;p&gt;slot&lt;/p&gt; &lt;/test&gt;</code></pre><p>此时函数式组件<code>test</code>的<code>render</code>函数返回的是两个<code>slot</code>的<code>Vnode</code>，它是以数组的形式存在的,这就是需要拍平的场景。</p><p>简单总结一下函数式组件，从源码中可以看出，函数式组件并不会像普通组件那样有实例化组件的过程，因此包括组件的生命周期，组件的数据管理这些过程都没有，它只会原封不动的接收传递给组件的数据做处理，并渲染需要的内容。因此作为纯粹的函数可以也大大降低渲染的开销。</p><h2 id="6-3-小结"><a href="#6-3-小结" class="headerlink" title="6.3 小结"></a>6.3 小结</h2><p>这一小节在组件基础之上介绍了两个进阶的用法，异步组件和函数式组件。它们都是为了解决某些类型场景引入的高级组件用法。其中异步组件是首屏性能优化的一个解决方案，并且<code>Vue</code>提供了多达三种的使用方法，高级配置的用法更让异步组件的使用更加灵活。当然大部分情况下，我们会结合<code>webpack</code>进行使用。另外，函数式组件在多组件中选择渲染内容的场景作用非凡，由于是一个无实例的组件，它在渲染开销上比普通组件的性能更好。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Vue </category>
          
          <category> vue2.x源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Step.5 组件基础剖析</title>
      <link href="/computer-science/vueyuanma/dosc/5%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80%E5%89%96%E6%9E%90/"/>
      <url>/computer-science/vueyuanma/dosc/5%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80%E5%89%96%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>组件是<code>Vue</code>的一个重要核心，我们在进行项目工程化时，会将页面的结构组件化。组件化意味着独立和共享,而两个结论并不矛盾，独立的组件开发可以让开发者专注于某个功能项的开发和扩展，而组件的设计理念又使得功能项更加具有复用性，不同的页面可以进行组件功能的共享。对于开发者而言，编写<code>Vue</code>组件是掌握<code>Vue</code>开发的核心基础，<code>Vue</code>官网也花了大量的篇幅介绍了组件的体系和各种使用方法。这一节内容，我们会深入<code>Vue</code>组件内部的源码，了解<strong>组件注册的实现思路，并结合上一节介绍的实例挂载分析组件渲染挂载的基本流程，最后我们将分析组件和组件之间是如何建立联系的</strong>。我相信，掌握这些底层的实现思路对于我们今后在解决<code>vue</code>组件相关问题上会有明显的帮助。</p></blockquote><h2 id="5-1-组件两种注册方式"><a href="#5-1-组件两种注册方式" class="headerlink" title="5.1 组件两种注册方式"></a>5.1 组件两种注册方式</h2><p>熟悉<code>Vue</code>开发流程的都知道，<code>Vue</code>组件在使用之前需要进行注册，而注册的方式有两种，全局注册和局部注册。在进入源码分析之前，我们先回忆一下两者的用法，以便后续掌握两者的差异。</p><h3 id="5-1-1-全局注册"><a href="#5-1-1-全局注册" class="headerlink" title="5.1.1 全局注册"></a>5.1.1 全局注册</h3><pre><code class="js">Vue.component(&#39;my-test&#39;, &#123;    template: &#39;&lt;div&gt;&#123;&#123;test&#125;&#125;&lt;/div&gt;&#39;,    data () &#123;        return &#123;            test: 1212        &#125;    &#125;&#125;)var vm = new Vue(&#123;    el: &#39;#app&#39;,    template: &#39;&lt;div id=&quot;app&quot;&gt;&lt;my-test&gt;&lt;my-test/&gt;&lt;/div&gt;&#39;&#125;)</code></pre><p><strong>其中组件的全局注册需要在全局实例化Vue前调用</strong>,注册之后可以用在任何新创建的<code>Vue</code>实例中调用。</p><h3 id="5-1-2-局部注册"><a href="#5-1-2-局部注册" class="headerlink" title="5.1.2 局部注册"></a>5.1.2 局部注册</h3><pre><code class="js">var myTest = &#123;    template: &#39;&lt;div&gt;&#123;&#123;test&#125;&#125;&lt;/div&gt;&#39;,    data () &#123;        return &#123;            test: 1212        &#125;    &#125;&#125;var vm = new Vue(&#123;    el: &#39;#app&#39;,    component: &#123;        myTest    &#125;&#125;)</code></pre><p>当只需要在某个局部用到某个组件时，可以使用局部注册的方式进行组件注册，此时局部注册的组件只能在注册该组件内部使用。</p><h3 id="5-1-3-注册过程"><a href="#5-1-3-注册过程" class="headerlink" title="5.1.3 注册过程"></a>5.1.3 注册过程</h3><p>在简单回顾组件的两种注册方式后，我们来看注册过程到底发生了什么，我们以全局组件注册为例。它通过<code>Vue.component(name, &#123;...&#125;)</code>进行组件注册，<code>Vue.component</code>是在<code>Vue</code>源码引入阶段定义的静态方法。</p><pre><code class="js">// 初始化全局apiinitAssetRegisters(Vue);var ASSET_TYPES = [    &#39;component&#39;,    &#39;directive&#39;,    &#39;filter&#39;];function initAssetRegisters(Vue)&#123;    // 定义ASSET_TYPES中每个属性的方法，其中包括component    ASSET_TYPES.forEach(function (type) &#123;    // type: component,directive,filter      Vue[type] = function (id,definition) &#123;          if (!definition) &#123;            // 直接返回注册组件的构造函数            return this.options[type + &#39;s&#39;][id]          &#125;          ...          if (type === &#39;component&#39;) &#123;            // 验证component组件名字是否合法            validateComponentName(id);          &#125;          if (type === &#39;component&#39; &amp;&amp; isPlainObject(definition)) &#123;            // 组件名称设置            definition.name = definition.name || id;            // Vue.extend() 创建子组件，返回子类构造器            definition = this.options._base.extend(definition);          &#125;          // 为Vue.options 上的component属性添加将子类构造器          this.options[type + &#39;s&#39;][id] = definition;          return definition        &#125;    &#125;);&#125;</code></pre><p><code>Vue.components</code>有两个参数，一个是需要注册组件的组件名，另一个是组件选项，如果第二个参数没有传递，则会直接返回注册过的组件选项。否则意味着需要对该组件进行注册，注册过程先会对组件名的合法性进行检测，要求组件名不允许出现非法的标签，包括<code>Vue</code>内置的组件名，如<code>slot, component</code>等。</p><pre><code class="js">function validateComponentName(name) &#123;    if (!new RegExp((&quot;^[a-zA-Z][\\-\\.0-9_&quot; + (unicodeRegExp.source) + &quot;]*$&quot;)).test(name)) &#123;      // 正则判断检测是否为非法的标签      warn(        &#39;Invalid component name: &quot;&#39; + name + &#39;&quot;. Component names &#39; +        &#39;should conform to valid custom element name in html5 specification.&#39;      );    &#125;    // 不能使用Vue自身自定义的组件名，如slot, component,不能使用html的保留标签，如 h1, svg等    if (isBuiltInTag(name) || config.isReservedTag(name)) &#123;      warn(        &#39;Do not use built-in or reserved HTML elements as component &#39; +        &#39;id: &#39; + name      );    &#125;  &#125;</code></pre><p>在经过组件名的合法性检测后，会调用<code>extend</code>方法为组件创建一个子类构造器，此时的<code>this.options._base</code>代表的就是<code>Vue</code>构造器。<code>extend</code>方法的定义在介绍选项合并章节有重点介绍过，它会<strong>基于父类去创建一个子类</strong>，此时的父类是<code>Vue</code>，并且创建过程子类会继承父类的方法，并会和父类的选项进行合并，最终返回一个子类构造器。</p><p>代码处还有一个逻辑，<code>Vue.component()</code>默认会把第一个参数作为组件名称，但是如果组件选项有<code>name</code>属性时，<code>name</code>属性值会将组件名覆盖。</p><p><strong>总结起来，全局注册组件就是<code>Vue</code>实例化前创建一个基于<code>Vue</code>的子类构造器，并将组件的信息加载到实例<code>options.components</code>对象中。</strong></p><p><strong>接下来自然而然会想到一个问题，局部注册和全局注册在实现上的区别体现在哪里？</strong>我们不急着分析局部组件的注册流程，先以全局注册的组件为基础，看看作为组件，它的挂载流程有什么不同。</p><h2 id="5-2-组件Vnode创建"><a href="#5-2-组件Vnode创建" class="headerlink" title="5.2 组件Vnode创建"></a>5.2 组件Vnode创建</h2><p>上一节内容我们介绍了<code>Vue</code>如何将一个模板，通过<code>render</code>函数的转换，最终生成一个<code>Vnode tree</code>的，在不包含组件的情况下，<code>_render</code>函数的最后一步是直接调用<code>new Vnode</code>去创建一个完整的<code>Vnode tree</code>。然而有一大部分的分支我们并没有分析，那就是遇到组件占位符的场景。执行阶段如果遇到组件，处理过程要比想像中复杂得多，我们通过一张流程图展开分析。</p><h3 id="5-2-1-Vnode创建流程图"><a href="#5-2-1-Vnode创建流程图" class="headerlink" title="5.2.1 Vnode创建流程图"></a>5.2.1 Vnode创建流程图</h3><p><img data-src="/images/img/5.1.png"></p><h3 id="5-2-2-具体流程分析"><a href="#5-2-2-具体流程分析" class="headerlink" title="5.2.2 具体流程分析"></a>5.2.2 具体流程分析</h3><p>我们结合实际的例子对照着流程图分析一下这个过程：</p><ul><li>场景</li></ul><pre><code class="js">Vue.component(&#39;test&#39;, &#123;  template: &#39;&lt;span&gt;&lt;/span&gt;&#39;&#125;)var vm = new Vue(&#123;  el: &#39;#app&#39;,  template: &#39;&lt;div&gt;&lt;test&gt;&lt;/test&gt;&lt;/div&gt;&#39;&#125;)</code></pre><ul><li>父<code>render</code>函数</li></ul><pre><code class="js">function() &#123;  with(this)&#123;return _c(&#39;div&#39;,[_c(&#39;test&#39;)],1)&#125;&#125;</code></pre><ul><li><code>Vue</code>根实例初始化会执行 <code>vm.$mount(vm.$options.el)</code>实例挂载的过程，按照之前的逻辑，完整流程会经历<code>render</code>函数生成<code>Vnode</code>,以及<code>Vnode</code>生成真实<code>DOM</code>的过程。</li><li><code>render</code>函数生成<code>Vnode</code>过程中，子会优先父执行生成<code>Vnode</code>过程,也就是<code>_c(&#39;test&#39;)</code>函数会先被执行。<code>&#39;test&#39;</code>会先判断是普通的<code>html</code>标签还是组件的占位符。</li><li>如果为一般标签，会执行<code>new Vnode</code>过程，这也是上一章节我们分析的过程；如果是组件的占位符，则会在判断组件已经被注册过的前提下进入<code>createComponent</code>创建子组件<code>Vnode</code>的过程。</li><li><code>createComponent</code>是创建组件<code>Vnode</code>的过程，创建过程会再次合并选项配置，并安装组件相关的内部钩子(后面文章会再次提到内部钩子的作用)，最后通过<code>new Vnode()</code>生成以<code>vue-component</code>开头的<code>Virtual DOM</code></li><li><code>render</code>函数执行过程也是一个循环递归调用创建<code>Vnode</code>的过程，执行3，4步之后，完整的生成了一个包含各个子组件的<code>Vnode tree</code></li></ul><p><code>_createElement</code>函数的实现之前章节分析过一部分，我们重点看看组件相关的操作。</p><pre><code class="js">// 内部执行将render函数转化为Vnode的函数function _createElement(context,tag,data,children,normalizationType) &#123;  ···  if (typeof tag === &#39;string&#39;) &#123;    // 子节点的标签为普通的html标签，直接创建Vnode    if (config.isReservedTag(tag)) &#123;      vnode = new VNode(        config.parsePlatformTagName(tag), data, children,        undefined, undefined, context      );    // 子节点标签为注册过的组件标签名，则子组件Vnode的创建过程    &#125; else if ((!data || !data.pre) &amp;&amp; isDef(Ctor = resolveAsset(context.$options, &#39;components&#39;, tag))) &#123;      // 创建子组件Vnode      vnode = createComponent(Ctor, data, context, children, tag);    &#125;  &#125;&#125;</code></pre><p><code>config.isReservedTag(tag)</code>用来判断标签是否为普通的<code>html</code>标签，如果是普通节点会直接创建<code>Vnode</code>节点，如果不是，则需要判断这个占位符组件是否已经注册到，我们可以通过<code>context.$options.components[组件名]</code>拿到注册后的组件选项。如何判断组件是否已经全局注册，看看<code>resolveAsset</code>的实现。</p><pre><code class="js">// 需要明确组件是否已经被注册  function resolveAsset (options,type,id,warnMissing) &#123;    // 标签为字符串    if (typeof id !== &#39;string&#39;) &#123;      return    &#125;    // 这里是 options.component    var assets = options[type];    // 这里的分支分别支持大小写，驼峰的命名规范    if (hasOwn(assets, id)) &#123; return assets[id] &#125;    var camelizedId = camelize(id);    if (hasOwn(assets, camelizedId)) &#123; return assets[camelizedId] &#125;    var PascalCaseId = capitalize(camelizedId);    if (hasOwn(assets, PascalCaseId)) &#123; return assets[PascalCaseId] &#125;    // fallback to prototype chain    var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];    if (warnMissing &amp;&amp; !res) &#123;      warn(        &#39;Failed to resolve &#39; + type.slice(0, -1) + &#39;: &#39; + id,        options      );    &#125;    // 最终返回子类的构造器    return res  &#125;</code></pre><p>拿到注册过的子类构造器后，调用<code>createComponent</code>方法创建子组件<code>Vnode</code></p><pre><code class="js"> // 创建子组件过程  function createComponent (    Ctor, // 子类构造器    data,    context, // vm实例    children, // 子节点    tag // 子组件占位符  ) &#123;    ···    // Vue.options里的_base属性存储Vue构造器    var baseCtor = context.$options._base;    // 针对局部组件注册场景    if (isObject(Ctor)) &#123;      Ctor = baseCtor.extend(Ctor);    &#125;    data = data || &#123;&#125;;    // 构造器配置合并    resolveConstructorOptions(Ctor);    // 挂载组件钩子    installComponentHooks(data);    // return a placeholder vnode    var name = Ctor.options.name || tag;    // 创建子组件vnode，名称以 vue-component- 开头    var vnode = new VNode((&quot;vue-component-&quot; + (Ctor.cid) + (name ? (&quot;-&quot; + name) : &#39;&#39;)),data, undefined, undefined, undefined, context,&#123; Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children &#125;,asyncFactory);    return vnode  &#125;</code></pre><p>这里将大部分的代码都拿掉了，只留下创建<code>Vnode</code>相关的代码，最终会通过<code>new Vue</code>实例化一个名称以<code>vue-component-</code>开头的<code>Vnode</code>节点。其中两个关键的步骤是配置合并和安装组件钩子函数，选项合并的内容可以查看这个系列的前两节，这里看看<code>installComponentHooks</code>安装组件钩子函数时做了哪些操作。</p><pre><code class="js">  // 组件内部自带钩子 var componentVNodeHooks = &#123;    init: function init (vnode, hydrating) &#123;    &#125;,    prepatch: function prepatch (oldVnode, vnode) &#123;    &#125;,    insert: function insert (vnode) &#123;    &#125;,    destroy: function destroy (vnode) &#123;    &#125;  &#125;;var hooksToMerge = Object.keys(componentVNodeHooks);// 将componentVNodeHooks 钩子函数合并到组件data.hook中 function installComponentHooks (data) &#123;    var hooks = data.hook || (data.hook = &#123;&#125;);    for (var i = 0; i &lt; hooksToMerge.length; i++) &#123;      var key = hooksToMerge[i];      var existing = hooks[key];      var toMerge = componentVNodeHooks[key];      // 如果钩子函数存在，则执行mergeHook$1方法合并      if (existing !== toMerge &amp;&amp; !(existing &amp;&amp; existing._merged)) &#123;        hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;      &#125;    &#125;  &#125;function mergeHook$1 (f1, f2) &#123;  // 返回一个依次执行f1,f2的函数    var merged = function (a, b) &#123;      f1(a, b);      f2(a, b);    &#125;;    merged._merged = true;    return merged  &#125;</code></pre><p>组件默认自带的这几个钩子函数会在后续<code>patch</code>过程的不同阶段执行，这部分内容不在本节的讨论范围。</p><h3 id="5-2-3-局部注册和全局注册的区别"><a href="#5-2-3-局部注册和全局注册的区别" class="headerlink" title="5.2.3 局部注册和全局注册的区别"></a>5.2.3 局部注册和全局注册的区别</h3><p>在说到全局注册和局部注册的用法时留下了一个问题，局部注册和全局注册两者的区别在哪里。其实局部注册的原理同样简单，我们使用局部注册组件时会通过在父组件选项配置中的<code>components</code>添加子组件的对象配置，这和全局注册后在<code>Vue</code>的<code>options.component</code>添加子组件构造器的结果很相似。区别在于：</p><p><strong>1.局部注册添加的对象配置是在某个组件下，而全局注册添加的子组件是在根实例下。</strong></p><p><strong>2.局部注册添加的是一个子组件的配置对象，而全局注册添加的是一个子类构造器。</strong></p><p>因此局部注册中缺少了一步构建子类构造器的过程，这个过程放在哪里进行呢？ 回到<code>createComponent</code>的源码,源码中根据选项是对象还是函数来区分局部和全局注册组件，<strong>如果选项的值是对象，则该组件是局部注册的组件，此时在创建子<code>Vnode</code>时会调用 父类的<code>extend</code>方法去创建一个子类构造器。</strong></p><pre><code class="js">function createComponent (...) &#123;  ...  var baseCtor = context.$options._base;  // 针对局部组件注册场景  if (isObject(Ctor)) &#123;      Ctor = baseCtor.extend(Ctor);  &#125;&#125;</code></pre><h2 id="5-3-组件Vnode渲染真实DOM"><a href="#5-3-组件Vnode渲染真实DOM" class="headerlink" title="5.3 组件Vnode渲染真实DOM"></a>5.3 组件Vnode渲染真实DOM</h2><p>根据前面的分析，不管是全局注册的组件还是局部注册的组件，组件并没有进行实例化，那么组件实例化的过程发生在哪个阶段呢？我们接着看<code>Vnode tree</code>渲染真实<code>DOM</code>的过程。</p><h3 id="5-3-1-真实节点渲染流程图"><a href="#5-3-1-真实节点渲染流程图" class="headerlink" title="5.3.1 真实节点渲染流程图"></a>5.3.1 真实节点渲染流程图</h3><p><img data-src="/images/img/5.2.png"></p><h3 id="5-3-2-具体流程分析"><a href="#5-3-2-具体流程分析" class="headerlink" title="5.3.2 具体流程分析"></a>5.3.2 具体流程分析</h3><ol><li>经过<code>vm._render()</code>生成完整的<code>Virtual Dom</code>树后，紧接着执行<code>Vnode</code>渲染真实<code>DOM</code>的过程,这个过程是<code>vm.update()</code>方法的执行，而其核心是<code>vm.__patch__</code>。</li><li><code>vm.__patch__</code>内部会通过 <code>createElm</code>去创建真实的<code>DOM</code>元素，期间遇到子<code>Vnode</code>会递归调用<code>createElm</code>方法。</li><li>递归调用过程中，判断该节点类型是否为组件类型是通过<code>createComponent</code>方法判断的，该方法和渲染<code>Vnode</code>阶段的方法<code>createComponent</code>不同，他会调用子组件的<code>init</code>初始化钩子函数，并完成组件的<code>DOM</code>插入。</li><li><code>init</code>初始化钩子函数的核心是<code>new</code>实例化这个子组件并将子组件进行挂载，实例化子组件的过程又回到合并配置，初始化生命周期，初始化事件中心，初始化渲染的过程。实例挂载又会执行<code>$mount</code>过程。</li><li>完成所有子组件的实例化和节点挂载后，最后才回到根节点的挂载。</li></ol><p><code>__patch__</code>核心代码是通过<code>createElm</code>创建真实节点，当创建过程中遇到子<code>vnode</code>时，会调用<code>createChildren</code>,<code>createChildren</code>的目的是对子<code>vnode</code>递归调用<code>createElm</code>创建子组件节点。</p><pre><code class="js">// 创建真实domfunction createElm (vnode,insertedVnodeQueue,parentElm,refElm,nested,ownerArray,index) &#123;  ···  // 递归创建子组件真实节点,直到完成所有子组件的渲染才进行根节点的真实节点插入  if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) &#123;    return  &#125;  ···  var children = vnode.children;  //   createChildren(vnode, children, insertedVnodeQueue);  ···  insert(parentElm, vnode.elm, refElm);&#125;function createChildren(vnode, children, insertedVnodeQueue) &#123;  for (var i = 0; i &lt; children.length; ++i) &#123;    // 遍历子节点，递归调用创建真实dom节点的方法 - createElm    createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);  &#125;&#125;</code></pre><p><code>createComponent</code>方法会对子组件<code>Vnode</code>进行处理中，还记得在<code>Vnode</code>生成阶段为子<code>Vnode</code>安装了一系列的钩子函数吗，在这个步骤我们可以通过是否拥有这些定义好的钩子来判断是否是已经注册过的子组件，如果条件满足，则执行组件的<code>init</code>钩子。</p><p><code>init</code>钩子做的事情只有两个，<strong>实例化组件构造器，执行子组件的挂载流程。</strong>(<code>keep-alive</code>分支看具体的文章分析)</p><pre><code class="js">function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) &#123;  var i = vnode.data;  // 是否有钩子函数可以作为判断是否为组件的唯一条件  if (isDef(i = i.hook) &amp;&amp; isDef(i = i.init)) &#123;    // 执行init钩子函数    i(vnode, false /* hydrating */);  &#125;  ···&#125;var componentVNodeHooks = &#123;  // 忽略keepAlive过程  // 实例化  var child = vnode.componentInstance = createComponentInstanceForVnode(vnode,activeInstance);  // 挂载  child.$mount(hydrating ? vnode.elm : undefined, hydrating);&#125;function createComponentInstanceForVnode(vnode, parent) &#123;  ···  // 实例化Vue子组件实例  return new vnode.componentOptions.Ctor(options)&#125;</code></pre><p>显然<code>Vnode</code>生成真实<code>DOM</code>的过程也是一个不断递归创建子节点的过程，<code>patch</code>过程如果遇到子<code>Vnode</code>,会优先实例化子组件，并且执行子组件的挂载流程，而挂载流程又会回到<code>_render,_update</code>的过程。在所有的子<code>Vnode</code>递归挂载后，最终才会真正挂载根节点。</p><h2 id="5-4-建立组件联系"><a href="#5-4-建立组件联系" class="headerlink" title="5.4 建立组件联系"></a>5.4 建立组件联系</h2><p>日常开发中，我们可以通过<code>vm.$parent</code>拿到父实例，也可以在父实例中通过<code>vm.$children</code>拿到实例中的子组件。显然，<code>Vue</code>在组件和组件之间建立了一层关联。接下来的内容，我们将探索如何建立组件之间的联系。</p><p>不管是父实例还是子实例，在初始化实例阶段有一个<code>initLifecycle</code>的过程。这个过程会<strong>把当前实例添加到父实例的<code>$children</code>属性中，并设置自身的<code>$parent</code>属性指向父实例。</strong>举一个具体的应用场景：</p><pre><code class="js">&lt;div id=&quot;app&quot;&gt;    &lt;component-a&gt;&lt;/component-a&gt;&lt;/div&gt;Vue.component(&#39;component-a&#39;, &#123;    template: &#39;&lt;div&gt;a&lt;/div&gt;&#39;&#125;)var vm = new Vue(&#123; el: &#39;#app&#39;&#125;)console.log(vm) // 将实例对象输出</code></pre><p>由于<code>vue</code>实例向上没有父实例，所以<code>vm.$parent</code>为<code>undefined</code>，<code>vm</code>的<code>$children</code>属性指向子组件<code>componentA</code> 的实例。</p><p><img data-src="/images/img/5.3.png"></p><p>子组件<code>componentA</code>的 <code>$parent</code>属性指向它的父级<code>vm</code>实例，它的<code>$children</code>属性指向为空</p><p><img data-src="/images/img/5.4.png"></p><p>源码解析如下: </p><pre><code class="js">function initLifecycle (vm) &#123;    var options = vm.$options;    // 子组件注册时，会把父组件的实例挂载到自身选项的parent上    var parent = options.parent;    // 如果是子组件，并且该组件不是抽象组件时，将该组件的实例添加到父组件的$parent属性上，如果父组件是抽象组件，则一直往上层寻找，直到该父级组件不是抽象组件，并将，将该组件的实例添加到父组件的$parent属性    if (parent &amp;&amp; !options.abstract) &#123;        while (parent.$options.abstract &amp;&amp; parent.$parent) &#123;        parent = parent.$parent;        &#125;        parent.$children.push(vm);    &#125;    // 将自身的$parent属性指向父实例。    vm.$parent = parent;    vm.$root = parent ? parent.$root : vm;    vm.$children = [];    vm.$refs = &#123;&#125;;    vm._watcher = null;    vm._inactive = null;    vm._directInactive = false;    // 该实例是否挂载    vm._isMounted = false;    // 该实例是否被销毁    vm._isDestroyed = false;    // 该实例是否正在被销毁    vm._isBeingDestroyed = false;&#125;</code></pre><p>最后简单讲讲抽象组件，在<code>vue</code>中有很多内置的抽象组件，例如<code>&lt;keep-alive&gt;&lt;/keep-alive&gt;,&lt;slot&gt;&lt;slot&gt;</code>等，这些抽象组件并不会出现在子父级的路径上，并且它们也不会参与<code>DOM</code>的渲染。</p><h2 id="5-5-小结"><a href="#5-5-小结" class="headerlink" title="5.5 小结"></a>5.5 小结</h2><p>这一小节，结合了实际的例子分析了组件注册流程到组件挂载渲染流程，<code>Vue</code>中我们可以定义全局的组件，也可以定义局部的组件，全局组件需要进行全局注册，核心方法是<code>Vue.component</code>,他需要在根组件实例化前进行声明注册，原因是我们需要在实例化前拿到组件的配置信息并合并到<code>options.components</code>选项中。注册的本质是调用<code>extend</code>创建一个子类构造器，全局和局部的不同是局部创建子类构造器是发生在创建子组件<code>Vnode</code>阶段。而创建子<code>Vnode</code>阶段最关键的一步是定义了很多内部使用的钩子。有了一个完整的<code>Vnode tree</code>接下来会进入真正<code>DOM</code>的生成，在这个阶段如果遇到子组件<code>Vnode</code>会进行子构造器的实例化，并完成子组件的挂载。递归完成子组件的挂载后，最终才又回到根组件的挂载。<br>  有了组件的基本知识，下一节我们重点分析一下组件的进阶用法。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Vue </category>
          
          <category> vue2.x源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Step.4 完整渲染流程</title>
      <link href="/computer-science/vueyuanma/dosc/4%E5%AE%8C%E6%95%B4%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B/"/>
      <url>/computer-science/vueyuanma/dosc/4%E5%AE%8C%E6%95%B4%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>继上一节内容，我们将<code>Vue</code>复杂的挂载流程通过图解流程，代码分析的方式简单梳理了一遍，最后也讲到了模板编译的大致流程。然而在挂载的核心处，我们并没有分析模板编译后渲染函数是如何转换为可视化<code>DOM</code>节点的。因此这一章节，我们将重新回到<code>Vue</code>实例挂载的最后一个环节：渲染<code>DOM</code>节点。在渲染真实<code>DOM</code>的过程中，<code>Vue</code>引进了虚拟<code>DOM</code>的概念，这是<code>Vue</code>架构设计中另一个重要的理念。虚拟<code>DOM</code>作为<code>JS</code>对象和真实<code>DOM</code>中间的一个缓冲层，对<code>JS</code>频繁操作<code>DOM</code>的引起的性能问题有很好的缓解作用。</p></blockquote><h2 id="4-1-Virtual-DOM"><a href="#4-1-Virtual-DOM" class="headerlink" title="4.1 Virtual DOM"></a>4.1 Virtual DOM</h2><h3 id="4-1-1-浏览器的渲染流程"><a href="#4-1-1-浏览器的渲染流程" class="headerlink" title="4.1.1 浏览器的渲染流程"></a>4.1.1 浏览器的渲染流程</h3><p>当浏览器接收到一个<code>Html</code>文件时，<code>JS</code>引擎和浏览器的渲染引擎便开始工作了。从渲染引擎的角度，它首先会将<code>html</code>文件解析成一个<code>DOM</code>树，与此同时，浏览器将识别并加载<code>CSS</code>样式，并和<code>DOM</code>树一起合并为一个渲染树。有了渲染树后，渲染引擎将计算所有元素的位置信息，最后通过绘制，在屏幕上打印最终的内容。<code>JS</code>引擎和渲染引擎虽然是两个独立的线程，但是JS引擎却可以触发渲染引擎工作，当我们通过脚本去修改元素位置或外观时，<code>JS</code>引擎会利用<code>DOM</code>相关的<code>API</code>方法去操作<code>DOM</code>对象,此时渲染引擎变开始工作，渲染引擎会触发回流或者重绘。下面是回流重绘的两个概念：</p><ul><li>回流： 当我们对<code>DOM</code>的修改引发了元素尺寸的变化时，浏览器需要重新计算元素的大小和位置，最后将重新计算的结果绘制出来，这个过程称为回流。</li><li>重绘： 当我们对<code>DOM</code>的修改只单纯改变元素的颜色时，浏览器此时并不需要重新计算元素的大小和位置，而只要重新绘制新样式。这个过程称为重绘。</li></ul><p><strong>很显然回流比重绘更加耗费性能</strong>。</p><p>通过了解浏览器基本的渲染机制，我们很容易联想到当不断的通过<code>JS</code>修改<code>DOM</code>时，不经意间会触发到渲染引擎的回流或者重绘，这个性能开销是非常巨大的。因此为了降低开销，我们需要做的是尽可能减少<code>DOM</code>操作。有什么方法可以做到呢？</p><h3 id="4-1-2-缓冲层-虚拟DOM"><a href="#4-1-2-缓冲层-虚拟DOM" class="headerlink" title="4.1.2 缓冲层-虚拟DOM"></a>4.1.2 缓冲层-虚拟DOM</h3><p>虚拟<code>DOM</code>是为了解决频繁操作<code>DOM</code>引发性能问题的产物。虚拟<code>DOM</code>(下面称为<code>Virtual DOM</code>)是将页面的状态抽象为<code>JS</code>对象的形式，本质上是<code>JS</code>和真实<code>DOM</code>的中间层，当我们想用<code>JS</code>脚本大批量进行<code>DOM</code>操作时，会优先作用于<code>Virtual DOM</code>这个<code>JS</code>对象，最后通过对比将要改动的部分通知并更新到真实的<code>DOM</code>。尽管最终还是操作真实的<code>DOM</code>，但<code>Virtual DOM</code>可以将多个改动合并成一个批量的操作，从而减少 <code>DOM</code> 重排的次数，进而缩短了生成渲染树和绘制所花的时间。</p><p>我们看一个真实的<code>DOM</code>包含了什么：</p><p><img data-src="/images/img/4.1.png"><br>浏览器将一个真实<code>DOM</code>设计得很复杂，不仅包含了自身的属性描述，大小位置等定义，也囊括了<code>DOM</code>拥有的浏览器事件等。正因为如此复杂的结构，我们频繁去操作<code>DOM</code>或多或少会带来浏览器的性能问题。而作为数据和真实<code>DOM</code>之间的一层缓冲，<code>Virtual DOM</code> 只是用来映射到真实<code>DOM</code>的渲染，因此不需要包含操作 <code>DOM</code> 的方法，它只要在对象中重点关注几个属性即可。</p><pre><code class="js">// 真实DOM&lt;div id=&quot;real&quot;&gt;&lt;span&gt;dom&lt;/span&gt;&lt;/div&gt;// 真实DOM对应的JS对象&#123;    tag: &#39;div&#39;,    data: &#123;        id: &#39;real&#39;    &#125;,    children: [&#123;        tag: &#39;span&#39;,        children: &#39;dom&#39;    &#125;]&#125;</code></pre><h2 id="4-2-Vnode"><a href="#4-2-Vnode" class="headerlink" title="4.2 Vnode"></a>4.2 Vnode</h2><p><code>Vue</code>在渲染机制的优化上，同样引进了<code>virtual dom</code>的概念，它是用<code>Vnode</code>这个构造函数去描述一个<code>DOM</code>节点。</p><h3 id="4-2-1-Vnode构造函数"><a href="#4-2-1-Vnode构造函数" class="headerlink" title="4.2.1 Vnode构造函数"></a>4.2.1 Vnode构造函数</h3><pre><code class="js">var VNode = function VNode (tag,data,children,text,elm,context,componentOptions,asyncFactory) &#123;    this.tag = tag; // 标签    this.data = data;  // 数据    this.children = children; // 子节点    this.text = text;    ···    ···  &#125;;</code></pre><p><code>Vnode</code>定义的属性差不多有20几个，显然用<code>Vnode</code>对象要比真实<code>DOM</code>对象描述的内容要简单得多，它只用来单纯描述节点的关键属性，例如标签名，数据，子节点等。并没有保留跟浏览器相关的<code>DOM</code>方法。除此之外，<code>Vnode</code>也会有其他的属性用来扩展<code>Vue</code>的灵活性。</p><p>源码中也定义了创建<code>Vnode</code>的相关方法。</p><h3 id="4-2-2-创建Vnode注释节点"><a href="#4-2-2-创建Vnode注释节点" class="headerlink" title="4.2.2 创建Vnode注释节点"></a>4.2.2 创建Vnode注释节点</h3><pre><code class="js">// 创建注释vnode节点var createEmptyVNode = function (text) &#123;    if ( text === void 0 ) text = &#39;&#39;;    var node = new VNode();    node.text = text;    node.isComment = true; // 标记注释节点    return node&#125;;</code></pre><h3 id="4-2-3-创建Vnode文本节点"><a href="#4-2-3-创建Vnode文本节点" class="headerlink" title="4.2.3 创建Vnode文本节点"></a>4.2.3 创建Vnode文本节点</h3><pre><code class="js">// 创建文本vnode节点function createTextVNode (val) &#123;    return new VNode(undefined, undefined, undefined, String(val))&#125;</code></pre><h3 id="4-2-4-克隆vnode"><a href="#4-2-4-克隆vnode" class="headerlink" title="4.2.4 克隆vnode"></a>4.2.4 克隆vnode</h3><pre><code class="js">function cloneVNode (vnode) &#123;    var cloned = new VNode(      vnode.tag,      vnode.data,      vnode.children &amp;&amp; vnode.children.slice(),      vnode.text,      vnode.elm,      vnode.context,      vnode.componentOptions,      vnode.asyncFactory    );    cloned.ns = vnode.ns;    cloned.isStatic = vnode.isStatic;    cloned.key = vnode.key;    cloned.isComment = vnode.isComment;    cloned.fnContext = vnode.fnContext;    cloned.fnOptions = vnode.fnOptions;    cloned.fnScopeId = vnode.fnScopeId;    cloned.asyncMeta = vnode.asyncMeta;    cloned.isCloned = true;    return cloned  &#125;</code></pre><p><strong>注意：<code>cloneVnode</code>对<code>Vnode</code>的克隆只是一层浅拷贝，它不会对子节点进行深度克隆。</strong></p><h2 id="4-3-Virtual-DOM的创建"><a href="#4-3-Virtual-DOM的创建" class="headerlink" title="4.3 Virtual DOM的创建"></a>4.3 Virtual DOM的创建</h2><p>先简单回顾一下挂载的流程，挂载的过程是调用<code>Vue</code>实例上<code>$mount</code>方法，而<code>$mount</code>的核心是<code>mountComponent</code>函数。如果我们传递的是<code>template</code>模板，模板会先经过编译器的解析，并最终根据不同平台生成对应代码，此时对应的就是将<code>with</code>语句封装好的<code>render</code>函数;如果传递的是<code>render</code>函数，则跳过模板编译过程，直接进入下一个阶段。下一阶段是拿到<code>render</code>函数，调用<code>vm._render()</code>方法将<code>render</code>函数转化为<code>Virtual DOM</code>，并最终通过<code>vm._update()</code>方法将<code>Virtual DOM</code>渲染为真实的<code>DOM</code>节点。</p><pre><code class="js">Vue.prototype.$mount = function(el, hydrating) &#123;    ···    return mountComponent(this, el)&#125;function mountComponent() &#123;    ···    updateComponent = function () &#123;        vm._update(vm._render(), hydrating);    &#125;;&#125;</code></pre><p>我们先看看<code>vm._render()</code>方法是如何<strong>将render函数转化为Virtual DOM</strong>的。</p><p>回顾一下第一章节内容，文章介绍了<code>Vue</code>在代码引入时会定义很多属性和方法，其中有一个<code>renderMixin</code>过程，我们之前只提到了它会定义跟渲染有关的函数，实际上它只定义了两个重要的方法，<code>_render</code>函数就是其中一个。</p><pre><code class="js">// 引入Vue时，执行renderMixin方法，该方法定义了Vue原型上的几个方法，其中一个便是 _render函数renderMixin();//function renderMixin() &#123;    Vue.prototype._render = function() &#123;        var ref = vm.$options;        var render = ref.render;        ···        try &#123;            vnode = render.call(vm._renderProxy, vm.$createElement);        &#125; catch (e) &#123;            ···        &#125;        ···        return vnode    &#125;&#125;</code></pre><p>抛开其他代码，_render函数的核心是<code>render.call(vm._renderProxy, vm.$createElement)</code>部分，<code>vm._renderProxy</code>在数据代理分析过，本质上是为了做数据过滤检测，它也绑定了<code>render</code>函数执行时的<code>this</code>指向。<code>vm.$createElement</code>方法会作为<code>render</code>函数的参数传入。<strong>回忆一下，在手写<code>render</code>函数时，我们会利用<code>render</code>函数的第一个参数<code>createElement</code>进行渲染函数的编写，这里的<code>createElement</code>参数就是定义好的<code>$createElement</code>方法。</strong></p><pre><code class="js">new Vue(&#123;    el: &#39;#app&#39;,    render: function(createElement) &#123;        return createElement(&#39;div&#39;, &#123;&#125;, this.message)    &#125;,    data() &#123;        return &#123;            message: &#39;dom&#39;        &#125;    &#125;&#125;)</code></pre><p>初始化<code>_init</code>时，有一个<code>initRender</code>函数，它就是用来定义渲染函数方法的，其中就有<code>vm.$createElement</code>方法的定义，除了<code>$createElement</code>，<code>_c</code>方法的定义也类似。其中 <code>vm._c</code> 是<code>template</code>内部编译成<code>render</code>函数时调用的方法，<code>vm.$createElement</code>是手写<code>render</code>函数时调用的方法。<strong>两者的唯一区别仅仅是最后一个参数的不同。通过模板生成的<code>render</code>方法可以保证子节点都是<code>Vnode</code>，而手写的<code>render</code>需要一些检验和转换。</strong></p><pre><code class="js">function initRender(vm) &#123;    vm._c = function(a, b, c, d) &#123; return createElement(vm, a, b, c, d, false); &#125;    vm.$createElement = function (a, b, c, d) &#123; return createElement(vm, a, b, c, d, true); &#125;;&#125;</code></pre><p><code>createElement</code> 方法实际上是对 <code>_createElement</code> 方法的封装，在调用<code>_createElement</code>前，它会先对传入的参数进行处理，毕竟手写的<code>render</code>函数参数规格不统一。举一个简单的例子。</p><pre><code class="js">// 没有datanew Vue(&#123;    el: &#39;#app&#39;,    render: function(createElement) &#123;        return createElement(&#39;div&#39;, this.message)    &#125;,    data() &#123;        return &#123;            message: &#39;dom&#39;        &#125;    &#125;&#125;)// 有datanew Vue(&#123;    el: &#39;#app&#39;,    render: function(createElement) &#123;        return createElement(&#39;div&#39;, &#123;&#125;, this.message)    &#125;,    data() &#123;        return &#123;            message: &#39;dom&#39;        &#125;    &#125;&#125;)</code></pre><p>这里如果第二个参数是变量或者数组，则默认是没有传递<code>data</code>,因为<code>data</code>一般是对象形式存在。</p><pre><code class="js">function createElement (    context, // vm 实例    tag, // 标签    data, // 节点相关数据，属性    children, // 子节点    normalizationType,    alwaysNormalize // 区分内部编译生成的render还是手写render  ) &#123;    // 对传入参数做处理，如果没有data，则将第三个参数作为第四个参数使用，往上类推。    if (Array.isArray(data) || isPrimitive(data)) &#123;      normalizationType = children;      children = data;      data = undefined;    &#125;    // 根据是alwaysNormalize 区分是内部编译使用的，还是用户手写render使用的    if (isTrue(alwaysNormalize)) &#123;      normalizationType = ALWAYS_NORMALIZE;    &#125;    return _createElement(context, tag, data, children, normalizationType) // 真正生成Vnode的方法  &#125;</code></pre><h3 id="4-3-1-数据规范检测"><a href="#4-3-1-数据规范检测" class="headerlink" title="4.3.1 数据规范检测"></a>4.3.1 数据规范检测</h3><p><code>Vue</code>既然暴露给用户用<code>render</code>函数去手写渲染模板，就需要考虑用户操作带来的不确定性，因此<code>_createElement</code>在创建<code>Vnode</code>前会先数据的规范性进行检测，将不合法的数据类型错误提前暴露给用户。接下来将列举几个在实际场景中容易犯的错误，也方便我们理解源码中对这类错误的处理。</p><ol><li>用响应式对象做<code>data</code>属性</li></ol><pre><code class="js">new Vue(&#123;    el: &#39;#app&#39;,    render: function (createElement, context) &#123;       return createElement(&#39;div&#39;, this.observeData, this.show)    &#125;,    data() &#123;        return &#123;            show: &#39;dom&#39;,            observeData: &#123;                attr: &#123;                    id: &#39;test&#39;                &#125;            &#125;        &#125;    &#125;&#125;)</code></pre><ol start="2"><li>当特殊属性key的值为非字符串，非数字类型时</li></ol><pre><code class="js">new Vue(&#123;    el: &#39;#app&#39;,    render: function(createElement) &#123;        return createElement(&#39;div&#39;, &#123; key: this.lists &#125;, this.lists.map(l =&gt; &#123;           return createElement(&#39;span&#39;, l.name)        &#125;))    &#125;,    data() &#123;        return &#123;            lists: [&#123;              name: &#39;111&#39;            &#125;,            &#123;              name: &#39;222&#39;            &#125;          ],        &#125;    &#125;&#125;)</code></pre><p>这些规范都会在创建<code>Vnode</code>节点之前发现并报错，源代码如下：</p><pre><code class="js">function _createElement (context,tag,data,children,normalizationType) &#123;    // 1. 数据对象不能是定义在Vue data属性中的响应式数据。    if (isDef(data) &amp;&amp; isDef((data).__ob__)) &#123;      warn(        &quot;Avoid using observed data object as vnode data: &quot; + (JSON.stringify(data)) + &quot;\n&quot; +        &#39;Always create fresh vnode data objects in each render!&#39;,        context      );      return createEmptyVNode() // 返回注释节点    &#125;    if (isDef(data) &amp;&amp; isDef(data.is)) &#123;      tag = data.is;    &#125;    if (!tag) &#123;      // 防止动态组件 :is 属性设置为false时，需要做特殊处理      return createEmptyVNode()    &#125;    // 2. key值只能为string，number这些原始数据类型    if (isDef(data) &amp;&amp; isDef(data.key) &amp;&amp; !isPrimitive(data.key)    ) &#123;      &#123;        warn(          &#39;Avoid using non-primitive value as key, &#39; +          &#39;use string/number value instead.&#39;,          context        );      &#125;    &#125;    ···  &#125;</code></pre><p>这些规范性检测保证了后续<code>Virtual DOM tree</code>的完整生成。</p><h3 id="4-3-2-子节点children规范化"><a href="#4-3-2-子节点children规范化" class="headerlink" title="4.3.2 子节点children规范化"></a>4.3.2 子节点children规范化</h3><p><code>Virtual DOM tree</code>是由每个<code>Vnode</code>以树状形式拼成的虚拟<code>DOM</code>树，我们在转换真实节点时需要的就是这样一个完整的<code>Virtual DOM tree</code>，因此我们需要保证每一个子节点都是<code>Vnode</code>类型,这里分两种场景分析。</p><ul><li>模板编译<code>render</code>函数，理论上<code>template</code>模板通过编译生成的<code>render</code>函数都是<code>Vnode</code>类型，但是有一个例外，函数式组件返回的是一个数组(这个特殊例子，可以看函数式组件的文章分析),这个时候<code>Vue</code>的处理是将整个<code>children</code>拍平成一维数组。</li><li>用户定义<code>render</code>函数，这个时候又分为两种情况，一个是当<code>chidren</code>为文本节点时，这时候通过前面介绍的<code>createTextVNode</code> 创建一个文本节点的 <code>VNode</code>; 另一种相对复杂，当<code>children</code>中有<code>v-for</code>的时候会出现嵌套数组，这时候的处理逻辑是，遍历<code>children</code>，对每个节点进行判断，如果依旧是数组，则继续递归调用，直到类型为基础类型时，调用<code>createTextVnode</code>方法转化为<code>Vnode</code>。这样经过递归，<code>children</code>也变成了一个类型为<code>Vnode</code>的数组。</li></ul><pre><code class="js">function _createElement() &#123;    ···    if (normalizationType === ALWAYS_NORMALIZE) &#123;      // 用户定义render函数      children = normalizeChildren(children);    &#125; else if (normalizationType === SIMPLE_NORMALIZE) &#123;      // 模板编译生成的的render函数      children = simpleNormalizeChildren(children);    &#125;&#125;// 处理编译生成的render 函数function simpleNormalizeChildren (children) &#123;    for (var i = 0; i &lt; children.length; i++) &#123;        // 子节点为数组时，进行开平操作，压成一维数组。        if (Array.isArray(children[i])) &#123;        return Array.prototype.concat.apply([], children)        &#125;    &#125;    return children&#125;// 处理用户定义的render函数function normalizeChildren (children) &#123;    // 递归调用，直到子节点是基础类型，则调用创建文本节点Vnode    return isPrimitive(children)      ? [createTextVNode(children)]      : Array.isArray(children)        ? normalizeArrayChildren(children)        : undefined  &#125;// 判断是否基础类型function isPrimitive (value) &#123;    return (      typeof value === &#39;string&#39; ||      typeof value === &#39;number&#39; ||      typeof value === &#39;symbol&#39; ||      typeof value === &#39;boolean&#39;    )  &#125;</code></pre><h3 id="4-3-4-实际场景"><a href="#4-3-4-实际场景" class="headerlink" title="4.3.4 实际场景"></a>4.3.4 实际场景</h3><p>在数据检测和组件规范化后，接下来通过<code>new VNode()</code>便可以生成一棵完整的<code>VNode</code>树，注意在<code>_render</code>过程中会遇到子组件，这个时候会优先去做子组件的初始化，这部分放到组件环节专门分析。我们用一个实际的例子，结束<code>render</code>函数到<code>Virtual DOM</code>的分析。</p><ul><li><code>template</code>模板形式</li></ul><pre><code class="js">var vm = new Vue(&#123;  el: &#39;#app&#39;,  template: &#39;&lt;div&gt;&lt;span&gt;virtual dom&lt;/span&gt;&lt;/div&gt;&#39;&#125;)</code></pre><ul><li>模板编译生成<code>render</code>函数</li></ul><pre><code class="js">(function() &#123;  with(this)&#123;    return _c(&#39;div&#39;,[_c(&#39;span&#39;,[_v(&quot;virual dom&quot;)])])  &#125;&#125;)</code></pre><ul><li><code>Virtual DOM tree</code>的结果(省略版)</li></ul><pre><code class="js">&#123;  tag: &#39;div&#39;,  children: [&#123;    tag: &#39;span&#39;,    children: [&#123;      tag: undefined,      text: &#39;virtual dom&#39;    &#125;]  &#125;]&#125;</code></pre><h2 id="4-4-虚拟Vnode映射成真实DOM"><a href="#4-4-虚拟Vnode映射成真实DOM" class="headerlink" title="4.4 虚拟Vnode映射成真实DOM"></a>4.4 虚拟Vnode映射成真实DOM</h2><p>回到 <code>updateComponent</code>的最后一个过程,虚拟的<code>DOM</code>树在生成<code>virtual dom</code>后，会调用<code>Vue</code>原型上<code>_update</code>方法，将虚拟<code>DOM</code>映射成为真实的<code>DOM</code>。从源码上可以知道，<code>_update</code>的调用时机有两个，一个是发生在初次渲染阶段，另一个发生数据更新阶段。</p><pre><code class="js">updateComponent = function () &#123;    // render生成虚拟DOM，update渲染真实DOM    vm._update(vm._render(), hydrating);&#125;;</code></pre><p><code>vm._update</code>方法的定义在<code>lifecycleMixin</code>中。</p><pre><code class="js">lifecycleMixin()function lifecycleMixin() &#123;    Vue.prototype._update = function (vnode, hydrating) &#123;        var vm = this;        var prevEl = vm.$el;        var prevVnode = vm._vnode; // prevVnode为旧vnode节点        // 通过是否有旧节点判断是初次渲染还是数据更新        if (!prevVnode) &#123;            // 初次渲染            vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false)        &#125; else &#123;            // 数据更新            vm.$el = vm.__patch__(prevVnode, vnode);        &#125;&#125;</code></pre><p><code>_update</code>的核心是<code>__patch__</code>方法，如果是服务端渲染，由于没有<code>DOM</code>，<code>_patch</code>方法是一个空函数，在有<code>DOM</code>对象的浏览器环境下，<code>__patch__</code>是<code>patch</code>函数的引用。</p><pre><code>// 浏览器端才有DOM，服务端没有dom，所以patch为一个空函数  Vue.prototype.__patch__ = inBrowser ? patch : noop;</code></pre><p>而<code>patch</code>方法又是<code>createPatchFunction</code>方法的返回值，<code>createPatchFunction</code>方法传递一个对象作为参数，对象拥有两个属性，<code>nodeOps</code>和<code>modules</code>，<code>nodeOps</code>封装了一系列操作原生<code>DOM</code>对象的方法。而<code>modules</code>定义了模块的钩子函数。</p><pre><code class="js"> var patch = createPatchFunction(&#123; nodeOps: nodeOps, modules: modules &#125;);// 将操作dom对象的方法合集做冻结操作 var nodeOps = /*#__PURE__*/Object.freeze(&#123;    createElement: createElement$1,    createElementNS: createElementNS,    createTextNode: createTextNode,    createComment: createComment,    insertBefore: insertBefore,    removeChild: removeChild,    appendChild: appendChild,    parentNode: parentNode,    nextSibling: nextSibling,    tagName: tagName,    setTextContent: setTextContent,    setStyleScope: setStyleScope  &#125;);// 定义了模块的钩子函数  var platformModules = [    attrs,    klass,    events,    domProps,    style,    transition  ];var modules = platformModules.concat(baseModules);</code></pre><p>真正的<code>createPatchFunction</code>函数有一千多行代码，这里就不方便列举出来了，它的内部首先定义了一系列辅助的方法，而核心是通过调用<code>createElm</code>方法进行<code>dom</code>操作，创建节点，插入子节点，递归创建一个完整的<code>DOM</code>树并插入到<code>Body</code>中。并且在产生真实阶段阶段，会有<code>diff</code>算法来判断前后<code>Vnode</code>的差异，以求最小化改变真实阶段。后面会有一个章节的内容去讲解<code>diff</code>算法。<code>createPatchFunction</code>的过程只需要先记住一些结论，函数内部会调用封装好的<code>DOM api</code>，根据<code>Virtual DOM</code>的结果去生成真实的节点。其中如果遇到组件<code>Vnode</code>时，会递归调用子组件的挂载过程，这个过程我们也会放到后面章节去分析。</p><h2 id="4-5-小结"><a href="#4-5-小结" class="headerlink" title="4.5 小结"></a>4.5 小结</h2><p>这一节分析了<code>mountComponent</code>的两个核心方法，<code>render</code>和<code>update</code>,在分析前重点介绍了存在于<code>JS</code>操作和<code>DOM</code>渲染的桥梁：<code>Virtual DOM</code>。<code>JS</code>对<code>DOM</code>节点的批量操作会先直接反应到<code>Virtual DOM</code>这个描述对象上,最终的结果才会直接作用到真实节点上。可以说，<code>Virtual DOM</code>很大程度提高了渲染的性能。文章重点介绍了<code>render</code>函数转换成<code>Virtual DOM</code>的过程，并大致描述了<code>_update</code>函数的实现思路。其实这两个过程都牵扯到组件，所以这一节对很多环节都无法深入分析，下一节开始会进入组件的专题。我相信分析完组件后，读者会对整个渲染过程会有更深刻的理解和思考。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Vue </category>
          
          <category> vue2.x源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Step.3 实例挂载流程和模板编译</title>
      <link href="/computer-science/vueyuanma/dosc/3%E5%AE%9E%E4%BE%8B%E6%8C%82%E8%BD%BD%E6%B5%81%E7%A8%8B%E5%92%8C%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91/"/>
      <url>/computer-science/vueyuanma/dosc/3%E5%AE%9E%E4%BE%8B%E6%8C%82%E8%BD%BD%E6%B5%81%E7%A8%8B%E5%92%8C%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前面几节我们从<code>new Vue</code>创建实例开始，介绍了创建实例时执行初始化流程中的重要两步，配置选项的资源合并,以及响应式系统的核心思想，数据代理。在合并章节，我们对<code>Vue</code>丰富的选项合并策略有了基本的认知，在数据代理章节我们又对代理拦截的意义和使用场景有了深入的认识。按照<code>Vue</code>源码的设计思路，初始化过程还会进行很多操作，例如组件之间创建关联，初始化事件中心，初始化数据并建立响应式系统等，并最终将模板和数据渲染成为<code>dom</code>节点。如果直接按流程的先后顺序分析每个步骤的实现细节，会有很多概念很难理解。因此在这一章节，我们先重点分析一个概念，<strong>实例的挂载渲染流程。</strong></p></blockquote><h2 id="3-1-Runtime-Only-VS-Runtime-Compiler"><a href="#3-1-Runtime-Only-VS-Runtime-Compiler" class="headerlink" title="3.1 Runtime Only VS Runtime + Compiler"></a>3.1 Runtime Only VS Runtime + Compiler</h2><p>在正文开始之前，我们先了解一下<code>vue</code>基于源码构建的两个版本，一个是<code>runtime only</code>(一个只包含运行时的版本)，另一个是<code>runtime + compiler</code>(一个同时包含编译器和运行时的版本)。而两个版本的区别仅在于后者包含了一个编译器。</p><p>什么是编译器，百度百科这样解释道：</p><blockquote><p>简单讲，编译器就是将“一种语言（通常为高级语言）”翻译为“另一种语言（通常为低级语言）”的程序。一个现代编译器的主要工作流程：源代码 (source code) → 预处理器 (preprocessor) → 编译器 (compiler) → 目标代码 (object code) → 链接器 (Linker) → 可执行程序 (executables)。</p></blockquote><p>通俗点讲，编译器是一个提供了将<strong>源代码</strong>转化为<strong>目标代码</strong>的工具。从<code>Vue</code>的角度出发，内置的编译器实现了将<code>template</code>模板转换编译为可执行<code>javascript</code>脚本的功能。</p><h3 id="3-1-1-Runtime-Compiler"><a href="#3-1-1-Runtime-Compiler" class="headerlink" title="3.1.1 Runtime + Compiler"></a>3.1.1 Runtime + Compiler</h3><p>一个完整的<code>Vue</code>版本是包含编译器的，我们可以使用<code>template</code>进行模板编写。编译器会自动将模板字符串编译成渲染函数的代码,源码中就是<code>render</code>函数。<br>如果你需要在客户端编译模板 (比如传入一个字符串给 <code>template</code> 选项，或挂载到一个元素上并以其 <code>DOM</code> 内部的 HTML 作为模板)，就需要一个包含编译器的版本。</p><pre><code class="js">// 需要编译器的版本new Vue(&#123;  template: &#39;&lt;div&gt;&#123;&#123; hi &#125;&#125;&lt;/div&gt;&#39;&#125;)</code></pre><h3 id="3-1-2-Runtime-Only"><a href="#3-1-2-Runtime-Only" class="headerlink" title="3.1.2 Runtime Only"></a>3.1.2 Runtime Only</h3><p>只包含运行时的代码拥有创建<code>Vue</code>实例、渲染并处理<code>Virtual DOM</code>等功能，基本上就是除去编译器外的完整代码。<code>Runtime Only</code>的适用场景有两种：<br>1.我们在选项中通过手写<code>render</code>函数去定义渲染过程，这个时候并不需要包含编译器的版本便可完整执行。</p><pre><code class="js">// 不需要编译器new Vue(&#123;  render (h) &#123;    return h(&#39;div&#39;, this.hi)  &#125;&#125;)</code></pre><p>2.借助<code>vue-loader</code>这样的编译工具进行编译，当我们利用<code>webpack</code>进行<code>Vue</code>的工程化开发时，常常会利用<code>vue-loader</code>对<code>.vue</code>进行编译，尽管我们也是利用<code>template</code>模板标签去书写代码，但是此时的<code>Vue</code>已经不需要利用编译器去负责模板的编译工作了，这个过程交给了插件去实现。</p><p>很明显，编译过程对性能会造成一定的损耗，并且由于加入了编译的流程代码，<code>Vue</code>代码的总体积也更加庞大(运行时版本相比完整版体积要小大约 30%)。因此在实际开发中，我们需要借助像<code>webpack</code>的<code>vue-loader</code>这类工具进行编译，将<code>Vue</code>对模板的编译阶段合并到<code>webpack</code>的构建流程中，这样不仅减少了生产环境代码的体积，也大大提高了运行时的性能，一举两得。</p><h3 id="3-1-3-vue渲染方式：render和template的区别"><a href="#3-1-3-vue渲染方式：render和template的区别" class="headerlink" title="3.1.3 vue渲染方式：render和template的区别"></a>3.1.3 vue渲染方式：render和template的区别</h3><p>  template—-html的方式做渲染<br>  render—-js的方式做渲染</p><p>  render（提供）是一种编译方式<br>  render里有一个函数h，这个h的作用是将单文件组件进行虚拟DOM的创建，然后再通过render进行解析。<br>  h就是createElement()方法：createElement(标签名称,属性配置,children)</p><p>  template也是一种编译方式，但是template最终还是要通过render的方式再次进行编译。</p><p>1、render渲染方式可以让我们将js发挥到极致，因为render的方式其实是通过createElement()进行虚拟DOM的创建。逻辑性比较强，适合复杂的组件封装。<br>2、template是类似于html一样的模板来进行组件的封装。<br>3、render的性能比template的性能好很多<br>4、render函数优先级大于template</p><h3 id="3-1-4-render渲染在components-策略中的使用"><a href="#3-1-4-render渲染在components-策略中的使用" class="headerlink" title="3.1.4 render渲染在components 策略中的使用"></a>3.1.4 render渲染在components 策略中的使用</h3><pre><code class="javascript">1.Vue如何引入远程JS/css文件 export default &#123;  components: &#123;    &quot;remote-css&quot;: &#123;      render(createElement) &#123;        return createElement(&quot;link&quot;, &#123;          attrs: &#123; rel: &quot;stylesheet&quot;, href: this.href &#125;,        &#125;);      &#125;,      props: &#123;        href: &#123; type: String, required: true &#125;,      &#125;,    &#125;,    &quot;remote-js&quot;: &#123;      render(createElement) &#123;        return createElement(&quot;script&quot;, &#123;          attrs: &#123; type: &quot;text/javascript&quot;, src: this.src &#125;,        &#125;);      &#125;,      props: &#123;        src: &#123; type: String, required: true &#125;,      &#125;    &#125;  &#125;&#125;直接在页面中定义&lt;remote-css href=&quot;https://at.alicdn.com/t/font_2307826_i7ewj7yiv2k.css&quot;&gt;&lt;/remote-css&gt;&lt;remote-js src=&quot;https://at.alicdn.com/t/font_2307682_is3un805urb.js&quot;&gt;&lt;/remote-js&gt;</code></pre><h2 id="3-2-实例挂载的基本思路"><a href="#3-2-实例挂载的基本思路" class="headerlink" title="3.2 实例挂载的基本思路"></a>3.2 实例挂载的基本思路</h2><p>有了上面的基础，我们回头看初始化<code>_init</code>的代码，在代码中我们观察到<code>initProxy</code>后有一系列的函数调用，这些函数包括了创建组件关联，初始化事件处理，定义渲染函数，构建数据响应式系统等，最后还有一段代码,在<code>el</code>存在的情况下，实例会调用<code>$mount</code>进行实例挂载。</p><pre><code class="js">Vue.prototype._init = function (options) &#123;  ···  // 选项合并  vm.$options = mergeOptions(    resolveConstructorOptions(vm.constructor),    options || &#123;&#125;,    vm  );  // 数据代理  initProxy(vm);  vm._self = vm;  initLifecycle(vm);  // 初始化事件处理  initEvents(vm);  // 定义渲染函数  initRender(vm);  // 构建响应式系统  initState(vm);  // 等等  ···  if (vm.$options.el) &#123;    vm.$mount(vm.$options.el);  &#125;&#125;</code></pre><p>以手写<code>template</code>模板为例，理清楚什么是挂载。<strong>我们会在选项中传递<code>template</code>为属性的模板字符串，如<code>&lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;</code>，最终这个模板字符串通过中间过程将其转成真实的<code>DOM</code>节点，并挂载到选项中<code>el</code>代表的根节点上完成视图渲染。这个中间过程就是接下来要分析的挂载流程。</strong></p><p><code>Vue</code>挂载的流程是比较复杂的，接下来我将通过<strong>流程图，代码分析</strong>两种方式为大家展示挂载的真实过程。</p><h3 id="3-2-1-流程图"><a href="#3-2-1-流程图" class="headerlink" title="3.2.1 流程图"></a>3.2.1 流程图</h3><p><img data-src="/images/img/3.1.png"><br>如果用一句话概括挂载的过程，可以描述为<strong>确认挂载节点,编译模板为<code>render</code>函数，渲染函数转换<code>Virtual DOM</code>,创建真实节点。</strong></p><h3 id="3-2-2-代码分析"><a href="#3-2-2-代码分析" class="headerlink" title="3.2.2 代码分析"></a>3.2.2 代码分析</h3><p>接下来我们从代码的角度去剖析挂载的流程。挂载的代码较多，下面只提取骨架相关的部分代码。</p><pre><code class="js">// 内部真正实现挂载的方法Vue.prototype.$mount = function (el, hydrating) &#123;  el = el &amp;&amp; inBrowser ? query(el) : undefined;  // 调用mountComponent方法挂载  return mountComponent(this, el, hydrating)&#125;;// 缓存了原型上的 $mount 方法var mount = Vue.prototype.$mount;// 重新定义$mount,为包含编译器和不包含编译器的版本提供不同封装，最终调用的是缓存原型上的$mount方法Vue.prototype.$mount = function (el, hydrating) &#123;  // 获取挂载元素  el = el &amp;&amp; query(el);  // 挂载元素不能为跟节点  if (el === document.body || el === document.documentElement) &#123;    warn(      &quot;Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead.&quot;    );    return this  &#125;  var options = this.$options;  // 需要编译 or 不需要编译  // render选项不存在，代表是template模板的形式，此时需要进行模板的编译过程  if (!options.render) &#123;    ···    // 使用内部编译器编译模板  &#125;  // 无论是template模板还是手写render函数最终调用缓存的$mount方法  return mount.call(this, el, hydrating)&#125;// mountComponent方法思路function mountComponent(vm, el, hydrating) &#123;  // 定义updateComponent方法，在watch回调时调用。  updateComponent = function () &#123;    // render函数渲染成虚拟DOM， 虚拟DOM渲染成真实的DOM    vm._update(vm._render(), hydrating);  &#125;;  // 实例化渲染watcher  new Watcher(vm, updateComponent, noop, &#123;&#125;)&#125;</code></pre><p>我们用语言描述挂载流程的基本思路。</p><ul><li>确定挂载的<code>DOM</code>元素,这个<code>DOM</code>需要保证不能为<code>html，body</code>这类跟节点。</li><li>我们知道渲染有两种方式，一种是通过<code>template</code>模板字符串，另一种是手写<code>render</code>函数，前面提到<code>template</code>模板需要运行时进行编译，而后一个可以直接用<code>render</code>选项作为渲染函数。因此挂载阶段会有两条分支，<code>template</code>模板会先经过模板的解析，最终编译成<code>render</code>渲染函数参与实例挂载，而手写<code>render</code>函数可以绕过编译阶段，直接调用挂载的<code>$mount</code>方法。</li><li>针对<code>template</code>而言，它会利用<code>Vue</code>内部的编译器进行模板的编译，字符串模板会转换为抽象的语法树，即<code>AST</code>树，并最终转化为一个类似<code>function()&#123;with()&#123;&#125;&#125;</code>的渲染函数，这是我们后面讨论的重点。</li><li>无论是<code>template</code>模板还是手写<code>render</code>函数，最终都将进入<code>mountComponent</code>过程,这个阶段会实例化一个渲染<code>watcher</code>,具体<code>watcher</code>的内容，另外放章节讨论。我们先知道一个结论，渲染<code>watcher</code>的回调函数有两个执行时机，一个是在初始化时执行，另一个是当<code>vm</code>实例检测到数据发生变化时会再次执行回调函数。</li><li>回调函数是执行<code>updateComponent</code>的过程，这个方法有两个阶段，一个是<code>vm._render</code>,另一个是<code>vm._update</code>。 <code>vm._render</code>会执行前面生成的<code>render</code>渲染函数，并生成一个<code>Virtual Dom tree</code>,而<code>vm._update</code>会将这个<code>Virtual Dom tree</code>转化为真实的<code>DOM</code>节点。</li></ul><h2 id="3-3-模板编译"><a href="#3-3-模板编译" class="headerlink" title="3.3 模板编译"></a>3.3 模板编译</h2><p>通过文章前半段的学习，我们对<code>Vue</code>的挂载流程有了一个初略的认识。这里有两个大的流程需要我们详细去理解，一个是<code>template</code>模板的编译，另一个是<code>updateComponent</code>的实现细节。<code>updateComponent</code>的过程，我们放到下一章节重点分析，而这一节剩余的内容我们将会围绕模板编译的设计思路展开。</p><p>(编译器的实现细节是异常复杂的，要在短篇幅内将整个编译的过程掌握是不切实际的，并且从大方向上也不需要完全理清编译的流程。因此针对模板，文章分析只是浅尝即止，更多的细节读者可以自行分析)</p><h2 id="3-3-1-template的三种写法"><a href="#3-3-1-template的三种写法" class="headerlink" title="3.3.1 template的三种写法"></a>3.3.1 template的三种写法</h2><p><code>template</code>模板的编写有三种方式，分别是：</p><ul><li>字符串模板</li></ul><pre><code class="js">var vm = new Vue(&#123;  el: &#39;#app&#39;,  template: &#39;&lt;div&gt;模板字符串&lt;/div&gt;&#39;&#125;)</code></pre><ul><li>选择符匹配元素的 <code>innerHTML</code>模板</li></ul><pre><code class="js">&lt;div id=&quot;app&quot;&gt;  &lt;div&gt;test1&lt;/div&gt;  &lt;script type=&quot;x-template&quot; id=&quot;test&quot;&gt;    &lt;p&gt;test&lt;/p&gt;  &lt;/script&gt;&lt;/div&gt;var vm = new Vue(&#123;  el: &#39;#app&#39;,  template: &#39;#test&#39;&#125;)</code></pre><ul><li><code>dom</code>元素匹配元素的<code>innerHTML</code>模板</li></ul><pre><code class="js">&lt;div id=&quot;app&quot;&gt;  &lt;div&gt;test1&lt;/div&gt;  &lt;span id=&quot;test&quot;&gt;&lt;div class=&quot;test2&quot;&gt;test2&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;var vm = new Vue(&#123;  el: &#39;#app&#39;,  template: document.querySelector(&#39;#test&#39;)&#125;)</code></pre><p>模板编译的前提需要对<code>template</code>模板字符串的合法性进行检测，三种写法对应代码的三个不同分支。</p><pre><code class="js">Vue.prototype.$mount = function () &#123;  ···  if(!options.render) &#123;    var template = options.template;    if (template) &#123;      // 针对字符串模板和选择符匹配模板      if (typeof template === &#39;string&#39;) &#123;        // 选择符匹配模板，以&#39;#&#39;为前缀的选择器        if (template.charAt(0) === &#39;#&#39;) &#123;          // 获取匹配元素的innerHTML          template = idToTemplate(template);          /* istanbul ignore if */          if (!template) &#123;            warn(              (&quot;Template element not found or is empty: &quot; + (options.template)),              this            );          &#125;        &#125;      // 针对dom元素匹配      &#125; else if (template.nodeType) &#123;        // 获取匹配元素的innerHTML        template = template.innerHTML;      &#125; else &#123;        // 其他类型则判定为非法传入        &#123;          warn(&#39;invalid template option:&#39; + template, this);        &#125;        return this      &#125;    &#125; else if (el) &#123;      // 如果没有传入template模板，则默认以el元素所属的根节点作为基础模板      template = getOuterHTML(el);    &#125;  &#125;&#125;// 判断el元素是否存在function query (el) &#123;    if (typeof el === &#39;string&#39;) &#123;      var selected = document.querySelector(el);      if (!selected) &#123;        warn(          &#39;Cannot find element: &#39; + el        );        return document.createElement(&#39;div&#39;)      &#125;      return selected    &#125; else &#123;      return el    &#125;  &#125;var idToTemplate = cached(function (id) &#123;  var el = query(id);  return el &amp;&amp; el.innerHTML&#125;);</code></pre><p><strong>注意：其中X-Template模板的方式一般用于模板特别大的 demo 或极小型的应用，官方不建议在其他情形下使用，因为这会将模板和组件的其它定义分离开。</strong></p><h2 id="3-3-2-编译流程图解"><a href="#3-3-2-编译流程图解" class="headerlink" title="3.3.2 编译流程图解"></a>3.3.2 编译流程图解</h2><p><code>vue</code>源码中编译的设计思路是比较绕，涉及的函数处理逻辑比较多，实现流程中巧妙的运用了偏函数的技巧将配置项处理和编译核心逻辑抽取出来，为了理解这个设计思路，我画了一个逻辑图帮助理解。</p><p><img data-src="/images/img/3.2.png"></p><h2 id="3-3-3-逻辑解析"><a href="#3-3-3-逻辑解析" class="headerlink" title="3.3.3 逻辑解析"></a>3.3.3 逻辑解析</h2><p>即便有流程图，编译逻辑理解起来依然比较晦涩，接下来，结合代码分析每个环节的执行过程。</p><pre><code class="js">Vue.prototype.$mount = function () &#123;  ···  if(!options.render) &#123;    var template = options.template;    if (template) &#123;      var ref = compileToFunctions(template, &#123;          outputSourceRange: &quot;development&quot; !== &#39;production&#39;,          shouldDecodeNewlines: shouldDecodeNewlines,          shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,          delimiters: options.delimiters,          comments: options.comments        &#125;, this);        var render = ref.render;    &#125;    ...  &#125;&#125;</code></pre><p><code>compileToFunctions</code>有三个参数，一个是<code>template</code>模板，另一个是编译的配置信息，并且这个方法是对外暴露的编译方法，用户可以自定义配置信息进行模板的编译。最后一个参数是<code>Vue</code>实例。</p><pre><code class="js">// 将compileToFunction方法暴露给Vue作为静态方法存在Vue.compile = compileToFunctions;</code></pre><p>在<code>Vue</code>的官方文档中，<code>Vue.compile</code>只允许传递一个<code>template</code>模板参数，这是否意味着用户无法决定某些编译的行为？显然不是的，我们看回代码，有两个选项配置可以提供给用户，用户只需要在实例化<code>Vue</code>时传递选项改变配置，他们分别是：</p><p>1.<code>delimiters</code>： 该选项可以改变纯文本插入分隔符，当不传递值时，<code>Vue</code>默认的分隔符为 <code>&#123;&#123;&#125;&#125;</code>。如果我们想使用其他模板，可以通过<code>delimiters</code>修改。</p><p>2.<code>comments</code> ： 当设为 <code>true</code> 时，将会保留且渲染模板中的 <code>HTML</code>注释。默认行为是舍弃它们。</p><p><strong>注意，由于这两个选项是在完整版的编译流程读取的配置，所以在运行时版本配置这两个选项是无效的</strong></p><p>接着我们一步步寻找<code>compileToFunctions</code>的根源。</p><p>首先我们需要有一个认知，<strong>不同平台对<code>Vue</code>的编译过程是不一样的，也就是说基础的编译方法会随着平台的不同有区别，编译阶段的配置选项也因为平台的不同呈现差异。但是设计者又不希望在相同平台下编译不同模板时，每次都要传入相同的配置选项。这才有了源码中较为复杂的编译实现。</strong></p><pre><code class="js">var createCompiler = createCompilerCreator(function baseCompile (template,options) &#123;  //把模板解析成抽象的语法树  var ast = parse(template.trim(), options);  // 配置中有代码优化选项则会对Ast语法树进行优化  if (options.optimize !== false) &#123;    optimize(ast, options);  &#125;  var code = generate(ast, options);  return &#123;    ast: ast,    render: code.render,    staticRenderFns: code.staticRenderFns  &#125;&#125;);var ref$1 = createCompiler(baseOptions);var compile = ref$1.compile;var compileToFunctions = ref$1.compileToFunctions;</code></pre><p>这部分代码是在<code>Vue</code>引入阶段定义的，<code>createCompilerCreator</code>在传递了一个<code>baseCompile</code>函数作为参数后，返回了一个编译器的生成器，也就是<code>createCompiler</code>,有了这个生成器，当将编译配置选项<code>baseOptions</code>传入后,这个编译器生成器便<strong>生成了一个指定环境指定配置下的编译器</strong>，而其中编译执行函数就是返回对象的<code>compileToFunctions</code>。</p><p>这里的<code>baseCompile</code>是真正执行编译功能的地方，也就是前面说到的特定平台的编译方法。它在源码初始化时就已经作为参数的形式保存在内存变量中。我们先看看<code>baseCompile</code>的大致流程。</p><p><code>baseCompile</code>函数的参数有两个，一个是后续传入的<code>template</code>模板,另一个是编译需要的配置参数。函数实现的功能如下几个：</p><ul><li>1.把模板解析成抽象的语法树，简称<code>AST</code>，代码中对应<code>parse</code>部分。</li><li>2.可选：优化<code>AST</code>语法树，执行<code>optimize</code>方法。</li><li>3.根据不同平台将<code>AST</code>语法树转换成渲染函数，对应的<code>generate</code>函数</li></ul><p>接下来具体看看<code>createCompilerCreator</code>的实现：</p><pre><code class="js">function createCompilerCreator (baseCompile) &#123;    return function createCompiler (baseOptions) &#123;      // 内部定义compile方法      function compile (template, options) &#123;        ···      &#125;      return &#123;        compile: compile,        compileToFunctions: createCompileToFunctionFn(compile)      &#125;    &#125;  &#125; </code></pre><p><code>createCompilerCreator</code>函数只有一个作用，利用<strong>偏函数</strong>的思想将<code>baseCompile</code>这一基础的编译方法缓存，并返回一个编程器生成器，当执行<code>var ref$1 = createCompiler(baseOptions);</code>时，<code>createCompiler</code>会将内部定义的<code>compile</code>和<code>compileToFunctions</code>返回。</p><p>我们继续关注<code>compileToFunctions</code>的由来，它是<code>createCompileToFunctionFn</code>函数以<code>compile</code>为参数返回的方法，接着看<code>createCompileToFunctionFn</code>的实现逻辑。</p><pre><code class="js"> function createCompileToFunctionFn (compile) &#123;    var cache = Object.create(null);    return function compileToFunctions (template,options,vm) &#123;      options = extend(&#123;&#125;, options);      ···      // 缓存的作用：避免重复编译同个模板造成性能的浪费      if (cache[key]) &#123;        return cache[key]      &#125;      // 执行编译方法      var compiled = compile(template, options);      ···      // turn code into functions      var res = &#123;&#125;;      var fnGenErrors = [];      // 编译出的函数体字符串作为参数传递给createFunction,返回最终的render函数      res.render = createFunction(compiled.render, fnGenErrors);      res.staticRenderFns = compiled.staticRenderFns.map(function (code) &#123;        return createFunction(code, fnGenErrors)      &#125;);      ···      return (cache[key] = res)    &#125;  &#125;</code></pre><p><code>createCompileToFunctionFn</code>利用了闭包的概念，将编译过的模板进行缓存,<code>cache</code>会将之前编译过的结果保留下来，利用缓存可以避免重复编译引起的浪费性能。<code>createCompileToFunctionFn</code>最终会将<code>compileToFunctions</code>方法返回。</p><p>接下来，我们分析一下<code>compileToFunctions</code>的实现逻辑。在判断不使用缓存的编译结果后，<code>compileToFunctions</code>会执行<code>compile</code>方法，这个方法是前面分析<code>createCompiler</code>时，返回的内部<code>compile</code>方法，所以我们需要先看看<code>compile</code>的实现。</p><pre><code class="js">function createCompiler (baseOptions) &#123;  function compile (template, options) &#123;        var finalOptions = Object.create(baseOptions);        var errors = [];        var tips = [];        var warn = function (msg, range, tip) &#123;          (tip ? tips : errors).push(msg);        &#125;;        // 选项合并        if (options) &#123;          ···          // 这里会将用户传递的配置和系统自带编译配置进行合并        &#125;        finalOptions.warn = warn;        // 将剔除空格后的模板以及合并选项后的配置作为参数传递给baseCompile方法        var compiled = baseCompile(template.trim(), finalOptions);        &#123;          detectErrors(compiled.ast, warn);        &#125;        compiled.errors = errors;        compiled.tips = tips;        return compiled      &#125;      return &#123;        compile: compile,        compileToFunctions: createCompileToFunctionFn(compile)      &#125;&#125;</code></pre><p>我们看到<code>compile</code>真正执行的方法，是一开始在创建编译器生成器时，传入的基础编译方法<code>baseCompile</code>，<code>baseCompile</code>真正执行的时候，会将用户传递的编译配置和系统自带的编译配置选项合并，这也是开头提到编译器设计思想的精髓。</p><p>执行完<code>compile</code>会返回一个对象,<code>ast</code>顾名思义是模板解析成的抽象语法树，<code>render</code>是最终生成的<code>with</code>语句,<code>staticRenderFns</code>是以数组形式存在的静态<code>render</code>。</p><pre><code class="js">&#123;  ast: ast,  render: code.render,  staticRenderFns: code.staticRenderFns&#125;</code></pre><p>而<code>createCompileToFunctionFn</code>最终会返回另外两个包装过的属性<code>render, staticRenderFns</code>，他们的核心是<strong>将 <code>with</code>语句封装成执行函数。</strong></p><pre><code class="js">// 编译出的函数体字符串作为参数传递给createFunction,返回最终的render函数  res.render = createFunction(compiled.render, fnGenErrors);  res.staticRenderFns = compiled.staticRenderFns.map(function (code) &#123;    return createFunction(code, fnGenErrors)  &#125;);  function createFunction (code, errors) &#123;    try &#123;      return new Function(code)    &#125; catch (err) &#123;      errors.push(&#123; err: err, code: code &#125;);      return noop    &#125;  &#125;</code></pre><p>至此，<code>Vue</code>中关于编译器的设计思路也基本梳理清楚了，一开始看代码的时候，总觉得编译逻辑的设计特别的绕，分析完代码后发现，这正是作者思路巧妙的地方。<code>Vue</code>在不同平台上有不同的编译过程，而每个编译过程的<code>baseOptions</code>选项会有所不同，同时也提供了一些选项供用户去配置，整个设计思想深刻的应用了偏函数的设计思想，而偏函数又是闭包的应用。作者利用偏函数将不同平台的编译方式进行缓存，同时剥离出编译相关的选项合并，这些方式都是值得我们日常学习的。</p><p>编译的核心是<code>parse,generate</code>过程，这两个过程笔者并没有分析，原因是抽象语法树的解析分支较多，需要结合实际的代码场景才更好理解。这两部分的代码会在后面介绍到具体逻辑功能章节时再次提及。</p><h2 id="3-4-小结"><a href="#3-4-小结" class="headerlink" title="3.4 小结"></a>3.4 小结</h2><p>这一节的内容有两大块，首先详细的介绍了实例在挂载阶段的完整流程，当我们传入选项进行实例化时，最终的目的是将选项渲染成页面真实的可视节点。这个选项有两种形式，一个是以<code>template</code>模板字符串传入，另一个是手写<code>render</code>函数形式传入，不论哪种，最终会以<code>render</code>函数的形式参与挂载，<code>render</code>是一个用函数封装好的<code>with</code>语句。渲染真实节点前需要将<code>render</code>函数解析成虚拟<code>DOM</code>,虚拟<code>DOM</code>是<code>js</code>和真实<code>DOM</code>之间的桥梁。最终的<code>_update</code>过程让将虚拟<code>DOM</code>渲染成真实节点。第二个大块主要介绍了作者在编译器设计时巧妙的实现思路。过程大量运用了偏函数的概念，将编译过程进行缓存并且将选项合并从编译过程中剥离。这些设计理念、思想都是值得我们开发者学习和借鉴的。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Vue </category>
          
          <category> vue2.x源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Step.2 基础的数据代理检测</title>
      <link href="/computer-science/vueyuanma/dosc/2%E5%9F%BA%E7%A1%80%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86%E6%A3%80%E6%B5%8B/"/>
      <url>/computer-science/vueyuanma/dosc/2%E5%9F%BA%E7%A1%80%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>简单回顾一下这个系列的前两节，前两节花了大量的篇幅介绍了<code>Vue</code>的选项合并，选项合并是<code>Vue</code>实例初始化的开始，<code>Vue</code>为开发者提供了丰富的选项配置，而每个选项都严格规定了合并的策略。然而这只是初始化中的第一步，这一节我们将对另一个重点的概念深入的分析，他就是<strong>数据代理</strong>，我们知道<code>Vue</code>大量利用了代理的思想，而除了响应式系统外，还有哪些场景也需要进行数据代理呢？这是我们这节分析的重点。</p></blockquote><h2 id="2-1-数据代理的含义"><a href="#2-1-数据代理的含义" class="headerlink" title="2.1 数据代理的含义"></a>2.1 数据代理的含义</h2><p>数据代理的另一个说法是数据劫持，当我们在访问或者修改对象的某个属性时，数据劫持可以拦截这个行为并进行额外的操作或者修改返回的结果。而我们知道<code>Vue</code>响应式系统的核心就是数据代理，代理使得数据在访问时进行依赖收集，在修改更新时对依赖进行更新，这是响应式系统的核心思路。而这一切离不开<code>Vue</code>对数据做了拦截代理。然而响应式并不是本节讨论的重点，这一节我们将看看数据代理在其他场景下的应用。在分析之前，我们需要掌握两种实现数据代理的方法：<br><code>Object.defineProperty</code> 和 <code>Proxy</code>。</p><h3 id="2-1-1-Object-defineProperty"><a href="#2-1-1-Object-defineProperty" class="headerlink" title="2.1.1 Object.defineProperty"></a>2.1.1 Object.defineProperty</h3><blockquote><p>官方定义：<code>Object.defineProperty()</code>方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。</p></blockquote><p>基本用法： </p><pre><code class="js">Object.defineProperty(obj, prop, descriptor)</code></pre><p><code>Object.defineProperty()</code>可以用来精确添加或修改对象的属性，只需要在<code>descriptor</code>对象中将属性特性描述清楚，<code>descriptor</code>的属性描述符有两种形式，一种是数据描述符，另一种是存取描述符，我们分别看看各自的特点。</p><ol><li>数据描述符，它拥有四个属性配置</li></ol><ul><li><code>configurable</code>：数据是否可删除，可配置</li><li><code>enumerable</code>：属性是否可枚举</li><li><code>value</code>：属性值,默认为<code>undefined</code></li><li><code>writable</code>：属性是否可读写</li></ul><ol start="2"><li>存取描述符，它同样拥有四个属性选项</li></ol><ul><li><code>configurable</code>：数据是否可删除，可配置</li><li><code>enumerable</code>：属性是否可枚举</li><li><code>get</code>:一个给属性提供 <code>getter</code> 的方法，如果没有 <code>getter</code> 则为 <code>undefined</code>。</li><li><code>set</code>:一个给属性提供 <code>setter</code> 的方法，如果没有 <code>setter</code> 则为 <code>undefined</code>。</li></ul><p><strong>需要注意的是: 数据描述符的<code>value，writable</code> 和 存取描述符中的<code>get, set</code>属性不能同时存在，否则会抛出异常。</strong><br>有了<code>Object.defineProperty</code>方法，我们可以方便的利用存取描述符中的<code>getter/setter</code>来进行数据的监听,这也是响应式构建的雏形。<code>getter</code>方法可以让我们在访问数据时做额外的操作处理，<code>setter</code>方法使得我们可以在数据更新时修改返回的结果。看看下面的例子,由于设置了数据代理，当我们访问对象<code>o</code>的<code>a</code>属性时，会触发<code>getter</code>执行钩子函数，当修改<code>a</code>属性的值时，会触发<code>setter</code>钩子函数去修改返回的结果。</p><pre><code class="js">var o = &#123;&#125;var value;Object.defineProperty(o, &#39;a&#39;, &#123;    get() &#123;        console.log(&#39;获取值&#39;)        return value    &#125;,    set(v) &#123;        console.log(&#39;设置值&#39;)        value = v    &#125;&#125;)o.a = &#39;sss&#39; // 设置值console.log(o.a)// 获取值// &#39;qqq&#39;</code></pre><p>前面说到<code>Object.defineProperty</code>的<code>get</code>和<code>set</code>方法是对对象进行监测并响应变化，那么数组类型是否也可以监测呢，参照监听属性的思路，我们用数组的下标作为属性，数组的元素作为拦截对象，看看<code>Object.defineProperty</code>是否可以对数组的数据进行监控拦截。</p><pre><code class="js">var arr = [1,2,3];arr.forEach((item, index) =&gt; &#123;    Object.defineProperty(arr, index, &#123;        get() &#123;            console.log(&#39;数组被getter拦截&#39;)            return item        &#125;,        set(value) &#123;            console.log(&#39;数组被setter拦截&#39;)            return item = value        &#125;    &#125;)&#125;)arr[1] = 4;console.log(arr)// 结果数组被setter拦截数组被getter拦截4</code></pre><p>显然，<strong>已知长度的数组是可以通过索引属性来设置属性的访问器属性的。</strong>但是数组的添加确无法进行拦截，这个也很好理解，不管是通过<code>arr.push()</code>还是<code>arr[10] = 10</code>添加的数据，数组所添加的索引值并没有预先加入数据拦截中，所以自然无法进行拦截处理。这个也是使用<code>Object.defineProperty</code>进行数据代理的弊端。为了解决这个问题，<code>Vue</code>在响应式系统中对数组的方法进行了重写，间接的解决了这个问题，详细细节可以参考后续的响应式系统分析。</p><p>另外如果需要拦截的对象属性嵌套多层，如果没有递归去调用<code>Object.defineProperty</code>进行拦截，深层次的数据也依然无法监测。</p><h3 id="2-1-2-Proxy"><a href="#2-1-2-Proxy" class="headerlink" title="2.1.2 Proxy"></a>2.1.2 Proxy</h3><p>为了解决像数组这类无法进行数据拦截，以及深层次的嵌套问题，<code>es6</code>引入了<code>Proxy</code>的概念，它是真正在语言层面对数据拦截的定义。和<code>Object.defineProperty</code>一样，<code>Proxy</code>可以修改某些操作的默认行为，但是不同的是，**<code>Proxy</code>针对目标对象会创建一个新的实例对象，并将目标对象代理到新的实例对象上，<strong>。 本质的区别是后者会创建一个新的对象对原对象做代理，外界对原对象的访问，都必须先通过这层代理进行拦截处理。而拦截的结果是</strong>我们只要通过操作新的实例对象就能间接的操作真正的目标对象了**。针对<code>Proxy</code>，下面是基础的写法:</p><pre><code class="js">var obj = &#123;&#125;var nobj = new Proxy(obj, &#123;    get(target, key, receiver) &#123;        console.log(&#39;获取值&#39;)        return Reflect.get(target, key, receiver)    &#125;,    set(target, key, value, receiver) &#123;        console.log(&#39;设置值&#39;)        return Reflect.set(target, key, value, receiver)    &#125;&#125;)nobj.a = &#39;代理&#39;console.log(obj)// 结果设置值&#123;a: &quot;代理&quot;&#125;</code></pre><p>上面的<code>get,set</code>是<code>Proxy</code>支持的拦截方法，而<code>Proxy</code> 支持的拦截操作有13种之多，具体可以参照<span class="exturl" data-url="aHR0cDovL2VzNi5ydWFueWlmZW5nLmNvbS8jZG9jcy9wcm94eQ==">ES6-Proxy</span>文档,前面提到，<code>Object.defineProperty</code>的<code>getter</code>和<code>setter</code>方法并不适合监听拦截数组的变化，那么新引入的<code>Proxy</code>又能否做到呢？我们看下面的例子。</p><pre><code class="js">var arr = [1, 2, 3]let obj = new Proxy(arr, &#123;    get: function (target, key, receiver) &#123;        // console.log(&quot;获取数组元素&quot; + key);        return Reflect.get(target, key, receiver);    &#125;,    set: function (target, key, receiver) &#123;        console.log(&#39;设置数组&#39;);        return Reflect.set(target, key, receiver);    &#125;&#125;)// 1. 改变已存在索引的数据obj[2] = 3// result: 设置数组// 2. push,unshift添加数据obj.push(4)// result: 设置数组 * 2 (索引和length属性都会触发setter)// // 3. 直接通过索引添加数组obj[5] = 5// result: 设置数组 * 2// // 4. 删除数组元素obj.splice(1, 1)</code></pre><p>显然<code>Proxy</code>完美的解决了数组的监听检测问题，针对数组添加数据，删除数据的不同方法，代理都能很好的拦截处理。另外<code>Proxy</code>也很好的解决了深层次嵌套对象的问题，具体读者可以自行举例分析。</p><h2 id="2-2-initProxy"><a href="#2-2-initProxy" class="headerlink" title="2.2 initProxy"></a>2.2 initProxy</h2><p>数据拦截的思想除了为构建响应式系统准备，它也可以为<strong>数据进行筛选过滤</strong>，我们接着往下看初始化的代码，在合并选项后，<code>vue</code>接下来会为<code>vm</code>实例设置一层代理，这层代理可以为<strong>vue在模板渲染时进行一层数据筛选</strong>，这个过程究竟怎么发生的，我们看代码的实现。</p><pre><code class="js">Vue.prototype._init = function(options) &#123;    // 选项合并    ...    &#123;        // 对vm实例进行一层代理        initProxy(vm);    &#125;    ...&#125;</code></pre><p><code>initProxy</code>的实现如下：</p><pre><code class="js">// 代理函数var initProxy = function initProxy (vm) &#123;        if (hasProxy) &#123;        var options = vm.$options;        var handlers = options.render &amp;&amp; options.render._withStripped            ? getHandler            : hasHandler;        // 代理vm实例到vm属性_renderProxy        vm._renderProxy = new Proxy(vm, handlers);    &#125; else &#123;        vm._renderProxy = vm;    &#125;&#125;;</code></pre><p>首先是判断浏览器是否支持原生的<code>proxy</code>。</p><pre><code class="js">var hasProxy =      typeof Proxy !== &#39;undefined&#39; &amp;&amp; isNative(Proxy);</code></pre><p>当浏览器支持<code>Proxy</code>时，<code>vm._renderProxy</code>会代理<code>vm</code>实例，并且代理过程也会随着参数的不同呈现不同的效果；当浏览器不支持<code>Proxy</code>时，直接将<code>vm</code>赋值给<code>vm._renderProxy</code>。</p><p>读到这里，我相信大家会有很多的疑惑。<br><strong>1. 这层代理的访问时机是什么，也就是说什么场景会触发这层代理</strong><br><strong>2. 参数<code>options.render._withStripped</code>代表着什么，<code>getHandler</code>和<code>hasHandler</code>又有什么不同。</strong><br><strong>3. 如何理解为模板数据的访问进行数据筛选过滤。到底有什么数据需要过滤。</strong><br><strong>4. 只有在支持原生<code>proxy</code>环境下才会建立这层代理，那么在旧的浏览器，非法的数据又将如何展示。</strong></p><p>带着这些疑惑，我们接着往下分析。</p><h3 id="2-2-1-触发代理"><a href="#2-2-1-触发代理" class="headerlink" title="2.2.1 触发代理"></a>2.2.1 触发代理</h3><p>源码中<code>vm._renderProxy</code>的使用出现在<code>Vue</code>实例的<code>_render</code>方法中，<code>Vue.prototype._render</code>是将渲染函数转换成<code>Virtual DOM</code>的方法，这部分是关于实例的挂载和模板引擎的解析，笔者并不会在这一章节中深入分析，我们只需要先有一个认知，**<code>Vue</code>内部在<code>js</code>和真实<code>DOM</code>节点中设立了一个中间层，这个中间层就是<code>Virtual DOM</code>，遵循<code>js -&gt; virtual -&gt; 真实dom</code>的转换过程,而<code>Vue.prototype._render</code>是前半段的转换，**当我们调用<code>render</code>函数时，代理的<code>vm._renderProxy</code>对象便会访问到。</p><pre><code class="js">Vue.prototype._render = function () &#123;    ···    // 调用vm._renderProxy    vnode = render.call(vm._renderProxy, vm.$createElement);&#125;</code></pre><p>那么代理的处理函数又是什么？我们回过头看看代理选项<code>handlers</code>的实现。<br><code>handers</code>函数会根据 <code>options.render._withStripped</code>的不同执行不同的代理函数，<strong>当使用类似<code>webpack</code>这样的打包工具时，通常会使用<code>vue-loader</code>插件进行模板的编译，这个时候<code>options.render</code>是存在的，并且<code>_withStripped</code>的属性也会设置为<code>true</code></strong>(关于编译版本和运行时版本的区别可以参考后面章节)，所以此时代理的选项是<code>hasHandler</code>,在其他场景下，代理的选项是<code>getHandler</code>。<code>getHandler,hasHandler</code>的逻辑相似，我们只分析使用<code>vue-loader</code>场景下<code>hasHandler</code>的逻辑。另外的逻辑，读者可以自行分析。</p><pre><code class="js">var hasHandler = &#123;    // key in obj或者with作用域时，会触发has的钩子    has: function has (target, key) &#123;        ···    &#125;&#125;;</code></pre><p><code>hasHandler</code>函数定义了<code>has</code>的钩子，前面介绍过,<code>proxy</code>的钩子有13个之多，而<code>has</code>是其中一个，它用来拦截<code>propKey in proxy</code>的操作，返回一个布尔值。而除了拦截 <code>in</code> 操作符外，<code>has</code>钩子同样可以用来拦截<code>with</code>语句下的作用对象。例如:</p><pre><code class="js">var obj = &#123;    a: 1&#125;var nObj = new Proxy(obj, &#123;    has(target, key) &#123;        console.log(target) // &#123; a: 1 &#125;        console.log(key) // a        return true    &#125;&#125;)with(nObj) &#123;    a = 2&#125;</code></pre><p>那么这两个触发条件是否跟<code>_render</code>过程有直接的关系呢？答案是肯定的。<code>vnode = render.call(vm._renderProxy, vm.$createElement);</code>的主体是<code>render</code>函数，而这个<code>render</code>函数就是包装成<code>with</code>的执行语句,<strong>在执行<code>with</code>语句的过程中，该作用域下变量的访问都会触发<code>has</code>钩子，这也是模板渲染时之所有会触发代理拦截的原因。</strong>我们通过代码来观察<code>render</code>函数的原形。</p><pre><code class="js">var vm = new Vue(&#123;    el: &#39;#app&#39;     &#125;)console.log(vm.$options.render)//输出, 模板渲染使用with语句ƒ anonymous() &#123;    with(this)&#123;return _c(&#39;div&#39;,&#123;attrs:&#123;&quot;id&quot;:&quot;app&quot;&#125;&#125;,[_v(_s(message)+_s(_test))])&#125;&#125;</code></pre><h3 id="2-2-2-数据过滤"><a href="#2-2-2-数据过滤" class="headerlink" title="2.2.2 数据过滤"></a>2.2.2 数据过滤</h3><p>我们已经大致知道了<code>Proxy</code>代理的访问时机，那么设置这层代理的作用又在哪里呢？首先思考一个问题，我们通过<code>data</code>选项去设置实例数据，那么这些数据可以随着个人的习惯任意命名吗？显然不是的，如果你使用<code>js</code>的关键字(像<code>Object,Array,NaN</code>)去命名,这是不被允许的。另一方面，<code>Vue</code>源码内部使用了以<code>$,_</code>作为开头的内部变量，所以以<code>$,_</code>开头的变量名也是不被允许的，这就构成了数据过滤监测的前提。接下来我们具体看<code>hasHandler</code>的细节实现。</p><pre><code class="js">var hasHandler = &#123;    has: function has (target, key) &#123;        var has = key in target;        // isAllowed用来判断模板上出现的变量是否合法。        var isAllowed = allowedGlobals(key) ||            (typeof key === &#39;string&#39; &amp;&amp; key.charAt(0) === &#39;_&#39; &amp;&amp; !(key in target.$data));            // _和$开头的变量不允许出现在定义的数据中，因为他是vue内部保留属性的开头。        // 1. warnReservedPrefix: 警告不能以$ _开头的变量        // 2. warnNonPresent: 警告模板出现的变量在vue实例中未定义        if (!has &amp;&amp; !isAllowed) &#123;            if (key in target.$data) &#123; warnReservedPrefix(target, key); &#125;            else &#123; warnNonPresent(target, key); &#125;        &#125;        return has || !isAllowed    &#125;&#125;;// 模板中允许出现的非vue实例定义的变量var allowedGlobals = makeMap(    &#39;Infinity,undefined,NaN,isFinite,isNaN,&#39; +    &#39;parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,&#39; +    &#39;Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,&#39; +    &#39;require&#39; // for Webpack/Browserify);</code></pre><p>首先<code>allowedGlobals</code>定义了<code>javascript</code>保留的关键字，这些关键字是不允许作为用户变量存在的。<code>(typeof key === &#39;string&#39; &amp;&amp; key.charAt(0) === &#39;_&#39; &amp;&amp; !(key in target.$data)</code>的逻辑对以<code>$,_</code>开头，或者是否是<code>data</code>中未定义的变量做判断过滤。这里对未定义变量的场景多解释几句，前面说到，代理的对象<code>vm.renderProxy</code>是在执行<code>_render</code>函数中访问的，而在使用了<code>template</code>模板的情况下，<code>render</code>函数是对模板的解析结果，换言之，之所以会触发数据代理拦截是因为模板中使用了变量，例如<code>&lt;div&gt;&#123;&#123;message&#125;&#125;&#125;&lt;/div&gt;</code>。而如果我们在模板中使用了未定义的变量，这个过程就被<code>proxy</code>拦截，并定义为不合法的变量使用。</p><p>我们可以看看两个报错信息的源代码(是不是很熟悉):</p><pre><code class="js">// 模板使用未定义的变量var warnNonPresent = function (target, key) &#123;    warn(    &quot;Property or method \&quot;&quot; + key + &quot;\&quot; is not defined on the instance but &quot; +    &#39;referenced during render. Make sure that this property is reactive, &#39; +    &#39;either in the data option, or for class-based components, by &#39; +    &#39;initializing the property. &#39; +    &#39;See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.&#39;,    target    );&#125;;// 使用$,_开头的变量var warnReservedPrefix = function (target, key) &#123;    warn(    &quot;Property \&quot;&quot; + key + &quot;\&quot; must be accessed with \&quot;$data.&quot; + key + &quot;\&quot; because &quot; +    &#39;properties starting with &quot;$&quot; or &quot;_&quot; are not proxied in the Vue instance to &#39; +    &#39;prevent conflicts with Vue internals&#39; +    &#39;See: https://vuejs.org/v2/api/#data&#39;,    target    );&#125;;</code></pre><p>分析到这里，前面的疑惑只剩下最后一个问题。只有在浏览器支持<code>proxy</code>的情况下，才会执行<code>initProxy</code>设置代理，那么在不支持的情况下，数据过滤就失效了，此时非法的数据定义还能正常运行吗？我们先对比下面两个结论。</p><pre><code class="js">// 模板中使用_开头的变量，且在data选项中有定义&lt;div id=&quot;app&quot;&gt;&#123;&#123;_test&#125;&#125;&lt;/div&gt;new Vue(&#123;    el: &#39;#app&#39;,    data: &#123;        _test: &#39;proxy&#39;    &#125;&#125;)</code></pre><ol><li>支持<code>proxy</code>浏览器的结果</li></ol><p><img data-src="/images/img/2.1.png"></p><ol start="2"><li>不支持<code>proxy</code>浏览器的结果</li></ol><p><img data-src="/images/img/2.2.png"></p><p>显然，在没有经过代理的情况下，使用<code>_</code>开头的变量依旧会<br>报错，但是它变成了<code>js</code>语言层面的错误，表示该变量没有被声明。但是这个报错无法在<code>Vue</code>这一层知道错误的详细信息，而这就是能使用<code>Proxy</code>的好处。接着我们会思考，既然已经在<code>data</code>选项中定义了<code>_test</code>变量，为什么访问时还是找不到变量的定义呢？<br>原来在初始化数据阶段，<code>Vue</code>已经为数据进行了一层筛选的代理。具体看<code>initData</code>对数据的代理，其他实现细节不在本节讨论范围内。</p><pre><code class="js">function initData(vm) &#123;    vm._data = typeof data === &#39;function&#39; ? getData(data, vm) : data || &#123;&#125;    if (!isReserved(key)) &#123;        // 数据代理，用户可直接通过vm实例返回data数据        proxy(vm, &quot;_data&quot;, key);    &#125;&#125;function isReserved (str) &#123;    var c = (str + &#39;&#39;).charCodeAt(0);    // 首字符是$, _的字符串    return c === 0x24 || c === 0x5F  &#125;</code></pre><p><code>vm._data</code>可以拿到最终<code>data</code>选项合并的结果，<code>isReserved</code>会过滤以<code>$,_</code>开头的变量，<code>proxy</code>会为实例数据的访问做代理，当我们访问<code>this.message</code>时，实际上访问的是<code>this._data.message</code>,而有了<code>isReserved</code>的筛选，即使<code>this._data._test</code>存在，我们依旧无法在访问<code>this._test</code>时拿到<code>_test</code>变量。这就解释了为什么会有变量没有被声明的语法错误，而<code>proxy</code>的实现，又是基于上述提到的<code>Object.defineProperty</code>来实现的。</p><pre><code class="js">function proxy (target, sourceKey, key) &#123;    sharedPropertyDefinition.get = function proxyGetter () &#123;        // 当访问this[key]时，会代理访问this._data[key]的值        return this[sourceKey][key]    &#125;;    sharedPropertyDefinition.set = function proxySetter (val) &#123;        this[sourceKey][key] = val;    &#125;;    Object.defineProperty(target, key, sharedPropertyDefinition);&#125;</code></pre><h2 id="2-3-小结"><a href="#2-3-小结" class="headerlink" title="2.3 小结"></a>2.3 小结</h2><p>这一节内容，详细的介绍了数据代理在<code>Vue</code>的实现思路和另一个应用场景，数据代理是一种设计模式，也是一种编程思想，<code>Object.defineProperty</code>和<code>Proxy</code>都可以实现数据代理，但是他们各有优劣，前者兼容性较好，但是却无法对数组或者嵌套的对象进行代理监测，而<code>Proxy</code>基本可以解决所有的问题，但是对兼容性要求很高。<code>Vue</code>中的响应式系统是以<code>Object.defineProperty</code>实现的，但是这并不代表没有<code>Proxy</code>的应用。<code>initProxy</code>就是其中的例子，这层代理会在模板渲染时对一些非法或者没有定义的变量进行筛选判断，和没有数据代理相比，非法的数据定义错误会提前到应用层捕获，这也有利于开发者对错误的排查。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Vue </category>
          
          <category> vue2.x源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发布活动类</title>
      <link href="/computer-science/fangweix/fb/"/>
      <url>/computer-science/fangweix/fb/</url>
      
        <content type="html"><![CDATA[<h1 id="先上效果图"><a href="#先上效果图" class="headerlink" title="先上效果图"></a>先上效果图</h1><table><thead><tr><th>活动列表页</th><th>发起活动</th><th>消息通知</th><th>首页侧边栏</th><th>活动详情</th><th>后台管理列表页</th></tr></thead><tbody><tr><td><img data-src="/images/fb/1.png" alt="Image 1"></td><td><img data-src="/images/fb/2.png" alt="Image 2"></td><td><img data-src="/images/fb/3.png" alt="Image 3"></td><td><img data-src="/images/fb/4.png" alt="Image 3"></td><td><img data-src="/images/fb/5.png" alt="Image 4"></td><td><img data-src="/images/fb/6.png" alt="Image 5"></td></tr></tbody></table><h1 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h1><pre><code class="text">移动端：微信小程序服务端：springbootmybatis-plusmysql </code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>仿微信聊天源码解析（uniapp + springboot）</title>
      <link href="/computer-science/fangweix/fwx/"/>
      <url>/computer-science/fangweix/fwx/</url>
      
        <content type="html"><![CDATA[<h1 id="先上效果图"><a href="#先上效果图" class="headerlink" title="先上效果图"></a>先上效果图</h1><table><thead><tr><th>登录页面</th><th>消息列表</th><th>聊天列表</th><th>通讯录</th><th>发现</th><th>我的</th></tr></thead><tbody><tr><td><img data-src="/images/fwx/login.png" alt="Image 1"></td><td><img data-src="/images/fwx/1.png" alt="Image 2"></td><td><img data-src="/images/fwx/chat.png" alt="Image 3"></td><td><img data-src="/images/fwx/2.png" alt="Image 3"></td><td><img data-src="/images/fwx/3.png" alt="Image 4"></td><td><img data-src="/images/fwx/4.png" alt="Image 5"></td></tr></tbody></table><h1 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h1><pre><code class="text">移动端：uniapp服务端：springbootmybatis-plusmysql </code></pre><h1 id="移动端核心代码架构实现方式"><a href="#移动端核心代码架构实现方式" class="headerlink" title="移动端核心代码架构实现方式"></a>移动端核心代码架构实现方式</h1><pre><code class="javascript">import requestUrl from &#39;@/api/url.js&#39;;import $store from &#39;@/store/index.js&#39;;import noticeUtil from &#39;@/util/noticeUtil.js&#39;;import timeUtil from &#39;@/util/timeUtil.js&#39;;import userRequest from &#39;@/api/user.js&#39;;export default &#123;    //连接websocket    initConnect() &#123;        uni.closeSocket() //创建新的socket连接前确保旧的已关闭        //创建一个socket连接        uni.connectSocket(&#123;            url: requestUrl.getWebsokcetUrl() + $store.state.token,            success: res =&gt; &#123;&#125;,            fail(res) &#123;                console.log(res)            &#125;        &#125;)        //监听socket打开        uni.onSocketOpen(() =&gt; &#123;            $store.state.isSocketOpen = true            uni.showToast(&#123;                icon: &#39;success&#39;,                title: &#39;成功连接websocket！&#39;            &#125;)            //连接之后才开始获取数据            $store.dispatch(&#39;getMessage&#39;);        &#125;)        //监听socket关闭        uni.onSocketClose(() =&gt; &#123;            $store.state.isSocketOpen = false            console.log(&#39;WebSocket连接已关闭！&#39;);            //connectSocketInit(); //尝试重连        &#125;)        //监听socket错误        uni.onSocketError(() =&gt; &#123;            $store.state.isSocketOpen = false            console.log(&#39;WebSocket连接打开失败&#39;);            // 用户下线            $store.state.isSocketOpen = false;            console.log(&#39;socket连接错误&#39;)            if (!$store.state.isSocketOpen) &#123;                setTimeout(function() &#123;                    //reconnect();                &#125;, 3000);            &#125;        &#125;)        //监听socket消息        uni.onSocketMessage((res) =&gt; &#123;            let data = JSON.parse(res.data) //socket信息是字符串，需要先转成json形式再去解析内容            switch (data.type) &#123;                ////撤回消息                case &#39;person-withdraw&#39;:                    //console.log(data)                    for (let i = 0; i &lt; $store.state.personMessage.length; i++) &#123;                        if ($store.state.personMessage[i].sessionId == data.data.sessionId) &#123;                            for (let j = $store.state.personMessage[i].list.length - 1; j &gt;= 0; j--) &#123;                                if ($store.state.personMessage[i].list[j].id == data.data.messageId) &#123;                                    $store.state.personMessage[i].list[j].isWithdrawn = 1                                    break                                &#125;                            &#125;                            break;                        &#125;                    &#125;                    break;                case &#39;group-withdraw&#39;:                    //console.log(data)                    for (let i = 0; i &lt; $store.state.groupMessage.length; i++) &#123;                        if ($store.state.groupMessage[i].groupId == data.data.groupId) &#123;                            for (let j = $store.state.groupMessage[i].list.length - 1; j &gt;= 0; j--) &#123;                                if ($store.state.groupMessage[i].list[j].id == data.data.messageId) &#123;                                    $store.state.groupMessage[i].list[j].isWithdrawn = 1                                    break                                &#125;                            &#125;                            break;                        &#125;                    &#125;                    break;                case &#39;token-failed&#39;:                    uni.showToast(&#123;                        title: &#39;身份验证已过期&#39;,                        icon: &#39;none&#39;                    &#125;)                    setTimeout(() =&gt; &#123;                        uni.redirectTo(&#123;                            url: &#39;pages/login/login&#39;                        &#125;)                    &#125;, 1000)                    break;                case &#39;person-apply&#39;:                    uni.showToast(&#123;                        icon: &#39;none&#39;,                        title: &#39;你收到了一个好友请求&#39;                    &#125;)                    $store.dispatch(&#39;getNoticeList&#39;);                    if ($store.state.systemConfig.bell) &#123;                        noticeUtil.playSystemAudio();                    &#125;                    //#ifdef APP                    if ($store.state.systemConfig.vibrate) &#123;                        uni.vibrateShort()                    &#125;                    //#endif                    break;                case &#39;count&#39;:                    $store.state.onlineArray = data.data                    //console.log(data)                    // uni.showToast(&#123;                    // title:&#39;共&#39;+data.data.length+&#39;人在线&#39;,                    // icon:&#39;none&#39;                    // &#125;)                    break;                case &#39;person-apply-agree&#39;:                    //刷新一遍好友列表                    $store.dispatch(&#39;getFriendList&#39;)                    let friend = data.data                    if (friend.myId == $store.state.loginUserInfo.id) &#123;                        $store.dispatch(&#39;getNoticeList&#39;)                        ////                        console.log(&#39;这里需要向好友发送一个消息&#39;)                        let m = &#123;                            senderId: friend.myId,                            receiverId: friend.friendId,                            sendTime: timeUtil.getFormatTime(new Date()),                            content: &#39;我同意了你的好友申请~&#39;,                            messageType: &#39;text&#39;,                            sessionId: friend.sessionId                        &#125;                        let msg = &#123;                            type: &#39;person-message&#39;,                            data: m                        &#125;                        uni.sendSocketMessage(&#123;                            data: JSON.stringify(msg),                            fail() &#123;                                uni.showToast(&#123;                                    title: &#39;发送失败&#39;,                                    icon: &#39;error&#39;                                &#125;)                            &#125;                        &#125;)                        uni.showToast(&#123;                            title: &#39;添加成功！&#39;,                            icon: &#39;success&#39;                        &#125;)                    &#125;                    break;                case &#39;notice-refresh&#39;:                    $store.dispatch(&#39;getNoticeList&#39;)                    uni.showToast(&#123;                        title: data.data,                        icon: &#39;none&#39;                    &#125;)                    break;                case &#39;person-message&#39;:                    let message = data.data                    /////消息加入消息历史列表                    for (let i = 0; i &lt; $store.state.personMessage.length; i++) &#123;                        if ($store.state.personMessage[i].sessionId == message.sessionId) &#123;                            $store.state.personMessage[i].list.push(message)                            break                        &#125;                    &#125;                    ///更新消息记录                    $store.state.lastUpdateSession = &#123;                        id: message.sessionId,                        count: $store.state.lastUpdateSession.count + 1                    &#125;                    ///如果消息不是我发的 则响铃                    if (message.senderId != $store.state.loginUserInfo.id) &#123;                        if ($store.state.systemConfig.bell) &#123;                            noticeUtil.playMessageAudio();                        &#125;                        //#ifdef APP                        if ($store.state.systemConfig.vibrate) &#123;                            uni.vibrateShort()                        &#125;                        //#endif                    &#125;                    /////更新绘画列表状态                    for (let i = 0; i &lt; $store.state.sessionList.length; i++) &#123;                        if ($store.state.sessionList[i].sessionId == message.sessionId) &#123;                            $store.state.sessionList[i].updateTime = message.updateTime                            switch (message.messageType) &#123;                                case &#39;image&#39;:                                    $store.state.sessionList[i].lastMessage = &#39;【图片】&#39;;                                    break;                                case &#39;file&#39;:                                    $store.state.sessionList[i].lastMessage = &#39;【文件】&#39;;                                    break;                                case &#39;audio&#39;:                                    $store.state.sessionList[i].lastMessage = &#39;【语音】&#39;;                                    break;                                case &#39;video&#39;:                                    $store.state.sessionList[i].lastMessage = &#39;【视频】&#39;;                                    break;                                default:                                    $store.state.sessionList[i].lastMessage = message.content;                            &#125;                            //console.log()                            ////没有在这个对话 未读++                            if ($store.state.chattingUserInfo == null || $store.state.chattingUserInfo                                .sessionId != $store.state.sessionList[i].sessionId) &#123;                                if (message.senderId != $store.state.loginUserInfo.id)                                    $store.state.sessionList[i].unread++;                            &#125; else &#123; ///否则已读                                $store.dispatch(&#39;clearUnread&#39;, &#123;                                    myId: $store.state.loginUserInfo.id,                                    friendId: $store.state.chattingUserInfo.chattingUserId                                &#125;)                            &#125;                            ///需要把对话移到第一位                            let session = $store.state.sessionList.splice(i, 1);                            $store.state.sessionList = session.concat($store.state.sessionList)                            break;                        &#125;                    &#125;                    $store.dispatch(&#39;countUnreadMessage&#39;)                    break;                case &#39;join-success&#39;:                    let member = data.data                    uni.showToast(&#123;                        title: &#39;加入成功！&#39;,                        icon: &#39;success&#39;                    &#125;)                    $store.dispatch(&#39;getFriendList&#39;);                    console.log(member)                    let m = &#123;                        senderId: $store.state.loginUserInfo.id,                        senderName: $store.state.loginUserInfo.nickname,                        avatar: $store.state.loginUserInfo.avatar,                        sendTime: timeUtil.getFormatTime(new Date()),                        content: &#39;我已加入群聊&#39;,                        messageType: &#39;text&#39;,                        groupId: member.groupId //this.chattingGroupInfo.sessionId                    &#125;                    let msg = &#123;                        type: &#39;group-message&#39;,                        data: m                    &#125;                    uni.sendSocketMessage(&#123;                        data: JSON.stringify(msg),                        fail(res) &#123;                            uni.showToast(&#123;                                icon: &#39;error&#39;,                                title: &#39;发送失败&#39;                            &#125;)                        &#125;                    &#125;)                    break;                case &#39;group-message&#39;:                    let group_message = data.data                    /////消息加入消息历史列表                    for (let i = 0; i &lt; $store.state.groupMessage.length; i++) &#123;                        if ($store.state.groupMessage[i].groupId == group_message.groupId) &#123;                            $store.state.groupMessage[i].list.push(group_message)                            break                        &#125;                    &#125;                    ///更新消息记录                    $store.state.lastUpdateSession = &#123;                        id: group_message.groupId,                        count: $store.state.lastUpdateSession.count + 1                    &#125;                    ///如果消息不是我发的 则响铃                    if (group_message.senderId != $store.state.loginUserInfo.id) &#123;                        if ($store.state.systemConfig.bell) &#123;                            noticeUtil.playMessageAudio();                        &#125;                        //#ifdef APP                        if ($store.state.systemConfig.vibrate) &#123;                            uni.vibrateShort()                        &#125;                        //#endif                    &#125;                    /////更新绘画列表状态                    for (let i = 0; i &lt; $store.state.sessionList.length; i++) &#123;                        if ($store.state.sessionList[i].sessionId == group_message.groupId) &#123;                            $store.state.sessionList[i].updateTime = group_message.updateTime                            switch (group_message.messageType) &#123;                                case &#39;image&#39;:                                    $store.state.sessionList[i].lastMessage = group_message.senderName +                                    &#39;:【图片】&#39;;                                    break;                                case &#39;file&#39;:                                    $store.state.sessionList[i].lastMessage = group_message.senderName +                                    &#39;:【文件】&#39;;                                    break;                                case &#39;audio&#39;:                                    $store.state.sessionList[i].lastMessage = group_message.senderName +                                    &#39;:【语音】&#39;;                                    break;                                case &#39;video&#39;:                                    $store.state.sessionList[i].lastMessage = group_message.senderName +                                    &#39;:【视频】&#39;;                                    break;                                default:                                    $store.state.sessionList[i].lastMessage = group_message.senderName + &#39;:&#39; +                                        group_message.content;                            &#125;                            //console.log()                            ////没有在这个对话 未读++                            if ($store.state.chattingGroupInfo == null || $store.state.chattingGroupInfo                                .sessionId != $store.state.sessionList[i].sessionId) &#123;                                if (group_message.senderId != $store.state.loginUserInfo.id)                                    $store.state.sessionList[i].unread++;                            &#125; else &#123; ///否则已读                                $store.dispatch(&#39;clearGroupUnread&#39;, &#123;                                    userId: $store.state.loginUserInfo.id,                                    groupId: $store.state.chattingGroupInfo.sessionId                                &#125;)                            &#125;                            ///需要把对话移到第一位                            let session = $store.state.sessionList.splice(i, 1);                            $store.state.sessionList = session.concat($store.state.sessionList)                            break;                        &#125;                    &#125;                    $store.dispatch(&#39;countUnreadMessage&#39;)                    break;            &#125;        &#125;)    &#125;&#125;</code></pre><h1 id="服务端核心代码架构实现方式"><a href="#服务端核心代码架构实现方式" class="headerlink" title="服务端核心代码架构实现方式"></a>服务端核心代码架构实现方式</h1><pre><code class="java">package com.ddchat_server.websocket.component;import cn.hutool.json.JSONObject;import cn.hutool.json.JSONUtil;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.ddchat_server.entity.*;import com.ddchat_server.mapper.*;import com.ddchat_server.service.FriendService;import com.ddchat_server.service.MessageService;import com.ddchat_server.util.JWTUtils;import com.ddchat_server.util.SnowFlakeUtil;import com.ddchat_server.websocket.domain.SocketMessage;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import javax.websocket.*;import javax.websocket.server.PathParam;import javax.websocket.server.ServerEndpoint;import java.util.List;import java.util.Map;import java.util.Objects;import java.util.concurrent.ConcurrentHashMap;@ServerEndpoint(&quot;/socket/&#123;token&#125;&quot;)@Componentpublic class SocketServer &#123;    ///用来保存,用户的session    public static Map&lt;String, Session&gt; userSessionMap = new ConcurrentHashMap&lt;&gt;();    public static MessageMapper messageMapper;    public static NoticeMapper noticeMapper;    public static FriendMapper friendMapper;    public static FriendService friendService;    public static MessageService messageService;    public static MemberMapper memberMapper;    @Autowired    public void setMemberMapper(MemberMapper memberMapper) &#123;        SocketServer.memberMapper = memberMapper;    &#125;    @Autowired    public void setMessageService(MessageService messageService) &#123;        SocketServer.messageService = messageService;    &#125;    @Autowired    public void setFriendService(FriendService friendService) &#123;        SocketServer.friendService = friendService;    &#125;    @Autowired    public void setFriendMapper(FriendMapper friendMapper) &#123;        SocketServer.friendMapper = friendMapper;    &#125;    @Autowired    public void setMessageMapper(MessageMapper messageMapper) &#123;        SocketServer.messageMapper = messageMapper;    &#125;    @Autowired    void setNoticeMapper(NoticeMapper noticeMapper) &#123;        SocketServer.noticeMapper = noticeMapper;    &#125;    @OnOpen    public void onOpen(Session session, @PathParam(&quot;token&quot;) String token) &#123;        ///检查token是否生效        String id;        try &#123;            if (!JWTUtils.verify(token)) throw new Exception(&quot;身份验证失败&quot;);            JSONObject jsonObject = JWTUtils.parseJWT(token);            id = jsonObject.getStr(&quot;id&quot;);        &#125; catch (Exception e) &#123;            this.sendMessage(new SocketMessage&lt;&gt;(&quot;token-failed&quot;, null), session);            return;        &#125;        userSessionMap.put(id, session);        //System.out.println(&quot;用户：&quot;+id+&quot;已经上线&quot;);        this.sendToAll(new SocketMessage&lt;&gt;(&quot;count&quot;, userSessionMap.keySet().toArray()));    &#125;    @OnClose    public void onClose(Session session, @PathParam(&quot;token&quot;) String token) &#123;        String id = JWTUtils.parseJWT(token).getStr(&quot;id&quot;);        userSessionMap.remove(id);        //System.out.println(&quot;用户：&quot;+id+&quot;已经离线&quot;);        this.sendToAll(new SocketMessage&lt;&gt;(&quot;count&quot;, userSessionMap.keySet().toArray()));    &#125;    @OnError    public void onError(Session session, Throwable error, @PathParam(&quot;token&quot;) String token) &#123;        String id = JWTUtils.parseJWT(token).getStr(&quot;id&quot;);        userSessionMap.remove(id);        // System.out.println(&quot;用户：&quot;+id+&quot;已经离线&quot;);        this.sendToAll(new SocketMessage&lt;&gt;(&quot;count&quot;, userSessionMap.keySet().toArray()));    &#125;    @OnMessage    public void onMessage(String message, Session session, @PathParam(&quot;token&quot;) String token) &#123;        JSONObject m = JSONUtil.parseObj(message);        //System.out.println(m.get(&quot;type&quot;));        JSONObject data = m.getJSONObject(&quot;data&quot;);        switch (m.getStr(&quot;type&quot;)) &#123;            case &quot;person-apply&quot;:                ////构造通知消息对象                Notice notice = new Notice(null, data.getLong(&quot;senderId&quot;),                        data.getLong(&quot;receiverId&quot;),                        &quot;person-apply&quot;,                        m.getStr(&quot;data&quot;), false);                noticeMapper.insert(notice);                this.sendToUserById(data.getStr(&quot;receiverId&quot;), new SocketMessage&lt;&gt;(&quot;person-apply&quot;, m.getStr(&quot;data&quot;)));                break;            case &quot;person-apply-agree&quot;:                Notice notice1 = noticeMapper.selectById(data.getStr(&quot;id&quot;));                JSONObject jsonObject = JSONUtil.parseObj(notice1.getInformation());                ////检查两人是否为好友                if (friendService.checkIfFriend(notice1.getSenderId().toString(), notice1.getReceiverId().toString())) &#123;                    notice1.setIsRead(true);                    noticeMapper.updateById(notice1);                    this.sendToUserById(notice1.getReceiverId().toString(), new SocketMessage&lt;&gt;(&quot;notice-refresh&quot;, &quot;TA已经是你的好友了！&quot;));                    break;                &#125;                ////构造好友关系                Long sessionId = SnowFlakeUtil.getSnowFlakeId();                Friend friend1 = new Friend(null, notice1.getSenderId(), notice1.getReceiverId(),                        jsonObject.getStr(&quot;notation&quot;), sessionId, &quot;&quot;, 0, false);                Friend friend2 = new Friend(null, notice1.getReceiverId(), notice1.getSenderId(),                        jsonObject.getStr(&quot;senderName&quot;), sessionId, &quot;&quot;, 0, false);                friendMapper.insert(friend1);                friendMapper.insert(friend2);                notice1.setIsRead(true);                noticeMapper.updateById(notice1);                ///构造消息                SocketMessage&lt;Friend&gt; socketMessage = new SocketMessage&lt;&gt;(&quot;person-apply-agree&quot;, friend2);                this.sendToUserById(notice1.getSenderId().toString(), socketMessage);                this.sendToUserById(notice1.getReceiverId().toString(), socketMessage);                break;            case &quot;person-message&quot;:                ///////构造消息                Message message1 = new Message(SnowFlakeUtil.getSnowFlakeId().toString(), data.getStr(&quot;sessionId&quot;),                        data.getStr(&quot;senderId&quot;),                        data.getStr(&quot;receiverId&quot;), data.getStr(&quot;sendTime&quot;), data.getStr(&quot;content&quot;), data.getStr(&quot;messageType&quot;),                        0);                messageService.storeMessage(message1);                this.sendToUserById(message1.getSenderId(), new SocketMessage&lt;&gt;(&quot;person-message&quot;, message1));                this.sendToUserById(message1.getReceiverId(), new SocketMessage&lt;&gt;(&quot;person-message&quot;, message1));                break;            case &quot;join-group&quot;:                //////先检查该用户是否在群里                String userId = data.getStr(&quot;userId&quot;);                String groupId = data.getStr(&quot;groupId&quot;);                QueryWrapper&lt;Member&gt; queryWrapper = new QueryWrapper&lt;&gt;();                queryWrapper.eq(&quot;member_id&quot;, userId).eq(&quot;group_id&quot;, groupId).eq(&quot;is_deleted&quot;, false);                List&lt;Member&gt; members = memberMapper.selectList(queryWrapper);                if (members.size() != 0) &#123;                    Member member = members.get(0);                    this.sendToUserById(member.getMemberId().toString(), new SocketMessage&lt;&gt;(&quot;join-success&quot;, member));                    return;                &#125;                ////创建关系                Member member = new Member(null, Long.parseLong(userId), groupId, 0, &quot;&quot;, false);                memberMapper.insert(member);                this.sendToUserById(member.getMemberId().toString(), new SocketMessage&lt;&gt;(&quot;join-success&quot;, member));                break;            case &quot;group-message&quot;:                ///查找该群的全部用户                String group_id = data.getStr(&quot;groupId&quot;);                QueryWrapper&lt;Member&gt; memberQueryWrapper = new QueryWrapper&lt;&gt;();                memberQueryWrapper.eq(&quot;is_deleted&quot;, false).eq(&quot;group_id&quot;, group_id);                memberQueryWrapper.select(&quot;member_id&quot;);                ////保存聊天记录                GroupMessage groupMessage = new GroupMessage(SnowFlakeUtil.getSnowFlakeId().toString(), group_id, data.getStr(&quot;senderId&quot;), data.getStr(&quot;senderName&quot;),                        data.getStr(&quot;avatar&quot;), data.getStr(&quot;sendTime&quot;), data.getStr(&quot;content&quot;), data.getStr(&quot;messageType&quot;), 0);                messageService.StoreGroupMessage(groupMessage);                List&lt;Object&gt; ids = memberMapper.selectObjs(memberQueryWrapper);                for (Object id : ids) &#123;                    ////发送给每一个人                    this.sendToUserById(id.toString(), new SocketMessage&lt;&gt;(&quot;group-message&quot;, groupMessage));                &#125;                break;            ///收到了撤回消息            case &quot;person-withdraw&quot;:                String messageId = data.getStr(&quot;messageId&quot;);                String senderId = data.getStr(&quot;senderId&quot;);                String receiverId = data.getStr(&quot;receiverId&quot;);                ///更新数据库                messageService.withdrawMessage(messageId);                /////发送给用户                this.sendToUserById(senderId, new SocketMessage&lt;&gt;(&quot;person-withdraw&quot;, data));                this.sendToUserById(receiverId, new SocketMessage&lt;&gt;(&quot;person-withdraw&quot;, data));            case &quot;group-withdraw&quot;:                String groupMessageId = data.getStr(&quot;messageId&quot;);                String groupId1 = data.getStr(&quot;groupId&quot;);                ///更新数据库                messageService.withdrawGroupMessage(groupMessageId);                /////发送给用户                QueryWrapper&lt;Member&gt; memberQueryWrapper1 = new QueryWrapper&lt;&gt;();                memberQueryWrapper1.eq(&quot;is_deleted&quot;, false).eq(&quot;group_id&quot;, groupId1);                memberQueryWrapper1.select(&quot;member_id&quot;);                List&lt;Object&gt; ids1 = memberMapper.selectObjs(memberQueryWrapper1);                for (Object id : ids1) &#123;                    ////发送给每一个人                    this.sendToUserById(id.toString(), new SocketMessage&lt;&gt;(&quot;group-withdraw&quot;, data));                &#125;                break;        &#125;    &#125;    public void sendToAll(SocketMessage&lt;?&gt; message) &#123;        for (Session session : userSessionMap.values()) &#123;            this.sendMessage(message, session);        &#125;    &#125;    public void sendToUserById(String id, SocketMessage&lt;?&gt; message) &#123;        for (String key : userSessionMap.keySet()) &#123;            if (Objects.equals(key, id)) &#123;                this.sendMessage(message, userSessionMap.get(key));                return;            &#125;        &#125;    &#125;    public void sendMessage(SocketMessage&lt;?&gt; message, Session toSession) &#123;        try &#123;            if (toSession.isOpen()) &#123;                synchronized (toSession) &#123;                    toSession.getAsyncRemote().sendText(JSONUtil.toJsonStr(message));                &#125;            &#125;        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>step.3 react-router</title>
      <link href="/computer-science/react0-1/react-router/"/>
      <url>/computer-science/react0-1/react-router/</url>
      
        <content type="html"><![CDATA[<h1 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h1><p><span class="exturl" data-url="aHR0cHM6Ly9yZWFjdHJvdXRlci5jb20v">英文文档</span><br><span class="exturl" data-url="aHR0cDovL3JlYWN0LXJvdXRlci5kb2NzY2hpbmEub3JnLw==">中文文档</span></p><h1 id="依赖库"><a href="#依赖库" class="headerlink" title="依赖库"></a>依赖库</h1><p>react-router-dom</p><h1 id="link-标签"><a href="#link-标签" class="headerlink" title="link 标签"></a>link 标签</h1><pre><code class="JavaScript">当 to 是一个字符串时，它表示链接的目标 URL。在 React Router 中，默认使用路径匹配规则进行匹配。也就是说，当用户点击 &lt;Link&gt; 组件时，React Router 将尝试与当前的 URL 进行匹配，如果找到匹配的路径，将会触发相应的路由渲染。例如，在你的示例中，to=&quot;/about&quot; 表示点击该链接时将导航到 /about 路径。当 to 是一个对象时，它可以包含以下属性：pathname：表示链接的目标路径。search：表示查询参数，可以是一个字符串或一个对象。hash：表示 URL 的哈希部分。state：表示附加的状态数据，可以在目标页面中访问到。这些属性将被组合成最终的目标 URL。&lt;Link to=&#123;&#123;  pathname: "/about",  search: "?sort=name",  hash: "#section",  state: &#123; fromDashboard: true &#125;&#125;&#125;&gt;About&lt;/Link&gt;上述代码中，点击链接后将导航到 /about?sort=name#section，并且可以通过路由状态访问 &#123; fromDashboard: true &#125;。</code></pre><h1 id="Route"><a href="#Route" class="headerlink" title="Route"></a>Route</h1><Route path="/about" component={About}/><h1 id="reactrouterV6-封装一个路由"><a href="#reactrouterV6-封装一个路由" class="headerlink" title="reactrouterV6 封装一个路由"></a>reactrouterV6 封装一个路由</h1><pre><code class="javascript">import React, &#123; lazy, Suspense, useMemo &#125; from &#39;react&#39;;import &#123; BrowserRouter as Router, Routes, Route &#125; from &#39;react-router-dom&#39;;import Tabbar from &#39;./Tabbar&#39;import Header from &#39;./Header&#39;;const indexpage = lazy(() =&gt; import(&#39;../page/index&#39;));const mypage = lazy(() =&gt; import(&#39;../page/my&#39;));// const Tab1ChildComponent = (&#123; data &#125;) =&gt; &#123;//     return &lt;div&gt;&#123;data&#125;&lt;/div&gt;;// &#125;;// const fetchData = () =&gt; &#123;//     // 模拟异步获取数据//     return new Promise((resolve) =&gt; &#123;//         setTimeout(() =&gt; &#123;//             resolve(&#39;Data&#39;);//         &#125;, 1000);//     &#125;);// &#125;;// const Tab1ContentWithMemo = () =&gt; &#123;//     const data = useMemo(() =&gt; &#123;//         return fetchData();//     &#125;, []);//     return &lt;Tab1ChildComponent data=&#123;data&#125; /&gt;;// &#125;;const Routeslay = () =&gt; &#123;    return (        &lt;Router&gt;            &lt;Header /&gt;            &lt;Suspense fallback=&#123;&lt;div&gt;Loading...&lt;/div&gt;&#125;&gt;                &lt;Routes&gt;                    &lt;Route path=&quot;/&quot; Component=&#123;indexpage&#125; /&gt;                    &lt;Route path=&quot;/my&quot; Component=&#123;mypage&#125; /&gt;                &lt;/Routes&gt;            &lt;/Suspense&gt;            &lt;Tabbar /&gt;        &lt;/Router&gt;    );&#125;;export default Routeslay;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>step.1 react基础语法</title>
      <link href="/computer-science/react0-1/react%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/"/>
      <url>/computer-science/react0-1/react%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="react入门案例"><a href="#react入门案例" class="headerlink" title="react入门案例"></a>react入门案例</h1><pre><code class="html">  &lt;!-- 注意react 需要依赖这三个库 --&gt;    &lt;!-- 引入react核心库 --&gt;    &lt;script type=&quot;text/javascript&quot; src=&quot;../js/react.development.js&quot;&gt;&lt;/script&gt;    &lt;!-- 引入react-dom，用于支持react操作DOM --&gt;    &lt;script type=&quot;text/javascript&quot; src=&quot;../js/react-dom.development.js&quot;&gt;&lt;/script&gt;    &lt;!-- 引入babel，用于将jsx转为js --&gt;    &lt;script type=&quot;text/javascript&quot; src=&quot;../js/babel.min.js&quot;&gt;&lt;/script&gt;  &lt;!-- 准备好一个“容器” 用于挂载react的虚拟dom --&gt;    &lt;div id=&quot;test&quot;&gt;&lt;/div&gt;    &lt;script type=&quot;text/babel&quot; &gt; /* 此处一定要写babel */        //1.创建虚拟DOM        const VDOM = &lt;h1&gt;Hello,React&lt;/h1&gt; /* 此处一定不要写引号，因为不是字符串 */        //2.渲染虚拟DOM到页面        ReactDOM.render(VDOM,document.getElementById(&#39;test&#39;))    &lt;/script&gt;</code></pre><h1 id="react-虚拟dom的两种创建方式"><a href="#react-虚拟dom的两种创建方式" class="headerlink" title="react 虚拟dom的两种创建方式"></a>react 虚拟dom的两种创建方式</h1><pre><code class="html">  &lt;!-- 第一种 --&gt;  &lt;script type=&quot;text/babel&quot; &gt; /* 此处一定要写babel */        //1.创建虚拟DOM        const VDOM = (  /* 此处一定不要写引号，因为不是字符串 */            &lt;h1 id=&quot;title&quot;&gt;                &lt;span&gt;Hello,React&lt;/span&gt;            &lt;/h1&gt;        )        //2.渲染虚拟DOM到页面        ReactDOM.render(VDOM,document.getElementById(&#39;test&#39;))    &lt;/script&gt;  &lt;!-- 第二种 --&gt;   &lt;!-- 这种不需要依赖jsx  所以不需使用babel --&gt;  &lt;script type=&quot;text/javascript&quot;&gt;         //1.创建虚拟DOM        const VDOM = React.createElement(&#39;h1&#39;,&#123;id:&#39;title&#39;&#125;,React.createElement(&#39;span&#39;,&#123;&#125;,&#39;Hello,React&#39;))        1. 调用 React.createElement 函数，并传入三个参数：            第一个参数是要创建的元素类型，这里是 &#39;h1&#39;            第二个参数是一个对象，表示元素的属性，这里包含一个 &#39;id&#39; 属性，其值为 &#39;title&#39;            第三个参数是元素的子元素或文本内容，这里是另一个调用 React.createElement 函数创建的元素                2. 内部的 React.createElement(&#39;span&#39;,&#123;&#125;,&#39;Hello,React&#39;) 也是一个类似的过程，创建了一个 &#39;span&#39; 元素，没有属性，文本内容为 &#39;Hello,React&#39;。        3. 创建完内部的 &#39;span&#39; 元素后，它作为 &#39;h1&#39; 元素的子元素。        4. 最终得到一个嵌套的虚拟DOM树，其中顶层元素是 &#39;h1&#39; 元素，具有一个 &#39;id&#39; 属性和一个子元素，子元素是 &#39;span&#39; 元素，没有属性，文本内容为 &#39;Hello React&#39;。        //2.渲染虚拟DOM到页面        ReactDOM.render(VDOM,document.getElementById(&#39;test&#39;))    &lt;/script&gt;</code></pre><h1 id="jsx-语法规则"><a href="#jsx-语法规则" class="headerlink" title="jsx 语法规则"></a>jsx 语法规则</h1><ol><li>定义虚拟DOM时，不要写引号。</li><li>标签中混入JS表达式时要用{}。</li><li>样式的类名指定不要用class，要用className。</li><li>内联样式，要用style&#x3D;<code>&#123;&#123;key:value&#125;&#125;</code>的形式去写。</li><li>只有一个根标签</li><li>标签必须闭合</li><li>标签首字母<br> (1).若小写字母开头，则将该标签转为html中同名元素，若html中无该标签对应的同名元素，则报错。<br> (2).若大写字母开头，react就去渲染对应的组件，若组件没有定义，则报错。</li></ol><pre><code class="text">什么是js表达式 什么是js语句    1.表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方        下面这些都是表达式：            (1). a            (2). a+b            (3). demo(1)            (4). arr.map()             (5). function test () &#123;&#125;    2.语句(代码)：      下面这些都是语句(代码)：            (1).if()&#123;&#125;            (2).for()&#123;&#125;            (3).switch()&#123;case:xxxx&#125;</code></pre><h1 id="react-中定义组件"><a href="#react-中定义组件" class="headerlink" title="react 中定义组件"></a>react 中定义组件</h1><ol><li>函数式组件</li></ol><pre><code class="html">&lt;script type=&quot;text/babel&quot;&gt;        //1.创建函数式组件        function MyComponent()&#123;            console.log(this); //此处的this是undefined，因为babel编译后开启了严格模式            return &lt;h2&gt;我是用函数定义的组件(适用于【简单组件】的定义)&lt;/h2&gt;        &#125;        //2.渲染组件到页面        ReactDOM.render(&lt;MyComponent/&gt;,document.getElementById(&#39;test&#39;))        /*             执行了ReactDOM.render(&lt;MyComponent/&gt;.......之后，发生了什么？                    1.React解析组件标签，找到了MyComponent组件。                    2.发现组件是使用函数定义的，随后调用该函数，将返回的虚拟DOM转为真实DOM，随后呈现在页面中。        */    &lt;/script&gt;</code></pre><ol start="2"><li>类式组件</li></ol><pre><code class="html">&lt;script type=&quot;text/babel&quot;&gt;        //1.创建类式组件        class MyComponent extends React.Component &#123;            render()&#123;                //render是放在哪里的？—— MyComponent的原型对象上，供实例使用。                //render中的this是谁？—— MyComponent的实例对象 &lt;=&gt; MyComponent组件实例对象。                console.log(&#39;render中的this:&#39;,this);                return &lt;h2&gt;我是用类定义的组件(适用于【复杂组件】的定义)&lt;/h2&gt;            &#125;        &#125;        //2.渲染组件到页面        ReactDOM.render(&lt;MyComponent/&gt;,document.getElementById(&#39;test&#39;))        /*             执行了ReactDOM.render(&lt;MyComponent/&gt;.......之后，发生了什么？                    1.React解析组件标签，找到了MyComponent组件。                    2.发现组件是使用类定义的，随后new出来该类的实例，并通过该实例调用到原型上的render方法。                    3.将render返回的虚拟DOM转为真实DOM，随后呈现在页面中。        */    &lt;/script&gt;</code></pre><ol start="3"><li>2种创建方式的区别<ul><li><p>没有生命周期方法：函数组件没有像类组件那样的生命周期方法（如componentDidMount、componentDidUpdate等），这使得处理组件的挂载、更新和卸载过程相对困难。不过，函数组件可以使用 React 的钩子函数（Hooks）来模拟类似的行为。</p></li><li><p>没有内部状态管理：函数组件无法直接定义和管理内部状态（state），这意味着你无法在函数组件中使用 setState 方法来更新组件状态。但是，你可以使用 React Hooks 中的 useState 来管理局部状态。</p></li><li><p>无法使用 Refs：在函数组件内部，无法直接使用 ref 属性或 React.createRef() 创建的引用。不过，React 提供了 useRef 钩子来解决这个问题。</p></li><li><p>不适用于复杂逻辑：如果你的组件需要处理复杂的业务逻辑，包含多个生命周期方法和状态管理，函数组件可能会显得过于冗长和难以维护。在这种情况下，使用类组件可能更合适。</p></li></ul></li></ol><h1 id="react-组件的三大属性"><a href="#react-组件的三大属性" class="headerlink" title="react 组件的三大属性"></a>react 组件的三大属性</h1><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p>state 是什么?</p><p>State是React组件内部的一种机制，用于存储和管理组件的可变状态。<br>State是私有的，只能在组件内部进行修改。组件可以通过调用setState方法来更新State并重新渲染，React将自动处理UI更新。<br>在类组件中，state被定义在constructor方法中，并且可以通过this.state进行访问。</p><ol><li>非简写方式</li></ol><pre><code class="html">&lt;script type=&quot;text/babel&quot;&gt;        //1.创建组件        class Weather extends React.Component&#123;                        //构造器调用几次？ ———— 1次            constructor(props)&#123;                console.log(&#39;constructor&#39;);                super(props)                //初始化状态                this.state = &#123;isHot:false,wind:&#39;微风&#39;&#125;                //解决changeWeather中this指向问题                this.changeWeather = this.changeWeather.bind(this)            &#125;            //render调用几次？ ———— 1+n次 1是初始化的那次 n是状态更新的次数            render()&#123;                console.log(&#39;render&#39;);                //读取状态                const &#123;isHot,wind&#125; = this.state                return &lt;h1 onClick=&#123;this.changeWeather&#125;&gt;今天天气很&#123;isHot ? &#39;炎热&#39; : &#39;凉爽&#39;&#125;，&#123;wind&#125;&lt;/h1&gt;            &#125;            //changeWeather调用几次？ ———— 点几次调几次            changeWeather()&#123;                //changeWeather放在哪里？ ———— Weather的原型对象上，供实例使用                //由于changeWeather是作为onClick的回调，所以不是通过实例调用的，是直接调用                //类中的方法默认开启了局部的严格模式，所以changeWeather中的this为undefined                                console.log(&#39;changeWeather&#39;);                //获取原来的isHot值                const isHot = this.state.isHot                //严重注意：状态必须通过setState进行更新,且更新是一种合并，不是替换。                this.setState(&#123;isHot:!isHot&#125;)                console.log(this);                //严重注意：状态(state)不可直接更改，下面这行就是直接更改！！！                //this.state.isHot = !isHot //这是错误的写法            &#125;        &#125;        //2.渲染组件到页面        ReactDOM.render(&lt;Weather/&gt;,document.getElementById(&#39;test&#39;))                &lt;/script&gt;</code></pre><ol start="2"><li>简写方式</li></ol><pre><code class="html">&lt;script type=&quot;text/babel&quot;&gt;        //1.创建组件        class Weather extends React.Component&#123;            //初始化状态            state =             &#123;                isHot:false,                wind:&#39;微风&#39;            &#125;            render()&#123;                const &#123;isHot,wind&#125; = this.state                return (&lt;h1 onClick=&#123;this.changeWeather&#125;&gt;今天天气很&#123;isHot ? &#39;炎热&#39; : &#39;凉爽&#39;&#125;，&#123;wind&#125;&lt;/h1&gt;)            &#125;            //自定义方法————要用赋值语句的形式+箭头函数            changeWeather = ()=&gt;&#123;                const isHot = this.state.isHot                this.setState(&#123;isHot:!isHot&#125;)            &#125;        &#125;        //2.渲染组件到页面        ReactDOM.render(&lt;Weather/&gt;,document.getElementById(&#39;test&#39;))    &lt;/script&gt;</code></pre><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><p>props是什么?</p><p>Props是React组件传递数据的一种机制，用于从父组件向子组件传递数据。<br>Props是只读的，子组件无法修改自己接收到的props。父组件可以通过更改传递给子组件的props来影响子组件的行为和呈现。<br>在函数组件中，props作为参数传递给组件函数。在类组件中，props可以通过this.props进行访问。</p><ol><li>props基本使用</li></ol><pre><code class="html">    &lt;!-- 准备好一个“容器” --&gt;    &lt;div id=&quot;test1&quot;&gt;&lt;/div&gt;    &lt;div id=&quot;test2&quot;&gt;&lt;/div&gt;    &lt;div id=&quot;test3&quot;&gt;&lt;/div&gt;        &lt;!-- 引入react核心库 --&gt;    &lt;script type=&quot;text/javascript&quot; src=&quot;../js/react.development.js&quot;&gt;&lt;/script&gt;    &lt;!-- 引入react-dom，用于支持react操作DOM --&gt;    &lt;script type=&quot;text/javascript&quot; src=&quot;../js/react-dom.development.js&quot;&gt;&lt;/script&gt;    &lt;!-- 引入babel，用于将jsx转为js --&gt;    &lt;script type=&quot;text/javascript&quot; src=&quot;../js/babel.min.js&quot;&gt;&lt;/script&gt;    &lt;script type=&quot;text/babel&quot;&gt;        //创建组件        class Person extends React.Component&#123;            render()&#123;                // console.log(this);                const &#123;name,age,sex&#125; = this.props                return (                    &lt;ul&gt;                        &lt;li&gt;姓名：&#123;name&#125;&lt;/li&gt;                        &lt;li&gt;性别：&#123;sex&#125;&lt;/li&gt;                        &lt;li&gt;年龄：&#123;age+1&#125;&lt;/li&gt;                    &lt;/ul&gt;                )            &#125;        &#125;        //渲染组件到页面        ReactDOM.render(&lt;Person name=&quot;jerry&quot; age=&#123;19&#125;  sex=&quot;男&quot;/&gt;,document.getElementById(&#39;test1&#39;))        ReactDOM.render(&lt;Person name=&quot;tom&quot; age=&#123;18&#125; sex=&quot;女&quot;/&gt;,document.getElementById(&#39;test2&#39;))        const p = &#123;name:&#39;老刘&#39;,age:18,sex:&#39;女&#39;&#125;        // console.log(&#39;@&#39;,...p);        // ReactDOM.render(&lt;Person name=&#123;p.name&#125; age=&#123;p.age&#125; sex=&#123;p.sex&#125;/&gt;,document.getElementById(&#39;test3&#39;))        ReactDOM.render(&lt;Person &#123;...p&#125;/&gt;,document.getElementById(&#39;test3&#39;))    &lt;/script&gt;</code></pre><ol start="2"><li>对props进行限制</li></ol><pre><code class="html">    &lt;!-- 准备好一个“容器” --&gt;    &lt;div id=&quot;test1&quot;&gt;&lt;/div&gt;    &lt;div id=&quot;test2&quot;&gt;&lt;/div&gt;    &lt;div id=&quot;test3&quot;&gt;&lt;/div&gt;        &lt;!-- 引入react核心库 --&gt;    &lt;script type=&quot;text/javascript&quot; src=&quot;../js/react.development.js&quot;&gt;&lt;/script&gt;    &lt;!-- 引入react-dom，用于支持react操作DOM --&gt;    &lt;script type=&quot;text/javascript&quot; src=&quot;../js/react-dom.development.js&quot;&gt;&lt;/script&gt;    &lt;!-- 引入babel，用于将jsx转为js --&gt;    &lt;script type=&quot;text/javascript&quot; src=&quot;../js/babel.min.js&quot;&gt;&lt;/script&gt;    &lt;!-- 引入prop-types，用于对组件标签属性进行限制 --&gt;    &lt;script type=&quot;text/javascript&quot; src=&quot;../js/prop-types.js&quot;&gt;&lt;/script&gt;    &lt;script type=&quot;text/babel&quot;&gt;        //创建组件        class Person extends React.Component&#123;            render()&#123;                // console.log(this);                const &#123;name,age,sex&#125; = this.props                //props是只读的                //this.props.name = &#39;jack&#39; //此行代码会报错，因为props是只读的                return (                    &lt;ul&gt;                        &lt;li&gt;姓名：&#123;name&#125;&lt;/li&gt;                        &lt;li&gt;性别：&#123;sex&#125;&lt;/li&gt;                        &lt;li&gt;年龄：&#123;age+1&#125;&lt;/li&gt;                    &lt;/ul&gt;                )            &#125;        &#125;        //对标签属性进行类型、必要性的限制        Person.propTypes = &#123;            name:PropTypes.string.isRequired, //限制name必传，且为字符串            sex:PropTypes.string,//限制sex为字符串            age:PropTypes.number,//限制age为数值            speak:PropTypes.func,//限制speak为函数        &#125;        //指定默认标签属性值        Person.defaultProps = &#123;            sex:&#39;男&#39;,//sex默认值为男            age:18 //age默认值为18        &#125;        //渲染组件到页面        ReactDOM.render(&lt;Person name=&#123;100&#125; speak=&#123;speak&#125;/&gt;,document.getElementById(&#39;test1&#39;))        ReactDOM.render(&lt;Person name=&quot;tom&quot; age=&#123;18&#125; sex=&quot;女&quot;/&gt;,document.getElementById(&#39;test2&#39;))        const p = &#123;name:&#39;老刘&#39;,age:18,sex:&#39;女&#39;&#125;        // console.log(&#39;@&#39;,...p);        // ReactDOM.render(&lt;Person name=&#123;p.name&#125; age=&#123;p.age&#125; sex=&#123;p.sex&#125;/&gt;,document.getElementById(&#39;test3&#39;))        ReactDOM.render(&lt;Person &#123;...p&#125;/&gt;,document.getElementById(&#39;test3&#39;))        function speak()&#123;            console.log(&#39;我说话了&#39;);        &#125;    &lt;/script&gt;</code></pre><ol start="3"><li>props简写方式</li></ol><pre><code class="html">&lt;!-- 准备好一个“容器” --&gt;    &lt;div id=&quot;test1&quot;&gt;&lt;/div&gt;    &lt;div id=&quot;test2&quot;&gt;&lt;/div&gt;    &lt;div id=&quot;test3&quot;&gt;&lt;/div&gt;        &lt;!-- 引入react核心库 --&gt;    &lt;script type=&quot;text/javascript&quot; src=&quot;../js/react.development.js&quot;&gt;&lt;/script&gt;    &lt;!-- 引入react-dom，用于支持react操作DOM --&gt;    &lt;script type=&quot;text/javascript&quot; src=&quot;../js/react-dom.development.js&quot;&gt;&lt;/script&gt;    &lt;!-- 引入babel，用于将jsx转为js --&gt;    &lt;script type=&quot;text/javascript&quot; src=&quot;../js/babel.min.js&quot;&gt;&lt;/script&gt;    &lt;!-- 引入prop-types，用于对组件标签属性进行限制 --&gt;    &lt;script type=&quot;text/javascript&quot; src=&quot;../js/prop-types.js&quot;&gt;&lt;/script&gt;    &lt;script type=&quot;text/babel&quot;&gt;        //创建组件        class Person extends React.Component&#123;            constructor(props)&#123;                //构造器是否接收props，是否传递给super，取决于：是否希望在构造器中通过this访问props                // console.log(props);                super(props)                console.log(&#39;constructor&#39;,this.props);            &#125;            //对标签属性进行类型、必要性的限制            static propTypes = &#123;                name:PropTypes.string.isRequired, //限制name必传，且为字符串                sex:PropTypes.string,//限制sex为字符串                age:PropTypes.number,//限制age为数值            &#125;            //指定默认标签属性值            static defaultProps = &#123;                sex:&#39;男&#39;,//sex默认值为男                age:18 //age默认值为18            &#125;                        render()&#123;                // console.log(this);                const &#123;name,age,sex&#125; = this.props                //props是只读的                //this.props.name = &#39;jack&#39; //此行代码会报错，因为props是只读的                return (                    &lt;ul&gt;                        &lt;li&gt;姓名：&#123;name&#125;&lt;/li&gt;                        &lt;li&gt;性别：&#123;sex&#125;&lt;/li&gt;                        &lt;li&gt;年龄：&#123;age+1&#125;&lt;/li&gt;                    &lt;/ul&gt;                )            &#125;        &#125;        //渲染组件到页面        ReactDOM.render(&lt;Person name=&quot;jerry&quot;/&gt;,document.getElementById(&#39;test1&#39;))</code></pre><ol start="4"><li>函数组件使用props</li></ol><pre><code class="html">&lt;!-- 准备好一个“容器” --&gt;    &lt;div id=&quot;test1&quot;&gt;&lt;/div&gt;    &lt;div id=&quot;test2&quot;&gt;&lt;/div&gt;    &lt;div id=&quot;test3&quot;&gt;&lt;/div&gt;        &lt;!-- 引入react核心库 --&gt;    &lt;script type=&quot;text/javascript&quot; src=&quot;../js/react.development.js&quot;&gt;&lt;/script&gt;    &lt;!-- 引入react-dom，用于支持react操作DOM --&gt;    &lt;script type=&quot;text/javascript&quot; src=&quot;../js/react-dom.development.js&quot;&gt;&lt;/script&gt;    &lt;!-- 引入babel，用于将jsx转为js --&gt;    &lt;script type=&quot;text/javascript&quot; src=&quot;../js/babel.min.js&quot;&gt;&lt;/script&gt;    &lt;!-- 引入prop-types，用于对组件标签属性进行限制 --&gt;    &lt;script type=&quot;text/javascript&quot; src=&quot;../js/prop-types.js&quot;&gt;&lt;/script&gt;    &lt;script type=&quot;text/babel&quot;&gt;        //创建组件        function Person (props)&#123;            const &#123;name,age,sex&#125; = props            return (                    &lt;ul&gt;                        &lt;li&gt;姓名：&#123;name&#125;&lt;/li&gt;                        &lt;li&gt;性别：&#123;sex&#125;&lt;/li&gt;                        &lt;li&gt;年龄：&#123;age&#125;&lt;/li&gt;                    &lt;/ul&gt;                )        &#125;        Person.propTypes = &#123;            name:PropTypes.string.isRequired, //限制name必传，且为字符串            sex:PropTypes.string,//限制sex为字符串            age:PropTypes.number,//限制age为数值        &#125;        //指定默认标签属性值        Person.defaultProps = &#123;            sex:&#39;男&#39;,//sex默认值为男            age:18 //age默认值为18        &#125;        //渲染组件到页面        ReactDOM.render(&lt;Person name=&quot;jerry&quot;/&gt;,document.getElementById(&#39;test1&#39;))</code></pre><h2 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h2><p>Refs是React提供的一种访问DOM元素或组件实例的方法。</p><p>Refs主要用于以下几个方面：</p><p>访问DOM元素：通过ref属性将DOM元素与React组件关联起来，从而可以直接访问和操作该DOM元素。<br>访问组件实例：通过ref属性将组件实例与另一个组件关联起来，从而可以直接调用被关联组件的方法或访问其属性。<br>在函数组件中，可以使用useRef钩子来创建和访问引用。在类组件中，可以使用createRef方法来创建和访问引用。</p><ol><li>字符串形式的ref</li></ol><pre><code class="html">    &lt;script type=&quot;text/babel&quot;&gt;        //创建组件        class Demo extends React.Component &#123;            //展示左侧输入框的数据            showData = () =&gt; &#123;                const &#123; input1 &#125; = this.refs                alert(input1.value)            &#125;            //展示右侧输入框的数据            showData2 = () =&gt; &#123;                const &#123; input2 &#125; = this.refs                alert(input2.value)            &#125;            render() &#123;                return (                    &lt;div&gt;                        &lt;input ref=&quot;input1&quot; type=&quot;text&quot; placeholder=&quot;点击按钮提示数据&quot; /&gt;&amp;nbsp;                        &lt;button onClick=&#123;this.showData&#125;&gt;点我提示左侧的数据&lt;/button&gt;&amp;nbsp;                        &lt;input ref=&quot;input2&quot; onBlur=&#123;this.showData2&#125; type=&quot;text&quot; placeholder=&quot;失去焦点提示数据&quot; /&gt;                    &lt;/div&gt;                )            &#125;        &#125;        //渲染组件到页面        ReactDOM.render(&lt;Demo a=&quot;1&quot; b=&quot;2&quot; /&gt;, document.getElementById(&#39;test&#39;))    &lt;/script&gt;</code></pre><ol start="2"><li>回调函数形式的ref</li></ol><pre><code class="html">    &lt;script type=&quot;text/babel&quot;&gt;        //创建组件        class Demo extends React.Component&#123;            //展示左侧输入框的数据            showData = ()=&gt;&#123;                const &#123;input1&#125; = this                alert(input1.value)            &#125;            //展示右侧输入框的数据            showData2 = ()=&gt;&#123;                const &#123;input2&#125; = this                alert(input2.value)            &#125;            render()&#123;                return(                    &lt;div&gt;                        &lt;input ref=&#123;c =&gt; this.input1 = c &#125; type=&quot;text&quot; placeholder=&quot;点击按钮提示数据&quot;/&gt;&amp;nbsp;                        &lt;button onClick=&#123;this.showData&#125;&gt;点我提示左侧的数据&lt;/button&gt;&amp;nbsp;                        &lt;input onBlur=&#123;this.showData2&#125; ref=&#123;c =&gt; this.input2 = c &#125; type=&quot;text&quot; placeholder=&quot;失去焦点提示数据&quot;/&gt;&amp;nbsp;                    &lt;/div&gt;                )            &#125;        &#125;        //渲染组件到页面        ReactDOM.render(&lt;Demo a=&quot;1&quot; b=&quot;2&quot;/&gt;,document.getElementById(&#39;test&#39;))    &lt;/script&gt;</code></pre><ol start="3"><li>回调ref中回调执行次数的问题</li></ol><pre><code class="html">&lt;script type=&quot;text/babel&quot;&gt;        //创建组件        class Demo extends React.Component&#123;            state = &#123;isHot:false&#125;            showInfo = ()=&gt;&#123;                const &#123;input1&#125; = this                alert(input1.value)            &#125;            changeWeather = ()=&gt;&#123;                //获取原来的状态                const &#123;isHot&#125; = this.state                //更新状态                this.setState(&#123;isHot:!isHot&#125;)            &#125;            saveInput = (c)=&gt;&#123;                this.input1 = c;                console.log(&#39;@&#39;,c);            &#125;            render()&#123;                const &#123;isHot&#125; = this.state                return(                    &lt;div&gt;                        &lt;h2&gt;今天天气很&#123;isHot ? &#39;炎热&#39;:&#39;凉爽&#39;&#125;&lt;/h2&gt;                        &#123;/*&lt;input ref=&#123;(c)=&gt;&#123;this.input1 = c;console.log(&#39;@&#39;,c);&#125;&#125; type=&quot;text&quot;/&gt;&lt;br/&gt;&lt;br/&gt;*/&#125;                        &lt;input ref=&#123;this.saveInput&#125; type=&quot;text&quot;/&gt;&lt;br/&gt;&lt;br/&gt;                        &lt;button onClick=&#123;this.showInfo&#125;&gt;点我提示输入的数据&lt;/button&gt;                        &lt;button onClick=&#123;this.changeWeather&#125;&gt;点我切换天气&lt;/button&gt;                    &lt;/div&gt;                )            &#125;        &#125;        //渲染组件到页面        ReactDOM.render(&lt;Demo/&gt;,document.getElementById(&#39;test&#39;))&lt;/script&gt;</code></pre><ol start="4"><li>createRef</li></ol><pre><code class="html">&lt;script type=&quot;text/babel&quot;&gt;        //创建组件        class Demo extends React.Component&#123;            /*                 React.createRef调用后可以返回一个容器，该容器可以存储被ref所标识的节点,该容器是“专人专用”的             */            myRef = React.createRef()            myRef2 = React.createRef()            //展示左侧输入框的数据            showData = ()=&gt;&#123;                alert(this.myRef.current.value);            &#125;            //展示右侧输入框的数据            showData2 = ()=&gt;&#123;                alert(this.myRef2.current.value);            &#125;            render()&#123;                return(                    &lt;div&gt;                        &lt;input ref=&#123;this.myRef&#125; type=&quot;text&quot; placeholder=&quot;点击按钮提示数据&quot;/&gt;&amp;nbsp;                        &lt;button onClick=&#123;this.showData&#125;&gt;点我提示左侧的数据&lt;/button&gt;&amp;nbsp;                        &lt;input onBlur=&#123;this.showData2&#125; ref=&#123;this.myRef2&#125; type=&quot;text&quot; placeholder=&quot;失去焦点提示数据&quot;/&gt;&amp;nbsp;                    &lt;/div&gt;                )            &#125;        &#125;        //渲染组件到页面        ReactDOM.render(&lt;Demo a=&quot;1&quot; b=&quot;2&quot;/&gt;,document.getElementById(&#39;test&#39;))    &lt;/script&gt;</code></pre><h1 id="react-事件处理"><a href="#react-事件处理" class="headerlink" title="react 事件处理"></a>react 事件处理</h1><pre><code class="html">&lt;script type=&quot;text/babel&quot;&gt;        //创建组件        class Demo extends React.Component&#123;            /*                 (1).通过onXxx属性指定事件处理函数(注意大小写)                        a.React使用的是自定义(合成)事件, 而不是使用的原生DOM事件 —————— 为了更好的兼容性                        b.React中的事件是通过事件委托方式处理的(委托给组件最外层的元素) ————————为了的高效                (2).通过event.target得到发生事件的DOM元素对象 ——————————不要过度使用ref             */            //创建ref容器            myRef = React.createRef()            myRef2 = React.createRef()            //展示左侧输入框的数据            showData = (event)=&gt;&#123;                console.log(event.target);                alert(this.myRef.current.value);            &#125;            //展示右侧输入框的数据            showData2 = (event)=&gt;&#123;                alert(event.target.value);            &#125;            render()&#123;                return(                    &lt;div&gt;                        &lt;input ref=&#123;this.myRef&#125; type=&quot;text&quot; placeholder=&quot;点击按钮提示数据&quot;/&gt;&amp;nbsp;                        &lt;button onClick=&#123;this.showData&#125;&gt;点我提示左侧的数据&lt;/button&gt;&amp;nbsp;                        &lt;input onBlur=&#123;this.showData2&#125; type=&quot;text&quot; placeholder=&quot;失去焦点提示数据&quot;/&gt;&amp;nbsp;                    &lt;/div&gt;                )            &#125;        &#125;        //渲染组件到页面        ReactDOM.render(&lt;Demo a=&quot;1&quot; b=&quot;2&quot;/&gt;,document.getElementById(&#39;test&#39;))    &lt;/script&gt;</code></pre><h1 id="react-非受控组件-和-受控组件"><a href="#react-非受控组件-和-受控组件" class="headerlink" title="react 非受控组件 和 受控组件"></a>react 非受控组件 和 受控组件</h1><p>在React中，有两种常见的表单组件模式，即受控组件和非受控组件。它们之间的区别主要在于对表单数据的处理方式。</p><ol><li>非受控组件</li></ol><p>非受控组件是指将表单元素的值交由DOM本身来管理，而非由React组件状态来管理。它们依赖于对DOM节点的引用（ref）来获取表单值。</p><p>当用户输入时，可以直接通过引用访问到表单元素的当前值。通常使用ref.current.value来读取或操作表单的值。</p><pre><code class="JavaScript">class MyForm extends React.Component &#123;  inputRef = React.createRef();  handleSubmit = (event) =&gt; &#123;    event.preventDefault();    console.log(&quot;Submitted value:&quot;, this.inputRef.current.value);  &#125;  render() &#123;    return (      &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;        &lt;input type=&quot;text&quot; ref=&#123;this.inputRef&#125; /&gt;        &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;      &lt;/form&gt;    );  &#125;&#125;</code></pre><ol start="2"><li>受控组件<br>受控组件是指由React组件来管理表单元素的状态和值。通常，通过使用state来存储表单元素的值，并使用onChange事件来更新state。</li></ol><p>当用户输入时，React会更新状态并重新渲染组件，从而保持表单值与组件状态的同步。这使得可以通过this.state获取或操作表单的当前值</p><pre><code class="JavaScript">class MyForm extends React.Component &#123;  constructor(props) &#123;    super(props);    this.state = &#123;      inputValue: &quot;&quot;    &#125;;  &#125;  handleChange = (event) =&gt; &#123;    this.setState(&#123; inputValue: event.target.value &#125;);  &#125;  handleSubmit = (event) =&gt; &#123;    event.preventDefault();    console.log(&quot;Submitted value:&quot;, this.state.inputValue);  &#125;  render() &#123;    return (      &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;        &lt;input          type=&quot;text&quot;          value=&#123;this.state.inputValue&#125;          onChange=&#123;this.handleChange&#125;        /&gt;        &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;      &lt;/form&gt;    );  &#125;&#125;</code></pre><p>总结：</p><p>受控组件适用于需要在React组件中对表单值进行处理和验证的情况。它提供了更多的控制和灵活性，但需要更多的代码和状态管理。<br>非受控组件适用于独立的简单表单，将表单值的控制权交给DOM本身。它通常比较简洁，但在某些情况下可能会更难实现复杂的表单验证和自定义处理逻辑。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>step.4 redux</title>
      <link href="/computer-science/react0-1/redux/"/>
      <url>/computer-science/react0-1/redux/</url>
      
        <content type="html"><![CDATA[<h1 id="初步使用Redux"><a href="#初步使用Redux" class="headerlink" title="初步使用Redux"></a>初步使用Redux</h1><ol><li>安装Redux</li></ol><pre><code class="javascript">npm i redux</code></pre><ol start="2"><li>配置状态机(最佳实现版本)<br>store.js</li></ol><pre><code class="javascript">//引入createStore，专门用于创建redux中最为核心的store对象import &#123; createStore, applyMiddleware &#125; from &#39;redux&#39;//引入汇总之后的reducerimport reducer from &#39;./reducers&#39;//引入redux-thunk，用于支持异步actionimport thunk from &#39;redux-thunk&#39;//引入redux-devtools-extensionimport &#123; composeWithDevTools &#125; from &#39;redux-devtools-extension&#39;//暴露store export default createStore(reducer, composeWithDevTools(applyMiddleware(thunk)))</code></pre><h1 id="Redux的核心概念"><a href="#Redux的核心概念" class="headerlink" title="Redux的核心概念"></a>Redux的核心概念</h1><p><img data-src="/images/reactimg/redux%E5%8E%9F%E7%90%86%E5%9B%BE.png"></p><ol><li>工作流程</li></ol><ul><li>在store仓库中定义初始化的数据</li><li>组件中使用store.getState()获取到仓库的定义的数据，store中会自带dispatch方法（该方法中会有一个返回值，此返回值为action对象），通过store.dispatch()方法将定义好的数据传给store</li><li>action是一个通知对象（该对象中必须要有一个type属性，其他属性可以任意添加）</li><li>store中createStore有两个参数：createStore(参数一，参数二)</li></ul><ol><li>参数一是一个回调函数，可以简单理解为处理初始数据的reducer，store仓库通过reducer进行数据处理，并且再将处理后的值返回给reducer</li><li>参数二可以接收到组件传过来的数据</li></ol><ul><li>此时组件中的值也会随之发生变化。形成闭环功能</li></ul><ol start="2"><li>工作流程</li></ol><ul><li>state</li></ul><ol><li>state:状态，就是我们传递的数据</li></ol><ul><li>action</li></ul><ol><li>action是一个通知对象，里面必须有一个type属性，表示当前通知的类型，至于其他属性，你可以任意添加</li><li>可以通过store.dispatch(action对象)来更新仓库中的数据</li></ol><ul><li>reducer</li></ul><ol><li>reducer本质是一个函数，它用来响应发送过来的actions,经过处理把state发送给store</li><li>reducer函数中，需要return返回值，这样store才能接收到数据</li><li>reducer函数接收两个参数，第一个参数是初始化store,第二个参数是action</li></ol><ul><li>store</li></ul><ol><li>数据仓库，存放组件数据的地方。一个项目一般只有一个数据仓库,store可以把action和reducer联系在一起</li></ol><ul><li>主要的职责</li></ul><ol><li>维护应用的state</li><li>提供getState()方法获取state</li><li>提供dispatch()方法发送action</li><li>通过subscribe()来注册监听</li><li>通过subscribe()返回值来注销监听</li></ol><h1 id="react-redux使用"><a href="#react-redux使用" class="headerlink" title="react-redux使用"></a>react-redux使用</h1><p><img data-src="/images/reactimg/react-redux%E6%A8%A1%E5%9E%8B%E5%9B%BE.png"></p><ol><li>安装react-redux</li></ol><pre><code class="javascript">yarn add reduxyarn add react-redux//必须先安装redux插件 </code></pre><ol start="2"><li>全局注入store仓库</li></ol><pre><code class="javascript">//导入import &#123;Provider&#125; from &#39;react-redux&#39;//将跟组件App进行包裹//Provider中自带store属性，参数store为创建的store仓库文件root.render(    &lt;Provider store=&#123;store&#125;&gt;      &lt;App /&gt;    &lt;/Provider&gt;);</code></pre><ol start="3"><li>组件关联仓库</li></ol><pre><code class="javascript">import React from &#39;react&#39;import &#123; connect &#125; from &#39;react-redux&#39; function Counter() &#123;  render() &#123;    return (      &lt;div&gt;                &lt;/div&gt;    )  &#125;&#125;export default connect()(Counter)//connect是一个高阶组件，该组件中内部还有一个函数，所以写法为connect()()//第二个方法写入创建的函数组件名称//第一个方法是一个回调函数，此函数自带一个参数，该参数是从store仓库获得到的数据，在该回调函数中返回一个对象，该对象会和组件的props进行合并const mapStateToProps = (state) =&gt; &#123;    return &#123;        数据名: 从 state 中获取的数据值    &#125;&#125;export default connect(mapStateToProps)(Counter); 定义好之后就可以在组件的prop访问到对应的store仓库数据function Counter(props)    render() &#123;        return (            &lt;div&gt;                &lt;h1&gt;计数器&lt;/h1&gt;                &lt;h2&gt;&#123;props.数据名&#125;&lt;/h2&gt;            &lt;/div&gt;        )    &#125;&#125;</code></pre><h1 id="状态机的Hook"><a href="#状态机的Hook" class="headerlink" title="状态机的Hook"></a>状态机的Hook</h1><ol><li>useSelect</li></ol><pre><code class="javascript">import &#123;useSelector&#125; from &#39;react-redux&#39;export default App()&#123;    const list = useSelector((state)=&gt;&#123;        return state    &#125;)&#125;//state:store仓库中所有的初始数据</code></pre><ol start="2"><li>useDispatch</li></ol><pre><code class="javascript">import &#123;useDispatch&#125; from &#39;react-redux&#39;export default App()&#123;    const dispatch = useDispatch()    dispatch(action对象)&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>step.6 react常用hook</title>
      <link href="/computer-science/react0-1/%E5%B8%B8%E7%94%A8hook/"/>
      <url>/computer-science/react0-1/%E5%B8%B8%E7%94%A8hook/</url>
      
        <content type="html"><![CDATA[<h1 id="useEffect-用于在组件渲染后执行副作用操作。副作用操作可以包括数据获取、订阅事件、操作-DOM-元素等"><a href="#useEffect-用于在组件渲染后执行副作用操作。副作用操作可以包括数据获取、订阅事件、操作-DOM-元素等" class="headerlink" title="useEffect(用于在组件渲染后执行副作用操作。副作用操作可以包括数据获取、订阅事件、操作 DOM 元素等)"></a>useEffect(用于在组件渲染后执行副作用操作。副作用操作可以包括数据获取、订阅事件、操作 DOM 元素等)</h1><p>useEffect 的执行机制如下：</p><ol><li>组件的初始渲染和每次更新时，都会执行 useEffect 中的回调函数。</li><li>在执行回调函数之前，React 会对上一次渲染中产生的副作用进行清理（即执行上一次 useEffect 返回的清理函数）。</li><li>执行回调函数。</li><li>如果 useEffect 返回一个函数，则该函数将用作清理函数。在下一次渲染或组件卸载时，会先执行这个清理函数，然后再执行下一个 useEffect 的回调函数。</li></ol><pre><code class="javascript">import &#123; useEffect &#125; from &#39;react&#39;;function MyComponent() &#123;  useEffect(() =&gt; &#123;    // 在组件渲染完成后执行的副作用操作    console.log(&#39;Component mounted&#39;);        return () =&gt; &#123;      // 在组件卸载前执行的清理操作      console.log(&#39;Component unmounted&#39;);    &#125;;  &#125;, []); &#125;</code></pre><h1 id="useState-用于在函数组件中声明和管理状态。它返回一个数组，其中第一个元素是当前状态的值，第二个元素是更新状态的函数"><a href="#useState-用于在函数组件中声明和管理状态。它返回一个数组，其中第一个元素是当前状态的值，第二个元素是更新状态的函数" class="headerlink" title="useState(用于在函数组件中声明和管理状态。它返回一个数组，其中第一个元素是当前状态的值，第二个元素是更新状态的函数)"></a>useState(用于在函数组件中声明和管理状态。它返回一个数组，其中第一个元素是当前状态的值，第二个元素是更新状态的函数)</h1><pre><code class="javascript">import &#123; useState &#125; from &#39;react&#39;;function Counter() &#123;  const [count, setCount] = useState(0); // 初始状态为 0  const increment = () =&gt; &#123;    setCount(count + 1);  &#125;;  return (    &lt;div&gt;      &lt;p&gt;Count: &#123;count&#125;&lt;/p&gt;      &lt;button onClick=&#123;increment&#125;&gt;Increment&lt;/button&gt;    &lt;/div&gt;  );&#125;</code></pre><h1 id="useReducer-用于管理复杂的状态逻辑。它类似于-useState，但接受一个-reducer-函数和初始状态作为参数，并返回当前状态和一个发送更新请求的函数"><a href="#useReducer-用于管理复杂的状态逻辑。它类似于-useState，但接受一个-reducer-函数和初始状态作为参数，并返回当前状态和一个发送更新请求的函数" class="headerlink" title="useReducer(用于管理复杂的状态逻辑。它类似于 useState，但接受一个 reducer 函数和初始状态作为参数，并返回当前状态和一个发送更新请求的函数)"></a>useReducer(用于管理复杂的状态逻辑。它类似于 useState，但接受一个 reducer 函数和初始状态作为参数，并返回当前状态和一个发送更新请求的函数)</h1><pre><code class="javascript">import &#123; useReducer &#125; from &#39;react&#39;;const initialState = &#123; count: 0 &#125;;function reducer(state, action) &#123;  switch (action.type) &#123;    case &#39;increment&#39;:      return &#123; count: state.count + 1 &#125;;    case &#39;decrement&#39;:      return &#123; count: state.count - 1 &#125;;    default:      throw new Error();  &#125;&#125;function Counter() &#123;  const [state, dispatch] = useReducer(reducer, initialState);  const increment = () =&gt; &#123;    dispatch(&#123; type: &#39;increment&#39; &#125;);  &#125;;  const decrement = () =&gt; &#123;    dispatch(&#123; type: &#39;decrement&#39; &#125;);  &#125;;  return (    &lt;div&gt;      &lt;p&gt;Count: &#123;state.count&#125;&lt;/p&gt;      &lt;button onClick=&#123;increment&#125;&gt;Increment&lt;/button&gt;      &lt;button onClick=&#123;decrement&#125;&gt;Decrement&lt;/button&gt;    &lt;/div&gt;  );&#125;</code></pre><h1 id="useCallback-用于缓存函数引用，避免不必要的重新创建。它接收一个回调函数和依赖项数组，并返回一个缓存的回调函数"><a href="#useCallback-用于缓存函数引用，避免不必要的重新创建。它接收一个回调函数和依赖项数组，并返回一个缓存的回调函数" class="headerlink" title="useCallback(用于缓存函数引用，避免不必要的重新创建。它接收一个回调函数和依赖项数组，并返回一个缓存的回调函数)"></a>useCallback(用于缓存函数引用，避免不必要的重新创建。它接收一个回调函数和依赖项数组，并返回一个缓存的回调函数)</h1><pre><code class="javascript">import &#123; useCallback, useState &#125; from &#39;react&#39;;function MyComponent() &#123;  const [count, setCount] = useState(0);    // 当 count 发生变化时，重新创建回调函数  const handleClick = useCallback(() =&gt; &#123;    setCount(count + 1);  &#125;, [count]);  return (    &lt;div&gt;      &lt;p&gt;Count: &#123;count&#125;&lt;/p&gt;      &lt;button onClick=&#123;handleClick&#125;&gt;Increment&lt;/button&gt;    &lt;/div&gt;  );&#125;</code></pre><h1 id="useRef-用于在函数组件中创建持久性的引用。它返回一个可变的-ref-对象，对象的-current-属性可以存储任意值，并且在组件重新渲染时保持不变"><a href="#useRef-用于在函数组件中创建持久性的引用。它返回一个可变的-ref-对象，对象的-current-属性可以存储任意值，并且在组件重新渲染时保持不变" class="headerlink" title="useRef(用于在函数组件中创建持久性的引用。它返回一个可变的 ref 对象，对象的 current 属性可以存储任意值，并且在组件重新渲染时保持不变)"></a>useRef(用于在函数组件中创建持久性的引用。它返回一个可变的 ref 对象，对象的 current 属性可以存储任意值，并且在组件重新渲染时保持不变)</h1><pre><code class="javascript">import &#123; useRef &#125; from &#39;react&#39;;function MyComponent() &#123;  const inputRef = useRef();  const handleClick = () =&gt; &#123;    inputRef.current.focus();  &#125;;  return (    &lt;div&gt;      &lt;input ref=&#123;inputRef&#125; type=&quot;text&quot; /&gt;      &lt;button onClick=&#123;handleClick&#125;&gt;Focus input&lt;/button&gt;    &lt;/div&gt;  );&#125;</code></pre><h1 id="useMemo-用于进行性能优化，避免不必要的重计算。它接收一个计算函数和依赖项数组作为参数，并返回计算结果。当依赖项数组发生变化时，useMemo-会重新执行计算函数并返回新的结果；当依赖项数组未发生变化时，useMemo-会直接返回上一次的计算结果"><a href="#useMemo-用于进行性能优化，避免不必要的重计算。它接收一个计算函数和依赖项数组作为参数，并返回计算结果。当依赖项数组发生变化时，useMemo-会重新执行计算函数并返回新的结果；当依赖项数组未发生变化时，useMemo-会直接返回上一次的计算结果" class="headerlink" title="useMemo(用于进行性能优化，避免不必要的重计算。它接收一个计算函数和依赖项数组作为参数，并返回计算结果。当依赖项数组发生变化时，useMemo 会重新执行计算函数并返回新的结果；当依赖项数组未发生变化时，useMemo 会直接返回上一次的计算结果)"></a>useMemo(用于进行性能优化，避免不必要的重计算。它接收一个计算函数和依赖项数组作为参数，并返回计算结果。当依赖项数组发生变化时，useMemo 会重新执行计算函数并返回新的结果；当依赖项数组未发生变化时，useMemo 会直接返回上一次的计算结果)</h1><pre><code class="javascript">import &#123; useMemo &#125; from &#39;react&#39;;function MyComponent() &#123;  const expensiveResult = useMemo(() =&gt; &#123;    // 计算昂贵的结果    return computeExpensiveResult(dep1, dep2);  &#125;, [dep1, dep2]); // 依赖项数组  return &lt;p&gt;&#123;expensiveResult&#125;&lt;/p&gt;;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>step.5 react性能优化</title>
      <link href="/computer-science/react0-1/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/computer-science/react0-1/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="react-性能优化"><a href="#react-性能优化" class="headerlink" title="react 性能优化"></a>react 性能优化</h1><p><strong>React组件性能优化的核心是降低渲染真实DOM节点的频率，降低Virtual DOM比较的频率。如果子组件没有改变数据，则子组件不会被渲染。</strong></p><ol><li><p>使用生命周期方法优化：React 的生命周期方法提供了控制组件行为的机会。你可以使用 shouldComponentUpdate 方法来避免不必要的重新渲染。在该方法中，你可以比较前后 props 和 state 的值，决定是否需要更新组件。此外，使用 componentDidUpdate 方法可以在组件更新后执行一些必要的操作。</p></li><li><p>使用 Pure Components：Pure Components 是 React 提供的一个优化工具，它们自动帮助我们实现了 shouldComponentUpdate 方法的逻辑。相比普通的组件，Pure Components 只在其 props 或 state 发生变化时进行重新渲染。使用 Pure Components 可以有效地减少不必要的重新渲染，提高性能。</p></li><li><p>使用 React.memo()：React.memo() 是一个高阶组件，它可以记忆组件的渲染结果，当组件的 props 没有变化时，会直接返回上次的渲染结果，从而避免不必要的重新渲染。使用 React.memo() 可以提高组件的性能，特别是在函数组件中非常有用。</p></li><li><p>使用 keys 来管理列表项：在渲染列表时，给每个列表项分配一个唯一的 key 属性可以帮助 React 更好地识别和管理列表项的变化。这样，在列表项发生变化时，React 可以更准确地判断哪些项需要更新，从而避免不必要的重新渲染。</p></li><li><p>使用虚拟化技术：当渲染大量数据时，可以使用虚拟化技术来提高性能。例如，使用 react-virtualized 或 react-window 这样的库可以只渲染可见部分的数据，而不是全部渲染。这样可以有效地减少 DOM 元素的数量，提高列表的渲染性能。</p></li><li><p>使用优化后的事件处理程序：在 React 中，每次组件重新渲染时，都会创建新的事件处理程序。为了避免这种性能损耗，可以使用 useCallback() 来优化事件处理函数，并将它们作为依赖传递给子组件，以防止不必要的重新渲染。</p></li><li><p>使用 code-splitting 技术：当应用程序变得越来越庞大时，可以将应用程序拆分成多个较小的代码块，然后按需加载，以提高初始加载速度。React 提供了 React.lazy() 和 Suspense 组件来实现代码拆分和懒加载。</p></li><li><p>合理使用 Immutable 数据结构：使用不可变的数据结构可以降低 React 的重新渲染频率。当我们使用不可变的数据结构时，只需要比较引用而不是每个数据项的值。可以使用 Immutable.js 或通过手动进行浅比较来实现这一点。</p></li><li><p>使用 memoization 技术：Memoization 是一种缓存计算结果的技术，在函数组件中可以通过 useMemo() 和 useCallback() 来实现。通过将计算结果缓存起来，可以避免不必要的重复计算和重新渲染。</p></li><li><p>避免在渲染过程中执行昂贵的操作：在组件的渲染过程中，尽量避免执行昂贵的操作，例如大量的计算、网络请求或 DOM 操作。这些操作会导致组件的渲染变慢，并可能引起阻塞和性能问题。可以使用 useEffect() 来延迟执行这些操作，或者将它们放在合适的生命周期方法中执行。</p></li><li><p>使用合适的数据结构和算法：选择合适的数据结构和算法对于性能优化至关重要。例如，在处理大量数据时，使用 Set 或 Map 来替代数组可以提高查找和删除的性能。同时，选择高效的算法可以减少不必要的计算量。</p></li><li><p>懒加载组件：如果应用程序拥有很多组件，可以考虑使用懒加载的方式来优化性能。懒加载可以延迟组件的加载时间，只有在需要的时候才进行加载和渲染。</p></li></ol><pre><code class="JavaScript">1. 原来的导入方式import MyComponent from &#39;./MyComponent&#39;;替换为动态导入const MyComponent = React.lazy(() =&gt; import(&#39;./MyComponent&#39;));2. 使用 React.lazy() 函数来创建一个懒加载的组件。这个函数接收一个函数作为参数，这个函数需要返回一个 import() 方法调用，用于导入组件的模块。注意，这个返回值应该是一个 Promise 对象。3.在需要使用懒加载组件的地方，使用 &lt;React.Suspense&gt; 组件包裹起来，以便在组件加载过程中显示一些占位内容或加载指示器import React, &#123; Suspense &#125; from &#39;react&#39;;function App() &#123;  return (    &lt;div&gt;      &lt;h1&gt;My App&lt;/h1&gt;      &lt;Suspense fallback=&#123;&lt;div&gt;Loading...&lt;/div&gt;&#125;&gt;        &lt;MyComponent /&gt;      &lt;/Suspense&gt;    &lt;/div&gt;  );&#125;</code></pre><ol start="13"><li>使用性能优化工具：除了上述的方法，还可以使用一些性能优化工具来帮助分析和改进 React 应用的性能。例如，React DevTools、Lighthouse、Webpack Bundle Analyzer 等工具可以提供有关性能瓶颈和优化建议的详细信息。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>step.7 react源码核心</title>
      <link href="/computer-science/react0-1/%E6%BA%90%E7%A0%81%E6%A0%B8%E5%BF%83/"/>
      <url>/computer-science/react0-1/%E6%BA%90%E7%A0%81%E6%A0%B8%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<ol><li><p>虚拟DOM（Virtual DOM）：React 使用虚拟DOM作为其核心概念。虚拟DOM是一个轻量级的JavaScript对象，它描述了实际DOM树的结构和属性。React通过比较新旧虚拟DOM之间的差异来最小化实际DOM的操作，提高性能。</p></li><li><p>组件声明：React允许开发者使用类组件或函数组件来声明UI组件。在源码中，React提供了相关的方法和类来定义和管理组件的生命周期、状态、属性等。</p></li><li><p>渲染引擎：React的渲染引擎负责将组件的虚拟DOM转化为实际DOM，并将其插入到文档中。React的渲染过程是基于协调的机制，通过比较新旧虚拟DOM的差异，仅更新需要改变的部分，从而提高渲染性能。</p></li><li><p>调度器（Scheduler）：React使用调度器来管理组件的更新和重渲染。调度器决定何时执行组件的更新并控制更新的优先级。React通过这种方式实现了批量更新和异步渲染，从而提高性能和交互响应性。</p></li><li><p>Hooks系统：React引入了Hooks系统来处理组件逻辑的复用和状态管理。Hooks允许我们在函数组件中使用状态、副作用和其他特性，避免了类组件和高阶组件的复杂性。</p></li><li><p>协调算法：React使用协调算法来比较虚拟DOM的差异，并决定哪些部分需要更新。React的协调算法是基于Diff算法的优化版本，它通过树的分层比较和启发式策略来减少比较的次数，以提高性能。</p></li><li><p>事件系统：React提供了一套事件系统，用于处理DOM事件和合成事件。这个事件系统允许开发者在组件中注册事件处理函数，并且提供了一些优化措施，如事件委托和事件池，以提高事件处理的性能和效率。</p></li><li><p>调试工具：React提供了一系列的调试工具，如React Developer Tools，用于帮助开发者分析和调试React应用。这些工具包括组件层级检查、性能分析、状态变更跟踪等功能，可以大大简化调试过程。</p></li><li><p>Fiber架构：React引入了Fiber架构来改进其内部工作方式。Fiber架构将渲染过程分解为可中断的任务单元，使得React能够在运行时调整和中断任务的优先级，从而更好地控制渲染和响应用户操作。</p></li><li><p>批量更新：React通过批量更新机制来减少不必要的渲染。在一次事件循环中，React将多个更新合并为一次更新，并且在合适的时机进行渲染，以提高性能。</p></li><li><p>Context（上下文）：React提供了Context API，用于在组件树中共享数据。Context允许开发者将数据传递给组件树中的多个层级，而不需要手动通过props进行逐层传递。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>step.2 react生命周期</title>
      <link href="/computer-science/react0-1/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/computer-science/react0-1/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="react-16-8"><a href="#react-16-8" class="headerlink" title="react 16.8"></a>react 16.8</h1><p><img data-src="/images/reactimg/2_react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F(%E6%97%A7).png"></p><ol><li>初始化阶段: 由ReactDOM.render()触发—初次渲染<ol><li>   constructor()</li><li>   componentWillMount()<br>  初始化状态和数据,发起网络请求或订阅事件, 服务端渲染(在服务器端渲染 (Server-Side Rendering, SSR) 的应用程序中，componentWillMount 可以用于在组件首次渲染之前获取所需的数据，以便服务器能够将数据注入到 HTML 中，提供给客户端使用)</li><li>   render()</li><li>   componentDidMount() &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; 常用<br>  一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息</li></ol></li><li>更新阶段: 由组件内部this.setSate()或父组件render触发<ol><li><p>   shouldComponentUpdate()<br>  shouldComponentUpdate 在组件即将更新之前被调用。<br>  它接收两个参数：nextProps 和 nextState，表示组件即将接收的新属性和新状态。<br>  默认情况下，shouldComponentUpdate 返回 true，表示组件将会更新。但是，你可以通过自定义逻辑来判断是否需要更新组件。<br>  通过在 shouldComponentUpdate 中进行逻辑判断，可以提高应用程序的性能，避免不必要的组件渲染。</p></li><li><p>   componentWillUpdate()<br>  componentWillUpdate 在组件即将更新时被调用。<br>  它接收两个参数：nextProps 和 nextState，表示组件即将接收的新属性和新状态。<br>  在 componentWillUpdate 中，你可以执行一些更新前的准备工作，但是不允许使用 setState 方法，因为组件此时还没有更新。<br><br>  具体可以做哪些操作：<br>  计算和准备数据：你可以根据当前的属性 (props) 和状态 (state)，计算并准备一些数据，以供组件的更新使用。<br><br>  缓存 DOM 元素和测量数据：如果需要对 DOM 元素进行操作或者获取其尺寸等信息，你可以在 componentWillUpdate 中缓存相关的 DOM 元素或者进行测量，并将结果保存在组件的实例变量中。<br><br>  取消订阅和清理资源：在 componentWillUpdate 中，你可以取消之前的订阅、清理定时器、关闭网络连接等操作，以避免不必要的资源占用。<br><br>  更新外部库或框架：如果你使用了其他的第三方库或框架，你可以在 componentWillUpdate 中更新这些库或框架的相关状态或数据。<br><br>  验证和处理属性的改变：通过比较 nextProps 和当前的 props，你可以检测属性的改变并进行相应的处理。例如，根据属性的改变请求新的数据或触发其他操作。</p></li><li><p>   render() &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; 必须使用的一个</p></li><li><p>   componentDidUpdate()<br>  componentDidUpdate 在组件更新之后被调用。<br>  它接收两个参数：prevProps 和 prevState，表示组件更新之前的属性和状态。<br>  在 componentDidUpdate 中，你可以执行一些更新后的操作，例如对 DOM 进行操作、发起网络请求等。<br>  需要注意的是，你必须在 componentDidUpdate 中进行条件判断，避免无限循环的更新。</p></li></ol></li><li>卸载组件: 由ReactDOM.unmountComponentAtNode()触发<ol><li>   componentWillUnmount()  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; 常用<br>  一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息</li></ol></li></ol><h1 id="react-17"><a href="#react-17" class="headerlink" title="react 17"></a>react 17</h1><p><img data-src="/images/reactimg/3_react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F(%E6%96%B0).png"></p><ol><li>初始化阶段: 由ReactDOM.render()触发—初次渲染<ol><li><p>   constructor()</p></li><li><p>   getDerivedStateFromProps<br>  getDerivedStateFromProps 在组件接收到新的属性 (props) 时被调用。<br>  它接收两个参数：props 和 state，并返回一个对象来更新状态 (state) 或 null。<br>  你可以使用 getDerivedStateFromProps 来根据属性计算和更新状态，但是它应该被谨慎使用，因为大部分情况下使用 props 直接渲染组件更加合理。<br>  static getDerivedStateFromProps(props, state) {<br>&#x2F;&#x2F; 假设要根据传入的新属性 props 更新状态值 message<br>return {<br>  message: props.newMessage<br>};<br>  }</p><p>  static getDerivedStateFromProps(props, state) {<br>&#x2F;&#x2F; 不执行状态更新，返回 null<br>  return null;<br>  } </p></li><li><p>   render()</p></li><li><p>   componentDidMount() &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; 常用<br>一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息</p></li></ol></li><li>更新阶段: 由组件内部this.setSate()或父组件重新render触发<ol><li>   getDerivedStateFromProps</li><li>   shouldComponentUpdate()<br>  shouldComponentUpdate 在组件即将更新之前被调用。<br>  它接收两个参数：nextProps 和 nextState，表示组件即将接收的新属性和新状态。<br>  默认情况下，shouldComponentUpdate 返回 true，表示组件将会更新。但是，你可以通过自定义逻辑来判断是否需要更新组件。<br>  通过在 shouldComponentUpdate 中进行逻辑判断，可以提高应用程序的性能，避免不必要的组件渲染。</li><li>   render()</li><li>   getSnapshotBeforeUpdate<br>  getSnapshotBeforeUpdate 在组件即将更新之前被调用。<br>  它接收两个参数：prevProps 和 prevState，表示组件更新前的属性和状态。<br>  在 getSnapshotBeforeUpdate 中，你可以捕获组件更新前的 DOM 状态，并返回一个值，这个值会作为第三个参数传递给 componentDidUpdate 方法。</li><li>   componentDidUpdate()<br>  componentDidUpdate 在组件更新之后被调用。<br>  它接收两个参数：prevProps 和 prevState，表示组件更新之前的属性和状态。<br>  在 componentDidUpdate 中，你可以执行一些更新后的操作，例如对 DOM 进行操作、发起网络请求等。<br>  需要注意的是，你必须在 componentDidUpdate 中进行条件判断，避免无限循环的更新。</li></ol></li><li>卸载组件: 由ReactDOM.unmountComponentAtNode()触发<ol><li>   componentWillUnmount()  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; 常用<br>一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>step.8 react首屏优化</title>
      <link href="/computer-science/react0-1/%E9%A6%96%E5%B1%8F%E4%BC%98%E5%8C%96/"/>
      <url>/computer-science/react0-1/%E9%A6%96%E5%B1%8F%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<ol><li><p>代码拆分：使用动态导入或懒加载方式，将页面组件分割成更小的块。这样可以实现按需加载，减少首屏所需的代码量，加快页面加载速度。</p></li><li><p>SSR（服务器端渲染）：使用服务器端渲染技术，将 React 组件在服务器上预先渲染为 HTML，并在首次加载时直接返回给客户端。这可以加快首屏渲染速度，提供更好的用户体验。</p></li><li><p>避免不必要的组件渲染：通过使用 shouldComponentUpdate 或 PureComponent 确保只有发生实际变化的组件进行重新渲染，避免不必要的渲染开销。</p></li><li><p>按需加载资源：使用异步加载方式，按需加载页面所需的 JavaScript、CSS 或图片等资源。可以使用工具如 React Loadable 或动态导入语法（import()）来实现。</p></li><li><p>图片优化：对于页面中的图片，使用合适的压缩算法来减小文件大小，以提高加载速度。可以使用工具如 Webpack 的 image-loader 或使用响应式图片方案进行处理。</p></li><li><p>使用服务端缓存技术：利用适当的缓存策略，如设置合适的缓存头，使用 CDN 加速等方式，提高首屏渲染速度。</p></li><li><p>代码优化和分割：优化 JavaScript 和 CSS 代码，如压缩、合并、移除无用代码等操作，减小文件大小，加快下载和解析速度。另外，将代码按功能或模块进行分割，以实现更好的可维护性和加载效率。</p></li><li><p>使用服务端数据预取：在渲染页面之前，通过服务端获取所需的数据，并将其作为初始状态传递给 React 组件。这样可以避免页面渲染完成后再进行数据请求，提高用户感知速度。</p></li><li><p>使用浏览器缓存：合理设置缓存策略，利用浏览器缓存来存储页面资源，减少重复加载的开销。</p></li><li><p>性能监测和优化：使用工具如 Lighthouse、WebPagetest 等来测试和监测页面性能指标，并根据结果进行优化调整。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Step.1</title>
      <link href="/computer-science/Mybatis/doscmp/Mybatis-01/"/>
      <url>/computer-science/Mybatis/doscmp/Mybatis-01/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis-01"><a href="#Mybatis-01" class="headerlink" title="Mybatis-01"></a>Mybatis-01</h1><h2 id="1-框架"><a href="#1-框架" class="headerlink" title="1. 框架"></a>1. 框架</h2><p>​框架相当于是一个脚手架，内部已经写好了很多代码，我们只要其基础上进行开发就可以提高我们的开发效率。</p><p>​</p><p>框架阶段学习：</p><p>①先去学习如何使用框架</p><p>②然后再使用熟练的情况下去猜测内部的原理</p><p>③通过源码去验证自己的猜测。</p><h2 id="2-Mybatis介绍"><a href="#2-Mybatis介绍" class="headerlink" title="2.Mybatis介绍"></a>2.Mybatis介绍</h2><ul><li><p>MyBatis 是一款优秀的持久层框架。</p></li><li><p>MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。</p></li><li><p>官网：<span class="exturl" data-url="aHR0cHM6Ly9teWJhdGlzLm9yZy9teWJhdGlzLTMvemgvIw==">https://mybatis.org/mybatis-3/zh/#</span></p></li></ul><h2 id="3-快速入门"><a href="#3-快速入门" class="headerlink" title="3. 快速入门"></a>3. 快速入门</h2><p>①数据准备</p><pre><code class="mysql">CREATE DATABASE /*!32312 IF NOT EXISTS*/`mybatis_db` /*!40100 DEFAULT CHARACTER SET utf8 */;USE `mybatis_db`;DROP TABLE IF EXISTS `user`;CREATE TABLE `user` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `username` varchar(50) DEFAULT NULL,  `age` int(11) DEFAULT NULL,  `address` varchar(50) DEFAULT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;insert  into `user`(`id`,`username`,`age`,`address`) values (1,&#39;UZI&#39;,19,&#39;上海&#39;),(2,&#39;PDD&#39;,25,&#39;上海&#39;);</code></pre><p>②导入依赖</p><pre><code class="xml">        &lt;!--mybatis依赖--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;            &lt;version&gt;3.5.4&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--mysql驱动--&gt;        &lt;dependency&gt;            &lt;groupId&gt;mysql&lt;/groupId&gt;            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;            &lt;version&gt;5.1.47&lt;/version&gt;        &lt;/dependency&gt;</code></pre><p>③编写核心配置</p><p>在资源目录下创建：mybatis-config.xml 内容如下：</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;    &lt;environments default=&quot;development&quot;&gt;        &lt;environment id=&quot;development&quot;&gt;            &lt;transactionManager type=&quot;JDBC&quot;/&gt;            &lt;dataSource type=&quot;POOLED&quot;&gt;                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/test&quot;/&gt;                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;                &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;    &lt;mappers&gt;        &lt;mapper resource=&quot;com/sangeng/dao/UserDao.xml&quot;/&gt;    &lt;/mappers&gt;&lt;/configuration&gt;</code></pre><p>④定义接口及对应的xml映射文件</p><p>com.sangeng.dao.UserDao:</p><pre><code class="java">public interface UserDao &#123;    List&lt;User&gt; findAll();&#125;</code></pre><p>资源目录下：com&#x2F;sangeng&#x2F;dao&#x2F;UserDao.xml</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.sangeng.dao.UserDao&quot;&gt;    &lt;select id=&quot;findAll&quot; resultType=&quot;com.sangeng.pojo.User&quot;&gt;      select * from user    &lt;/select&gt;&lt;/mapper&gt;</code></pre><p>⑤编写测试类</p><p>获取SqlSession,通过SqlSession获取UserDao调用对应的方法</p><pre><code class="java">    public static void main(String[] args) throws IOException &#123;        //定义mybatis配置文件的路径        String resource = &quot;mybatis-config.xml&quot;;        InputStream inputStream = Resources.getResourceAsStream(resource);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);        //获取Sqlsession对象        SqlSession sqlSession = sqlSessionFactory.openSession();        //获取UserDao实现类对象        UserDao userDao = sqlSession.getMapper(UserDao.class);        //调用方法测试        List&lt;User&gt; userList = userDao.findAll();        System.out.println(userList);        //释放资源        sqlSession.close();    &#125;</code></pre><h2 id="3-9-高效编程"><a href="#3-9-高效编程" class="headerlink" title="3.9 高效编程"></a>3.9 高效编程</h2><h3 id="3-9-1-配置代码模板"><a href="#3-9-1-配置代码模板" class="headerlink" title="3.9.1 配置代码模板"></a>3.9.1 配置代码模板</h3><p><img data-src="/images%5Cimgmybatis%5Cimage-1.png" alt="image-20210218211942452"></p><h3 id="3-9-2-Mybatis插件"><a href="#3-9-2-Mybatis插件" class="headerlink" title="3.9.2 Mybatis插件"></a>3.9.2 Mybatis插件</h3><p>​下载安装Free Mybatis plugin，安装完后重启IDEA</p><h2 id="4-参数获取"><a href="#4-参数获取" class="headerlink" title="4. 参数获取"></a>4. 参数获取</h2><h3 id="4-1-一个参数"><a href="#4-1-一个参数" class="headerlink" title="4.1 一个参数"></a>4.1 一个参数</h3><h4 id="4-1-1-基本参数"><a href="#4-1-1-基本参数" class="headerlink" title="4.1.1 基本参数"></a>4.1.1 基本参数</h4><p>​我们可以使用#{}直接来取值，写任意名字都可以获取到参数。但是一般用方法的参数名来取。</p><p>例如：</p><p>接口中方法定义如下</p><pre><code class="java">User findById(Integer id);</code></pre><p>xml中内容如下:</p><pre><code class="xml">&lt;select id=&quot;findById&quot; resultType=&quot;com.sangeng.pojo.User&quot;&gt;  select * from user where id = #&#123;id&#125;&lt;/select&gt;</code></pre><h4 id="4-1-2-POJO"><a href="#4-1-2-POJO" class="headerlink" title="4.1.2 POJO"></a>4.1.2 POJO</h4><p>​我们可以使用POJO中的属性名来获取对应的值。</p><p>例如：</p><p>接口中方法定义如下</p><pre><code class="java">User findByUser(User user);</code></pre><p>xml中内容如下：</p><pre><code class="xml">    &lt;select id=&quot;findByUser&quot; resultType=&quot;com.sangeng.pojo.User&quot;&gt;        select * from user where id = #&#123;id&#125; and username = #&#123;username&#125; and age = #&#123;age&#125; and address = #&#123;address&#125;    &lt;/select&gt;</code></pre><h4 id="4-1-3-Map"><a href="#4-1-3-Map" class="headerlink" title="4.1.3 Map"></a>4.1.3 Map</h4><p>​我们可以使用map中的key来获取对应的值。</p><p>例如：</p><p>接口中方法定义如下</p><pre><code class="java">User findByMap(Map map);</code></pre><p>xml中内容如下：</p><pre><code class="java">    &lt;select id=&quot;findByMap&quot; resultType=&quot;com.sangeng.pojo.User&quot;&gt;        select * from user where id = #&#123;id&#125; and username = #&#123;username&#125; and age = #&#123;age&#125; and address = #&#123;address&#125;    &lt;/select&gt;</code></pre><p>方法调用：</p><pre><code class="java">        Map map = new HashMap();        map.put(&quot;id&quot;,2);        map.put(&quot;username&quot;,&quot;PDD&quot;);        map.put(&quot;age&quot;,25);        map.put(&quot;address&quot;,&quot;上海&quot;);        userDao.findByMap(map);</code></pre><h3 id="4-2-多个参数"><a href="#4-2-多个参数" class="headerlink" title="4.2 多个参数"></a>4.2 多个参数</h3><p>​Mybatis会把多个参数放入一个Map集合中，默认的key是argx和paramx这种格式。</p><p>例如：</p><p>接口中方法定义如下</p><pre><code class="java">User findByCondition(Integer id,String username);</code></pre><p>最终map中的键值对如下：</p><pre><code class="java">&#123;arg1=PDD, arg0=2, param1=2, param2=PDD&#125;</code></pre><p>​我们虽然可以使用对应的默认key来获取值，但是这种方式可读性不好。我们一般在方法参数前使用@Param来设置参数名。</p><p>例如：</p><p>接口中方法定义</p><pre><code class="java">User findByCondition(@Param(&quot;id&quot;) Integer id,@Param(&quot;username&quot;) String username);</code></pre><p>最终map中的键值对如下：</p><pre><code>&#123;id=2, param1=2, username=PDD, param2=PDD&#125;</code></pre><p>所以我们就可以使用如下方式来获取参数</p><pre><code class="xml">    &lt;select id=&quot;findByCondition&quot; resultType=&quot;com.sangeng.pojo.User&quot;&gt;         select * from user where id = #&#123;id&#125; and username = #&#123;username&#125;    &lt;/select&gt;</code></pre><h3 id="4-3-总结"><a href="#4-3-总结" class="headerlink" title="4.3 总结"></a>4.3 总结</h3><p>​建议如果只有一个参数的时候不用做什么特殊处理。如果是有多个参数的情况下一定要加上@Param来设置参数名。</p><h2 id="5-核心类"><a href="#5-核心类" class="headerlink" title="5. 核心类"></a>5. 核心类</h2><h3 id="5-1-SqlSessionFactory"><a href="#5-1-SqlSessionFactory" class="headerlink" title="5.1 SqlSessionFactory"></a>5.1 SqlSessionFactory</h3><p>​SqlSessionFactory是一个SqlSession的工厂类。主要用来获取SqlSession对象。、</p><p>成员方法如下：</p><pre><code class="java">SqlSession openSession();//获取SqlSession对象，传入的参数代表创建的SqlSession是否自动提交SqlSession openSession(boolean autoCommit);</code></pre><h3 id="5-2-SqlSession"><a href="#5-2-SqlSession" class="headerlink" title="5.2 SqlSession"></a>5.2 SqlSession</h3><p>​ SqlSession 提供了在数据库执行 SQL 命令所需的所有方法 。它还提供了事务的相关操作。</p><p>成员方法如下：</p><pre><code class="java">T getMapper(Class&lt;T&gt; type);//获取mapper对象void commit();//提交事务void rollback();//回滚事务void close();//释放资源</code></pre><h2 id="6-Mybatis实现增删改查"><a href="#6-Mybatis实现增删改查" class="headerlink" title="6.Mybatis实现增删改查"></a>6.Mybatis实现增删改查</h2><h3 id="6-1-新增"><a href="#6-1-新增" class="headerlink" title="6.1 新增"></a>6.1 新增</h3><p>①接口中增加相关方法</p><pre><code class="java">void insertUser(User user);</code></pre><p>②映射文件UserDao.xml增加响应的标签</p><pre><code class="xml">    &lt;insert id=&quot;insertUser&quot;&gt;        insert into user values(null,#&#123;username&#125;,#&#123;age&#125;,#&#123;address&#125;)    &lt;/insert&gt;</code></pre><p><strong>注意：要记得提交事务。</strong></p><h3 id="6-2-删除"><a href="#6-2-删除" class="headerlink" title="6.2 删除"></a>6.2 删除</h3><p>①接口中增加相关方法</p><pre><code class="java">void deleteById(Integer id);</code></pre><p>②映射文件UserDao.xml增加响应的标签</p><pre><code class="xml">    &lt;delete id=&quot;deleteById&quot;&gt;        delete from user where id = #&#123;id&#125;    &lt;/delete&gt;</code></pre><p><strong>注意：要记得提交事务。</strong></p><h3 id="6-3-修改"><a href="#6-3-修改" class="headerlink" title="6.3 修改"></a>6.3 修改</h3><p>①接口中增加相关方法</p><pre><code class="java">void updateUser(User user);</code></pre><p>②映射文件UserDao.xml增加响应的标签</p><pre><code class="xml">    &lt;!--更新用户--&gt;    &lt;update id=&quot;updateUser&quot;&gt;        UPDATE USER SET age = #&#123;age&#125; , username = #&#123;username&#125;,address = #&#123;address&#125; WHERE id = #&#123;id&#125;    &lt;/update&gt;</code></pre><p><strong>注意：要记得提交事务。</strong></p><h3 id="6-4-根据id查询"><a href="#6-4-根据id查询" class="headerlink" title="6.4 根据id查询"></a>6.4 根据id查询</h3><p>①接口中增加相关方法</p><pre><code class="java">User findById(Integer id);</code></pre><p>②映射文件UserDao.xml增加响应的标签</p><pre><code class="xml">   &lt;select id=&quot;findById&quot; resultType=&quot;com.sangeng.pojo.User&quot;&gt;      select * from user where id = #&#123;id&#125;    &lt;/select&gt;</code></pre><h3 id="6-5-查询所有"><a href="#6-5-查询所有" class="headerlink" title="6.5 查询所有"></a>6.5 查询所有</h3><p>①接口中增加相关方法</p><pre><code class="java">List&lt;User&gt; findAll();</code></pre><p>②映射文件UserDao.xml增加响应的标签</p><pre><code class="xml">    &lt;select id=&quot;findAll&quot; resultType=&quot;com.sangeng.pojo.User&quot;&gt;      select * from user    &lt;/select&gt;</code></pre><h2 id="7-配置文件详解"><a href="#7-配置文件详解" class="headerlink" title="7. 配置文件详解"></a>7. 配置文件详解</h2><h3 id="7-1-properties"><a href="#7-1-properties" class="headerlink" title="7.1 properties"></a>7.1 properties</h3><p>​可以使用properties读取properties配置文件。使用其中的resource属性来设置配置文件的路径。</p><p>​然后使用${key}来获取配置文件中的值</p><p>例如：</p><p>在resources目录下有jdbc.properties文件，内容如下：</p><pre><code class="properties">jdbc.url=jdbc:mysql://localhost:3306/mybatis_dbjdbc.driver=com.mysql.jdbc.Driverjdbc.username=rootjdbc.password=root</code></pre><p>在mybatis-config.xml中：</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;    &lt;!--设置配置文件所在的路径--&gt;    &lt;properties resource=&quot;jdbc.properties&quot;&gt;&lt;/properties&gt;    &lt;environments default=&quot;development&quot;&gt;        &lt;environment id=&quot;development&quot;&gt;            &lt;transactionManager type=&quot;JDBC&quot;/&gt;            &lt;dataSource type=&quot;POOLED&quot;&gt;                &lt;!--获取配置文件中配置的对应的值来设置连接相关参数--&gt;                &lt;property name=&quot;driver&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;/&gt;                &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;/&gt;                &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;/&gt;                &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;/&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;&lt;/configuration&gt;</code></pre><h3 id="7-2-settings"><a href="#7-2-settings" class="headerlink" title="7.2 settings"></a>7.2 settings</h3><p>​可以使用该标签来设置进行一些设置</p><p>例如：</p><pre><code class="xml">    &lt;settings&gt;        &lt;!--开启自动驼峰命名映射--&gt;        &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt;    &lt;/settings&gt;</code></pre><p>具体的设置参考：<span class="exturl" data-url="aHR0cHM6Ly9teWJhdGlzLm9yZy9teWJhdGlzLTMvemgvY29uZmlndXJhdGlvbi5odG1sI3NldHRpbmdz">https://mybatis.org/mybatis-3/zh/configuration.html#settings</span></p><h3 id="7-3-typeAliases"><a href="#7-3-typeAliases" class="headerlink" title="7.3 typeAliases"></a>7.3 typeAliases</h3><p>​可以用来设置给全类名设置别名，简化书写。一般设置一个包下的类全部具有默认别名。默认别名是类目首字母小写。例如：com.sangeng.pojo.User别名为user</p><pre><code class="java">   &lt;typeAliases&gt;        &lt;package name=&quot;com.sangeng.dao&quot;&gt;&lt;/package&gt;    &lt;/typeAliases&gt;</code></pre><h3 id="7-4-environments"><a href="#7-4-environments" class="headerlink" title="7.4 environments"></a>7.4 environments</h3><p>​配置数据库相关的环境，例如事物管理器，连接池相关参数等。</p><pre><code class="xml">    &lt;!--设置默认环境--&gt;    &lt;environments default=&quot;development&quot;&gt;                &lt;!--设置该环境的唯一标识--&gt;        &lt;environment id=&quot;development&quot;&gt;            &lt;transactionManager type=&quot;JDBC&quot;/&gt;            &lt;dataSource type=&quot;POOLED&quot;&gt;                &lt;!--获取配置文件中配置的对应的值来设置连接相关参数--&gt;                &lt;property name=&quot;driver&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;/&gt;                &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;/&gt;                &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;/&gt;                &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;/&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;</code></pre><h3 id="7-5-mappers"><a href="#7-5-mappers" class="headerlink" title="7.5 mappers"></a>7.5 mappers</h3><p>​该标签的作用是加载映射的，加载方式有如下几种(<strong>主要使用第四种</strong>)：</p><p>​①使用相对于类路径的资源引用，例如：</p><pre><code class="xml">&lt;!-- 使用相对于类路径的资源引用 --&gt;&lt;mappers&gt;  &lt;mapper resource=&quot;org/mybatis/builder/AuthorMapper.xml&quot;/&gt;  &lt;mapper resource=&quot;org/mybatis/builder/BlogMapper.xml&quot;/&gt;  &lt;mapper resource=&quot;org/mybatis/builder/PostMapper.xml&quot;/&gt;&lt;/mappers&gt;</code></pre><p>​②使用完全限定资源定位符（URL），例如：</p><pre><code class="xml">&lt;!-- 使用完全限定资源定位符（URL） --&gt;&lt;mappers&gt;  &lt;mapper url=&quot;file:///var/mappers/AuthorMapper.xml&quot;/&gt;  &lt;mapper url=&quot;file:///var/mappers/BlogMapper.xml&quot;/&gt;  &lt;mapper url=&quot;file:///var/mappers/PostMapper.xml&quot;/&gt;&lt;/mappers&gt;</code></pre><p>​③使用映射器接口实现类的完全限定类名，例如：</p><pre><code class="xml">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;&lt;mappers&gt;  &lt;mapper class=&quot;org.mybatis.builder.AuthorMapper&quot;/&gt;  &lt;mapper class=&quot;org.mybatis.builder.BlogMapper&quot;/&gt;  &lt;mapper class=&quot;org.mybatis.builder.PostMapper&quot;/&gt;&lt;/mappers&gt;</code></pre><p>​④将包内的映射器接口实现全部注册为映射器，例如：</p><pre><code class="xml">&lt;!-- 定义dao接口所在的包。要求xml文件存放的路径和dao接口的包名要对应 --&gt;&lt;mappers&gt;  &lt;package name=&quot;org.mybatis.builder&quot;/&gt;&lt;/mappers&gt;</code></pre><p>​</p><h2 id="8-打印日志"><a href="#8-打印日志" class="headerlink" title="8. 打印日志"></a>8. 打印日志</h2><p>①log4j配置  在resources目录下创建log4j.properties文件，内容如下：</p><pre><code class="properties">### direct log messages to stdout ###log4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.Target=System.outlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n### direct messages to file mylog.log ###log4j.appender.file=org.apache.log4j.FileAppenderlog4j.appender.file.File=c:/mylog.loglog4j.appender.file.layout=org.apache.log4j.PatternLayoutlog4j.appender.file.layout.ConversionPattern=%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n### set log levels - for more verbose logging change &#39;info&#39; to &#39;debug&#39; ###log4j.rootLogger=debug, stdout</code></pre><p>②引入依赖</p><pre><code class="xml">        &lt;dependency&gt;            &lt;groupId&gt;log4j&lt;/groupId&gt;            &lt;artifactId&gt;log4j&lt;/artifactId&gt;            &lt;version&gt;1.2.17&lt;/version&gt;        &lt;/dependency&gt;</code></pre><h2 id="9-获取参数时-和-的区别"><a href="#9-获取参数时-和-的区别" class="headerlink" title="9.获取参数时 #{}和${}的区别"></a>9.获取参数时 #{}和${}的区别</h2><p>​如果使用#{}.他是预编译的sql可以防止SQL注入攻击<br>​如果使用${}他是直接把参数值拿来进行拼接，这样会有SQL注入的危险</p><p>如果使用的是#{}来获取参数值日志如下：<br>Preparing: select * from user where id &#x3D; <strong>?</strong> and username &#x3D; <strong>?</strong> and age &#x3D; <strong>?</strong> and address &#x3D; <strong>?</strong><br>Parameters: 2(Integer), 快乐风男(String), 29(Integer), 北京(String)</p><p>如果使用${}来获取参数值日志如下：<br>Preparing: select * from user where id &#x3D; 2 and username &#x3D; 快乐风男 and age &#x3D; 29 and address &#x3D; 北京 </p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Mybatis </category>
          
          <category> Mybatis基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Step.3</title>
      <link href="/computer-science/Mybatis/doscmp/Mybatis-03/"/>
      <url>/computer-science/Mybatis/doscmp/Mybatis-03/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis-3"><a href="#Mybatis-3" class="headerlink" title="Mybatis-3"></a>Mybatis-3</h1><h2 id="0-案例环境"><a href="#0-案例环境" class="headerlink" title="0. 案例环境"></a>0. 案例环境</h2><h3 id="0-1-案例数据初始化sql"><a href="#0-1-案例数据初始化sql" class="headerlink" title="0.1 案例数据初始化sql"></a>0.1 案例数据初始化sql</h3><pre><code class="mysql">CREATE DATABASE /*!32312 IF NOT EXISTS*/`mybatis_db` /*!40100 DEFAULT CHARACTER SET utf8 */;USE `mybatis_db`;DROP TABLE IF EXISTS `orders`;CREATE TABLE `orders` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `createtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;,  `price` int(11) DEFAULT NULL COMMENT &#39;价格&#39;,  `remark` varchar(100) DEFAULT NULL COMMENT &#39;备注&#39;,  `user_id` int(11) DEFAULT NULL COMMENT &#39;用户id&#39;,  PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;insert  into `orders`(`id`,`createtime`,`price`,`remark`,`user_id`) values (1,&#39;2014-06-26 16:55:43&#39;,2000,&#39;无&#39;,2),(2,&#39;2021-02-23 16:55:57&#39;,3000,&#39;无&#39;,3),(3,&#39;2021-02-23 16:56:21&#39;,4000,&#39;无&#39;,2);DROP TABLE IF EXISTS `role`;CREATE TABLE `role` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `name` varchar(100) DEFAULT NULL COMMENT &#39;角色名&#39;,  `desc` varchar(100) DEFAULT NULL COMMENT &#39;角色描述&#39;,  PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;/*Data for the table `role` */insert  into `role`(`id`,`name`,`desc`) values (1,&#39;总经理&#39;,&#39;一人之下&#39;),(2,&#39;CFO&#39;,NULL);/*Table structure for table `user` */DROP TABLE IF EXISTS `user`;CREATE TABLE `user` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `username` varchar(50) DEFAULT NULL,  `age` int(11) DEFAULT NULL,  `address` varchar(50) DEFAULT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=33 DEFAULT CHARSET=utf8;/*Data for the table `user` */insert  into `user`(`id`,`username`,`age`,`address`) values (2,&#39;pdd&#39;,26,NULL),(3,&#39;UZI&#39;,19,&#39;上海11&#39;),(4,&#39;RF&#39;,19,NULL);/*Table structure for table `user_role` */DROP TABLE IF EXISTS `user_role`;CREATE TABLE `user_role` (  `user_id` int(11) DEFAULT NULL,  `role_id` int(11) DEFAULT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8;/*Data for the table `user_role` */insert  into `user_role`(`user_id`,`role_id`) values (2,2),(2,1),(3,1);</code></pre><h3 id="0-2-实体类"><a href="#0-2-实体类" class="headerlink" title="0.2 实体类"></a>0.2 实体类</h3><h4 id="0-2-1-User-java"><a href="#0-2-1-User-java" class="headerlink" title="0.2.1 User.java"></a>0.2.1 User.java</h4><pre><code class="java">public class User &#123;    private Integer id;    private String username;    private Integer age;    private String address;    @Override    public String toString() &#123;        return &quot;User&#123;&quot; +                &quot;id=&quot; + id +                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +                &quot;, age=&quot; + age +                &quot;, address=&#39;&quot; + address + &#39;\&#39;&#39; +                &#39;&#125;&#39;;    &#125;    public Integer getId() &#123;        return id;    &#125;    public void setId(Integer id) &#123;        this.id = id;    &#125;    public String getUsername() &#123;        return username;    &#125;    public void setUsername(String username) &#123;        this.username = username;    &#125;    public Integer getAge() &#123;        return age;    &#125;    public void setAge(Integer age) &#123;        this.age = age;    &#125;    public String getAddress() &#123;        return address;    &#125;    public void setAddress(String address) &#123;        this.address = address;    &#125;    public User() &#123;    &#125;    public User(Integer id, String username, Integer age, String address) &#123;        this.id = id;        this.username = username;        this.age = age;        this.address = address;    &#125;&#125;</code></pre><h4 id="0-2-2-Order-java"><a href="#0-2-2-Order-java" class="headerlink" title="0.2.2 Order.java"></a>0.2.2 Order.java</h4><pre><code class="java">public class Order &#123;    private Integer id;    private Date createtime;    private Integer price;    private String remark;    private Integer userId;    @Override    public String toString() &#123;        return &quot;Order&#123;&quot; +                &quot;id=&quot; + id +                &quot;, createtime=&quot; + createtime +                &quot;, price=&quot; + price +                &quot;, remark=&#39;&quot; + remark + &#39;\&#39;&#39; +                &quot;, userId=&quot; + userId +                &#39;&#125;&#39;;    &#125;      public Order() &#123;    &#125;    public Integer getId() &#123;        return id;    &#125;    public void setId(Integer id) &#123;        this.id = id;    &#125;    public Date getCreatetime() &#123;        return createtime;    &#125;    public void setCreatetime(Date createtime) &#123;        this.createtime = createtime;    &#125;    public Integer getPrice() &#123;        return price;    &#125;    public void setPrice(Integer price) &#123;        this.price = price;    &#125;    public String getRemark() &#123;        return remark;    &#125;    public void setRemark(String remark) &#123;        this.remark = remark;    &#125;    public Integer getUserId() &#123;        return userId;    &#125;    public void setUserId(Integer userId) &#123;        this.userId = userId;    &#125;    public Order(Integer id, Date createtime, Integer price, String remark, Integer userId) &#123;        this.id = id;        this.createtime = createtime;        this.price = price;        this.remark = remark;        this.userId = userId;    &#125;&#125;</code></pre><h4 id="0-2-3-Role-java"><a href="#0-2-3-Role-java" class="headerlink" title="0.2.3 Role.java"></a>0.2.3 Role.java</h4><pre><code class="java">public class Role &#123;    private Integer id;    private String name;    private String desc;    @Override    public String toString() &#123;        return &quot;Role&#123;&quot; +                &quot;id=&quot; + id +                &quot;, name=&#39;&quot; + name + &#39;\&#39;&#39; +                &quot;, desc=&#39;&quot; + desc + &#39;\&#39;&#39; +                &#39;&#125;&#39;;    &#125;    public Role() &#123;    &#125;    public Integer getId() &#123;        return id;    &#125;    public void setId(Integer id) &#123;        this.id = id;    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name = name;    &#125;    public String getDesc() &#123;        return desc;    &#125;    public void setDesc(String desc) &#123;        this.desc = desc;    &#125;    public Role(Integer id, String name, String desc) &#123;        this.id = id;        this.name = name;        this.desc = desc;    &#125;&#125;</code></pre><h2 id="1-ResultMap"><a href="#1-ResultMap" class="headerlink" title="1. ResultMap"></a>1. ResultMap</h2><h3 id="1-1-基本使用"><a href="#1-1-基本使用" class="headerlink" title="1.1 基本使用"></a>1.1 基本使用</h3><p>​我们可以使用resultMap标签自定义结果集和实体类属性的映射规则。</p><pre><code class="xml">    &lt;!--        resultMap 用来自定义结果集和实体类的映射            属性：                id 相当于这个resultMap的唯一标识                type 用来指定映射到哪个实体类        id标签  用来指定主键列的映射规则            属性：                property 要映射的属性名                column  对应的列名        result标签 用来指定普通列的映射规则            属性：                property 要映射的属性名                column 对应的列名    --&gt;    &lt;resultMap id=&quot;orderMap&quot; type=&quot;com.sangeng.pojo.Order&quot; &gt;        &lt;id column=&quot;id&quot; property=&quot;id&quot;&gt;&lt;/id&gt;        &lt;result column=&quot;createtime&quot; property=&quot;createtime&quot;&gt;&lt;/result&gt;        &lt;result column=&quot;price&quot; property=&quot;price&quot;&gt;&lt;/result&gt;        &lt;result column=&quot;remark&quot; property=&quot;remark&quot;&gt;&lt;/result&gt;        &lt;result column=&quot;user_id&quot; property=&quot;userId&quot;&gt;&lt;/result&gt;    &lt;/resultMap&gt;    &lt;!--使用我们自定义的映射规则--&gt;    &lt;select id=&quot;findAll&quot; resultMap=&quot;orderMap&quot;&gt;        SELECT id,createtime,price,remark,user_id  FROM ORDERS    &lt;/select&gt;    </code></pre><h3 id="1-2-自动映射"><a href="#1-2-自动映射" class="headerlink" title="1.2 自动映射"></a>1.2 自动映射</h3><p>​我们定义resultMap时默认情况下自动映射是开启状态的。也就是如果结果集的列名和我们的属性名相同是会自动映射的我们只需要写特殊情况的映射关系即可。</p><p>例如：</p><p>下面这种写法和上面的写法会有相同的效果，因为其他属性的属性名和结果集的列名都是相同的会自动映射。</p><pre><code class="xml">    &lt;resultMap id=&quot;orderMap&quot; type=&quot;com.sangeng.pojo.Order&quot; &gt;        &lt;result column=&quot;user_id&quot; property=&quot;userId&quot;&gt;&lt;/result&gt;    &lt;/resultMap&gt;    &lt;!--使用我们自定义的映射规则--&gt;    &lt;select id=&quot;findAll&quot; resultMap=&quot;orderMap&quot;&gt;        SELECT id,createtime,price,remark,user_id  FROM ORDERS    &lt;/select&gt;</code></pre><p>​如有需要可以选择关闭自动映射可以把resultMap的autoMapping属性设置为false。</p><p>例如：</p><pre><code class="xml">    &lt;resultMap id=&quot;orderMap&quot; type=&quot;com.sangeng.pojo.Order&quot; autoMapping=&quot;false&quot;&gt;        &lt;id column=&quot;id&quot; property=&quot;id&quot;&gt;&lt;/id&gt;        &lt;result column=&quot;createtime&quot; property=&quot;createtime&quot;&gt;&lt;/result&gt;        &lt;result column=&quot;price&quot; property=&quot;price&quot;&gt;&lt;/result&gt;        &lt;result column=&quot;remark&quot; property=&quot;remark&quot;&gt;&lt;/result&gt;        &lt;result column=&quot;user_id&quot; property=&quot;userId&quot;&gt;&lt;/result&gt;    &lt;/resultMap&gt;</code></pre><h3 id="1-3-继承映射关系"><a href="#1-3-继承映射关系" class="headerlink" title="1.3 继承映射关系"></a>1.3 继承映射关系</h3><p>​我们可以使用resultMap 的extends属性来指定一个resultMap，从而复用重复的映射关系配置。</p><p>例如：</p><pre><code class="xml">      &lt;!--定义个父映射，供其他resultMap继承--&gt;    &lt;resultMap id=&quot;baseOrderMap&quot; type=&quot;com.sangeng.pojo.Order&quot; &gt;        &lt;id column=&quot;id&quot; property=&quot;id&quot;&gt;&lt;/id&gt;        &lt;result column=&quot;createtime&quot; property=&quot;createtime&quot;&gt;&lt;/result&gt;        &lt;result column=&quot;price&quot; property=&quot;price&quot;&gt;&lt;/result&gt;        &lt;result column=&quot;remark&quot; property=&quot;remark&quot;&gt;&lt;/result&gt;    &lt;/resultMap&gt;    &lt;!--继承baseOrderMap，然后只需要写自己特有的映射关系即可--&gt;    &lt;resultMap id=&quot;orderMap&quot; type=&quot;com.sangeng.pojo.Order&quot; autoMapping=&quot;false&quot; extends=&quot;baseOrderMap&quot;&gt;        &lt;result column=&quot;user_id&quot; property=&quot;userId&quot;&gt;&lt;/result&gt;    &lt;/resultMap&gt;</code></pre><h2 id="2-多表查询"><a href="#2-多表查询" class="headerlink" title="2. 多表查询"></a>2. 多表查询</h2><p>​有的时候我们需要查询多张表的数据才可以得到我们要的结果。</p><p>​我们可以直接写一个多表关联的SQL进行查询。也可以分步进行多次的查询来拿到我们需要的结果。    </p><p>​Mybatis就提供了对应的配置，可以让我们去更方便的进行相应的查询和对应的结果集处理。</p><h3 id="2-1-多表关联查询"><a href="#2-1-多表关联查询" class="headerlink" title="2.1 多表关联查询"></a>2.1 多表关联查询</h3><h4 id="2-1-1-一对一关系"><a href="#2-1-1-一对一关系" class="headerlink" title="2.1.1 一对一关系"></a>2.1.1 一对一关系</h4><p>​两个实体之间是一对一的关系。(例如我们需要查询订单，要求还需要下单用户的数据。这里的订单相对于用户是一对一。)</p><p>例如：</p><p>方法定义如下</p><pre><code class="java">    //根据订单id查询订单，要求把下单用户的信息也查询出来    Order findById(Integer id);</code></pre><p>因为期望Order中还能包含下单用户的数据，所以可以再Order中增加一个属性</p><pre><code class="java">private User user;</code></pre><p>SQL语句如下</p><pre><code class="mysql">SELECT     o.id,o.`createtime`,o.`price`,o.`remark`,o.`user_id`,u.`id` uid,u.`username`,u.`age`,u.`address`FROM     orders o,USER uWHERE    o.`user_id` = u.`id`    AND o.id = 2</code></pre><p>结果集</p><p><img data-src="/images%5Cimgmybatis%5Cimage-2.png" alt="image-20210224155400455"></p><p>我们可以使用如下两种方式封装结果集。</p><h5 id="2-1-1-1-使用ResultMap对所有字段进行映射"><a href="#2-1-1-1-使用ResultMap对所有字段进行映射" class="headerlink" title="2.1.1.1 使用ResultMap对所有字段进行映射"></a>2.1.1.1 使用ResultMap对所有字段进行映射</h5><p>​可以使用ResultMap设置user对象的属性的映射规则。</p><p>①resultMap定义，主要是对user对象的属性设置映射规则</p><pre><code class="xml">     &lt;resultMap id=&quot;baseOrderMap&quot; type=&quot;com.sangeng.pojo.Order&quot; &gt;        &lt;id column=&quot;id&quot; property=&quot;id&quot;&gt;&lt;/id&gt;        &lt;result column=&quot;createtime&quot; property=&quot;createtime&quot;&gt;&lt;/result&gt;        &lt;result column=&quot;price&quot; property=&quot;price&quot;&gt;&lt;/result&gt;        &lt;result column=&quot;remark&quot; property=&quot;remark&quot;&gt;&lt;/result&gt;    &lt;/resultMap&gt;    &lt;resultMap id=&quot;orderMap&quot; type=&quot;com.sangeng.pojo.Order&quot; autoMapping=&quot;false&quot; extends=&quot;baseOrderMap&quot;&gt;        &lt;result column=&quot;user_id&quot; property=&quot;userId&quot;&gt;&lt;/result&gt;    &lt;/resultMap&gt;    &lt;!--Order和User关联的映射--&gt;    &lt;resultMap id=&quot;orderUserMap&quot; type=&quot;com.sangeng.pojo.Order&quot; autoMapping=&quot;false&quot; extends=&quot;orderMap&quot;&gt;        &lt;result property=&quot;user.id&quot; column=&quot;uid&quot;&gt;&lt;/result&gt;        &lt;result property=&quot;user.username&quot; column=&quot;username&quot;&gt;&lt;/result&gt;        &lt;result property=&quot;user.age&quot; column=&quot;age&quot;&gt;&lt;/result&gt;        &lt;result property=&quot;user.address&quot; column=&quot;address&quot;&gt;&lt;/result&gt;    &lt;/resultMap&gt;</code></pre><p>②使用定义好的resultMap</p><pre><code class="xml">&lt;!--根据订单id查询订单，要求把下单用户的信息也查询出来--&gt;    &lt;select id=&quot;findById&quot; resultMap=&quot;orderUserMap&quot;&gt;        SELECT            o.`id`,o.`createtime`,o.`price`,o.`remark`,o.`user_id`,u.`id` uid,u.`username`,u.`age`,u.`address`        FROM            orders o,`user` u        WHERE            o.id = #&#123;id&#125; AND            o.`user_id`=u.`id`    &lt;/select&gt;</code></pre><h5 id="2-1-1-2-使用ResultMap中的association"><a href="#2-1-1-2-使用ResultMap中的association" class="headerlink" title="2.1.1.2 使用ResultMap中的association"></a>2.1.1.2 使用ResultMap中的association</h5><p>​可以使用ResultMap中的子标签association 来设置关联实体类的映射规则.</p><p>①定义resultMap</p><pre><code class="xml">     &lt;resultMap id=&quot;baseOrderMap&quot; type=&quot;com.sangeng.pojo.Order&quot; &gt;        &lt;id column=&quot;id&quot; property=&quot;id&quot;&gt;&lt;/id&gt;        &lt;result column=&quot;createtime&quot; property=&quot;createtime&quot;&gt;&lt;/result&gt;        &lt;result column=&quot;price&quot; property=&quot;price&quot;&gt;&lt;/result&gt;        &lt;result column=&quot;remark&quot; property=&quot;remark&quot;&gt;&lt;/result&gt;    &lt;/resultMap&gt;    &lt;resultMap id=&quot;orderMap&quot; type=&quot;com.sangeng.pojo.Order&quot; autoMapping=&quot;false&quot; extends=&quot;baseOrderMap&quot;&gt;        &lt;result column=&quot;user_id&quot; property=&quot;userId&quot;&gt;&lt;/result&gt;    &lt;/resultMap&gt;    &lt;!--Order和User关联的映射（使用association）--&gt;    &lt;resultMap id=&quot;orderUserMapUseAssociation&quot; type=&quot;com.sangeng.pojo.Order&quot; autoMapping=&quot;false&quot; extends=&quot;orderMap&quot;&gt;        &lt;association property=&quot;user&quot; javaType=&quot;com.sangeng.pojo.User&quot;&gt;            &lt;id property=&quot;id&quot; column=&quot;uid&quot;&gt;&lt;/id&gt;            &lt;result property=&quot;username&quot; column=&quot;username&quot;&gt;&lt;/result&gt;            &lt;result property=&quot;age&quot; column=&quot;age&quot;&gt;&lt;/result&gt;            &lt;result property=&quot;address&quot; column=&quot;address&quot;&gt;&lt;/result&gt;        &lt;/association&gt;    &lt;/resultMap&gt;</code></pre><p>②使用resultMap</p><pre><code class="xml">&lt;!--根据订单id查询订单，要求把下单用户的信息也查询出来--&gt;    &lt;select id=&quot;findById&quot; resultMap=&quot;orderUserMapUseAssociation&quot;&gt;        SELECT            o.`id`,o.`createtime`,o.`price`,o.`remark`,o.`user_id`,u.`id` uid,u.`username`,u.`age`,u.`address`        FROM            orders o,`user` u        WHERE            o.id = #&#123;id&#125; AND            o.`user_id`=u.`id`    &lt;/select&gt;</code></pre><h4 id="2-1-2-一对多关系"><a href="#2-1-2-一对多关系" class="headerlink" title="2.1.2 一对多关系"></a>2.1.2 一对多关系</h4><p>​两个实体之间是一对多的关系。(例如我们需要查询用户，要求还需要该用户所具有的角色信息。这里的用户相对于角色是一对多的。)</p><p>例如：</p><p>方法定义如下</p><pre><code class="java">    //根据id查询用户，并且要求把该用户所具有的角色信息也查询出来    User findById(Integer id);</code></pre><p>因为期望User中还能包含该用户所具有的角色信息，所以可以在User中增加一个属性</p><pre><code class="java">//    该用户所具有的角色    private List&lt;Role&gt; roles;</code></pre><p>SQL语句如下</p><pre><code class="mysql">SELECT     u.`id`,u.`username`,u.`age`,u.`address`,r.id rid,r.name,r.descFROM     USER u,user_role ur,role rWHERE     u.id=ur.user_id AND ur.role_id = r.id    AND u.id = 2</code></pre><p>结果集</p><p><img data-src="/images%5Cimgmybatis%5Cimage-4.png" alt="image-20210224164927461"></p><p>我们可以使用如下的方式封装结果集。</p><h5 id="2-1-2-1-使用ResultMap中的collection"><a href="#2-1-2-1-使用ResultMap中的collection" class="headerlink" title="2.1.2.1 使用ResultMap中的collection"></a>2.1.2.1 使用ResultMap中的collection</h5><p>​可以使用ResultMap中的子标签association 来设置关联实体类的映射规则.</p><p>①定义ResultMap</p><pre><code class="xml">    &lt;!--定义User基本属性映射规则--&gt;    &lt;resultMap id=&quot;userMap&quot; type=&quot;com.sangeng.pojo.User&quot;&gt;        &lt;id property=&quot;id&quot; column=&quot;id&quot;&gt;&lt;/id&gt;        &lt;result property=&quot;username&quot; column=&quot;username&quot;&gt;&lt;/result&gt;        &lt;result property=&quot;age&quot; column=&quot;age&quot;&gt;&lt;/result&gt;        &lt;result property=&quot;address&quot; column=&quot;address&quot;&gt;&lt;/result&gt;    &lt;/resultMap&gt;        &lt;resultMap id=&quot;userRoleMap&quot; type=&quot;com.sangeng.pojo.User&quot;  extends=&quot;userMap&quot;&gt;        &lt;collection property=&quot;roles&quot; ofType=&quot;com.sangeng.pojo.Role&quot; &gt;            &lt;id property=&quot;id&quot; column=&quot;rid&quot;&gt;&lt;/id&gt;            &lt;result property=&quot;name&quot; column=&quot;name&quot;&gt;&lt;/result&gt;            &lt;result property=&quot;desc&quot; column=&quot;desc&quot;&gt;&lt;/result&gt;        &lt;/collection&gt;    &lt;/resultMap&gt;</code></pre><p>②使用ResultMap</p><pre><code class="xml">        &lt;select id=&quot;findById&quot; resultMap=&quot;userRoleMap&quot; &gt;        SELECT             u.`id`,u.`username`,u.`age`,u.`address`,r.id rid,r.name,r.desc        FROM             USER u,user_role ur,role r        WHERE             u.id=ur.user_id AND ur.role_id = r.id            AND u.id = #&#123;id&#125;    &lt;/select&gt;</code></pre><p>最终封装完的结果如下：</p><p><img data-src="/images%5Cimgmybatis%5Cimage-5.png" alt="image-20210224170108202"></p><h3 id="2-2-分步查询"><a href="#2-2-分步查询" class="headerlink" title="2.2 分步查询"></a>2.2 分步查询</h3><p>​如果有需要多表查询的需求我们也可以选择用多次查询的方式来查询出我们想要的数据。Mybatis也提供了对应的配置。</p><p>​例如我们需要查询用户，要求还需要查询出该用户所具有的角色信息。我们可以选择先查询User表查询用户信息。然后在去查询关联的角色信息。</p><h4 id="2-2-1实现步骤"><a href="#2-2-1实现步骤" class="headerlink" title="2.2.1实现步骤"></a>2.2.1实现步骤</h4><p>​具体步骤如下：</p><h5 id="①定义查询方法"><a href="#①定义查询方法" class="headerlink" title="①定义查询方法"></a>①定义查询方法</h5><p>​因为我们要分两步查询: 1.查询User 2.根据用户的id查询Role  所以我们需要定义下面两个方法，并且把对应的标签也先写好</p><p>1.查询User</p><pre><code class="java">    //根据用户名查询用户，并且要求把该用户所具有的角色信息也查询出来    User findByUsername(String username);</code></pre><pre><code class="xml">    &lt;!--根据用户名查询用户--&gt;    &lt;select id=&quot;findByUsername&quot; resultType=&quot;com.sangeng.pojo.User&quot;&gt;        select id,username,age,address from user where username = #&#123;username&#125;    &lt;/select&gt;</code></pre><p>2.根据user_id查询Role</p><pre><code class="java">public interface RoleDao &#123;    //根据userId查询所具有的角色    List&lt;Role&gt; findRoleByUserId(Integer userId);&#125;</code></pre><pre><code class="xml">    &lt;!--根据userId查询所具有的角色--&gt;    &lt;select id=&quot;findRoleByUserId&quot; resultType=&quot;com.sangeng.pojo.Role&quot;&gt;        select             r.id,r.name,r.desc        from             role r,user_role ur        where             ur.role_id = r.id            and ur.user_id = #&#123;userId&#125;    &lt;/select&gt;</code></pre><h5 id="②配置分步查询"><a href="#②配置分步查询" class="headerlink" title="②配置分步查询"></a>②配置分步查询</h5><p>​我们期望的效果是调用findByUsername方法查询出来的结果中就包含角色的信息。所以我们可以设置findByUsername方法的RestltMap，指定分步查询</p><pre><code class="xml">    &lt;resultMap id=&quot;userMap&quot; type=&quot;com.sangeng.pojo.User&quot;&gt;        &lt;id property=&quot;id&quot; column=&quot;id&quot;&gt;&lt;/id&gt;        &lt;result property=&quot;username&quot; column=&quot;username&quot;&gt;&lt;/result&gt;        &lt;result property=&quot;age&quot; column=&quot;age&quot;&gt;&lt;/result&gt;        &lt;result property=&quot;address&quot; column=&quot;address&quot;&gt;&lt;/result&gt;    &lt;/resultMap&gt;    &lt;!--           select属性：指定用哪个查询来查询当前属性的数据 写法：包名.接口名.方法名           column属性：设置当前结果集中哪列的数据作为select属性指定的查询方法需要参数       --&gt;    &lt;resultMap id=&quot;userRoleMapBySelect&quot; type=&quot;com.sangeng.pojo.User&quot; extends=&quot;userMap&quot;&gt;        &lt;collection property=&quot;roles&quot;                    ofType=&quot;com.sangeng.pojo.Role&quot;                    select=&quot;com.sangeng.dao.RoleDao.findRoleByUserId&quot;                    column=&quot;id&quot;&gt;        &lt;/collection&gt;    &lt;/resultMap&gt;</code></pre><p>​指定findByUsername使用我们刚刚创建的resultMap</p><pre><code class="xml">    &lt;!--根据用户名查询用户--&gt;    &lt;select id=&quot;findByUsername&quot; resultMap=&quot;userRoleMapBySelect&quot;&gt;        select id,username,age,address from user where username = #&#123;username&#125;    &lt;/select&gt;</code></pre><h4 id="2-2-2-设置按需加载"><a href="#2-2-2-设置按需加载" class="headerlink" title="2.2.2 设置按需加载"></a>2.2.2 设置按需加载</h4><p>​我们可以设置按需加载，这样在我们代码中需要用到关联数据的时候才会去查询关联数据。</p><p>​有两种方式可以配置分别是全局配置和局部配置</p><ol><li><p>局部配置</p><p>设置fetchType属性为lazy</p><pre><code class="xml">    &lt;resultMap id=&quot;userRoleMapBySelect&quot; type=&quot;com.sangeng.pojo.User&quot; extends=&quot;userMap&quot;&gt;        &lt;collection property=&quot;roles&quot;                    ofType=&quot;com.sangeng.pojo.Role&quot;                    select=&quot;com.sangeng.dao.RoleDao.findRoleByUserId&quot;                    column=&quot;id&quot; fetchType=&quot;lazy&quot;&gt;        &lt;/collection&gt;    &lt;/resultMap&gt;</code></pre></li><li><p>全局配置</p><p>设置lazyLoadingEnabled为true</p><pre><code class="xml">    &lt;settings&gt;       &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;    &lt;/settings&gt;</code></pre></li></ol><h2 id="3-分页查询-PageHelper"><a href="#3-分页查询-PageHelper" class="headerlink" title="3.分页查询-PageHelper"></a>3.分页查询-PageHelper</h2><p>​我们可以使用PageHelper非常方便的帮我们实现分页查询的需求。不需要自己在SQL中拼接SQL相关参数，并且能非常方便的获取的总页数总条数等分页相关数据。</p><h3 id="3-1-实现步骤"><a href="#3-1-实现步骤" class="headerlink" title="3.1 实现步骤"></a>3.1 实现步骤</h3><h4 id="①定义方法查询方法以及生成对应标签"><a href="#①定义方法查询方法以及生成对应标签" class="headerlink" title="①定义方法查询方法以及生成对应标签"></a>①定义方法查询方法以及生成对应标签</h4><pre><code class="java">    List&lt;User&gt; findAll();</code></pre><pre><code class="xml">    &lt;select id=&quot;findAll&quot; resultType=&quot;com.sangeng.pojo.User&quot;&gt;        select id,username,age,address from user    &lt;/select&gt;</code></pre><h4 id="②-引入依赖"><a href="#②-引入依赖" class="headerlink" title="② 引入依赖"></a>② 引入依赖</h4><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;    &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;    &lt;version&gt;4.0.0&lt;/version&gt;&lt;/dependency&gt;</code></pre><h4 id="③-配置Mybatis核心配置文件使用分页插件"><a href="#③-配置Mybatis核心配置文件使用分页插件" class="headerlink" title="③ 配置Mybatis核心配置文件使用分页插件"></a>③ 配置Mybatis核心配置文件使用分页插件</h4><pre><code class="xml"> &lt;plugins&gt;        &lt;!-- 注意：分页助手的插件  配置在通用馆mapper之前 --&gt;        &lt;plugin interceptor=&quot;com.github.pagehelper.PageHelper&quot;&gt;            &lt;!-- 指定方言 --&gt;            &lt;property name=&quot;dialect&quot; value=&quot;mysql&quot;/&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;</code></pre><h4 id="④-开始分页查询"><a href="#④-开始分页查询" class="headerlink" title="④ 开始分页查询"></a>④ 开始分页查询</h4><p>我们只需要在使用查询方法前设置分页参数即可</p><pre><code class="java">    //设置分页参数    UserDao userDao = session.getMapper(UserDao.class);    //设置分页查询参数    PageHelper.startPage(1,1);    List&lt;User&gt; users = userDao.findAll();    System.out.println(users.get(0));</code></pre><p>如果需要获取总页数总条数等分页相关数据，只需要创建一个PageInfo对象，把刚刚查询出的返回值做为构造方法参数传入。然后使用pageInfo对象获取即可。</p><pre><code class="java">    PageInfo&lt;User&gt; pageInfo = new PageInfo&lt;User&gt;(users);    System.out.println(&quot;总条数：&quot;+pageInfo.getTotal());    System.out.println(&quot;总页数：&quot;+pageInfo.getPages());    System.out.println(&quot;当前页：&quot;+pageInfo.getPageNum());    System.out.println(&quot;每页显示长度：&quot;+pageInfo.getPageSize());</code></pre><h3 id="3-2-一对多多表查询分页问题"><a href="#3-2-一对多多表查询分页问题" class="headerlink" title="3.2 一对多多表查询分页问题"></a>3.2 一对多多表查询分页问题</h3><p>​我们在进行一对多的多表查询时，如果使用了PageHelper进行分页。会出现关联数据不全的情况。我们可以使用分步查询的方式解决该问题。</p><h2 id="4-Mybatis缓存"><a href="#4-Mybatis缓存" class="headerlink" title="4.Mybatis缓存"></a>4.Mybatis缓存</h2><p>​Mybatis的缓存其实就是把之前查到的数据存入内存（map）,下次如果还是查相同的东西，就可以直接从缓存中取，从而提高效率。</p><p>​Mybatis有一级缓存和二级缓存之分，一级缓存（默认开启）是sqlsession级别的缓存。二级缓存相当于mapper级别的缓存。</p><h3 id="4-1-一级缓存"><a href="#4-1-一级缓存" class="headerlink" title="4.1 一级缓存"></a>4.1 一级缓存</h3><p>几种不会使用一级缓存的情况<br>    1.调用相同方法但是传入的参数不同<br>    2.调用相同方法参数也相同，但是使用的是另外一个SqlSession<br>    3.如果查询完后，对同一个表进行了增，删改的操作，都会清空这sqlSession上的缓存<br>    4.如果手动调用SqlSession的clearCache方法清除缓存了，后面也使用不了缓存</p><h3 id="4-2-二级缓存"><a href="#4-2-二级缓存" class="headerlink" title="4.2 二级缓存"></a>4.2 二级缓存</h3><p>​注意：只在sqlsession调用了close或者commit后的数据才会进入二级缓存。</p><h4 id="4-2-1-开启二级缓存"><a href="#4-2-1-开启二级缓存" class="headerlink" title="4.2.1 开启二级缓存"></a>4.2.1 开启二级缓存</h4><p>①全局开启</p><p>在Mybatis核心配置文件中配置</p><pre><code class="xml">    &lt;settings&gt;        &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;    &lt;/settings&gt;</code></pre><p>②局部开启</p><p>在要开启二级缓存的mapper映射文件中设置 cache标签</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &gt;&lt;mapper namespace=&quot;com.sangeng.dao.RoleDao&quot;&gt;    &lt;cache&gt;&lt;/cache&gt;&lt;/mapper&gt;</code></pre><h4 id="4-2-2-使用建议"><a href="#4-2-2-使用建议" class="headerlink" title="4.2.2 使用建议"></a>4.2.2 使用建议</h4><p>​二级缓存在实际开发中基本不会使用。</p><h2 id="5-Mybatis原理-单独专题讲解"><a href="#5-Mybatis原理-单独专题讲解" class="headerlink" title="5.Mybatis原理-单独专题讲解"></a>5.Mybatis原理-单独专题讲解</h2>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Mybatis </category>
          
          <category> Mybatis基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Step.2</title>
      <link href="/computer-science/Mybatis/doscmp/Mybatis-02/"/>
      <url>/computer-science/Mybatis/doscmp/Mybatis-02/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis-02"><a href="#Mybatis-02" class="headerlink" title="Mybatis-02"></a>Mybatis-02</h1><h2 id="1-注解开发"><a href="#1-注解开发" class="headerlink" title="1. 注解开发"></a>1. 注解开发</h2><p>​我们也可以使用注解的形式来进行开发，用注解来替换掉xml。 使用注解来映射简单语句会使代码显得更加简洁，但对于稍微复杂一点的语句，Java 注解不仅力不从心，还会让你本就复杂的 SQL 语句更加混乱不堪。 所以我们在实际企业开发中一般都是使用XML的形式。</p><p>​</p><h3 id="1-1-步骤"><a href="#1-1-步骤" class="headerlink" title="1.1 步骤"></a>1.1 步骤</h3><p>①在核心配置文件中配置mapper接口所在的包名</p><pre><code class="xml">    &lt;mappers&gt;        &lt;package name=&quot;com.sangeng.dao&quot;&gt;&lt;/package&gt;    &lt;/mappers&gt;</code></pre><p>②在接口对应方法上使用注解来配置需要执行的sql</p><pre><code class="java">public interface UserDao &#123;    @Select(&quot;select * from user&quot;)    List&lt;User&gt; findAll();    @Insert(&quot;insert into user values(null,#&#123;username&#125;,#&#123;age&#125;,#&#123;address&#125;)&quot;)    void insertUser(User user);    @Update(&quot;UPDATE USER SET age = #&#123;age&#125; , username = #&#123;username&#125;,address = #&#123;address&#125; WHERE id = #&#123;id&#125;&quot;)    void updateUser(User user);    @Delete(&quot;delete from user where id = #&#123;id&#125;&quot;)    void deleteById(Integer id);&#125;</code></pre><p>③和之前的一样获取Mapper调用方法即可</p><pre><code class="java">    public static void main(String[] args) throws IOException &#123;        //定义mybatis配置文件的路径        String resource = &quot;mybatis-config.xml&quot;;        InputStream inputStream = Resources.getResourceAsStream(resource);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);        //获取Sqlsession对象        SqlSession sqlSession = sqlSessionFactory.openSession();        //获取UserDao实现类对象        UserDao userDao = sqlSession.getMapper(UserDao.class);        //调用方法测试        List&lt;User&gt; userList = userDao.findAll();        System.out.println(userList);        //释放资源        sqlSession.close();    &#125;</code></pre><h2 id="2-动态SQL"><a href="#2-动态SQL" class="headerlink" title="2.动态SQL"></a>2.动态SQL</h2><p>​在实际开发中的SQL语句没有之前的这么简单，很多时候需要根据传入的参数情况动态的生成SQL语句。Mybatis提供了动态SQL相关的标签让我们使用。</p><h3 id="2-1-if"><a href="#2-1-if" class="headerlink" title="2.1  if"></a>2.1  if</h3><p>​可以使用if标签进行条件判断，条件成立才会把if标签中的内容拼接进sql语句中。</p><p>例如：</p><pre><code class="xml">    &lt;select id=&quot;findByCondition&quot; resultType=&quot;com.sangeng.pojo.User&quot;&gt;         select * from user         where  id = #&#123;id&#125;        &lt;if test=&quot;username!=null&quot;&gt;           and username = #&#123;username&#125;        &lt;/if&gt;    &lt;/select&gt;</code></pre><p>如果参数username为null则执行的sql为：<strong>select * from user where id &#x3D; ?</strong> </p><p>如果参数username不为null则执行的sql为：<strong>select * from user where id &#x3D; ? and username &#x3D; ?</strong> </p><p><strong>注意：在test属性中表示参数的时候不需要写#{}，写了会出问题。</strong></p><h3 id="2-2-trim"><a href="#2-2-trim" class="headerlink" title="2.2 trim"></a>2.2 trim</h3><p>​可以使用该标签动态的添加前缀或后缀，也可以使用该标签动态的消除前缀。</p><h4 id="2-2-1-prefixOverrides属性"><a href="#2-2-1-prefixOverrides属性" class="headerlink" title="2.2.1 prefixOverrides属性"></a>2.2.1 prefixOverrides属性</h4><p>​用来设置需要被清除的前缀,多个值可以用|分隔，注意|前后不要有空格。例如： and|or</p><p>例如：</p><pre><code class="xml">    &lt;select id=&quot;findByCondition&quot; resultType=&quot;com.sangeng.pojo.User&quot;&gt;        select * from user        &lt;trim prefixOverrides=&quot;and|or&quot; &gt;            and        &lt;/trim&gt;    &lt;/select&gt;</code></pre><p>最终执行的sql为： select * from user</p><h4 id="2-2-2-suffixOverrides属性"><a href="#2-2-2-suffixOverrides属性" class="headerlink" title="2.2.2 suffixOverrides属性"></a>2.2.2 suffixOverrides属性</h4><p>​用来设置需要被清除的后缀,多个值可以用|分隔，注意|前后不要有空格。例如： and|or</p><p>例如：</p><pre><code class="xml">    &lt;select id=&quot;findByCondition&quot; resultType=&quot;com.sangeng.pojo.User&quot;&gt;        select * from user        &lt;trim suffixOverrides=&quot;like|and&quot; &gt;            where 1=1 like        &lt;/trim&gt;    &lt;/select&gt;</code></pre><p>最终执行的sql为： select * from user  去掉了后缀like</p><h4 id="2-2-3-prefix属性"><a href="#2-2-3-prefix属性" class="headerlink" title="2.2.3 prefix属性"></a>2.2.3 prefix属性</h4><p>​用来设置动态添加的前缀，如果标签中有内容就会添加上设置的前缀</p><p>例如：</p><pre><code class="xml">    &lt;select id=&quot;findByCondition&quot; resultType=&quot;com.sangeng.pojo.User&quot;&gt;        select * from user        &lt;trim prefix=&quot;where&quot; &gt;           1=1        &lt;/trim&gt;    &lt;/select&gt;</code></pre><p>最终执行的sql为：select * from user where 1&#x3D;1   动态增加了前缀where</p><h4 id="2-2-4-suffix属性"><a href="#2-2-4-suffix属性" class="headerlink" title="2.2.4 suffix属性"></a>2.2.4 suffix属性</h4><p>​用来设置动态添加的后缀，如果标签中有内容就会添加上设置的后缀</p><pre><code class="xml">    &lt;select id=&quot;findByCondition&quot; resultType=&quot;com.sangeng.pojo.User&quot;&gt;        select * from user        &lt;trim suffix=&quot;1=1&quot; &gt;           where        &lt;/trim&gt;    &lt;/select&gt;</code></pre><p>最终执行的sql为：select * from user where 1&#x3D;1   动态增加了后缀1&#x3D;1</p><h4 id="2-2-5-动态添加前缀where-并且消除前缀and或者or"><a href="#2-2-5-动态添加前缀where-并且消除前缀and或者or" class="headerlink" title="2.2.5 动态添加前缀where 并且消除前缀and或者or"></a>2.2.5 动态添加前缀where 并且消除前缀and或者or</h4><pre><code class="java">User findByCondition(@Param(&quot;id&quot;) Integer id,@Param(&quot;username&quot;) String username);</code></pre><pre><code class="xml">    &lt;select id=&quot;findByCondition&quot; resultType=&quot;com.sangeng.pojo.User&quot;&gt;        select * from user        &lt;trim prefix=&quot;where&quot; prefixOverrides=&quot;and|or&quot; &gt;            &lt;if test=&quot;id!=null&quot;&gt;                id = #&#123;id&#125;            &lt;/if&gt;            &lt;if test=&quot;username!=null&quot;&gt;                and username = #&#123;username&#125;            &lt;/if&gt;        &lt;/trim&gt;    &lt;/select&gt;</code></pre><p>调用方法时如果传入的id和username为null则执行的SQL为：select * from user</p><p>调用方法时如果传入的id为null，username不为null，则执行的SQL为：select * from user where username &#x3D; ?</p><h3 id="2-2-where"><a href="#2-2-where" class="headerlink" title="2.2 where"></a>2.2 where</h3><p>​where标签等价于：</p><pre><code class="xml">&lt;trim prefix=&quot;where&quot; prefixOverrides=&quot;and|or&quot; &gt;&lt;/trim&gt;</code></pre><p>​可以使用where标签动态的拼接where并且去除前缀的and或者or。</p><p>例如：</p><pre><code class="xml">    &lt;select id=&quot;findByCondition&quot; resultType=&quot;com.sangeng.pojo.User&quot;&gt;        select * from user        &lt;where&gt;            &lt;if test=&quot;id!=null&quot;&gt;                id = #&#123;id&#125;            &lt;/if&gt;            &lt;if test=&quot;username!=null&quot;&gt;                and username = #&#123;username&#125;            &lt;/if&gt;        &lt;/where&gt;    &lt;/select&gt;</code></pre><p>如果id和username都为null，则执行的sql为：**select * from user **</p><p>如果id为null，username不为null，则执行的sql为：**select * from user  where username &#x3D; ? **</p><h3 id="2-3-set"><a href="#2-3-set" class="headerlink" title="2.3 set"></a>2.3 set</h3><p>​set标签等价于</p><pre><code class="xml">&lt;trim prefix=&quot;set&quot; suffixOverrides=&quot;,&quot; &gt;&lt;/trim&gt;</code></pre><p>​可以使用set标签动态的拼接set并且去除后缀的逗号。</p><p>例如：</p><pre><code class="xml">    &lt;update id=&quot;updateUser&quot;&gt;        UPDATE USER        &lt;set&gt;            &lt;if test=&quot;username!=null&quot;&gt;                username = #&#123;username&#125;,            &lt;/if&gt;            &lt;if test=&quot;age!=null&quot;&gt;                age = #&#123;age&#125;,            &lt;/if&gt;            &lt;if test=&quot;address!=null&quot;&gt;                address = #&#123;address&#125;,            &lt;/if&gt;        &lt;/set&gt;        where id = #&#123;id&#125;    &lt;/update&gt;</code></pre><p>如果调用方法时传入的User对象的id为2，username不为null，其他属性都为null则最终执行的sql为：UPDATE USER SET username &#x3D; ? where id &#x3D; ? </p><h3 id="2-4-foreach"><a href="#2-4-foreach" class="headerlink" title="2.4 foreach"></a>2.4 foreach</h3><p>​可以使用foreach标签遍历集合或者数组类型的参数，获取其中的元素拿来动态的拼接SQL语句。</p><p>例如：</p><p>方法定义如下</p><pre><code class="java">List&lt;User&gt; findByIds(@Param(&quot;ids&quot;) Integer[] ids);</code></pre><p>如果期望动态的根据实际传入的数组的长度拼接SQL语句。例如传入长度为4个数组最终执行的SQL为：</p><pre><code class="sql">select * from User WHERE id in( ? , ? , ? , ?, ? ) </code></pre><p>则在xml映射文件中可以使用以下写法</p><pre><code class="xml">    &lt;select id=&quot;findByIds&quot; resultType=&quot;com.sangeng.pojo.User&quot;&gt;        select * from User        &lt;where&gt;            &lt;foreach collection=&quot;ids&quot; open=&quot;id in(&quot; close=&quot;)&quot; item=&quot;id&quot; separator=&quot;,&quot;&gt;                #&#123;id&#125;            &lt;/foreach&gt;        &lt;/where&gt;    &lt;/select&gt;</code></pre><p><strong>collection：表示要遍历的参数。</strong></p><p><strong>open:表示遍历开始时拼接的语句</strong></p><p><strong>item：表示给当前遍历到的元素的取的名字</strong></p><p><strong>separator：表示每遍历完一次拼接的分隔符</strong></p><p><strong>close：表示最后一次遍历完拼接的语句</strong></p><p><strong>注意：如果方法参数是数组类型，默认的参数名是array，如果方法参数是list集合默认的参数名是list。建议遇到数组或者集合类型的参数统一使用@Param注解进行命名。</strong></p><h3 id="2-5-choose、when、otherwise"><a href="#2-5-choose、when、otherwise" class="headerlink" title="2.5 choose、when、otherwise"></a>2.5 choose、when、otherwise</h3><p>​当我们不想使用所有的条件，而只是想从多个条件中选择一个使用时。可以使用choose系列标签。类似于java中的switch。</p><p>例如:</p><p>接口中方法定义如下</p><pre><code class="java">List&lt;User&gt; selectChose(User user);</code></pre><p>期望：</p><p>​如果user对象的id不为空时就通过id查询。</p><p>​如果id为null,username不为null就通过username查询。</p><p>​如果id和username都会null就查询id为3的用户</p><p>xml映射文件如下</p><pre><code class="xml">     &lt;select id=&quot;selectChose&quot; resultType=&quot;com.sangeng.pojo.User&quot;&gt;        select * from user        &lt;where&gt;            &lt;choose&gt;                &lt;when test=&quot;id!=null&quot;&gt;                    id = #&#123;id&#125;                &lt;/when&gt;                &lt;when test=&quot;username!=null&quot;&gt;                    username = #&#123;username&#125;                &lt;/when&gt;                &lt;otherwise&gt;                    id = 3                &lt;/otherwise&gt;            &lt;/choose&gt;        &lt;/where&gt;    &lt;/select&gt;</code></pre><ul><li><p><strong>choose类似于java中的switch</strong></p></li><li><p><strong>when类似于java中的case</strong></p></li><li><p><strong>otherwise类似于java中的dufault</strong></p></li></ul><p>​一个choose标签中最多只会有一个when中的判断成立。从上到下去进行判断。如果成立了就把标签体的内容拼接到sql中，并且不会进行其它when的判断和拼接。如果所有的when都不成立则拼接otherwise中的语句。</p><h2 id="3-SQL片段抽取"><a href="#3-SQL片段抽取" class="headerlink" title="3. SQL片段抽取"></a>3. SQL片段抽取</h2><p>​我们在xml映射文件中编写SQL语句的时候可能会遇到重复的SQL片段。这种SQL片段我们可以使用sql标签来进行抽取。然后在需要使用的时候使用include标签进行使用。</p><p>例如：</p><pre><code class="xml">    &lt;sql id=&quot;baseSelect&quot; &gt;id,username,age,address&lt;/sql&gt;    &lt;select id=&quot;findAll&quot; resultType=&quot;com.sangeng.pojo.User&quot;&gt;        select &lt;include refid=&quot;baseSelect&quot;/&gt;  from user    &lt;/select&gt;</code></pre><p>最终执行的sql为： <strong>select id,username,age,address from user</strong> </p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Mybatis </category>
          
          <category> Mybatis基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Step.1</title>
      <link href="/computer-science/spring/docssp/Spring-01/"/>
      <url>/computer-science/spring/docssp/Spring-01/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-01"><a href="#Spring-01" class="headerlink" title="Spring-01"></a>Spring-01</h1><h2 id="1-Spring简介"><a href="#1-Spring简介" class="headerlink" title="1.Spring简介"></a>1.Spring简介</h2><p>​ Spring是一个开源框架，它由[Rod Johnson](<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9Sb2Q=">https://baike.baidu.com/item/Rod</span> Johnson)创建。它是为了解决企业应用开发的复杂性而创建的。<br>​ 目前是JavaEE开发的灵魂框架。他可以简化JavaEE开发，可以非常方便整合其他框架，无侵入的进行功能增强。<br>​ Spring的核心就是 控制反转(IoC)和面向切面(AOP) 。</p><h2 id="2-IOC控制反转"><a href="#2-IOC控制反转" class="headerlink" title="2.IOC控制反转"></a>2.IOC控制反转</h2><h3 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h3><p>​控制反转，之前对象的控制权在类手上，现在反转后到了Spring手上。</p><h3 id="2-2-入门案例"><a href="#2-2-入门案例" class="headerlink" title="2.2 入门案例"></a>2.2 入门案例</h3><h4 id="①导入依赖"><a href="#①导入依赖" class="headerlink" title="①导入依赖"></a>①导入依赖</h4><p>导入SpringIOC相关依赖</p><pre><code class="xml">        &lt;dependency&gt;            &lt;groupId&gt;org.springframework&lt;/groupId&gt;            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;            &lt;version&gt;5.1.9.RELEASE&lt;/version&gt;        &lt;/dependency&gt;</code></pre><h4 id="②编写配置文件"><a href="#②编写配置文件" class="headerlink" title="②编写配置文件"></a>②编写配置文件</h4><p>在resources目录下创建applicationContext.xml文件，文件名可以任意取。但是建议叫applicationContext。<br>内容如下：</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;    &lt;!--        classs:配置类的全类名        id:配置一个唯一标识    --&gt;    &lt;bean class=&quot;com.sangeng.dao.impl.StudentDaoImpl&quot; id=&quot;studentDao&quot;  &gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><h4 id="③创建容器从容器中获取对象并测试"><a href="#③创建容器从容器中获取对象并测试" class="headerlink" title="③创建容器从容器中获取对象并测试"></a>③创建容器从容器中获取对象并测试</h4><pre><code class="java">    public static void main(String[] args) &#123;//        1.获取StudentDaoImpl对象        //创建Spring容器，指定要读取的配置文件路径        ApplicationContext app = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);        //从容器中获取对象        StudentDao studentDao = (StudentDao) app.getBean(&quot;studentDao&quot;);        //调用对象的方法进行测试        System.out.println(studentDao.getStudentById(1));    &#125;</code></pre><h3 id="2-3-Bean的常用属性配置"><a href="#2-3-Bean的常用属性配置" class="headerlink" title="2.3 Bean的常用属性配置"></a>2.3 Bean的常用属性配置</h3><h4 id="2-3-1-id"><a href="#2-3-1-id" class="headerlink" title="2.3.1 id"></a>2.3.1 id</h4><p>​bean的唯一标识，同一个Spring容器中不允许重复</p><h4 id="2-3-2-class"><a href="#2-3-2-class" class="headerlink" title="2.3.2 class"></a>2.3.2 class</h4><p>​全类名，用于反射创建对象</p><h4 id="2-3-3-scope"><a href="#2-3-3-scope" class="headerlink" title="2.3.3 scope"></a>2.3.3 scope</h4><p>​scope主要有两个值：singleton和prototype<br>​如果设置为singleton则一个容器中只会有这个一个bean对象。默认容器创建的时候就会创建该对象。<br>​如果设置为prototype则一个容器中会有多个该bean对象。每次调用getBean方法获取时都会创建一个新对象。</p><h2 id="3-DI依赖注入"><a href="#3-DI依赖注入" class="headerlink" title="3.DI依赖注入"></a>3.DI依赖注入</h2><p>​依赖注入可以理解成IoC的一种应用场景，反转的是对象间依赖关系维护权。</p><h3 id="3-1-set方法注入"><a href="#3-1-set方法注入" class="headerlink" title="3.1 set方法注入"></a>3.1 set方法注入</h3><p>在要注入属性的bean标签中进行配置。前提是该类有提供属性对应的set方法。</p><pre><code class="java">package com.sangeng.domain;public class Student &#123;    private String name;    private int id;    private int age;    private Dog dog;    public Dog getDog() &#123;        return dog;    &#125;    public void setDog(Dog dog) &#123;        this.dog = dog;    &#125;    @Override    public String toString() &#123;        return &quot;Student&#123;&quot; +                &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +                &quot;, id=&quot; + id +                &quot;, age=&quot; + age +                &#39;&#125;&#39;;    &#125;    public Student() &#123;    &#125;    public Student(String name, int id, int age) &#123;        this.name = name;        this.id = id;        this.age = age;    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name = name;    &#125;    public int getId() &#123;        return id;    &#125;    public void setId(int id) &#123;        this.id = id;    &#125;    public int getAge() &#123;        return age;    &#125;    public void setAge(int age) &#123;        this.age = age;    &#125;&#125;</code></pre><pre><code class="xml">    &lt;bean class=&quot;com.sangeng.domain.Dog&quot; id=&quot;dog&quot;&gt;        &lt;property name=&quot;name&quot; value=&quot;小白&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;age&quot; value=&quot;6&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;    &lt;bean class=&quot;com.sangeng.domain.Student&quot; id=&quot;student&quot; &gt;        &lt;!--            name属性用来指定要设置哪个属性            value属性用来设置要设置的值            ref属性用来给引用类型的属性设置值，可以写上Spring容器中bean的id        --&gt;        &lt;property name=&quot;name&quot; value=&quot;东南枝&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;age&quot; value=&quot;20&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;id&quot; value=&quot;1&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;dog&quot; ref=&quot;dog&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;</code></pre><h3 id="3-2-有参构造注入"><a href="#3-2-有参构造注入" class="headerlink" title="3.2 有参构造注入"></a>3.2 有参构造注入</h3><p>在要注入属性的bean标签中进行配置。前提是该类有提供对应的有参构造。</p><pre><code class="java">public class Student &#123;    private String name;    private int id;    private int age;    private Dog dog;    public Student(String name, int id, int age, Dog dog) &#123;        this.name = name;        this.id = id;        this.age = age;        this.dog = dog;    &#125;    //.....省略其他&#125;</code></pre><pre><code class="xml">    &lt;!--使用有参构造进行注入--&gt;    &lt;bean class=&quot;com.sangeng.domain.Student&quot; id=&quot;student2&quot; &gt;        &lt;constructor-arg name=&quot;name&quot; value=&quot;自挂东南枝&quot;&gt;&lt;/constructor-arg&gt;        &lt;constructor-arg name=&quot;age&quot; value=&quot;20&quot;&gt;&lt;/constructor-arg&gt;        &lt;constructor-arg name=&quot;id&quot; value=&quot;30&quot;&gt;&lt;/constructor-arg&gt;        &lt;constructor-arg name=&quot;dog&quot; ref=&quot;dog&quot;&gt;&lt;/constructor-arg&gt;    &lt;/bean&gt;</code></pre><h3 id="3-3-复杂类型属性注入"><a href="#3-3-复杂类型属性注入" class="headerlink" title="3.3 复杂类型属性注入"></a>3.3 复杂类型属性注入</h3><p>实体类如下：</p><pre><code class="java">@Data@NoArgsConstructor@AllArgsConstructorpublic class User &#123;    private int age;    private String name;    private Phone phone;    private List&lt;String&gt; list;    private List&lt;Phone&gt; phones;    private Set&lt;String&gt; set;    private Map&lt;String, Phone&gt; map;    private int[] arr;    private Properties properties;&#125;</code></pre><pre><code class="java">@Data@NoArgsConstructor@AllArgsConstructorpublic class Phone &#123;    private double price;    private String name;    private String password;    private String path;&#125;</code></pre><p>配置如下：</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;    &lt;bean class=&quot;com.sangeng.domain.Phone&quot; id=&quot;phone&quot;&gt;        &lt;property name=&quot;price&quot; value=&quot;3999&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;name&quot; value=&quot;黑米&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;password&quot; value=&quot;123&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;path&quot; value=&quot;qqqq&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;        &lt;bean class=&quot;com.sangeng.domain.User&quot; id=&quot;user&quot;&gt;        &lt;property name=&quot;age&quot; value=&quot;10&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;name&quot; value=&quot;大队长&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;phone&quot; ref=&quot;phone&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;list&quot;&gt;            &lt;list&gt;                &lt;value&gt;三更&lt;/value&gt;                &lt;value&gt;西施&lt;/value&gt;            &lt;/list&gt;        &lt;/property&gt;        &lt;property name=&quot;phones&quot;&gt;            &lt;list&gt;                &lt;ref bean=&quot;phone&quot;&gt;&lt;/ref&gt;            &lt;/list&gt;        &lt;/property&gt;        &lt;property name=&quot;set&quot;&gt;            &lt;set&gt;                &lt;value&gt;setEle1&lt;/value&gt;                &lt;value&gt;setEle2&lt;/value&gt;            &lt;/set&gt;        &lt;/property&gt;        &lt;property name=&quot;map&quot;&gt;            &lt;map&gt;                &lt;entry key=&quot;k1&quot; value-ref=&quot;phone&quot;&gt;&lt;/entry&gt;                &lt;entry key=&quot;k2&quot; value-ref=&quot;phone&quot;&gt;&lt;/entry&gt;            &lt;/map&gt;        &lt;/property&gt;        &lt;property name=&quot;arr&quot;&gt;            &lt;array&gt;                &lt;value&gt;10&lt;/value&gt;                &lt;value&gt;11&lt;/value&gt;            &lt;/array&gt;        &lt;/property&gt;        &lt;property name=&quot;properties&quot;&gt;            &lt;props&gt;                &lt;prop key=&quot;k1&quot;&gt;v1&lt;/prop&gt;                &lt;prop key=&quot;k2&quot;&gt;v2&lt;/prop&gt;            &lt;/props&gt;        &lt;/property&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><h2 id="4-Lombok"><a href="#4-Lombok" class="headerlink" title="4.Lombok"></a>4.Lombok</h2><h3 id="①导入依赖-1"><a href="#①导入依赖-1" class="headerlink" title="①导入依赖"></a>①导入依赖</h3><pre><code class="xml">        &lt;dependency&gt;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;            &lt;version&gt;1.18.16&lt;/version&gt;        &lt;/dependency&gt;</code></pre><h3 id="②增加注解"><a href="#②增加注解" class="headerlink" title="②增加注解"></a>②增加注解</h3><pre><code class="java">@Data //根据属性生成set，get方法@NoArgsConstructor //生成空参构造@AllArgsConstructor //生成全参构造public class Phone &#123;    private double price;    private String name;    private String password;    private String path;&#125;</code></pre><h2 id="5-SPEL"><a href="#5-SPEL" class="headerlink" title="5.SPEL"></a>5.SPEL</h2><p>​我们可以再配置文件中使用SPEL表达式。写法如下:</p><pre><code class="xml">        &lt;property name=&quot;age&quot; value=&quot;#&#123;20&#125;&quot;/&gt;        &lt;property name=&quot;car&quot; value=&quot;#&#123;car&#125;&quot;/&gt;</code></pre><p>​注意：SPEL需要写到value属性中，不能写到ref属性。</p><h2 id="6-配置文件"><a href="#6-配置文件" class="headerlink" title="6.配置文件"></a>6.配置文件</h2><h3 id="6-1-读取properties文件"><a href="#6-1-读取properties文件" class="headerlink" title="6.1 读取properties文件"></a>6.1 读取properties文件</h3><p>​我们可以让Spring读取properties文件中的key&#x2F;value，然后使用其中的值。</p><h4 id="①设置读取properties"><a href="#①设置读取properties" class="headerlink" title="①设置读取properties"></a>①设置读取properties</h4><p>在Spring配置文件中加入如下标签：指定要读取的文件的路径。</p><pre><code class="xml">&lt;context:property-placeholder location=&quot;classpath:filename.properties&quot;&gt;</code></pre><p>其中的classpath表示类加载路径下。</p><p>我们也会用到如下写法：classpath:**.properties  其中的*  * 表示文件名任意。</p><p><strong>注意：context命名空间的引入是否正确</strong></p><h4 id="②使用配置文件中的值"><a href="#②使用配置文件中的值" class="headerlink" title="②使用配置文件中的值"></a>②使用配置文件中的值</h4><p>在我们需要使用的时候可以使用${key}来表示具体的值。注意要再value属性中使用才可以。例如：</p><pre><code class="xml">&lt;property name=&quot;propertyName&quot; value=&quot;$&#123;key&#125;&quot;/&gt;</code></pre><h3 id="6-2-引入Spring配置文件"><a href="#6-2-引入Spring配置文件" class="headerlink" title="6.2 引入Spring配置文件"></a>6.2 引入Spring配置文件</h3><p>​我们可以在主的配置文件中通过import标签的resource属性，引入其他的xml配置文件</p><pre><code class="xml">&lt;import resource=&quot;classpath:applicationContext-book.xml&quot;/&gt;</code></pre><h2 id="7-低频知识点"><a href="#7-低频知识点" class="headerlink" title="7. 低频知识点"></a>7. 低频知识点</h2><h3 id="7-1-bean的配置"><a href="#7-1-bean的配置" class="headerlink" title="7.1 bean的配置"></a>7.1 bean的配置</h3><h4 id="7-1-1-name属性"><a href="#7-1-1-name属性" class="headerlink" title="7.1.1 name属性"></a>7.1.1 name属性</h4><p>​我们可以用name属性来给bean取名。例如：</p><pre><code class="xml">    &lt;bean class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; id=&quot;dataSource&quot; name=&quot;dataSource2,dataSource3&quot;&gt;        &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;</code></pre><p>​获取的时候就可以使用这个名字来获取了</p><pre><code class="java">    public static void main(String[] args) &#123;        ApplicationContext app = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);        DruidDataSource dataSource = (DruidDataSource) app.getBean(&quot;dataSource3&quot;);        System.out.println(dataSource);    &#125;</code></pre><h4 id="7-1-2-lazy-init"><a href="#7-1-2-lazy-init" class="headerlink" title="7.1.2 lazy-init"></a>7.1.2 lazy-init</h4><p>​可以控制bean的创建时间，如果设置为true就是在第一次获取该对象的时候才去创建。</p><pre><code class="xml">    &lt;bean class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; lazy-init=&quot;true&quot;  id=&quot;dataSource&quot; name=&quot;dataSource2,dataSource3&quot;&gt;        &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;</code></pre><h4 id="7-1-3-init-method"><a href="#7-1-3-init-method" class="headerlink" title="7.1.3 init-method"></a>7.1.3 init-method</h4><p>​可以用来设置初始化方法，设置完后容器创建完对象就会自动帮我们调用对应的方法。</p><pre><code class="java">@Data@NoArgsConstructor@AllArgsConstructorpublic class Student &#123;    private String name;    private int id;    private int age;    //初始化方法    public void init()&#123;        System.out.println(&quot;对学生对象进行初始化操作&quot;);    &#125;&#125;</code></pre><pre><code class="xml">&lt;bean class=&quot;com.sangeng.domain.Student&quot; id=&quot;student&quot; init-method=&quot;init&quot;&gt;&lt;/bean&gt;</code></pre><p><strong>注意：配置的初始化方法只能是空参的。</strong></p><h4 id="7-1-4-destroy-method"><a href="#7-1-4-destroy-method" class="headerlink" title="7.1.4 destroy-method"></a>7.1.4 destroy-method</h4><p>​可以用来设置销毁之前调用的方法，设置完后容器销毁对象前就会自动帮我们调用对应的方法。</p><pre><code class="xml">    &lt;bean class=&quot;com.sangeng.domain.Student&quot; id=&quot;student&quot;  destroy-method=&quot;close&quot;&gt;&lt;/bean&gt;</code></pre><pre><code class="java">@Data@NoArgsConstructor@AllArgsConstructorpublic class Student &#123;    private String name;    private int id;    private int age;    public void init()&#123;        System.out.println(&quot;对学生对象进行初始化操作&quot;);    &#125;    public void close()&#123;        System.out.println(&quot;对象销毁之前调用，用于释放资源&quot;);    &#125;&#125;</code></pre><p><strong>注意：配置的方法只能是空参的。</strong></p><h4 id="7-1-5-factory-bean-amp-factory-method"><a href="#7-1-5-factory-bean-amp-factory-method" class="headerlink" title="7.1.5 factory-bean&amp;factory-method"></a>7.1.5 factory-bean&amp;factory-method</h4><p>​当我们需要让Spring容器使用工厂类来创建对象放入Spring容器的时候可以使用factory-bean和factory-method属性。</p><h5 id="7-1-5-1-配置实例工厂创建对象"><a href="#7-1-5-1-配置实例工厂创建对象" class="headerlink" title="7.1.5.1 配置实例工厂创建对象"></a>7.1.5.1 配置实例工厂创建对象</h5><p>配置文件中进行配置</p><pre><code class="xml">    &lt;!--创建实例工厂--&gt;    &lt;bean class=&quot;com.sangeng.factory.CarFactory&quot; id=&quot;carFactory&quot;&gt;&lt;/bean&gt;    &lt;!--使用实例工厂创建Car放入容器--&gt;    &lt;!--factory-bean 用来指定使用哪个工厂对象--&gt;    &lt;!--factory-method 用来指定使用哪个工厂方法--&gt;    &lt;bean factory-bean=&quot;carFactory&quot; factory-method=&quot;getCar&quot; id=&quot;car&quot;&gt;&lt;/bean&gt;</code></pre><p>创建容器获取对象测试</p><pre><code class="java">        ClassPathXmlApplicationContext app = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);        //获取car对象        Car c = (Car) app.getBean(&quot;car&quot;);        System.out.println(c);</code></pre><h5 id="7-1-5-2-配置静态工厂创建对象"><a href="#7-1-5-2-配置静态工厂创建对象" class="headerlink" title="7.1.5.2 配置静态工厂创建对象"></a>7.1.5.2 配置静态工厂创建对象</h5><p>配置文件中进行配置</p><pre><code class="xml">    &lt;!--使用静态工厂创建Car放入容器--&gt;    &lt;bean class=&quot;com.sangeng.factory.CarStaticFactory&quot; factory-method=&quot;getCar&quot; id=&quot;car2&quot;&gt;&lt;/bean&gt;</code></pre><p>创建容器获取对象测试</p><pre><code class="java">        ClassPathXmlApplicationContext app = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);        //获取car对象        Car c = (Car) app.getBean(&quot;car2&quot;);        System.out.println(c);</code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Spring </category>
          
          <category> Spring基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Step.2</title>
      <link href="/computer-science/spring/docssp/Spring-02/"/>
      <url>/computer-science/spring/docssp/Spring-02/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-02"><a href="#Spring-02" class="headerlink" title="Spring-02"></a>Spring-02</h1><h2 id="1-注解开发"><a href="#1-注解开发" class="headerlink" title="1.注解开发"></a>1.注解开发</h2><p>​为了简化配置，Spring支持使用注解代替xml配置。</p><p>​</p><h2 id="2-Spring常用注解"><a href="#2-Spring常用注解" class="headerlink" title="2.Spring常用注解"></a>2.Spring常用注解</h2><h3 id="2-0-注解开发准备工作"><a href="#2-0-注解开发准备工作" class="headerlink" title="2.0 注解开发准备工作"></a>2.0 注解开发准备工作</h3><p>​如果要使用注解开发必须要开启组件扫描，这样加了注解的类才会被识别出来。Spring才能去解析其中的注解。</p><pre><code class="xml">&lt;!--启动组件扫描，指定对应扫描的包路径，该包及其子包下所有的类都会被扫描，加载包含指定注解的类--&gt;&lt;context:component-scan base-package=&quot;com.sangeng&quot;/&gt;</code></pre><h3 id="2-1-IOC相关注解"><a href="#2-1-IOC相关注解" class="headerlink" title="2.1 IOC相关注解"></a>2.1 IOC相关注解</h3><h4 id="2-1-1-Component-Controller-Service-Repository"><a href="#2-1-1-Component-Controller-Service-Repository" class="headerlink" title="2.1.1 @Component,@Controller,@Service ,@Repository"></a>2.1.1 @Component,@Controller,@Service ,@Repository</h4><p>​上述4个注解都是加到类上的。</p><p>​他们都可以起到类似bean标签的作用。可以把加了该注解类的对象放入Spring容器中。</p><p>​实际再使用时选择任意一个都可以。但是后3个注解是语义化注解。</p><p>​如果是Service类要求使用@Service。</p><p>​如果是Dao类要求使用@Repository</p><p>​如果是Controllerl类(SpringMVC中会学习到)要求使用@Controller</p><p>​如果是其他类可以使用@Component</p><p>例如：</p><p>配置文件如下：</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;&lt;!--启动组件扫描，指定对应扫描的包路径，该包及其子包下所有的类都会被扫描，加载包含指定注解的类--&gt;    &lt;context:component-scan base-package=&quot;com.sangeng&quot;&gt;&lt;/context:component-scan&gt;&lt;/beans&gt;</code></pre><p>类如下：</p><pre><code class="java">@Repository(&quot;userDao&quot;)public class UserDaoImpl implements UserDao &#123;    public void show() &#123;        System.out.println(&quot;查询数据库，展示查询到的数据&quot;);    &#125;&#125;</code></pre><pre><code class="java">@Data@NoArgsConstructor@AllArgsConstructor@Component(&quot;phone&quot;)public class Phone &#123;    private double price;    private String name;    private String password;    private String path;&#125;</code></pre><pre><code class="java">@Service(&quot;userService&quot;)@Data@NoArgsConstructor@AllArgsConstructorpublic class UserServiceImpl implements UserService &#123;    private UserDao userDao;    private int num;    private String str;    public void show() &#123;        userDao.show();    &#125;&#125;</code></pre><p>测试类如下：</p><pre><code class="java">public class Demo &#123;    public static void main(String[] args) &#123;        //创建容器        ClassPathXmlApplicationContext app = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);        //获取对象        UserDao userDao = (UserDao) app.getBean(&quot;userDao&quot;);        Phone phone = (Phone) app.getBean(&quot;phone&quot;);        UserService userService = (UserService) app.getBean(&quot;userService&quot;);        System.out.println(phone);        System.out.println(userService);        System.out.println(userDao);    &#125;&#125;</code></pre><h3 id="2-2-DI相关注解"><a href="#2-2-DI相关注解" class="headerlink" title="2.2 DI相关注解"></a>2.2 DI相关注解</h3><p>​如果一个bean已经放入Spring容器中了。那么我们可以使用下列注解实现属性注入，让Spring容器帮我们完成属性的赋值。</p><h4 id="2-2-1-Value"><a href="#2-2-1-Value" class="headerlink" title="2.2.1 @Value"></a>2.2.1 @Value</h4><p>​主要用于String,Integer等可以直接赋值的属性注入。不依赖setter方法，支持SpEL表达式。</p><p>例如：</p><pre><code class="java">@Service(&quot;userService&quot;)@Data@NoArgsConstructor@AllArgsConstructorpublic class UserServiceImpl implements UserService &#123;    private UserDao userDao;    @Value(&quot;199&quot;)    private int num;    @Value(&quot;三更草堂&quot;)    private String str;    @Value(&quot;#&#123;19+3&#125;&quot;)    private Integer age;    public void show() &#123;        userDao.show();    &#125;&#125;</code></pre><h4 id="2-2-2-AutoWired"><a href="#2-2-2-AutoWired" class="headerlink" title="2.2.2 @AutoWired"></a>2.2.2 @AutoWired</h4><p>​Spring会给加了该注解的属性自动注入数据类型相同的对象。</p><p>例如：</p><pre><code class="java">@Service(&quot;userService&quot;)@Data@NoArgsConstructor@AllArgsConstructorpublic class UserServiceImpl implements UserService &#123;    @Autowired    private UserDao userDao;    @Value(&quot;199&quot;)    private int num;    @Value(&quot;三更草堂&quot;)    private String str;    @Value(&quot;#&#123;19+3&#125;&quot;)    private Integer age;    public void show() &#123;        userDao.show();    &#125;&#125;</code></pre><p>​<strong>required属性代表这个属性是否是必须的，默认值为true。如果是true的话Spring容器中如果找不到相同类型的对象完成属性注入就会出现异常。</strong></p><h4 id="2-2-3-Qualifier"><a href="#2-2-3-Qualifier" class="headerlink" title="2.2.3 @Qualifier"></a>2.2.3 @Qualifier</h4><p>​如果相同类型的bean在容器中有多个时，单独使用@AutoWired就不能满足要求，这时候可以再加上@Qualifier来指定bean的名字从容器中获取bean注入。</p><p>例如：</p><pre><code class="java">    @Autowired    @Qualifier(&quot;userDao2&quot;)    private UserDao userDao;</code></pre><p><strong>注意：该直接不能单独使用。单独使用没有作用</strong></p><h3 id="2-3-xml配置文件相关注解"><a href="#2-3-xml配置文件相关注解" class="headerlink" title="2.3 xml配置文件相关注解"></a>2.3 xml配置文件相关注解</h3><h4 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h4><p>​标注在类上，表示当前类是一个配置类。我们可以用注解类来完全替换掉xml配置文件。</p><p>​注意：如果使用配置类替换了xml配置，spring容器要使用：AnnotationConfigApplicationContext</p><p>例如：</p><pre><code class="java">@Configurationpublic class ApplicationConfig &#123;&#125;</code></pre><h4 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h4><p>​可以用来代替context:component-scan标签来配置组件扫描。</p><p>​basePackages属性来指定要扫描的包。</p><p>​注意要加在配置类上。</p><p>例如：</p><pre><code class="java">@Configuration@ComponentScan(basePackages = &quot;com.sangeng&quot;)//指定要扫描的包public class ApplicationConfig &#123;&#125;</code></pre><h4 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h4><p>​可以用来代替bean标签，主要用于第三方类的注入。</p><p>​使用：定义一个方法，在方法中创建对应的对象并且作为返回值返回。然后在方法上加上@Bean注解，注解的value属性来设置bean的名称。</p><p>例如：</p><pre><code class="java">@Configuration@ComponentScan(basePackages = &quot;com.sangeng&quot;)public class ApplicationConfig &#123;    @Bean(&quot;dataSource&quot;)    public DruidDataSource getDataSource()&#123;        DruidDataSource druidDataSource = new DruidDataSource();        druidDataSource.setDriverClassName(&quot;com.mysql.jdbc.Driver&quot;);        druidDataSource.setUsername(&quot;root&quot;);        druidDataSource.setUrl(&quot;jdbc:mysql://localhost:3306/mybatis_db&quot;);        druidDataSource.setPassword(&quot;root&quot;);        return druidDataSource;    &#125;&#125;</code></pre><p><strong>注意事项：如果同一种类型的对象在容器中只有一个，我们可以不设置bean的名称。</strong></p><p>具体写法如下：</p><pre><code class="java">@Configuration@ComponentScan(basePackages = &quot;com.sangeng&quot;)public class ApplicationConfig &#123;    @Bean    public DruidDataSource getDataSource()&#123;        DruidDataSource druidDataSource = new DruidDataSource();        druidDataSource.setDriverClassName(&quot;com.mysql.jdbc.Driver&quot;);        druidDataSource.setUsername(&quot;root&quot;);        druidDataSource.setUrl(&quot;jdbc:mysql://localhost:3306/mybatis_db&quot;);        druidDataSource.setPassword(&quot;root&quot;);        return druidDataSource;    &#125;&#125;</code></pre><p>获取方式如下：</p><pre><code class="java">    public static void main(String[] args) &#123;        //创建注解容器        AnnotationConfigApplicationContext app = new AnnotationConfigApplicationContext(ApplicationConfig.class);        //根据对应类的字节码对象获取        DataSource bean = app.getBean(DataSource.class);        System.out.println(userService);    &#125;</code></pre><h4 id="PropertySource"><a href="#PropertySource" class="headerlink" title="@PropertySource"></a>@PropertySource</h4><p>​可以用来代替context:property-placeholder，让Spring读取指定的properties文件。然后可以使用@Value来获取读取到的值。</p><p>​<strong>使用：在配置类上加@PropertySource注解，注解的value属性来设置properties文件的路径。</strong></p><p>​<strong>然后在配置类中定义成员变量。在成员变量上使用@Value注解来获取读到的值并给对应的成员变量赋值。</strong></p><p>例如：</p><pre><code class="properties">jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/mybatis_dbjdbc.username=rootjdbc.password=root</code></pre><p>读取文件并且获取值</p><pre><code class="java">@Configuration@ComponentScan(basePackages = &quot;com.sangeng&quot;)@PropertySource(&quot;jdbc.properties&quot;)public class ApplicationConfig &#123;    @Value(&quot;$&#123;jdbc.driver&#125;&quot;)    private String driverClassName;    @Value(&quot;$&#123;jdbc.url&#125;&quot;)    private String url;    @Value(&quot;$&#123;jdbc.username&#125;&quot;)    private String username;    @Value(&quot;$&#123;jdbc.password&#125;&quot;)    private String password;    @Bean    public DruidDataSource getDataSource()&#123;        DruidDataSource druidDataSource = new DruidDataSource();        druidDataSource.setDriverClassName(driverClassName);        druidDataSource.setUsername(username);        druidDataSource.setUrl(url);        druidDataSource.setPassword(password);        return druidDataSource;    &#125;&#125;</code></pre><p><strong>注意事项：使用@Value获取读到的properties文件中的值时使用的是${key},而不是#{key}。</strong></p><h2 id="3-如何选择"><a href="#3-如何选择" class="headerlink" title="3.如何选择"></a>3.如何选择</h2><p>①SSM  </p><p>​自己项目中的类的IOC和DI都使用注解，对第三方jar包中的类，配置组件扫描时使用xml进行配置。</p><p>②SpringBoot</p><p>​纯注解开发</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Spring </category>
          
          <category> Spring基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Step.3</title>
      <link href="/computer-science/spring/docssp/Spring-03/"/>
      <url>/computer-science/spring/docssp/Spring-03/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-03"><a href="#Spring-03" class="headerlink" title="Spring-03"></a>Spring-03</h1><h2 id="1-AOP"><a href="#1-AOP" class="headerlink" title="1. AOP"></a>1. AOP</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><p>​ AOP为Aspect Oriented Programming的缩写，意为：面向切面编程。他是一种可以在不修改原来的核心代码的情况下给程序动态统一进行增强的一种技术。 </p><p>​<strong>SpringAOP:  批量对Spring容器中bean的方法做增强，并且这种增强不会与原来方法中的代码耦合。</strong></p><h3 id="1-2-快速入门"><a href="#1-2-快速入门" class="headerlink" title="1.2 快速入门"></a>1.2 快速入门</h3><h4 id="1-2-1-需求"><a href="#1-2-1-需求" class="headerlink" title="1.2.1 需求"></a>1.2.1 需求</h4><p>​要求让_08_SpringAOP模块中service包下所有类的所有方法在调用前都输出：方法被调用了。</p><h4 id="1-2-2-准备工作"><a href="#1-2-2-准备工作" class="headerlink" title="1.2.2 准备工作"></a>1.2.2 准备工作</h4><h5 id="①添加依赖"><a href="#①添加依赖" class="headerlink" title="①添加依赖"></a>①添加依赖</h5><p>需要添加SpringIOC相关依赖和AOP相关依赖。</p><pre><code class="xml">        &lt;!--SpringIOC相关依赖--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework&lt;/groupId&gt;            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;            &lt;version&gt;5.1.9.RELEASE&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--AOP相关依赖--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.aspectj&lt;/groupId&gt;            &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;            &lt;version&gt;1.8.13&lt;/version&gt;        &lt;/dependency&gt;</code></pre><h5 id="②相关bean要注入容器中"><a href="#②相关bean要注入容器中" class="headerlink" title="②相关bean要注入容器中"></a>②相关bean要注入容器中</h5><p>开启组件扫描</p><pre><code class="xml">&lt;context:component-scan base-package=&quot;com.sangeng&quot;&gt;&lt;/context:component-scan&gt;</code></pre><p>加@Service注解</p><pre><code class="java">@Servicepublic class PhoneService &#123;    public void deleteAll()&#123;        System.out.println(&quot;PhoneService中deleteAll的核心代码&quot;);    &#125;&#125;</code></pre><pre><code class="java">@Servicepublic class UserService &#123;    public void deleteAll()&#123;        System.out.println(&quot;UserService中deleteAll的核心代码&quot;);    &#125;&#125;</code></pre><h4 id="1-2-3-实现AOP"><a href="#1-2-3-实现AOP" class="headerlink" title="1.2.3 实现AOP"></a>1.2.3 实现AOP</h4><h5 id="①开启AOP注解支持"><a href="#①开启AOP注解支持" class="headerlink" title="①开启AOP注解支持"></a>①开启AOP注解支持</h5><p>使用<strong>aop:aspectj-autoproxy</strong>标签</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;    &lt;!--开启组件扫描--&gt;    &lt;context:component-scan base-package=&quot;com.sangeng&quot;&gt;&lt;/context:component-scan&gt;    &lt;!--开启aop注解支持--&gt;    &lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;&lt;/beans&gt;</code></pre><h5 id="②创建切面类"><a href="#②创建切面类" class="headerlink" title="②创建切面类"></a>②创建切面类</h5><p>创建一个类，在类上加上@Component和@Aspect</p><p>使用@Pointcut注解来指定要被增强的方法</p><p>使用@Before注解来给我们的增强代码所在的方法进行标识，并且指定了增强代码是在被增强方法执行之前执行的。</p><pre><code class="java">@Component@Aspectpublic class MyAspect &#123;//    用Pointcut注解中的属性来指定对哪些方法进行增强    @Pointcut(&quot;execution(* com.sangeng.service.*.*(..))&quot;)    public void pt()&#123;&#125;    /*        用@Before注解来指定该方法中是增强的代码，并且是在被增强方法执行前执行的        @Before的属性写上加了@Pointcut注解的方法: 方法名()    */    @Before(&quot;pt()&quot;)    public void methodbefore()&#123;        System.out.println(&quot;方法被调用了&quot;);    &#125;&#125;</code></pre><h4 id="1-2-4-测试"><a href="#1-2-4-测试" class="headerlink" title="1.2.4 测试"></a>1.2.4 测试</h4><pre><code class="java">    public static void main(String[] args) &#123;        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);        PhoneService phoneService = applicationContext.getBean(PhoneService.class);        UserService userService = applicationContext.getBean(UserService.class);        phoneService.deleteAll();    &#125;</code></pre><h3 id="1-3-AOP核心概念"><a href="#1-3-AOP核心概念" class="headerlink" title="1.3 AOP核心概念"></a>1.3 AOP核心概念</h3><ul><li><p>Joinpoint（连接点）：所谓连接点是指那些可以被增强到的点。在spring中,这些点指的是方法，因为spring只支持方法类型的连接点</p></li><li><p><strong>Pointcut（切入点）：所谓切入点是指被增强的连接点（方法）</strong></p></li><li><p><strong>Advice（通知&#x2F; 增强）：所谓通知是指具体增强的代码</strong></p></li><li><p>Target（目标对象）：被增强的对象就是目标对象</p></li><li><p><strong>Aspect（切面）：是切入点和通知（引介）的结合</strong></p></li><li><p>Proxy （代理）：一个类被 AOP 增强后，就产生一个结果代理类</p></li></ul><h3 id="1-4-切点确定"><a href="#1-4-切点确定" class="headerlink" title="1.4 切点确定"></a>1.4 切点确定</h3><h4 id="1-4-1-切点表达式"><a href="#1-4-1-切点表达式" class="headerlink" title="1.4.1 切点表达式"></a>1.4.1 切点表达式</h4><p>​可以使用切点表达式来表示要对哪些方法进行增强。</p><p>写法：<strong>execution([修饰符] 返回值类型 包名.类名.方法名(参数))</strong></p><ul><li>访问修饰符可以省略，大部分情况下省略</li><li>返回值类型、包名、类名、方法名可以使用星号*  代表任意</li><li>包名与类名之间一个点 . 代表当前包下的类，两个点 .. 表示当前包及其子包下的类</li><li>参数列表可以使用两个点 .. 表示任意个数，任意类型的参数列表</li></ul><p>例如：</p><pre><code class="java">execution(* com.sangeng.service.*.*(..))   表示com.sangeng.service包下任意类，方法名任意，参数列表任意，返回值类型任意   execution(* com.sangeng.service..*.*(..))   表示com.sangeng.service包及其子包下任意类，方法名任意，参数列表任意，返回值类型任意    execution(* com.sangeng.service.*.*())     表示com.sangeng.service包下任意类，方法名任意，要求方法不能有参数，返回值类型任意    execution(* com.sangeng.service.*.delete*(..))     表示com.sangeng.service包下任意类，要求方法不能有参数，返回值类型任意,方法名要求已delete开头</code></pre><h4 id="1-4-2-切点函数-annotation"><a href="#1-4-2-切点函数-annotation" class="headerlink" title="1.4.2 切点函数@annotation"></a>1.4.2 切点函数@annotation</h4><p>​我们也可以在要增强的方法上加上注解。然后使用@annotation来表示对加了什么注解的方法进行增强。</p><p>写法：**@annotation(注解的全类名)**</p><p>例如：</p><p>定义注解如下</p><pre><code class="java">@Target(&#123;ElementType.METHOD&#125;)//该注解可以加在方法上@Retention(RetentionPolicy.RUNTIME)public @interface InvokeLog &#123;&#125;</code></pre><p>给需要增强的方法增加注解</p><pre><code class="java">@Servicepublic class PhoneService &#123;    @InvokeLog      public void deleteAll()&#123;        System.out.println(&quot;PhoneService中deleteAll的核心代码&quot;);    &#125;&#125;</code></pre><p>切面类中使用@annotation来确定要增强的方法</p><pre><code class="java">@Component@Aspectpublic class MyAspect &#123;//    用Pointcut注解中的属性来指定对哪些方法进行增强    @Pointcut(&quot;@annotation(com.sangeng.aspect.InvokeLog)&quot;)    public void pt()&#123;&#125;    /*        用@Before注解来指定该方法中是增强的代码，并且是在被增强方法执行前执行的        @Before的属性写上加了@Pointcut注解的方法: 方法名()    */    @Before(&quot;pt()&quot;)    public void methodbefore()&#123;        System.out.println(&quot;方法被调用了&quot;);    &#125;&#125;</code></pre><h3 id="1-5-通知分类"><a href="#1-5-通知分类" class="headerlink" title="1.5 通知分类"></a>1.5 通知分类</h3><ul><li><p>@Before：前置通知,在目标方法执行前执行</p></li><li><p>@AfterReturning： 返回后通知，在目标方法执行后执行，如果出现异常不会执行</p></li><li><p>@After：后置通知，在目标方法之后执行，无论是否出现异常都会执行 </p></li><li><p>@AfterThrowing：异常通知，在目标方法抛出异常后执行</p></li><li><p><strong>@Around：环绕通知，围绕着目标方法执行</strong></p></li></ul><p>理解不同通知执行时机。（<strong>下面的伪代码是用来理解单个通知的执行时机的，不能用来理解多个通知情况下的执行顺序。如果需要配置多个通知我们会选择使用Around通知，更加的清晰并且好用</strong>）</p><pre><code class="java">    public Object test() &#123;        before();//@Before 前置通知        try &#123;            Object ret = 目标方法();//目标方法调用            afterReturing();//@AfterReturning 返回后通知        &#125; catch (Throwable throwable) &#123;            throwable.printStackTrace();            afterThrowing();//@AfterThrowing 异常通知通知        &#125;finally &#123;            after();//@After 后置通知        &#125;        return ret;    &#125;</code></pre><p>环绕通知非常特殊，它可以对目标方法进行全方位的增强。</p><p>例如：</p><pre><code class="java">      @Around(&quot;pt()&quot;)    public void around(ProceedingJoinPoint pjp)&#123;        System.out.println(&quot;目标方法前&quot;);        try &#123;            pjp.proceed();//目标方法执行            System.out.println(&quot;目标方法后&quot;);        &#125; catch (Throwable throwable) &#123;            throwable.printStackTrace();            System.out.println(&quot;目标方法出现异常&quot;);        &#125;finally &#123;            System.out.println(&quot;finally中进行增强&quot;);        &#125;    &#125;</code></pre><h3 id="1-6-获取被增强方法相关信息"><a href="#1-6-获取被增强方法相关信息" class="headerlink" title="1.6 获取被增强方法相关信息"></a>1.6 获取被增强方法相关信息</h3><p>​我们实际对方法进行增强时往往还需要获取到被增强代码的相关信息，比如方法名，参数，返回值，异常对象等。</p><p>​我们可以在除了环绕通知外的所有通知方法中增加一个<strong>JoinPoint类型</strong>的参数。这个参数封装了被增强方法的相关信息。<strong>我们可以通过这个参数获取到除了异常对象和返回值之外的所有信息。</strong></p><p>例如：</p><pre><code class="java">    @Before(&quot;pt()&quot;)    public void methodbefore(JoinPoint jp)&#123;        Object[] args = jp.getArgs();//方法调用时传入的参数        Object target = jp.getTarget();//被代理对象        MethodSignature signature = (MethodSignature) jp.getSignature();//获取被被增强方法签名封装的对象        System.out.println(&quot;Before方法被调用了&quot;);    &#125;</code></pre><p>案例：</p><p>需求：要求让所有service包下类的所有方法被调用前都输出全类名，方法名，以及调用时传入的参数</p><pre><code class="java">@Component@Aspectpublic class PrintLogAspect &#123;    //对哪些方法增强    @Pointcut(&quot;execution(* com.sangeng.service..*.*(..))&quot;)    public void pt()&#123;&#125;    //怎么增强    @Before(&quot;pt()&quot;)    public void printLog(JoinPoint joinPoint)&#123;        //输出 被增强的方法所在的类名 方法名 调用时传入的参数   joinPoint.getSignature().getName()  joinPoint.getArgs()        MethodSignature signature = (MethodSignature) joinPoint.getSignature();        //类名        String className = signature.getDeclaringTypeName();        //方法名        String methodName = signature.getName();        //调用时传入的参数        Object[] args = joinPoint.getArgs();        System.out.println(className+&quot;==&quot;+methodName+&quot;======&quot;+ Arrays.toString(args));    &#125;&#125;</code></pre><p>​如果需要<strong>获取被增强方法中的异常对象或者返回值</strong>则需要在方法参数上增加一个对应类型的参数，并且使用注解的属性进行配置。这样Spring会把你想获取的数据赋值给对应的方法参数。</p><p>例如：</p><pre><code class="java">    @AfterReturning(value = &quot;pt()&quot;,returning = &quot;ret&quot;)//使用returning属性指定了把目标方法返回值赋值给下面方法的参数ret    public void AfterReturning(JoinPoint jp,Object ret)&#123;        System.out.println(&quot;AfterReturning方法被调用了&quot;);    &#125;</code></pre><pre><code class="java">    @AfterThrowing(value = &quot;pt()&quot;,throwing = &quot;t&quot;)//使用throwing属性指定了把出现的异常对象赋值给下面方法的参数t    public void AfterThrowing(JoinPoint jp,Throwable t)&#123;        System.out.println(&quot;AfterReturning方法被调用了&quot;);    &#125;</code></pre><p>​相信你肯定觉得上面的获取方式特别的麻烦难以理解。就可以使用下面这种万能的方法。</p><p>​直接在环绕通知方法中增加一个<strong>ProceedingJoinPoint类型</strong>的参数。这个参数封装了被增强方法的相关信息。</p><p>该参数的proceed()方法被调用相当于被增强方法被执行，调用后的返回值就相当于被增强方法的返回值。</p><p>例如：</p><pre><code class="java">    @Around(value = &quot;pt()&quot;)    public Object around(ProceedingJoinPoint pjp) &#123;        Object[] args = pjp.getArgs();//方法调用时传入的参数        Object target = pjp.getTarget();//被代理对象        MethodSignature signature = (MethodSignature) pjp.getSignature();//获取被被增强方法签名封装的对象        Object ret = null;        try &#123;            ret = pjp.proceed();//ret就是目标方法执行后的返回值        &#125; catch (Throwable throwable) &#123;            throwable.printStackTrace();//throwable就是出现异常时的异常对象        &#125;        return ret;    &#125;</code></pre><h3 id="1-7-AOP应用案例"><a href="#1-7-AOP应用案例" class="headerlink" title="1.7 AOP应用案例"></a>1.7 AOP应用案例</h3><h4 id="1-7-1-需求"><a href="#1-7-1-需求" class="headerlink" title="1.7.1 需求"></a>1.7.1 需求</h4><p>现有AI核心功能代码如下：</p><pre><code class="java">public class AIController &#123;    //AI自动回答    public String getAnswer(String question)&#123;        //AI核心代码 价值10个亿        String str = question.replace(&quot;吗&quot;, &quot;&quot;);        str = str.replace(&quot;？&quot;,&quot;!&quot;);        return str;    &#125;    //AI算命    public String fortuneTelling(String name)&#123;        //AI算命核心代码        String[] strs = &#123;&quot;女犯伤官把夫克，旱地莲花栽不活，不是吃上两家饭，也要刷上三家锅。&quot;,&quot;一朵鲜花头上戴，一年四季也不开，一心想要花开时，采花之人没到来。&quot;,&quot;此命生来脾气暴，上来一阵双脚跳，对你脾气啥都好，经常与人吵和闹。&quot;&#125;;        int index = name.hashCode() % 3;        return strs[index];    &#125;&#125;</code></pre><p>​现在为了保证数据的安全性，要求调用方法时fortuneTelling传入的姓名是经过加密的。我们需要对传入的参数进行解密后才能使用。并且要对该方法的返回值进行加密后返回。</p><p>​<strong>PS:后期也可能让其他方法进行相应的加密处理。</strong></p><p>字符串加密解密直接使用下面的工具类即可：</p><pre><code class="java">import javax.crypto.Cipher;import javax.crypto.KeyGenerator;import javax.crypto.SecretKey;import javax.crypto.spec.SecretKeySpec;import java.security.SecureRandom;public class CryptUtil &#123;    private static final String AES = &quot;AES&quot;;    private static int keysizeAES = 128;    private static String charset = &quot;utf-8&quot;;    public static String parseByte2HexStr(final byte buf[]) &#123;        final StringBuffer sb = new StringBuffer();        for (int i = 0; i &lt; buf.length; i++) &#123;            String hex = Integer.toHexString(buf[i] &amp; 0xFF);            if (hex.length() == 1) &#123;                hex = &#39;0&#39; + hex;            &#125;            sb.append(hex.toUpperCase());        &#125;        return sb.toString();    &#125;    public static byte[] parseHexStr2Byte(final String hexStr) &#123;        if (hexStr.length() &lt; 1)            return null;        final byte[] result = new byte[hexStr.length() / 2];        for (int i = 0;i&lt; hexStr.length()/2; i++) &#123;            int high = Integer.parseInt(hexStr.substring(i * 2, i * 2 + 1), 16);            int low = Integer.parseInt(hexStr.substring(i * 2 + 1, i * 2 + 2), 16);            result[i] = (byte) (high * 16 + low);        &#125;        return result;    &#125;    private static String keyGeneratorES(final String res, final String algorithm, final String key, final Integer keysize, final Boolean bEncode) &#123;        try &#123;            final KeyGenerator g = KeyGenerator.getInstance(algorithm);            if (keysize == 0) &#123;                byte[] keyBytes = charset == null ? key.getBytes() : key.getBytes(charset);                g.init(new SecureRandom(keyBytes));            &#125; else if (key == null) &#123;                g.init(keysize);            &#125; else &#123;                byte[] keyBytes = charset == null ? key.getBytes() : key.getBytes(charset);                SecureRandom random = SecureRandom.getInstance(&quot;SHA1PRNG&quot;);                random.setSeed(keyBytes);                g.init(keysize, random);            &#125;            final SecretKey sk = g.generateKey();            final SecretKeySpec sks = new SecretKeySpec(sk.getEncoded(), algorithm);            final Cipher cipher = Cipher.getInstance(algorithm);            if (bEncode) &#123;                cipher.init(Cipher.ENCRYPT_MODE, sks);                final byte[] resBytes = charset == null? res.getBytes() : res.getBytes(charset);                return parseByte2HexStr(cipher.doFinal(resBytes));            &#125; else &#123;                cipher.init(Cipher.DECRYPT_MODE, sks);                return new String(cipher.doFinal(parseHexStr2Byte(res)));            &#125;        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125;        return null;    &#125;    public static String AESencode(final String res) &#123;        return keyGeneratorES(res, AES, &quot;aA11*-%&quot;, keysizeAES, true);    &#125;    public static String AESdecode(final String res) &#123;        return keyGeneratorES(res, AES, &quot;aA11*-%&quot;, keysizeAES, false);    &#125;    public static void main(String[] args) &#123;        System.out.println(                &quot;加密后:&quot; + AESencode(&quot;将要加密的明文&quot;)        );        System.out.println(                &quot;解密后:&quot; + AESdecode(&quot;730CAE52D85B372FB161B39D0A908B8CC6EF6DA2F7D4E595D35402134C3E18AB&quot;)        );    &#125;&#125;</code></pre><h4 id="1-7-2-实现"><a href="#1-7-2-实现" class="headerlink" title="1.7.2  实现"></a>1.7.2  实现</h4><h5 id="①导入依赖"><a href="#①导入依赖" class="headerlink" title="①导入依赖"></a>①导入依赖</h5><pre><code class="xml">        &lt;!--SpringIOC相关依赖--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework&lt;/groupId&gt;            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;            &lt;version&gt;5.1.9.RELEASE&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--AOP相关依赖--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.aspectj&lt;/groupId&gt;            &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;            &lt;version&gt;1.8.13&lt;/version&gt;        &lt;/dependency&gt;</code></pre><h5 id="②开启AOP注解支持"><a href="#②开启AOP注解支持" class="headerlink" title="②开启AOP注解支持"></a>②开启AOP注解支持</h5><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;    &lt;!--配置组件扫描--&gt;    &lt;context:component-scan base-package=&quot;com.sangeng&quot;&gt;&lt;/context:component-scan&gt;    &lt;!--启动AOP注解支持--&gt;    &lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;&lt;/beans&gt;</code></pre><p>③自定义注解</p><pre><code class="java">package com.sangeng.aspect;import java.lang.annotation.ElementType;import java.lang.annotation.Retention;import java.lang.annotation.RetentionPolicy;import java.lang.annotation.Target;@Target(ElementType.METHOD)@Retention(RetentionPolicy.RUNTIME)public @interface Crypt &#123;&#125;</code></pre><p>④在目标方法上增加注解 </p><p><strong>注意：目标对象一定要记得注入Spring容器中</strong></p><pre><code class="java">@Controllerpublic class AIController &#123;    //....    //AI算命    @Crypt    public String fortuneTelling(String name)&#123;        System.out.println(name);              //AI算命核心代码        String[] strs = &#123;&quot;女犯伤官把夫克，旱地莲花栽不活，不是吃上两家饭，也要刷上三家锅。&quot;,&quot;一朵鲜花头上戴，一年四季也不开，一心想要花开时，采花之人没到来。&quot;,&quot;此命生来脾气暴，上来一阵双脚跳，对你脾气啥都好，经常与人吵和闹。&quot;&#125;;        int index = name.hashCode() % 3;        return strs[index];    &#125;&#125;</code></pre><h5 id="⑤定义切面类"><a href="#⑤定义切面类" class="headerlink" title="⑤定义切面类"></a>⑤定义切面类</h5><pre><code class="java">package com.sangeng.aspect;import com.sangeng.util.CryptUtil;import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.annotation.Around;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Pointcut;import org.springframework.stereotype.Component;@Component@Aspectpublic class CryptAspect &#123;    //确定切点    @Pointcut(&quot;@annotation(com.sangeng.aspect.Crypt)&quot;)    public void pt()&#123;    &#125;    //定义通知    @Around(&quot;pt()&quot;)    public Object crypt(ProceedingJoinPoint pjp) &#123;        //获取去目标方法调用时的参数        Object[] args = pjp.getArgs();        //对参数进行解密  解密后传入目标方法执行        String arg = (String) args[0];        String s = CryptUtil.AESdecode(arg);//解密        args[0] = s;        Object proceed = null;        String ret = null;        try &#123;            proceed = pjp.proceed(args);//目标方法调用            //目标方法执行后需要获取到返回值            ret = (String) proceed;            //对返回值加密后进行真正的返回            ret = CryptUtil.AESencode(ret);        &#125; catch (Throwable throwable) &#123;            throwable.printStackTrace();        &#125;        return ret;    &#125;&#125;</code></pre><h3 id="1-8-xml配置AOP"><a href="#1-8-xml配置AOP" class="headerlink" title="1.8 xml配置AOP"></a>1.8 xml配置AOP</h3><h4 id="①定义切面类"><a href="#①定义切面类" class="headerlink" title="①定义切面类"></a>①定义切面类</h4><pre><code class="java">public class MyAspect &#123;    public void before(JoinPoint joinPoint)&#123;        System.out.println(&quot;before&quot;);    &#125;//    @AfterReturning(value = &quot;pt()&quot;,returning = &quot;ret&quot;)    public void afterReturning(JoinPoint joinPoint,Object ret)&#123;        System.out.println(&quot;afterReturning:&quot;+ret);    &#125;//    @After(&quot;pt()&quot;)    public void after(JoinPoint joinPoint)&#123;        System.out.println(&quot;after&quot;);    &#125;//    @AfterThrowing(value = &quot;pt()&quot;,throwing = &quot;e&quot;)    public void afterThrowing(JoinPoint joinPoint,Throwable e)&#123;        String message = e.getMessage();        System.out.println(&quot;afterThrowing:&quot;+message);    &#125;    public Object around(ProceedingJoinPoint pjp)&#123;        //获取参数        Object[] args = pjp.getArgs();        MethodSignature signature = (MethodSignature) pjp.getSignature();        Object target = pjp.getTarget();        Object ret = null;        try &#123;            ret = pjp.proceed();//目标方法的执行            //ret就是被增强方法的返回值            System.out.println(ret);        &#125; catch (Throwable throwable) &#123;            throwable.printStackTrace();            System.out.println(throwable.getMessage());        &#125;//        System.out.println(pjp);        return ret;    &#125;&#125;</code></pre><h4 id="②目标类和切面类注入容器"><a href="#②目标类和切面类注入容器" class="headerlink" title="②目标类和切面类注入容器"></a>②目标类和切面类注入容器</h4><p>在切面类和目标类上加是对应的注解。注入如果是使用注解的方式注入容器要记得开启组件扫描。</p><p>当然你也可以在xml中使用bean标签的方式注入容器。</p><pre><code class="java">@Component//把切面类注入容器public class MyAspect &#123;    //..。省略无关代码&#125;</code></pre><pre><code class="java">@Service//把目标类注入容器public class UserService &#123;    //..。省略无关代码&#125;</code></pre><h4 id="③配置AOP"><a href="#③配置AOP" class="headerlink" title="③配置AOP"></a>③配置AOP</h4><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;    &lt;!--开启组件扫描--&gt;    &lt;context:component-scan base-package=&quot;com.sangeng&quot;&gt;&lt;/context:component-scan&gt;    &lt;!--配置AOP--&gt;    &lt;aop:config&gt;        &lt;!--定义切点--&gt;        &lt;aop:pointcut id=&quot;pt1&quot; expression=&quot;execution(* com.sangeng.service..*.*(..))&quot;&gt;&lt;/aop:pointcut&gt;        &lt;aop:pointcut id=&quot;pt2&quot; expression=&quot;@annotation(com.sangeng.aspect.InvokeLog)&quot;&gt;&lt;/aop:pointcut&gt;        &lt;!--配置切面--&gt;        &lt;aop:aspect ref=&quot;myAspect&quot;&gt;            &lt;aop:before method=&quot;before&quot; pointcut-ref=&quot;pt1&quot;&gt;&lt;/aop:before&gt;            &lt;aop:after method=&quot;after&quot; pointcut-ref=&quot;pt1&quot;&gt;&lt;/aop:after&gt;            &lt;aop:after-returning method=&quot;afterReturning&quot; pointcut-ref=&quot;pt1&quot; returning=&quot;ret&quot;&gt;&lt;/aop:after-returning&gt;            &lt;aop:after-throwing method=&quot;afterThrowing&quot; pointcut-ref=&quot;pt2&quot; throwing=&quot;e&quot;&gt;&lt;/aop:after-throwing&gt;        &lt;/aop:aspect&gt;    &lt;/aop:config&gt;&lt;/beans&gt;</code></pre><h3 id="1-9-多切面顺序问题"><a href="#1-9-多切面顺序问题" class="headerlink" title="1.9 多切面顺序问题"></a>1.9 多切面顺序问题</h3><p>​在实际项目中我们可能会存在配置了多个切面的情况。这种情况下我们很可能需要控制切面的顺序。</p><p>​我们在默认情况下Spring有它自己的排序规则。（按照类名排序）</p><p>​默认排序规则往往不符合我们的要求，我们需要进行特殊控制。</p><p>​如果是注解方式配置的AOP可以在切面类上加**@Order注解<strong>来控制顺序。</strong>@Order中的属性越小优先级越高。**</p><p>​如果是XML方式配置的AOP,可以通过调整<strong>配置顺序</strong>来控制。</p><p>例如：</p><p>下面这种配置方式就会先使用CryptAspect里面的增强，在使用APrintLogAspect里的增强</p><pre><code class="java">@Component@Aspect@Order(2)public class APrintLogAspect &#123;    //省略无关代码&#125;@Component@Aspect@Order(1)public class CryptAspect &#123;    //省略无关代码&#125;</code></pre><h3 id="1-10-AOP原理-动态代理"><a href="#1-10-AOP原理-动态代理" class="headerlink" title="1.10 AOP原理-动态代理"></a>1.10 AOP原理-动态代理</h3><p>​实际上Spring的AOP其实底层就是使用动态代理来完成的。并且使用了两种动态代理分别是JDK的动态代理和Cglib动态代理。</p><p>​所以我们接下去来学习下这两种动态代理，理解下它们的不同点。</p><h4 id="1-10-1-JDK动态代理"><a href="#1-10-1-JDK动态代理" class="headerlink" title="1.10.1 JDK动态代理"></a>1.10.1 JDK动态代理</h4><p>​JDK的动态代理使用的java.lang.reflect.Proxy这个类来进行实现的。要求被代理（被增强）的类需要实现了接口。并且JDK动态代理也只能对接口中的方法进行增强。</p><pre><code class="java">public static void main(String[] args) &#123;        AIControllerImpl aiController = new AIControllerImpl();        //使用动态代理增强getAnswer方法        //1.JDK动态代理        //获取类加载器        ClassLoader cl = Demo.class.getClassLoader();        //被代理类所实现接口的字节码对象数组        Class&lt;?&gt;[] interfaces = AIControllerImpl.class.getInterfaces();        AIController proxy = (AIController) Proxy.newProxyInstance(cl, interfaces, new InvocationHandler() &#123;            //使用代理对象的方法时 会调用到invoke                public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;                //proxy   是代理对象                //method 是当前被调用的方法封装的Method对象                //args   是调用方法时传入的参数                //调用被代理对象的对应方法                //判断 当前调用的是否是getAnswer方法                if(method.getName().equals(&quot;getAnswer&quot;))&#123;                    System.out.println(&quot;增强&quot;);                &#125;                Object ret = method.invoke(aiController, args);                return ret;            &#125;        &#125;);        String answer = proxy.getAnswer(&quot;三连了吗？&quot;);        System.out.println(answer);    &#125;</code></pre><h4 id="1-10-2-Cglib动态代理"><a href="#1-10-2-Cglib动态代理" class="headerlink" title="1.10.2 Cglib动态代理"></a>1.10.2 Cglib动态代理</h4><p>​使用的是org.springframework.cglib.proxy.Enhancer类进行实现的。</p><pre><code class="java">public class CglibDemo &#123;    public static void main(String[] args) &#123;        Enhancer enhancer = new Enhancer();        //设置父类的字节码对象        enhancer.setSuperclass(AIControllerImpl.class);        enhancer.setCallback(new MethodInterceptor() &#123;            //使用代理对象执行方法是都会调用到intercept方法            @Override            public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable &#123;                //判断当前调用的方法是不是getAnswer方法 如果是进行增强                if (&quot;getAnswer&quot;.equals(method.getName()))&#123;                    System.out.println(&quot;被增强了&quot;);                &#125;                //调用父类中对应的方法                Object ret = methodProxy.invokeSuper(o, objects);                return ret;            &#125;        &#125;);        //生成代理对象        AIControllerImpl proxy = (AIControllerImpl) enhancer.create();//        System.out.println(proxy.getAnswer(&quot;你好吗？&quot;));        System.out.println(proxy.fortuneTelling(&quot;你好吗？&quot;));    &#125;&#125;</code></pre><h4 id="1-10-3-总结"><a href="#1-10-3-总结" class="headerlink" title="1.10.3 总结"></a>1.10.3 总结</h4><p>​JDK动态代理要求被代理（被增强）的类必须要实现接口，生成的代理对象相当于是被代理对象的兄弟。</p><p>​Cglib的动态代理不要求被代理（被增强）的类要实现接口，生成的代理对象相当于被代理对象的子类对象。</p><p>​<strong>Spring的AOP默认情况下优先使用的是JDK的动态代理，如果使用不了JDK的动态代理才会使用Cglib的动态代理。</strong></p><h3 id="1-11-切换默认动态代理方式"><a href="#1-11-切换默认动态代理方式" class="headerlink" title="1.11 切换默认动态代理方式"></a>1.11 切换默认动态代理方式</h3><p>​有的时候我们需要修改AOP的代理方式。</p><p>​我们可以使用以下方式修改：</p><p>如果我们是采用注解方式配置AOP的话：</p><p>设置aop:aspectj-autoproxy标签的proxy-target-class属性为true，代理方式就会修改成Cglib</p><pre><code class="xml">&lt;aop:aspectj-autoproxy proxy-target-class=&quot;true&quot;/&gt;</code></pre><p>如果我们是采用xml方式配置AOP的话：</p><p>设置aop:config标签的proxy-target-class属性为true,代理方式就会修改成Cglib</p><pre><code class="xml">&lt;aop:config proxy-target-class=&quot;true&quot;&gt;&lt;/aop:config&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Spring </category>
          
          <category> Spring基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Step.4</title>
      <link href="/computer-science/spring/docssp/Spring-04/"/>
      <url>/computer-science/spring/docssp/Spring-04/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-04"><a href="#Spring-04" class="headerlink" title="Spring-04"></a>Spring-04</h1><h2 id="1-Spring整合Junit"><a href="#1-Spring整合Junit" class="headerlink" title="1.Spring整合Junit"></a>1.Spring整合Junit</h2><h3 id="①导入依赖"><a href="#①导入依赖" class="headerlink" title="①导入依赖"></a>①导入依赖</h3><pre><code class="xml">&lt;!-- junit --&gt;&lt;dependency&gt;    &lt;groupId&gt;junit&lt;/groupId&gt;    &lt;artifactId&gt;junit&lt;/artifactId&gt;    &lt;version&gt;4.12&lt;/version&gt;&lt;/dependency&gt;&lt;!-- spring整合junit的依赖 --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-test&lt;/artifactId&gt;    &lt;version&gt;5.1.9.RELEASE&lt;/version&gt;&lt;/dependency&gt;</code></pre><h3 id="②-编写测试类"><a href="#②-编写测试类" class="headerlink" title="② 编写测试类"></a>② 编写测试类</h3><p>在测试类上加上</p><p>**@RunWith(SpringJUnit4ClassRunner.class)**注解，指定让测试运行于Spring环境</p><p><strong>@ContextConfiguration注解</strong>，指定Spring容器创建需要的配置文件或者配置类</p><pre><code class="java">@RunWith(SpringJUnit4ClassRunner.class)//让测试运行与Spring测试环境@ContextConfiguration(locations = &quot;classpath:配置文件1.xml&quot;)//设置Spring配置文件或者配置类//@ContextConfiguration(classes = SpringConfig.class)public class SpringTest &#123;&#125;</code></pre><h3 id="③注入对象进行测试"><a href="#③注入对象进行测试" class="headerlink" title="③注入对象进行测试"></a>③注入对象进行测试</h3><p>在测试类中注入要测试的对象，定义测试方法，在其中使用要测试的对象。</p><pre><code class="java">@RunWith(SpringJUnit4ClassRunner.class)//让测试运行与Spring测试环境@ContextConfiguration(locations = &quot;classpath:配置文件1.xml&quot;)//设置Spring配置文件或者配置类//@ContextConfiguration(classes = SpringConfig.class)public class SpringTest &#123;        // 想测哪个对象，就注入哪个对象    @Autowired    private UserService userService;        //定义测试方法    @Test    public void testUserService() &#123;        userService.findById(10);    &#125;    &#125;</code></pre><h2 id="2-Spring整合Mybatis"><a href="#2-Spring整合Mybatis" class="headerlink" title="2.Spring整合Mybatis"></a>2.Spring整合Mybatis</h2><p>​我们如果想把Mybatis整合到Spring中需要使用一个整合包<strong>mybatis-spring</strong></p><p>​官方文档：<span class="exturl" data-url="aHR0cDovL215YmF0aXMub3JnL3NwcmluZy96aC9pbmRleC5odG1s">http://mybatis.org/spring/zh/index.html</span></p><h3 id="①导入依赖-1"><a href="#①导入依赖-1" class="headerlink" title="①导入依赖"></a>①导入依赖</h3><pre><code class="xml">    &lt;!-- spring-jdbc --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;        &lt;version&gt;5.1.9.RELEASE&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- mybatis整合到Spring的整合包 --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;        &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;        &lt;version&gt;2.0.4&lt;/version&gt;    &lt;/dependency&gt;    &lt;!--mybatis依赖--&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;        &lt;version&gt;3.5.4&lt;/version&gt;    &lt;/dependency&gt;    &lt;!--mysql驱动--&gt;    &lt;dependency&gt;        &lt;groupId&gt;mysql&lt;/groupId&gt;        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;        &lt;version&gt;5.1.47&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- druid数据源 --&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;        &lt;artifactId&gt;druid&lt;/artifactId&gt;        &lt;version&gt;1.1.16&lt;/version&gt;    &lt;/dependency&gt;</code></pre><h3 id="②往容器中注入整合相关对象"><a href="#②往容器中注入整合相关对象" class="headerlink" title="②往容器中注入整合相关对象"></a>②往容器中注入整合相关对象</h3><pre><code class="xml">    &lt;!--读取properties文件--&gt;    &lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;&gt;&lt;/context:property-placeholder&gt;    &lt;!--创建连接池注入容器--&gt;    &lt;bean class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; id=&quot;dataSource&quot;&gt;        &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;   &lt;!--spring整合mybatis后控制的创建获取SqlSessionFactory的对象--&gt;    &lt;bean class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot; id=&quot;sessionFactory&quot;&gt;        &lt;!--配置连接池--&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;        &lt;!--配置mybatis配置文件的路径--&gt;        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;    &lt;!--mapper扫描配置，扫描到的mapper对象会被注入Spring容器中--&gt;    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot; id=&quot;mapperScannerConfigurer&quot;&gt;        &lt;property name=&quot;basePackage&quot; value=&quot;com.sangeng.dao&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;</code></pre><p>mybatis配置文件<strong>mybatis-config.xml</strong>如下:</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;    &lt;typeAliases&gt;        &lt;package name=&quot;com.sangeng.domain&quot;&gt;&lt;/package&gt;    &lt;/typeAliases&gt;&lt;/configuration&gt;</code></pre><h3 id="③从容器中获取Mapper对象进行使用"><a href="#③从容器中获取Mapper对象进行使用" class="headerlink" title="③从容器中获取Mapper对象进行使用"></a>③从容器中获取Mapper对象进行使用</h3><pre><code class="java">    @Autowired    private UserDao userDao;</code></pre><h2 id="3-Spring声明式事务"><a href="#3-Spring声明式事务" class="headerlink" title="3.Spring声明式事务"></a>3.Spring声明式事务</h2><h3 id="3-1-事务回顾"><a href="#3-1-事务回顾" class="headerlink" title="3.1 事务回顾"></a>3.1 事务回顾</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h4 id="3-1-1-事务的概念"><a href="#3-1-1-事务的概念" class="headerlink" title="3.1.1 事务的概念"></a><strong>3.1.1 事务的概念</strong></h4><p>​保证一组数据库的操作，要么同时成功，要么同时失败</p><h4 id="3-1-2-四大特性"><a href="#3-1-2-四大特性" class="headerlink" title="3.1.2 四大特性"></a>3.1.2 四大特性</h4><ul><li><p>隔离性</p><p>多个事务之间要相互隔离，不能互相干扰</p></li><li><p>原子性</p><p>指事务是一个不可分割的整体，类似一个不可分割的原子</p></li><li><p>一致性</p><p>保障事务前后这组数据的状态是一致的。要么都是成功的，要么都是失败的。</p></li><li><p>持久性</p><p>指事务一旦被提交，这组操作修改的数据就真的的发生变化了。即使接下来数据库故障也不应该对其有影响。</p></li></ul><h3 id="3-2-实现声明式事务"><a href="#3-2-实现声明式事务" class="headerlink" title="3.2 实现声明式事务"></a>3.2 实现声明式事务</h3><p>​如果我们自己去对事务进行控制的话我们就需要值原来核心代码的基础上加上事务控制相关的代码。而在我们的实际开发中这种事务控制的操作也是非常常见的。所以Spring提供了声明式事务的方式让我们去控制事务。</p><p>​只要简单的加个注解(或者是xml配置)就可以实现事务控制，不需要事务控制的时候只需要去掉相应的注解即可。</p><h4 id="3-2-0-案例环境准备"><a href="#3-2-0-案例环境准备" class="headerlink" title="3.2.0 案例环境准备"></a>3.2.0 案例环境准备</h4><p>①数据初始化</p><pre><code class="mysql">CREATE DATABASE /*!32312 IF NOT EXISTS*/`spring_db` /*!40100 DEFAULT CHARACTER SET utf8 */;USE `spring_db`;DROP TABLE IF EXISTS `account`;CREATE TABLE `account` (  `id` INT(11) NOT NULL AUTO_INCREMENT,  `name` VARCHAR(50) DEFAULT NULL,  `money` DOUBLE DEFAULT NULL,  PRIMARY KEY (`id`)) ENGINE=INNODB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;INSERT  INTO `account`(`id`,`name`,`money`) VALUES (1,&#39;三更&#39;,100),(2,&#39;草堂&#39;,100);</code></pre><p>②Spring整合Mybatis</p><p>③创建Service和Dao</p><pre><code class="java">public interface AccountService &#123;    /**     * 转账     * @param outId 转出账户的id     * @param inId 转出账户的id     * @param money 转账金额     */    public void transfer(Integer outId,Integer inId,Double money);&#125;</code></pre><pre><code class="java">@Servicepublic class AccountServiceImpl implements AccountService &#123;    @Autowired    private AccoutDao accoutDao;    public void transfer(Integer outId, Integer inId, Double money) &#123;        //增加        accoutDao.updateMoney(inId,money);        //减少        accoutDao.updateMoney(outId,-money);    &#125;&#125;</code></pre><pre><code class="java">public interface AccoutDao &#123;    void updateMoney(@Param(&quot;id&quot;) Integer id,@Param(&quot;updateMoney&quot;) Double updateMoney);&#125;</code></pre><p>AccoutDao.xml如下：</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &gt;&lt;mapper namespace=&quot;com.sangeng.dao.AccoutDao&quot;&gt;    &lt;update id=&quot;updateMoney&quot;&gt;        update  account set money = money + #&#123;updateMoney&#125; where id = #&#123;id&#125;    &lt;/update&gt;&lt;/mapper&gt;</code></pre><h4 id="3-2-1-注解实现"><a href="#3-2-1-注解实现" class="headerlink" title="3.2.1 注解实现"></a>3.2.1 注解实现</h4><h5 id="①配置事务管理器和事务注解驱动"><a href="#①配置事务管理器和事务注解驱动" class="headerlink" title="①配置事务管理器和事务注解驱动"></a>①配置事务管理器和事务注解驱动</h5><p>在spring的配置文件中添加如下配置：</p><pre><code class="xml">    &lt;!--把事务管理器注入Spring容器，需要配置一个连接池--&gt;    &lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;    &lt;/bean&gt;    &lt;!--开启事务注解驱动，配置使用的事务管理器--&gt;    &lt;tx:annotation-driven transaction-manager=&quot;txManager&quot;/&gt;</code></pre><h5 id="②添加注解"><a href="#②添加注解" class="headerlink" title="②添加注解"></a>②添加注解</h5><p>在需要进行事务控制的方法或者类上添加@Transactional注解就可以实现事务控制。</p><pre><code class="java">    @Transactional    public void transfer(Integer outId, Integer inId, Double money) &#123;        //增加        accoutDao.updateMoney(inId,money);//        System.out.println(1/0);        //减少        accoutDao.updateMoney(outId,-money);    &#125;</code></pre><p><strong>注意：如果加在类上，这个类的所有方法都会受事务控制，如果加在方法上，就是那一个方法受事务控制。</strong></p><p>注意，因为声明式事务底层是通过AOP实现的，所以最好把AOP相关依赖都加上。</p><pre><code class="xml">       &lt;dependency&gt;            &lt;groupId&gt;org.aspectj&lt;/groupId&gt;            &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;            &lt;version&gt;1.9.6&lt;/version&gt;        &lt;/dependency&gt;</code></pre><h4 id="3-2-2-xml方式实现"><a href="#3-2-2-xml方式实现" class="headerlink" title="3.2.2 xml方式实现"></a>3.2.2 xml方式实现</h4><h5 id="①配置事务管理器"><a href="#①配置事务管理器" class="headerlink" title="①配置事务管理器"></a>①配置事务管理器</h5><pre><code class="xml">    &lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;    &lt;/bean&gt;</code></pre><h5 id="②配置事务切面"><a href="#②配置事务切面" class="headerlink" title="②配置事务切面"></a>②配置事务切面</h5><pre><code class="xml">     &lt;!--定义事务管理的通知类--&gt;    &lt;tx:advice transaction-manager=&quot;txManager&quot; id=&quot;txAdvice&quot;&gt;        &lt;tx:attributes&gt;            &lt;tx:method name=&quot;trans*&quot;/&gt;        &lt;/tx:attributes&gt;    &lt;/tx:advice&gt;    &lt;aop:config&gt;        &lt;aop:pointcut id=&quot;pt&quot; expression=&quot;execution(* com.sangeng.service..*.*(..))&quot;&gt;&lt;/aop:pointcut&gt;        &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;pt&quot;&gt;&lt;/aop:advisor&gt;    &lt;/aop:config&gt;</code></pre><p>注意，因为声明式事务底层是通过AOP实现的，所以最好把AOP相关依赖都加上。</p><pre><code class="xml">       &lt;dependency&gt;            &lt;groupId&gt;org.aspectj&lt;/groupId&gt;            &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;            &lt;version&gt;1.9.6&lt;/version&gt;        &lt;/dependency&gt;</code></pre><h3 id="3-3-属性配置"><a href="#3-3-属性配置" class="headerlink" title="3.3 属性配置"></a>3.3 属性配置</h3><h4 id="3-3-1-事务传播行为propagation"><a href="#3-3-1-事务传播行为propagation" class="headerlink" title="3.3.1 事务传播行为propagation"></a>3.3.1 事务传播行为propagation</h4><p>​当事务方法嵌套调用时，需要控制是否开启新事务，可以使用事务传播行为来控制。</p><p>测试案例:</p><pre><code class="java">@Servicepublic class TestServiceImpl &#123;    @Autowired    AccountService accountService;    @Transactional    public void test()&#123;        accountService.transfer(1,2,10D);        accountService.log();    &#125;&#125;</code></pre><pre><code class="java">public class AccountServiceImpl implements AccountService &#123;    //...省略其他不相关代码    @Transactional    public void log() &#123;        System.out.println(&quot;打印日志&quot;);        int i = 1/0;    &#125;&#125;</code></pre><table><thead><tr><th>属性值</th><th>行为</th></tr></thead><tbody><tr><td>REQUIRED（必须要有）</td><td>外层方法有事务，内层方法就加入。外层没有，内层就新建</td></tr><tr><td>REQUIRES_NEW（必须要有新事务）</td><td>外层方法有事务，内层方法新建。外层没有，内层也新建</td></tr><tr><td>SUPPORTS（支持有）</td><td>外层方法有事务，内层方法就加入。外层没有，内层就也没有</td></tr><tr><td>NOT_SUPPORTED（支持没有）</td><td>外层方法有事务，内层方法没有。外层没有，内层也没有</td></tr><tr><td>MANDATORY（强制要求外层有）</td><td>外层方法有事务，内层方法加入。外层没有。内层就报错</td></tr><tr><td>NEVER(绝不允许有)</td><td>外层方法有事务，内层方法就报错。外层没有。内层就也没有</td></tr></tbody></table><p>例如：</p><pre><code class="java">    @Transactional(propagation = Propagation.REQUIRES_NEW)    public void transfer(Integer outId, Integer inId, Double money) &#123;        //增加        accoutDao.updateMoney(inId,money);        //减少        accoutDao.updateMoney(outId,-money);    &#125;</code></pre><h4 id="3-3-2-隔离级别isolation"><a href="#3-3-2-隔离级别isolation" class="headerlink" title="3.3.2 隔离级别isolation"></a>3.3.2 隔离级别isolation</h4><p>Isolation.DEFAULT 使用数据库默认隔离级别</p><p>Isolation.READ_UNCOMMITTED </p><p>Isolation.READ_COMMITTED</p><p>Isolation.REPEATABLE_READ</p><p>Isolation.SERIALIZABLE</p><pre><code class="java">   @Transactional(propagation = Propagation.REQUIRES_NEW,isolation = Isolation.READ_COMMITTED)    public void transfer(Integer outId, Integer inId, Double money) &#123;        //增加        accoutDao.updateMoney(inId,money);        //减少        accoutDao.updateMoney(outId,-money);    &#125;</code></pre><h4 id="3-3-3-只读readOnly"><a href="#3-3-3-只读readOnly" class="headerlink" title="3.3.3 只读readOnly"></a>3.3.3 只读readOnly</h4><p>​如果事务中的操作都是读操作，没涉及到对数据的写操作可以设置readOnly为true。这样可以提高效率。</p><pre><code class="java">    @Transactional(readOnly = true)    public void log() &#123;        System.out.println(&quot;打印日志&quot;);        int i = 1/0;    &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Spring </category>
          
          <category> Spring基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Step.1 丰富的选项合并策略</title>
      <link href="/computer-science/vueyuanma/dosc/1%E4%B8%B0%E5%AF%8C%E7%9A%84%E9%80%89%E9%A1%B9%E5%90%88%E5%B9%B6%E7%AD%96%E7%95%A5/"/>
      <url>/computer-science/vueyuanma/dosc/1%E4%B8%B0%E5%AF%8C%E7%9A%84%E9%80%89%E9%A1%B9%E5%90%88%E5%B9%B6%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-Vue的引入"><a href="#1-1-Vue的引入" class="headerlink" title="1.1 Vue的引入"></a>1.1 Vue的引入</h2><p><code>Vue</code>的使用按照官方的说法支持<code>CDN</code>和<code>NPM</code>两种方式，<code>CDN</code>的方式是以<code>script</code>的方式将打包好的<code>vue.js</code>引入页面脚本中，而<code>NPM</code>的方式是和诸如 <code>webpack</code> 或 <code>Browserify</code> 模块打包器配置使用，以<code>npm install vue</code>的方式引入，这也是我们开发应用的主要形式。而从单纯分析源码思路和实现细节的角度来讲，打包后的<code>vue.js</code>在分析和提炼源码方面会更加方便，所以这个系列的源码分析，使用的是打包后的<code>vue</code>脚本，<strong>版本号是<code>v2.6.8</code></strong></p><h3 id="1-1-1-基础使用"><a href="#1-1-1-基础使用" class="headerlink" title="1.1.1 基础使用"></a>1.1.1 基础使用</h3><p>分析的开始当然是<code>vue</code>的基础使用，我们引入了<code>vue.js</code>并且<code>new</code>了一个<code>Vue</code>实例，并将它挂载到<code>#app</code>上，这是最基础的用法。</p><pre><code class="js">&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.8/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;script&gt;var vm = new Vue(&#123;  el: &#39;#app&#39;,  data: &#123;    message: &#39;选项合并&#39;  &#125;,&#125;)&lt;/script&gt;</code></pre><p>虽然这一节的重点是阐述<code>Vue</code>的选项配置，从选项配置入手也是我们从零开始品读源码最容易开始的思路，但是为了分析的完整性，避免后续出现未知的概念，有必要先大致了解一下<code>vue</code>在脚本引入之后分别做了什么。</p><h3 id="1-1-2-Vue构造器"><a href="#1-1-2-Vue构造器" class="headerlink" title="1.1.2 Vue构造器"></a>1.1.2 Vue构造器</h3><p>打包后的源码是遵从<code>UMD</code>规范的，它是<code>commonjs</code>和<code>amd</code>的整合。而<code>Vue</code>的本质是一个构造器,并且它保证了只能通过<code>new</code>实例的形式去调用，而不能直接通过函数的形式使用。</p><pre><code class="js">(function (global, factory) &#123;  // 遵循UMD规范  typeof exports === &#39;object&#39; &amp;&amp; typeof module !== &#39;undefined&#39; ? module.exports = factory() :  typeof define === &#39;function&#39; &amp;&amp; define.amd ? define(factory) :  (global = global || self, global.Vue = factory());&#125;(this, function () &#123; &#39;use strict&#39;;  ···  // Vue 构造函数  function Vue (options) &#123;    // 保证了无法直接通过Vue()去调用，只能通过new的方式去创建实例    if (!(this instanceof Vue)    ) &#123;      warn(&#39;Vue is a constructor and should be called with the `new` keyword&#39;);    &#125;    this._init(options);  &#125;  return Vue&#125;))</code></pre><h3 id="1-1-3-定义原型属性方法"><a href="#1-1-3-定义原型属性方法" class="headerlink" title="1.1.3 定义原型属性方法"></a>1.1.3 定义原型属性方法</h3><p>Vue之所以能适应基础的开发场景，除了经常提到的支持组件化开发，以及完善的响应式系统等外，还有重要的一点是它提供了丰富的<code>api</code>方法，不管是静态还是原型方法，它们都丰富到足以满足我们日常基础的开发需求。所以熟练阅读<span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvYXBpLw==">vue-api</span>文档并精准使用<code>api</code>方法是迈向熟练开发的前提。接下来我们看看这些方法属性是在哪里定义的，<strong>注意，该小节会忽略大部分属性方法具体的实现，这些详细的细节会贯穿在后续系列的分析中</strong>。</p><p>首先是原型上的属性方法，在构造函数的定义之后，有这样五个函数，他们分别针对不同场景定义了<code>Vue</code>原型上的属性和方法。</p><pre><code class="js">  // 定义Vue原型上的init方法(内部方法)  initMixin(Vue);  // 定义原型上跟数据相关的属性方法  stateMixin(Vue);  //定义原型上跟事件相关的属性方法  eventsMixin(Vue);  // 定义原型上跟生命周期相关的方法  lifecycleMixin(Vue);  // 定义渲染相关的函数  renderMixin(Vue); </code></pre><pre><code class="text">initMixin: 将 init 方法添加到 Vue 实例的原型上。init 方法是 Vue 实例的内部方法，用于初始化实例的各种属性和调用其他初始化方法。stateMixin: 添加与数据相关的属性和方法到 Vue 实例的原型上。可能包括$data、$props、$watch 等一些与数据操作和监听相关的方法。eventsMixin: 添加与事件相关的属性和方法到 Vue 实例的原型上。可能包括$on、$once、$off、$emit 等一些用于事件处理的方法。lifecycleMixin: 添加与生命周期相关的方法到 Vue 实例的原型上。可能包括$mount、$destroy 等一些用于生命周期管理的方法。renderMixin: 添加与渲染相关的函数到 Vue 实例的原型上。可能包括渲染函数的生成、虚拟 DOM 的创建等一些与渲染相关的方法。</code></pre><p>我们一个个看，首先<code>initMixin</code>定义了<strong>内部在实例化<code>Vue</code>时会执行的初始化代码</strong>，它是一个内部使用的方法。</p><pre><code class="js">function initMixin (Vue) &#123;  Vue.prototype._init = function (options) &#123;&#125;&#125;_init(options) 方法：这个方法是 Vue 实例的初始化方法。它会对传入的选项 options 进行处理，并执行一系列的初始化操作，包括数据响应式处理、事件系统的初始化、生命周期钩子的注册等。$data 属性：这个属性是 Vue 实例的根数据对象。它实际上指向了 Vue 实例的 data 选项，用于访问和操作数据。$props 属性：这个属性是 Vue 实例的根属性对象。它实际上指向了 Vue 实例的 $props，用于访问和操作父组件传递的属性。$set(target, key, value) 方法：这个方法用于给响应式对象添加一个属性，并使其成为响应式。它类似于 Vue.set() 全局方法，但被绑定到了实例上，方便实例内部使用。通过将这些方法和属性混入到 Vue 的原型链上，initMixin(Vue) 实现了对 Vue 实例的初始化操作。这样，在创建 Vue 实例时，就可以使用这些方法和属性来进行数据处理、事件管理和初始化操作，让 Vue 实例能够正常地运行和响应外部的变化。</code></pre><p><code>stateMixin</code>方法会定义跟数据相关的属性方法，例如代理数据的访问，我们可以在实例上通过<code>this.$data</code>和<code>this.$props</code>访问到<code>data,props</code>的值，并且也定义了使用频率较高的<code>this.$set,this.$delte</code>等方法。</p><pre><code class="js">function stateMixin (Vue) &#123;    var dataDef = &#123;&#125;;    dataDef.get = function () &#123; return this._data &#125;;    var propsDef = &#123;&#125;;    propsDef.get = function () &#123; return this._props &#125;;    &#123;      dataDef.set = function () &#123;        warn(          &#39;Avoid replacing instance root $data. &#39; +          &#39;Use nested data properties instead.&#39;,          this        );      &#125;;      propsDef.set = function () &#123;        warn(&quot;$props is readonly.&quot;, this);      &#125;;    &#125;    // 代理了_data,_props的访问    Object.defineProperty(Vue.prototype, &#39;$data&#39;, dataDef);    Object.defineProperty(Vue.prototype, &#39;$props&#39;, propsDef);    // $set, $del    Vue.prototype.$set = set;    Vue.prototype.$delete = del;    // $watch    Vue.prototype.$watch = function (expOrFn,cb,options) &#123;&#125;;  &#125;</code></pre><p><code>eventsMixin</code>会对原型上的事件相关方法做定义，文档中提到的<code>vm.$on,vm.$once,vm.$off,vm.$emit</code>也就是在这里定义的。</p><pre><code class="js">function eventsMixin(Vue) &#123;  // 自定义事件监听  Vue.prototype.$on = function (event, fn) &#123;&#125;  // 自定义事件监听,只触发一次  Vue.prototype.$once = function (event, fn) &#123;&#125;  // 自定义事件解绑  Vue.prototype.$off = function (event, fn) &#123;&#125;  // 自定义事件通知  Vue.prototype.$emit = function (event, fn) &#123;&#125;&#125;</code></pre><p><code>lifecycleMixin,renderMixin</code>两个都可以算是对生命周期渲染方法的定义，例如<code>$forceUpdate</code>触发实例的强制刷新，<code>$nextTick</code>将回调延迟到下次 <code>DOM</code> 更新循环之后执行等。</p><pre><code class="js">// 定义跟生命周期相关的方法  function lifecycleMixin (Vue) &#123;    Vue.prototype._update = function (vnode, hydrating) &#123;&#125;;    Vue.prototype.$forceUpdate = function () &#123;&#125;;    Vue.prototype.$destroy = function () &#123;&#125;  &#125;// 定义原型上跟渲染相关的方法  function renderMixin (Vue) &#123;    Vue.prototype.$nextTick = function (fn) &#123;&#125;;    // _render函数，后面会着重讲    Vue.prototype._render = function () &#123;&#125;;  &#125;</code></pre><h3 id="1-1-4-定义静态属性方法"><a href="#1-1-4-定义静态属性方法" class="headerlink" title="1.1.4 定义静态属性方法"></a>1.1.4 定义静态属性方法</h3><p>除了原型方法外，<code>Vue</code>还提供了丰富的全局<code>api</code>方法，这些都是在<code>initGlobalAPI</code>中定义的。</p><pre><code class="js">/* 初始化构造器的api */function initGlobalAPI (Vue) &#123;    // config    var configDef = &#123;&#125;;    configDef.get = function () &#123; return config; &#125;;    &#123;      configDef.set = function () &#123;        warn(          &#39;Do not replace the Vue.config object, set individual fields instead.&#39;        );      &#125;;    &#125;    // 通过Vue.config拿到配置信息    Object.defineProperty(Vue, &#39;config&#39;, configDef);    // 工具类不作为公共暴露的API使用    Vue.util = &#123;      warn: warn,      extend: extend,      mergeOptions: mergeOptions,      defineReactive: defineReactive###1    &#125;;    // Vue.set = Vue.prototype.$set    Vue.set = set;    // Vue.delete = Vue.prototype.$delete    Vue.delete = del;    // Vue.nextTick = Vue.prototype.$nextTick    Vue.nextTick = nextTick;    // 2.6 explicit observable API    Vue.observable = function (obj) &#123;      observe(obj);      return obj    &#125;;    // 构造函数的默认选项默认为components,directive,filter, _base    Vue.options = Object.create(null);    ASSET_TYPES.forEach(function (type) &#123;      Vue.options[type + &#39;s&#39;] = Object.create(null);    &#125;);    // options里的_base属性存储Vue构造器    Vue.options._base = Vue;    extend(Vue.options.components, builtInComponents);    // Vue.use()    initUse(Vue);    // Vue.mixin()    initMixin$1(Vue);    // 定义extend扩展子类构造器的方法    // Vue.extend()    initExtend(Vue);    // Vue.components, Vue.directive, Vue.filter    initAssetRegisters(Vue);  &#125;</code></pre><p>看着源码对静态方法的定义做一个汇总。</p><ol><li>为源码里的<code>config</code>配置做一层代理，可以通过<code>Vue.config</code>拿到默认的配置，并且可以修改它的属性值，具体哪些可以配置修改，可以先参照官方文档。</li><li>定义内部使用的工具方法，例如警告提示，对象合并等。</li><li>定义<code>set,delet,nextTick</code>方法，本质上原型上也有这些方法的定义。</li><li>对<code>Vue.components,Vue.directive,Vue.filter</code>的定义，这些是默认的资源选项，后续会重点分析。</li><li>定义<code>Vue.use()</code>方法</li><li>定义<code>Vue.mixin()</code>方法</li><li>定义<code>Vue.extend()</code>方法</li></ol><p>现在我相信你已经对引入<code>Vue</code>的阶段有了一个大致的认识，在源码分析的初期阶段，我们不需要死磕每个方法，思路的实现细节，只需要对大致的结构有基本的认识。有了这些基础，我们开始进入这个章节的主线。</p><h2 id="1-2-构造器的默认选项"><a href="#1-2-构造器的默认选项" class="headerlink" title="1.2 构造器的默认选项"></a>1.2 构造器的默认选项</h2><p>我们回到最开始的例子，在实例化<code>Vue</code>时，我们会将选项对象传递给构造器进行初始化，这个选项对象描述了你想要的行为，例如以<code>data</code>定义实例中的响应式数据，以<code>computed</code>描述实例中的计算属性，以<code>components</code>来进行组件注册，甚至是定义各个阶段执行的生命周期钩子等。然而<code>Vue</code>内部本身会自带一些默认的选项，这些选项和用户自定义的选项会在后续一起参与到<code>Vue</code>实例的初始化中。</p><p>在<code>initGlobalAPI</code>方法中有几行默认选项的定义。<code>Vue</code>内部的默认选项会保留在静态的<code>options</code>属性上，从源码看<code>Vue</code>自身有四个默认配置选项，分别是<code>component，directive， filter</code>以及返回自身构造器的<code>_base</code>。</p><pre><code class="js">var ASSET_TYPES = [  &#39;component&#39;,  &#39;directive&#39;,  &#39;filter&#39;];// 原型上创建了一个指向为空对象的options属性Vue.options = Object.create(null); ASSET_TYPES.forEach(function (type) &#123;  Vue.options[type + &#39;s&#39;] = Object.create(null);&#125;);Vue.options._base = Vue;</code></pre><p>很明显我们开发者对这几个选项是非常熟悉的，<code>components</code>是需要注册的组件选项，<code>directives</code>是需要注册的指令，而<code>filter</code>则代表需要注册的过滤器。从代码的实现细节看，<code>Vue</code>为<code>components</code>提供了<code>keepAlive,transition,transitionGroup</code>的内置组件，为<code>directives</code>提供了<code>v-model,v-show</code>的内置指令，而过滤器则没有默认值。</p><pre><code class="js">// Vue内置组件var builtInComponents = &#123;  KeepAlive: KeepAlive&#125;;var platformComponents = &#123;  Transition: Transition,  TransitionGroup: TransitionGroup&#125;;// Vue 内置指令，例如： v-model, v-showvar platformDirectives = &#123;  model: directive,  show: show&#125;extend(Vue.options.components, builtInComponents); extend(Vue.options.components, platformComponents); // 扩展内置组件extend(Vue.options.directives, platformDirectives);  // 扩展内置指令</code></pre><p>其中<code>extend</code>方法实现了对象的合并，如果属性相同，则用新的属性值覆盖旧值。</p><pre><code class="js">// 将_from对象合并到to对象，属性相同时，则覆盖to对象的属性function extend (to, _from) &#123;  for (var key in _from) &#123;    to[key] = _from[key];  &#125;  return to&#125;</code></pre><p>因此做为构造器而言，<code>Vue</code>默认的资源选项配置如下：</p><pre><code class="js">Vue.options = &#123;  components: &#123;    KeepAlive: &#123;&#125;    Transition: &#123;&#125;    TransitionGroup: &#123;&#125;  &#125;,  directives: &#123;    model: &#123;inserted: ƒ, componentUpdated: ƒ&#125;    show: &#123;bind: ƒ, update: ƒ, unbind: ƒ&#125;  &#125;,  filters: &#123;&#125;  _base&#125;</code></pre><h2 id="1-3-选项检验"><a href="#1-3-选项检验" class="headerlink" title="1.3 选项检验"></a>1.3 选项检验</h2><p>介绍完<code>Vue</code>自身拥有的选项后，我们回过头来看看，实例化<code>Vue</code>的阶段发生了什么。从构造器的定义我们很容易发现，实例化<code>Vue</code>做的核心操作便是执行<code>_init</code>方法进行初始化。初始化操作会经过选项合并配置，初始化生命周期，初始化事件中心，乃至构建数据响应式系统等。而关键的第一步就是对选项的合并。合并后的选项会挂载到实例的<code>$options</code>属性中。(你可以先在实例中通过<code>this.$options</code>访问最终的选项)</p><pre><code class="js">function initMixin (Vue) &#123;  Vue.prototype._init = function (options) &#123;    var vm = this;    // a uid    // 记录实例化多少个vue对象    vm._uid = uid$3++;    // 选项合并，将合并后的选项赋值给实例的$options属性    vm.$options = mergeOptions(      resolveConstructorOptions(vm.constructor), // 返回Vue构造函数自身的配置项      options || &#123;&#125;,      vm    );  &#125;;&#125;</code></pre><p>从代码中可以看到，选项合并的重点是将用户自身传递的<code>options</code>选项和<code>Vue</code>构造函数自身的选项配置合并。我们看看<code>mergeOptions</code>函数的实现。</p><pre><code class="js">function mergeOptions (parent,child,vm) &#123;    &#123;      checkComponents(child);    &#125;    if (typeof child === &#39;function&#39;) &#123;      child = child.options;    &#125;    // props,inject,directives的校验和规范化    normalizeProps(child, vm);    normalizeInject(child, vm);    normalizeDirectives(child);        // 针对extends扩展的子类构造器    if (!child._base) &#123;      // extends      if (child.extends) &#123;        parent = mergeOptions(parent, child.extends, vm);      &#125;      // mixins      if (child.mixins) &#123;        for (var i = 0, l = child.mixins.length; i &lt; l; i++) &#123;          parent = mergeOptions(parent, child.mixins[i], vm);        &#125;      &#125;    &#125;    var options = &#123;&#125;;    var key;    for (key in parent) &#123;      mergeField(key);    &#125;    for (key in child) &#123;      if (!hasOwn(parent, key)) &#123;        mergeField(key);      &#125;    &#125;    function mergeField (key) &#123;      // 拿到各个选择指定的选项配置，如果没有则用默认的配置      var strat = strats[key] || defaultStrat;      // 执行各自的合并策略      options[key] = strat(parent[key], child[key], vm, key);    &#125;    // console.log(options)    return options  &#125;</code></pre><p><strong>选项合并过程中更多的不可控在于不知道用户传递了哪些配置选项，这些配置是否符合规范，是否达到合并配置的要求。因此每个选项的书写规则需要严格限定，原则上不允许用户脱离规则外来传递选项。</strong>因此在合并选项之前，很大的一部分工作是对选项的校验。其中<code>components,prop,inject,directive</code>等都是检验的重点。</p><h3 id="1-3-1-components规范检验"><a href="#1-3-1-components规范检验" class="headerlink" title="1.3.1 components规范检验"></a>1.3.1 components规范检验</h3><p>如果项目中需要使用到组件，我们会在<code>vue</code>实例化时传入组件选项以此来注册组件。因此，组件命名需要遵守很多规范，比如组件名不能用<code>html</code>保留的标签(如：<code>img,p</code>),也不能包含非法的字符等。这些都会在<code>validateComponentName</code>函数做校验。</p><pre><code class="js">// components规范检查函数function checkComponents (options) &#123;  // 遍历components对象，对每个属性值校验。  for (var key in options.components) &#123;    validateComponentName(key);  &#125;&#125;function validateComponentName (name) &#123;  if (!new RegExp((&quot;^[a-zA-Z][\\-\\.0-9_&quot; + (unicodeRegExp.source) + &quot;]*$&quot;)).test(name)) &#123;    // 正则判断检测是否为非法的标签，例如数字开头    warn(      &#39;Invalid component name: &quot;&#39; + name + &#39;&quot;. Component names &#39; +      &#39;should conform to valid custom element name in html5 specification.&#39;    );  &#125;  // 不能使用Vue自身自定义的组件名，如slot, component,不能使用html的保留标签，如 h1, svg等  if (isBuiltInTag(name) || config.isReservedTag(name)) &#123;    warn(      &#39;Do not use built-in or reserved HTML elements as component &#39; +      &#39;id: &#39; + name    );  &#125;&#125;</code></pre><h3 id="1-3-2-props规范检验"><a href="#1-3-2-props规范检验" class="headerlink" title="1.3.2 props规范检验"></a>1.3.2 props规范检验</h3><p><code>Vue</code>的官方文档规定了<code>props</code>选项的书写形式有两种，分别是</p><ol><li>数组形式 <code>&#123; props: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;] &#125;</code>,</li><li>带校验规则的对象形式 <code>&#123; props: &#123; a: &#123; type: &#39;String&#39;, default: &#39;prop校验&#39; &#125; &#125;&#125;</code><br>从源码上看，<strong>两种形式最终都会转换成对象的形式。</strong></li></ol><pre><code class="js">// props规范校验  function normalizeProps (options, vm) &#123;    var props = options.props;    if (!props) &#123; return &#125;    var res = &#123;&#125;;    var i, val, name;    // props选项数据有两种形式，一种是[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;],一种是&#123; a: &#123; type: &#39;String&#39;, default: &#39;hahah&#39; &#125;&#125;    // 数组    if (Array.isArray(props)) &#123;      i = props.length;      while (i--) &#123;        val = props[i];        if (typeof val === &#39;string&#39;) &#123;          name = camelize(val);          // 默认将数组形式的props转换为对象形式。          res[name] = &#123; type: null &#125;;         &#125; else &#123;          // 规则：保证是字符串          warn(&#39;props must be strings when using array syntax.&#39;);        &#125;      &#125;    &#125; else if (isPlainObject(props)) &#123;      for (var key in props) &#123;        val = props[key];        name = camelize(key);        res[name] = isPlainObject(val)          ? val          : &#123; type: val &#125;;      &#125;    &#125; else &#123;      // 非数组，非对象则判定props选项传递非法      warn(        &quot;Invalid value for option \&quot;props\&quot;: expected an Array or an Object, &quot; +        &quot;but got &quot; + (toRawType(props)) + &quot;.&quot;,        vm      );    &#125;    options.props = res;  &#125;</code></pre><h3 id="1-3-3-inject的规范校验"><a href="#1-3-3-inject的规范校验" class="headerlink" title="1.3.3 inject的规范校验"></a>1.3.3 inject的规范校验</h3><p><code>provide/inject</code>这对组合在我们日常开发中可能使用得比较少，当我们需要在父组件中提供数据或者方法给后代组件使用时可以用到<code>provide/inject</code>,注意关键是后代，而不单纯指子代，这是有别于<code>props</code>的使用场景。官方把它被称为依赖注入，依赖注入使得组件后代都能访问到父代注入的数据&#x2F;方法，且后代不需要知道数据的来源。重要的一点，依赖提供的数据是非响应式的。</p><p>基本的使用如下：</p><pre><code class="js">// 父组件var Provider = &#123;  provide: &#123;    foo: &#39;bar&#39;  &#125;,  // ...&#125;// 后代组件var Child = &#123;  // 数组写法  inject: [&#39;foo&#39;],  // 对象写法  inject: &#123;    foo: &#123;      from: &#39;foo&#39;,      default: &#39;bardefault&#39;    &#125;  &#125;&#125;</code></pre><p><code>inject</code>选项有两种写法，数组的方式以及对象的方式，和<code>props</code>的校验规则一致，最终<code>inject</code>都会转换为对象的形式存在。</p><pre><code class="js">// inject的规范化function normalizeInject (options, vm) &#123;    var inject = options.inject;    if (!inject) &#123; return &#125;    var normalized = options.inject = &#123;&#125;;    //数组的形式    if (Array.isArray(inject)) &#123;      for (var i = 0; i &lt; inject.length; i++) &#123;        // from: 属性是在可用的注入内容中搜索用的 key (字符串或 Symbol)        normalized[inject[i]] = &#123; from: inject[i] &#125;;      &#125;    &#125; else if (isPlainObject(inject)) &#123;      // 对象的处理      for (var key in inject) &#123;        var val = inject[key];        normalized[key] = isPlainObject(val)          ? extend(&#123; from: key &#125;, val)          : &#123; from: val &#125;;      &#125;    &#125; else &#123;      // 非法规则      warn(        &quot;Invalid value for option \&quot;inject\&quot;: expected an Array or an Object, &quot; +        &quot;but got &quot; + (toRawType(inject)) + &quot;.&quot;,        vm      );    &#125;  &#125;</code></pre><h3 id="1-3-4-directive的规范校验"><a href="#1-3-4-directive的规范校验" class="headerlink" title="1.3.4 directive的规范校验"></a>1.3.4 directive的规范校验</h3><p>我们先看看指令选项的用法，<code>Vue</code>允许我们自定义指令，并且它提供了五个钩子函数<code>bind, inserted, update, componentUpdated, unbind</code>,具体的用法可以参考<span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvZ3VpZGUvY3VzdG9tLWRpcmVjdGl2ZS5odG1s">官方-自定义指令</span>文档,而除了可以以对象的形式去定义钩子函数外，官方还提供了一种函数的简写，例如：</p><pre><code class="js">&#123;  directives: &#123;    &#39;color-swatch&#39;: function(el, binding) &#123;        el.style.backgroundColor = binding.value    &#125;  &#125;&#125;</code></pre><p>函数的写法会在<code>bind,update</code>钩子中触发相同的行为，并且不关心其他钩子。这个行为就是定义的函数。因此在对<code>directives</code>进行规范化时，针对函数的写法会将行为赋予<code>bind,update</code>钩子。</p><pre><code class="js">function normalizeDirectives (options) &#123;    var dirs = options.directives;    if (dirs) &#123;      for (var key in dirs) &#123;        var def###1 = dirs[key];        // 函数简写同样会转换成对象的形式        if (typeof def###1 === &#39;function&#39;) &#123;          dirs[key] = &#123; bind: def###1, update: def###1 &#125;;        &#125;      &#125;    &#125;  &#125;</code></pre><h3 id="1-3-5-函数缓存"><a href="#1-3-5-函数缓存" class="headerlink" title="1.3.5 函数缓存"></a>1.3.5 函数缓存</h3><p>这个内容跟选项的规范化无关，当读到上面规范检测的代码时，笔者发现有一段函数优化的代码值得我们学习。它将每次执行函数后的值进行缓存，当再次执行的时候直接调用缓存的数据而不是重复执行函数，以此提高前端性能，这是典型的用空间换时间的优化，也是经典的偏函数应用。</p><pre><code class="js">function cached (fn) &#123;  var cache = Object.create(null); // 创建空对象作为缓存对象  return (function cachedFn (str) &#123;    var hit = cache[str];    return hit || (cache[str] = fn(str)) // 每次执行时缓存对象有值则不需要执行函数方法，没有则执行并缓存起来  &#125;)&#125;var camelizeRE = /-(\w)/g;// 缓存会保存每次进行驼峰转换的结果var camelize = cached(function (str) &#123;  // 将诸如 &#39;a-b&#39;的写法统一处理成驼峰写法&#39;aB&#39;  return str.replace(camelizeRE, function (_, c) &#123; return c ? c.toUpperCase() : &#39;&#39;; &#125;)&#125;);</code></pre><h2 id="1-4-子类构造器"><a href="#1-4-子类构造器" class="headerlink" title="1.4 子类构造器"></a>1.4 子类构造器</h2><p>选项校验介绍完后，在正式进入合并策略之前，还需要先了解一个东西：子类构造器。为什么需要先提到子类构造器呢？</p><p>按照前面的知识，<code>Vue</code>内部提供了四个默认选项，关键的三个是<code>components,directives,filter</code>。那么当我们传递一个选项配置到<code>Vue</code>进行初始化，所需要合并的选项好像也仅仅是那关键的三个默认选项而已，那么源码中大篇幅做的选项合并策略又是针对什么场景呢？答案就是这个子类构造器。</p><p><strong><code>Vue</code>提供了一个<code>Vue.extend</code>的静态方法，它是基于基础的<code>Vue</code>构造器创建一个“子类”，而这个子类所传递的选项配置会和父类的选项配置进行合并。这是选项合并场景的由来。</strong></p><p>因此有不要先了解子类构造器的实现。下面例子中，我们创建了一个<code>Child</code>的子类，它继承于父类<code>Parent</code>,最终将子类挂载到<code>#app</code>元素上。最终获取的<code>data</code>便是选项合并后的结果。</p><pre><code class="js">var Parent = Vue.extend(&#123;  data() &#123;    test: &#39;父类&#39;，    test1: &#39;父类1&#39;  &#125;&#125;)var Child = Parent.extend(&#123;  data() &#123;    test: &#39;子类&#39;,    test2: &#39;子类1&#39;  &#125;&#125;)var vm = new Child().$mount(&#39;#app&#39;);console.log(vm.$data);// 结果 &#123;  test: &#39;子类&#39;,  test1: &#39;父类1&#39;,  test2: &#39;子类1&#39;&#125;</code></pre><p><code>Vue.extend</code>的实现思路很清晰，创建了一个<code>Sub</code>的类，这个类的原型指向了父类，并且子类的<code>options</code>会和父类的<code>options</code>进行合并，<code>mergeOptions</code>的其他细节接下来会重点分析。</p><pre><code class="js">Vue.extend = function (extendOptions) &#123;  extendOptions = extendOptions || &#123;&#125;;  var Super = this;  var name = extendOptions.name || Super.options.name;  if (name) &#123;    validateComponentName(name); // 校验子类的名称是否符合规范  &#125;  // 创建子类构造器  var Sub = function VueComponent (options) &#123;    this._init(options);  &#125;;  Sub.prototype = Object.create(Super.prototype); // 子类继承于父类  Sub.prototype.constructor = Sub;  Sub.cid = cid++;  // 子类和父类构造器的配置选项进行合并  Sub.options = mergeOptions(    Super.options,    extendOptions  );  return Sub // 返回子类构造函数&#125;;</code></pre><h2 id="1-5-合并策略"><a href="#1-5-合并策略" class="headerlink" title="1.5 合并策略"></a>1.5 合并策略</h2><p>合并策略之所以是难点，其中一个是合并选项类型繁多，合并规则随着选项的不同也呈现差异。概括起来思路主要是以下两点：</p><ol><li><code>Vue</code>针对每个规定的选项都有定义好的合并策略，例如<code>data,component,mounted</code>等。如果合并的子父配置都具有相同的选项，则只需要按照规定好的策略进行选项合并即可。</li><li>由于<code>Vue</code>传递的选项是开放式的，所有也存在传递的选项没有自定义选项的情况，这时候由于选项不存在默认的合并策略，所以处理的原则是有子类配置选项则默认使用子类配置选项，没有则选择父类配置选项。</li></ol><p>我们通过这两个思想去分析源码的实现，先看看<code>mergeOptions</code>除了规范检测后的逻辑。</p><pre><code class="js">function mergeOptions ( parent, child, vm ) &#123;  ···  var options = &#123;&#125;;  var key;  for (key in parent) &#123;    mergeField(key);  &#125;  for (key in child) &#123;    if (!hasOwn(parent, key)) &#123;      mergeField(key);    &#125;  &#125;  function mergeField (key) &#123;    // 如果有自定义选项策略，则使用自定义选项策略，否则选择使用默认策略。    var strat = strats[key] || defaultStrat;     options[key] = strat(parent[key], child[key], vm, key);  &#125;  return options&#125;</code></pre><p><strong>两个<code>for</code>循环规定了合并的顺序，以自定义选项策略优先，如果没有才会使用默认策略。而<code>strats</code>下每个<code>key</code>对应的便是每个特殊选项的合并策略</strong></p><h3 id="1-5-1-默认策略"><a href="#1-5-1-默认策略" class="headerlink" title="1.5.1 默认策略"></a>1.5.1 默认策略</h3><p>我们可以用丰富的选项去定义实例的行为，大致可以分为以下几类：</p><ol><li>用<code>data,props,computed</code>等选项定义实例数据</li><li>用<code>mounted, created, destoryed</code>等定义生命周期函数</li><li>用<code>components</code>注册组件</li><li>用<code>methods</code>选项定义实例方法</li></ol><p>当然还有诸如<code>watch,inject,directives,filter</code>等选项，总而言之，<code>Vue</code>提供的配置项是丰富的。除此之外，我们也可以使用没有默认配置策略的选项，典型的例子是状态管理<code>Vuex</code>和配套路由<code>vue-router</code>的引入：</p><pre><code class="js">new Vue(&#123;  store, // vuex  router// vue-router&#125;)</code></pre><p>不管是插件也好，还是用户自定义的选项，他们的合并策略会遵循思路的第二点：<strong>子配置存在则取子配置，不存在则取父配置，即用子去覆盖父。。</strong>它的描述在<code>defaultStrat</code>中。</p><pre><code class="js">// 用户自定义选项策略var defaultStrat = function (parentVal, childVal) &#123;  // 子不存在则用父，子存在则用子配置  return childVal === undefined    ? parentVal    : childVal&#125;;</code></pre><p>接下来会进入某些具体的合并策略的分析，大致分为五类：</p><p><strong>1. 常规选项合并</strong></p><p><strong>2. 自带资源选项合并</strong></p><p><strong>3. 生命周期钩子合并</strong></p><p><strong>4. <code>watch</code>选项合并</strong></p><p><strong>5. <code>props,methods, inject, computed</code>类似选项合并</strong></p><h2 id="1-6-常规选项的合并"><a href="#1-6-常规选项的合并" class="headerlink" title="1.6 常规选项的合并"></a>1.6 常规选项的合并</h2><h3 id="1-6-1-el的合并"><a href="#1-6-1-el的合并" class="headerlink" title="1.6.1 el的合并"></a>1.6.1 el的合并</h3><p><code>el</code>提供一个在页面上已存在的 <code>DOM</code> 元素作为 <code>Vue</code> 实例的挂载目标,因此它只在创建<code>Vue</code>实例才存在，在子类或者子组件中无法定义<code>el</code>选项，因此<code>el</code>的合并策略是在保证选项只存在于根的<code>Vue</code>实例的情形下使用默认策略进行合并。</p><pre><code class="js">strats.el = function (parent, child, vm, key) &#123;  if (!vm) &#123;  // 只允许vue实例才拥有el属性，其他子类构造器不允许有el属性    warn(      &quot;option \&quot;&quot; + key + &quot;\&quot; can only be used during instance &quot; +      &#39;creation with the `new` keyword.&#39;    );  &#125;  // 默认策略  return defaultStrat(parent, child)&#125;;</code></pre><h3 id="1-6-2-data合并"><a href="#1-6-2-data合并" class="headerlink" title="1.6.2 data合并"></a>1.6.2 data合并</h3><p>常规选项的重点部分是在于<code>data</code>的合并，读完这部分源码，可能可以解开你心中的一个疑惑，为什么<code>data</code>在<code>vue</code>创建实例时传递的是一个对象，而在组件内部定义时只能传递一个函数。</p><pre><code class="js">// data的合并strats.data = function (parentVal, childVal, vm) &#123;  // vm代表是否为Vue创建的实例，否则是子父类的关系  if (!vm) &#123;    if (childVal &amp;&amp; typeof childVal !== &#39;function&#39;) &#123; // 必须保证子类的data类型是一个函数而不是一个对象      warn(&#39;The &quot;data&quot; option should be a function &#39; + &#39;that returns a per-instance value in component &#39; + &#39;definitions.&#39;,vm);      return parentVal    &#125;    return mergeDataOrFn(parentVal, childVal)  &#125;  return mergeDataOrFn(parentVal, childVal, vm); // vue实例时需要传递vm作为函数的第三个参数&#125;;</code></pre><p><code>data</code>策略最终调用的<code>mergeDataOrFn</code>方法，区别在于当前<code>vm</code>是否是实例，或者是单纯的子父类的关系。如果是子父类的关系，需要对<code>data</code>选项进行规范校验，保证它的类型是一个函数而不是对象。</p><pre><code class="js">function mergeDataOrFn ( parentVal, childVal, vm ) &#123;  // 子父类  if (!vm) &#123;    if (!childVal) &#123; // 子类不存在data选项，则合并结果为父类data选项      return parentVal    &#125;    if (!parentVal) &#123; // 父类不存在data选项，则合并结果为子类data选项      return childVal    &#125;    return function mergedDataFn () &#123; // data选项在父类和子类同时存在的情况下返回的是一个函数      // 子类实例和父类实例，分别将子类和父类实例中data函数执行后返回的对象传递给mergeData函数做数据合并      return mergeData(        typeof childVal === &#39;function&#39; ? childVal.call(this, this) : childVal,        typeof parentVal === &#39;function&#39; ? parentVal.call(this, this) : parentVal      )    &#125;  &#125; else &#123;  // Vue实例    // vue构造函数实例对象    return function mergedInstanceDataFn () &#123;      var instanceData = typeof childVal === &#39;function&#39;        ? childVal.call(vm, vm)        : childVal;      var defaultData = typeof parentVal === &#39;function&#39;        ? parentVal.call(vm, vm)        : parentVal;      if (instanceData) &#123;        // 当实例中传递data选项时，将实例的data对象和Vm构造函数上的data属性选项合并        return mergeData(instanceData, defaultData)      &#125; else &#123;        // 当实例中不传递data时，默认返回Vm构造函数上的data属性选项        return defaultData      &#125;    &#125;  &#125;&#125;</code></pre><p>从源码的实现看，<code>data</code>的合并不是简单的将两个数据对象进行合并，而是直接返回一个<code>mergedDataFn</code>或者<code>mergedInstanceDataFn</code>函数，而真正合并的时机是在后续初始化数据响应式系统的环节进行的，初始化数据响应式系统的第一步就是拿到合并后的数据，也就是执行<code>mergeData</code>逻辑。<br>(关于响应式系统的构建请移步后面的章节)</p><pre><code class="js">function mergeData (to, from) &#123;  if (!from) &#123; return to &#125;  var key, toVal, fromVal;  // Reflect.ownKeys可以拿到Symbol属性  var keys = hasSymbol    ? Reflect.ownKeys(from)    : Object.keys(from);  for (var i = 0; i &lt; keys.length; i++) &#123;    key = keys[i];    toVal = to[key];    fromVal = from[key];    if (!hasOwn(to, key)) &#123;      // 子的数据父没有，则将新增的数据加入响应式系统中。      set(to, key, fromVal);     &#125; else if (      toVal !== fromVal &amp;&amp;      isPlainObject(toVal) &amp;&amp;      isPlainObject(fromVal)    ) &#123;      // 处理深层对象，当合并的数据为多层嵌套对象时，需要递归调用mergeData进行比较合并      mergeData(toVal, fromVal);    &#125;  &#125;  return to&#125;</code></pre><p><code>mergeData</code>方法的两个参数是父<code>data</code>选项和子<code>data</code>选项的结果，也就是两个<code>data</code>对象，从源码上看数据合并的原则是，将父类的数据整合到子类的数据选项中， 如若父类数据和子类数据冲突时，保留子类数据。如果对象有深层嵌套，则需要递归调用<code>mergeData</code>进行数据合并。</p><p>最后回过头来思考一个问题，为什么<code>Vue</code>组件的<code>data</code>是一个函数，而不是一个对象呢？<br>我觉得可以这样解释：<strong>组件设计的目的是为了复用，每次通过函数创建相当于在一个独立的内存空间中生成一个<code>data</code>的副本，这样每个组件之间的数据不会互相影响。</strong></p><h2 id="1-7-自带资源选项合并"><a href="#1-7-自带资源选项合并" class="headerlink" title="1.7 自带资源选项合并"></a>1.7 自带资源选项合并</h2><p>在1.2中我们看到了<code>Vue</code>默认会带几个选项，分别是<code>components</code>组件, <code>directive</code>指令, <code>filter</code>过滤器,所有无论是根实例，还是父子实例，都需要和系统自带的资源选项进行合并。它的定义如下：</p><pre><code class="js">// 资源选项var ASSET_TYPES = [  &#39;component&#39;,  &#39;directive&#39;,  &#39;filter&#39;];// 定义资源合并的策略ASSET_TYPES.forEach(function (type) &#123;  strats[type + &#39;s&#39;] = mergeAssets; // 定义默认策略&#125;);</code></pre><p>这些资源选项的合并逻辑很简单，首先会创建一个原型指向父类资源选项的空对象，再将子类选项赋值给空对象。</p><pre><code class="js">// 资源选项自定义合并策略function mergeAssets (parentVal,childVal,vm,key) &#123;  var res = Object.create(parentVal || null); // 创建一个空对象，其原型指向父类的资源选项。  if (childVal) &#123;    assertObjectType(key, childVal, vm); // components,filters,directives选项必须为对象    return extend(res, childVal) // 子类选项赋值给空对象  &#125; else &#123;    return res  &#125;&#125;</code></pre><p>结合下面的例子，我们看具体合并后的结果：</p><pre><code class="js">var vm = new Vue(&#123;  components: &#123;    componentA: &#123;&#125;  &#125;,  directives: &#123;    &#39;v-boom&#39;: &#123;&#125;  &#125;&#125;)console.log(vm.$options.components)// 根实例的选项和资源默认选项合并后的结果&#123;  components: &#123;    componentA: &#123;&#125;,    __proto__: &#123;      KeepAlive: &#123;&#125;      Transition: &#123;&#125;      TransitionGroup: &#123;&#125;    &#125;   &#125;,  directives: &#123;    &#39;v-boom&#39;: &#123;&#125;,    __proto__: &#123;      &#39;v-show&#39;: &#123;&#125;,      &#39;v-model&#39;: &#123;&#125;    &#125;  &#125;&#125;</code></pre><p>简单总结一下，对于 <code>directives、filters</code> 以及 <code>components</code> 等资源选项，父类选项将以原型链的形式被处理。子类必须通过原型链才能查找并使用内置组件和内置指令。</p><h2 id="1-8-生命周期钩子函数的合并"><a href="#1-8-生命周期钩子函数的合并" class="headerlink" title="1.8 生命周期钩子函数的合并"></a>1.8 生命周期钩子函数的合并</h2><p>在学习<code>Vue</code>时，有一个重要的思想，生命周期。它是我们使用<code>Vue</code>高效开发组件的基础，我们可以在组件实例的不同阶段去定义需要执行的函数，让组件的功能更加丰富。在介绍生命周期钩子函数的选项合并前，我们有必要复习以下官方的生命周期图。</p><p><img data-src="/images/img/1.1.png"></p><p>然而从源码中我们可以看到<code>Vue</code>的生命周期钩子不止这些，它有多达12个之多，每个钩子的执行时机我们暂且不深究，它们会在以后的章节中逐一出现。我们关心的是：子父组件的生命周期钩子函数是遵循什么样的规则合并。</p><pre><code class="js">var LIFECYCLE_HOOKS = [  &#39;beforeCreate&#39;,  &#39;created&#39;,  &#39;beforeMount&#39;,  &#39;mounted&#39;,  &#39;beforeUpdate&#39;,  &#39;updated&#39;,  &#39;beforeDestroy&#39;,  &#39;destroyed&#39;,  &#39;activated&#39;,  &#39;deactivated&#39;,  &#39;errorCaptured&#39;,  &#39;serverPrefetch&#39;];LIFECYCLE_HOOKS.forEach(function (hook) &#123;  strats[hook] = mergeHook; // 对生命周期钩子选项的合并都执行mergeHook策略&#125;);</code></pre><p><code>mergeHook</code>是生命周期钩子合并的策略，简单的对代码进行总结，钩子函数的合并原则是：</p><ol><li>如果子类和父类都拥有相同钩子选项，则将子类选项和父类选项合并。</li><li>如果父类不存在钩子选项，子类存在时，则以数组形式返回子类钩子选项。</li><li>当子类不存在钩子选项时，则以父类选项返回。</li><li>子父合并时，是将子类选项放在数组的末尾，这样在执行钩子时，永远是父类选项优先于子类选项执行。</li></ol><pre><code class="js">// 生命周期钩子选项合并策略function mergeHook (    parentVal,    childVal  ) &#123;    // 1.如果子类和父类都拥有钩子选项，则将子类选项和父类选项合并,     // 2.如果父类不存在钩子选项，子类存在时，则以数组形式返回子类钩子选项，    // 3.当子类不存在钩子选项时，则以父类选项返回。    var res = childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;     return res      ? dedupeHooks(res)      : res  &#125;// 防止多个组件实例钩子选项相互影响  function dedupeHooks (hooks) &#123;    var res = [];    for (var i = 0; i &lt; hooks.length; i++) &#123;      if (res.indexOf(hooks[i]) === -1) &#123;        res.push(hooks[i]);      &#125;    &#125;    return res  &#125;</code></pre><p>下面结合具体的例子看合并结果。</p><pre><code class="js">var Parent = Vue.extend(&#123;  mounted() &#123;    console.log(&#39;parent&#39;)  &#125;&#125;)var Child = Parent.extend(&#123;  mounted() &#123;    console.log(&#39;child&#39;)  &#125;&#125;)var vm = new Child().$mount(&#39;#app&#39;);// 输出结果：parentchild</code></pre><p>简单总结一下：<strong>对于生命周期钩子选项，子类和父类相同的选项将合并成数组，这样在执行子类钩子函数时，父类钩子选项也会执行，并且父会优先于子执行。</strong></p><h2 id="1-9-watch选项合并"><a href="#1-9-watch选项合并" class="headerlink" title="1.9 watch选项合并"></a>1.9 watch选项合并</h2><p>在使用<code>Vue</code>进行开发时，我们有时需要自定义侦听器来响应数据的变化，当需要在数据变化时执行异步或者开销较大的操作时，<code>watch</code>往往是高效的。对于 <code>watch</code> 选项的合并处理，它类似于生命周期钩子，只要父选项有相同的观测字段，则和子的选项合并为数组，在监测字段改变时同时执行父类选项的监听代码。处理方式和生命钩子选项的区别在于，生命周期钩子选项必须是函数，而<code>watch</code>选项最终在合并的数组中可以是包含选项的对象，也可以是对应的回调函数，或者方法名。</p><pre><code class="js">strats.watch = function (parentVal,childVal,vm,key) &#123;    //火狐浏览器在Object的原型上拥有watch方法，这里对这一现象做了兼容    // var nativeWatch = (&#123;&#125;).watch;    if (parentVal === nativeWatch) &#123; parentVal = undefined; &#125;    if (childVal === nativeWatch) &#123; childVal = undefined; &#125;    // 没有子，则默认用父选项    if (!childVal) &#123; return Object.create(parentVal || null) &#125;    &#123;      // 保证watch选项是一个对象      assertObjectType(key, childVal, vm);    &#125;    // 没有父则直接用子选项    if (!parentVal) &#123; return childVal &#125;    var ret = &#123;&#125;;    extend(ret, parentVal);    for (var key$1 in childVal) &#123;      var parent = ret[key$1];      var child = childVal[key$1];      // 父的选项先转换成数组      if (parent &amp;&amp; !Array.isArray(parent)) &#123;        parent = [parent];      &#125;      ret[key$1] = parent        ? parent.concat(child)        : Array.isArray(child) ? child : [child];    &#125;    return ret  &#125;;</code></pre><p>下面结合具体的例子看合并结果：</p><pre><code class="js">var Parent = Vue.extend(&#123;  watch: &#123;    &#39;test&#39;: function() &#123;      console.log(&#39;parent change&#39;)    &#125;  &#125;&#125;)var Child = Parent.extend(&#123;  watch: &#123;    &#39;test&#39;: &#123;      handler: function() &#123;        console.log(&#39;child change&#39;)      &#125;    &#125;  &#125;,  data() &#123;    return &#123;      test: 1    &#125;  &#125;&#125;)var vm = new Child().$mount(&#39;#app&#39;);vm.test = 2;// 输出结果parent changechild change</code></pre><p>简单总结一下：<strong>对于watch选项的合并，最终和父类选项合并成数组，并且数组的选项成员，可以是回调函数，选项对象，或者函数名。</strong></p><h2 id="1-10-props-methods-inject-computed合并"><a href="#1-10-props-methods-inject-computed合并" class="headerlink" title="1.10 props methods inject computed合并"></a>1.10 props methods inject computed合并</h2><p>源码的设计将<code>props.methods,inject,computed</code>归结为一类，他们的配置策略一致，简单概括就是，如果父类不存在选项，则返回子类选项，子类父类都存在时，用子类选项去覆盖父类选项。</p><pre><code class="js">// 其他选项合并策略strats.props =strats.methods =strats.inject =strats.computed = function (parentVal,childVal,vm,key) &#123;  if (childVal &amp;&amp; &quot;development&quot; !== &#39;production&#39;) &#123;    assertObjectType(key, childVal, vm);  &#125;  if (!parentVal) &#123; return childVal &#125; // 父类不存在该选项，则返回子类的选项  var ret = Object.create(null);  extend(ret, parentVal); //   if (childVal) &#123;     // 子类选项会覆盖父类选项的值    extend(ret, childVal); &#125;   return ret&#125;;</code></pre><h2 id="1-11-小结"><a href="#1-11-小结" class="headerlink" title="1.11 小结"></a>1.11 小结</h2><p>至此，五类选项合并的策略分析到此结束，回顾一下这一章节的内容，这一节是<code>Vue</code>源码分析的起手式，所以我们从<code>Vue</code>的引入出发，先大致了解了<code>Vue</code>在代码引入阶段做的操作，主要是对静态属性方法和原型上属性方法的定义和声明，这里并不需要精确了解到每个方法的功能和实现细节，当然我也相信你已经在实战中或多或少接触过这些方法的使用。接下来到文章的重点，<code>new Vue</code>是我们正确使用<code>Vue</code>进行开发的关键，而实例化阶段会对调用<code>_init</code>方法进行初始化，选项合并是初始化的第一步。选项合并会对系统内部定义的选项和子父类的选项进行合并。而<code>Vue</code>有相当丰富的选项合并策略，不管是内部的选项还是用户自定义的选项，他们都遵循内部约定好的合并策略。有了丰富的选项和严格的合并策略，<code>Vue</code>在指导开发上才显得更加完备。下一节会分析一个重要的概念，数据代理，它也是响应式系统的基础。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Vue </category>
          
          <category> vue2.x源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3.x常用基础</title>
      <link href="/front-end/vue3.x%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80/"/>
      <url>/front-end/vue3.x%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3扩展"><a href="#Vue3扩展" class="headerlink" title="Vue3扩展"></a>Vue3扩展</h1><h2 id="VUE3简介"><a href="#VUE3简介" class="headerlink" title="VUE3简介"></a>VUE3简介</h2><ul><li>2020年9月18日，Vue.js发布3.0版本，代号 One Piece(海贼王)</li></ul><h2 id="Vue3带来了什么"><a href="#Vue3带来了什么" class="headerlink" title="Vue3带来了什么"></a>Vue3带来了什么</h2><ol><li>响应性系统使用了 Proxy 对象，提升了性能和功能。</li><li>引入了组合式 API，更灵活地组织和重用组件逻辑。</li><li>虚拟 DOM 重写，优化了渲染性能。</li><li>减小了包体积，采用模块化方式加载功能。</li><li>提供原生的 TypeScript 支持，增强了类型推导和编辑器支持。</li><li>引入了 Fragments（片段），允许返回多个根元素。</li><li>新增 Teleport（传送）组件，可以在页面上任意位置渲染组件内容。</li><li>提供更好的自定义渲染器 API，增强了底层渲染层交互。</li><li>性能优化，包括更高效的更新机制、更小的包体积和更快的渲染速度。</li></ol><h2 id="创建Vue3-0工程"><a href="#创建Vue3-0工程" class="headerlink" title="创建Vue3.0工程"></a>创建Vue3.0工程</h2><h3 id="使用vue-cli创建"><a href="#使用vue-cli创建" class="headerlink" title="使用vue-cli创建"></a>使用vue-cli创建</h3><pre><code class="javascript">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上vue --version  或者 vue -V## 安装或者升级你的@vue/clinpm install -g @vue/cli## 创建vue create vue-text   /或者使用 node自带的(如果升级不了@vue/cli)    npx @vue/cli create my-app## 启动cd vue-textnpm run serve</code></pre><h3 id="使用vite创建"><a href="#使用vite创建" class="headerlink" title="使用vite创建"></a>使用vite创建</h3><pre><code class="javascript">## 什么是vite?   新一代前端构建工具## 优势1.开发环境中,无需打包操作，可快速的冷启动2.轻量快速的热重载(HMR)3.真正的按需编译，不再等待整个应用编译完成## 创建工程npm init  vite-app &lt;project-name&gt;## 进入工程目录cd &lt;project-name&gt;## 安装依赖npm install## 运行npm run dev</code></pre><h2 id="常用的Composition-API"><a href="#常用的Composition-API" class="headerlink" title="常用的Composition API"></a>常用的Composition API</h2><h3 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h3><ol><li>理解：vue3.0中的一个新的配置项。值为一个函数setup是所有Composition API(组合api) “表演的舞台”组件中所有用到的：数据，方法等等。均要配置在setup中</li><li>setup函数的两种返回值：<ul><li>若返回一个对象，则对象中的属性，方法，在模板中直接使用</li></ul></li></ol><ul><li>若返回画一个渲染函数，则可以自定义渲染内容(了解即可)</li></ul><ol start="3"><li>注意点:<ul><li>尽量不要与Vue2.x配置混用</li><li>但在setup中不能访问到Vue2.x配置(data,methsds,computed…)</li><li>如果重名，setup优先</li></ul></li><li>使用 <code>&lt;script setup&gt;</code> 语法糖 和不使用有一些本质区别：</li></ol><ul><li>Composition API： <code>&lt;script setup&gt;</code> 是 Vue 3 中引入的一个新特性，它基于 Composition API。使用 <code>&lt;script setup&gt;</code> 可以更方便地编写组件逻辑。你可以在 <code>&lt;script setup&gt;</code> 中使用 defineProps、defineEmits 和 withDefaults 等函数来定义组件的属性、事件和默认值。</li><li>单文件组件 (SFC) 的简化： <code>&lt;script setup&gt;</code> 可以让你在单个 <code>&lt;script&gt;</code> 标签中同时编写模板和脚本，从而简化了单文件组件的结构。你不再需要显式导入和设置组件选项，只需编写组件的模板和逻辑代码即可。</li><li>更好的错误提示：使用 <code>&lt;script setup&gt;</code> 可以提供更好的错误提示。由于模板和逻辑代码都在同一个上下文中编写，Vue 3 可以更准确地报告出错的位置和原因，从而帮助你更快地调试和修复问题。</li><li>也有一些限制<ol><li>生命周期钩子：在 <code>&lt;script setup&gt;</code> 中，无法直接使用传统的生命周期钩子函数（如 created、mounted 等），因为它们与 Composition API 的方式不兼容。相反，你可以使用 onMounted、onUpdated 和 onUnmounted 等 Composition API 提供的函数来实现类似的功能。</li><li>this 上下文：<code>&lt;script setup&gt;</code> 中没有访问 this 上下文的方式。如果你需要访问组件实例上的属性或方法，可以使用 getCurrentInstance() 函数来获取当前的组件实例。</li></ol></li></ul><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><ol><li>作用：定义一个响应式的数据</li><li>语法 ： const xxx &#x3D; ref(initValue)<ol><li>创建一个响应式的数据的引用对象</li></ol><ul><li>js 中需要 使用 .value 修改数据</li><li>模板中读取数据：不需要  .value  直接 <code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;div/&gt;</code></li></ul></li><li>备注：<ol><li>接收数据可以是基本类型，也可以是对象类型</li></ol><ul><li>基本类型的数据：响应式依然是靠Object.defineProperty() 的get和set</li><li>对象类型的数据：内部求助了Vue3.0中的一个新的函数  - reactive</li></ul></li></ol><h3 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h3><ol><li>作用：定义一个对象类型的响应式数据(基本类型别用它，用ref函数)</li><li>语法 const 代理对象  &#x3D; reactive(被代理对象)接收一个对象或者数组,返回一个代理器对象(proxy对象)</li><li>reactive定义的响应数据是深层次的</li><li>内部基于ES6的proxy，通过代理对象对原数据内部数据都是响应式的</li></ol><h3 id="ref和reactive本质使用区别"><a href="#ref和reactive本质使用区别" class="headerlink" title="ref和reactive本质使用区别"></a>ref和reactive本质使用区别</h3><ol><li><p>ref: ref 函数用于创建一个包装器对象，将普通的数据类型（如基本类型、对象）转换为响应式数据。这个包装器对象具有 value 属性，该属性保存着实际的数据值。当对 ref 包装器对象进行访问和修改时，实际上是通过操作 value 属性来实现的。这意味着你需要通过 .value 来访问和修改 ref 包装器对象中的数据。</p></li><li><p>reactive: reactive 函数用于将普通对象转换为响应式对象。在内部，reactive 函数会使用 Proxy 对象对原始对象进行代理，从而追踪对对象的访问和修改。这样，当对响应式对象进行访问和修改时，Vue 会自动检测到并触发相应的更新。与 ref 不同的是，你可以直接访问和修改 reactive 对象中的属性，而不需要使用 .value。</p></li><li><p>其实就是reactive 直接修改对象，而ref需要 <code>.value</code></p></li></ol><h1 id="vue3-X脚手架相关"><a href="#vue3-X脚手架相关" class="headerlink" title="vue3.X脚手架相关"></a>vue3.X脚手架相关</h1><h2 id="文件的作用"><a href="#文件的作用" class="headerlink" title="文件的作用"></a>文件的作用</h2><pre><code class="javascript">/** * shims-vue.d.ts的作用 * 为了 typescript 做的适配定义文件，因为.vue 文件不是一个常规的文件类型，ts 是不能理解 vue 文件是干嘛的， * 加这一段是是告诉 ts，vue 文件是这种类型的。 * 可以把这一段删除，会发现 import 的所有 vue 类型的文件都会报错。 */declare module &#39;*.vue&#39; &#123; //declare声明宣告， 声明一个ambient module(即:没有内部实现的 module声明)   import Vue from &#39;vue&#39;  export default Vue&#125;declare module &#39;vue-echarts&#39;  // 引入vue-echarts&lt;script lang=&quot;ts&quot;&gt;    /* eslint-disable @typescript-eslint/camelcase */    import &#123; Vue, Component, Watch &#125; from &#39;vue-property-decorator&#39;    import ECharts from &#39;vue-echarts&#39; //报错,按上面的方法在shims-vue.d.ts文件中引入即可    import &#39;echarts/lib/chart/line&#39;    import &#39;echarts/lib/chart/pie&#39;    import &#39;echarts/lib/component/tooltip&#39;&lt;/script&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2.x常用基础</title>
      <link href="/front-end/vue2.x%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80/"/>
      <url>/front-end/vue2.x%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue基础"><a href="#Vue基础" class="headerlink" title="Vue基础"></a>Vue基础</h1><h2 id="vue生命周期和生命周期钩子函数"><a href="#vue生命周期和生命周期钩子函数" class="headerlink" title="vue生命周期和生命周期钩子函数"></a>vue生命周期和生命周期钩子函数</h2><p><strong>beforecreated</strong>：在实例初始化之后，el 和 data 并未初始化（这个时期，this变量还不能使用，在data下的数据，和methods下的方法，watcher中的事件都不能获得到；）<br><strong>created</strong>:完成了 data 数据的初始化，el没有（这个时候可以操作vue实例中的数据和各种方法，但是还不能对”dom”节点进行操作；）<br><strong>beforeMount</strong>：完成了 el 和 data 初始化这里的el是虚拟的dom；<br><strong>mounted</strong> ：完成挂载，在这发起后端请求，拿回数据，配合路由钩子做一些事情（挂载完毕，这时dom节点被渲染到文档内，一些需要dom的操作在此时才能正常进行），定义定时器</p><p>以下2个生命其实对应的是vue数据发生更新的时候，操作虚拟dom更新为真实dom的2个钩子<br><strong>beforeUpdate</strong>：数据是新的，但是页面是旧的(此时虚拟 DOM 已经更新，但尚未应用到真实的 DOM 上)<br><strong>update</strong>：数据和页面保持同步了，(此时虚拟 DOM 已经更新，并且已经应用到真实的 DOM 上)</p><p><strong>beforeDestory</strong>：你确认删除定时器吗？<br><strong>destoryed</strong> ：当前组件已被删除，(其实就是页面的退出)</p><p><strong>activated</strong>：keep-alive 专属，组件被激活时调用<br><strong>deactivated</strong>：keep-alive 专属，组件失效时调用</p><p><strong>A、什么是vue生命周期？</strong><br>Vue 实例从创建到销毁的过程，就是生命周期。也就是从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。<br><strong>B、vue生命周期的作用是什么？</strong><br>它的生命周期有多个事件钩子,让我们在控制整个Vue实例的过程时更容易形成好的逻辑。<br><strong>C、vue生命周期总共有几个阶段？</strong><br>它可以总共分为8个阶段：创建前&#x2F;后, 载入前&#x2F;后,更新前&#x2F;后,销毁前&#x2F;销毁后<br><strong>D、第一次页面加载会触发哪几个钩子？</strong><br>第一次页面加载时会触发 beforeCreate, created, beforeMount, mounted 这几个钩子<br><strong>E、DOM 渲染在 哪个周期中就已经完成？</strong><br>DOM 渲染在 mounted 中就已经完成了。<br><strong>F、简单描述每个周期具体适合哪些场景？</strong></p><ol><li>beforecreate:可以在加个loading事件，在加载实例是触发</li><li>created:初始化完成时的事件写在这里，如在这结束loading事件，异步请求也适宜在这里调用</li><li>mounted:异步请求，启动定时器，绑定自定义事件，订阅消息（这里的异步请求可能会触发重绘回流，所以性能没有在created好）</li><li>updated:执行与数据更新相关的任务，例如响应式数据的重新渲染、DOM 操作或集成第三方库（mounted只会触发一次，它可以无数次）</li><li>beforeDestroy:清除定时器，解绑自定义事件，取消订阅,一般不再这里在操作数据，即使操作了，页面也不会更新了</li></ol><h2 id="vue-生命周期执行顺序-父子组件"><a href="#vue-生命周期执行顺序-父子组件" class="headerlink" title="vue 生命周期执行顺序(父子组件)"></a>vue 生命周期执行顺序(父子组件)</h2><ol><li><p>加载渲染过程：<br>父beforecreate -&gt; 父created -&gt; 父beforemount -&gt; 父mounted -&gt; 子created -&gt; 子beforemount<br>-&gt;  子mounted -&gt; 父mounted</p></li><li><p>子组件更新过程：<br>父beforeUpdate -&gt; 子beforeUpdate -&gt; 子updated -&gt; 父updated</p></li><li><p>父组件更新过程：<br>父beforeUpdate -&gt; 父updated</p></li><li><p>销毁过程：<br>父beforedestroy -&gt; 子beforedestroy -&gt; 子destroy  -&gt; 父destroy</p></li></ol><p> 拓展:如果有缓存keep-alive。那么还会触发actived钩子，退出时触发deactived。后续再进入只会触发actived钩子了。所以说频繁触发的函数放在active里面，执行一次的放在mounted里面。</p><p>父子组件生命周期的触发顺序是:参考洋葱模型。</p><p>先是父组件的生命周期beforecreate，created，beforemount，子组件beforecreate，created，beforemount，子组件的mounted，父组件的mounted。因为要再父组件渲染前把子组件的数据渲染到父组件里面，所以在父组件dom挂载前mounted渲染前，先加载子组件的生命周期。</p><h2 id="v-show与v-if的区别"><a href="#v-show与v-if的区别" class="headerlink" title="v-show与v-if的区别"></a>v-show与v-if的区别</h2><p>v-show是css切换，v-if是完整的销毁和重新创建<br>使用频繁切换时用v-show,运行时较少改变时用v-if<br>V-if&#x3D;’false’v-if是条件渲染，当false的时候不会渲染<br>使用v-if的时候，如果值为false，那么页面将不会有这个html标签生成<br>v-show则是不管值是为true还是false，html元素都会存在，只是css中的display显示或隐藏<br>v-show 仅仅控制元素的显示方式，将 display 属性在 block 和 none 来回切换；而v-if会控制这个 DOM 节点的存在与否。当我们需要经常切换某个元素的显示&#x2F;隐藏时，使用v-show会更加节省性能上的开销；当只需要一次显示或隐藏时，使用v-if更加合理。</p><h2 id="开发中常用的指令"><a href="#开发中常用的指令" class="headerlink" title="开发中常用的指令"></a>开发中常用的指令</h2><p>v-model:一般用在表达输入，很轻松的实现表单控件和数据的双向绑定</p><pre><code class="javascript">v-html：更新元素的innerHTML&lt;p v-html=&quot;msg&quot;&gt;&lt;/p&gt;new Vue(&#123;    el : &quot;#app&quot;,    data : &#123;        msg : &quot;&lt;h1&gt;这是一个h1元素内容&lt;/h1&gt;&quot;    &#125;&#125;);</code></pre><p>v-show与v-if：条件渲染，注意二者区别<br>v-on:click:可以简写为@click,@绑定一个事件。如果事件触发了，就可以指定事件的处理函数<br>v-for：基于源数据多次渲染元素或模板<br>v-bind:当表达式的值改变时，将其产生的连带影响，响应式地作用于DOM语法<br>v-bind:title&#x3D;”msg”简写： :title&#x3D;”msg”</p><pre><code class="javascript">v-clock解决页面闪烁问题如果网速慢，而该标签内容是变量没有请求响应回来的时候，页面上先不显示该标签（vue给该标签加了css样式），当响应回来的时候改标签默认将css样式去除。此指令可以解决使用插值表达式页面闪烁问题将该指令加在html标签中时，可以在该文件中加style属性为display：none，例子如下：&lt;div class=&quot;#app&quot; v-cloak&gt;    &lt;p&gt;&#123;&#123;name&#125;&#125;&lt;/p&gt;&lt;/div&gt;[v-cloak] &#123;    display: none;&#125;</code></pre><h2 id="绑定class的数组用法"><a href="#绑定class的数组用法" class="headerlink" title="绑定class的数组用法"></a>绑定class的数组用法</h2><pre><code class="javascript">1.对象方法:class=&quot;&#123;&#39;orange&#39;:isRipe, &#39;green&#39;:isNotRipe&#125;&quot;:class=&quot;tindex == index ? &#39;aaa&#39;:&#39;bbb&#39;&quot;2.数组方法:class=&quot;[class1,class2]&quot;3.行内:style=&quot;&#123;color:color,fontSize:fontSize+&#39;px&#39;&#125;&quot;</code></pre><h2 id="计算属性和methods"><a href="#计算属性和methods" class="headerlink" title="计算属性和methods"></a>计算属性和methods</h2><pre><code class="javascript">computed:&#123;    fullName:&#123;        //get有什么作用? 当有人读取实例(data)上的数据时候,get就会被调用，返回值可以是data上的值        //get什么时候调用? 1.初次读取时，2.所依赖的数据发生变化的时候        get()&#123;  //fullName被读取时调用            return this.firstName        &#125;,        //set什么时候调用? 当fullName被修改时        set(value)&#123;//fullName被修改时调用                 //非必须写            console.log(&#39;修改fullName后的值&#39;,value)        &#125;    &#125;    //简写方式    fullNamejianxie()&#123;        return this.firstName  + &#39;jianxie&#39;    &#125;&#125;1.定义:要用的属性存在，要通过已有的属性计算而来2.计算属性的底层借助Object.defineProperty()方法提供gettter/setter3.get函数什么时候调用?   (1).初次读取时     (2).所依赖的数据发生变化的时4.优势:与methods实现相比，内部有缓存机制(复用),效率更高,调试方便5.备注:     (1).计算属性最终会出现在vm(实例)上，直接读取即可     (2).如果计算属性被修改，那必须写set去响应数据，且set中要引起计算时依赖的数据发送变化</code></pre><h2 id="computed-计算属性-和watch-监听-的对比"><a href="#computed-计算属性-和watch-监听-的对比" class="headerlink" title="computed(计算属性)和watch(监听)的对比"></a>computed(计算属性)和watch(监听)的对比</h2><p><strong>computed</strong></p><pre><code class="javascript">computed是计算属性，也就是计算值，它更多用于计算值的场景computed具有缓存性，computed的值在getter执行后是会缓存的，只有在它依赖的属性值改变之后，下一次获取computed的值时重新调用对应的getter来计算computed适用于计算比较消耗性能的计算场景</code></pre><p><strong>watch</strong></p><pre><code class="javascript">&lt;template&gt;    &lt;div class=&quot;container&quot;&gt;        &lt;!-- 1.监听实例上的基础数据类型 --&gt;        &lt;button @click=&quot;isHot = !isHot&quot;&gt;&#123;&#123;isHot&#125;&#125;&lt;/button&gt;        &lt;hr&gt;        &lt;!-- 2.监听引用类型的数据 --&gt;        &lt;button @click=&quot;obj.age++&quot;&gt;&#123;&#123;obj.age&#125;&#125;&lt;/button&gt;                &lt;hr&gt;        &lt;!-- 3.修改对象类型的数据变成字符串 --&gt;        &lt;button @click=&quot;obj = &#39;变成其他数据类型了&#39;&quot;&gt;&#123;&#123;obj&#125;&#125;&lt;/button&gt;    &lt;/div&gt;&lt;/template&gt;&lt;script&gt;    export default &#123;        name: &#39;index&#39;,        data() &#123;            return &#123;                isHot : true,                obj :&#123;                    name: &#39;js&#39;,                    age : 18                &#125;               &#125;        &#125;,        watch:&#123;            isHot:&#123;                immediate : true, //初始化的时候，让handler调用一下                handler(newValue,oldValue)&#123; //handle什么时候调用? isHot发送变化时候                    console.log(&#39;isHot被修改了&#39;,newValue,oldValue)                &#125;            &#125;,            // &#39;obj.age&#39; :&#123;             //      handler(newValue,oldValue)&#123;             //         console.log(&#39;age被修改了&#39;,newValue,oldValue)            //     &#125;            //      //监视多级结构中某个属性的变化(不建议这么写，如果有很多个值呢？)            // &#125;,            // obj:&#123;            //     //这么写即使是age的值发送改变，也不会有任何操作。            //     //因为此时监视的是 obj下的整个对象,除非对象变成其他类型的数据才会触发            //     handler(newValue,oldValue)&#123;             //         console.log(&#39;obj被修改了&#39;,newValue,oldValue)            //     &#125;            // &#125;,            obj:&#123;                //深度监视                 //不管是obj的数据类型变了，还是里面的值变了                deep : true,                handler(newValue,oldValue)&#123;                      console.log(&#39;obj被修改了&#39;,newValue,oldValue)                &#125;            &#125;,            // 简写方式 =&gt;            // 什么时候的时候才能简写?   只需要用到handler的时候            isHot(newValue,oldValue)&#123;                console.log(&#39;isHot被修改了&#39;,newValue,oldValue)              &#125;        &#125;    &#125;&lt;/script&gt;&lt;style lang=&quot;less&quot;&gt;        .container&#123;            width: 100VW;            height: 100VH;        &#125;&lt;/style&gt;1.watch可以监听异步任务,计算属性无法开启异步任务&lt;template&gt;  &lt;div class=&quot;container&quot;&gt;    &lt;button @click=&quot;obj = &#39;变成其他数据类型了&#39;&quot;&gt;&#123;&#123; obj &#125;&#125;&lt;/button&gt;    &lt;div&gt;      &#123;&#123; ahhh &#125;&#125;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  name: &quot;index&quot;,  data() &#123;    return &#123;      ahhh: 1,      obj: &#123;        name: &quot;js&quot;,        age: 18,      &#125;,    &#125;;  &#125;,  watch: &#123;    obj: &#123;      deep: true,      handler(newValue, oldValue) &#123;        console.log(&quot;obj被修改了&quot;, newValue, oldValue);        setTimeout(() =&gt; &#123;              //这里注意要用箭头函数(this会一层一层往外找)，不能使用普通函数（this执行windows）            //开启异步任务          console.log(&quot;this&quot;, this);          this.ahhh += 1;        &#125;, 1000);      &#125;,    &#125;,  &#125;,&#125;;&lt;/script&gt;&lt;style lang=&quot;less&quot;&gt;.container &#123;  width: 100vw;  height: 100vh;&#125;&lt;/style&gt;</code></pre><h2 id="vue组件的scoped属性的作用"><a href="#vue组件的scoped属性的作用" class="headerlink" title="vue组件的scoped属性的作用"></a>vue组件的scoped属性的作用</h2><p>在style标签上添加scoped属性，以表示它的样式作用于当下的模块，很好的实现了样式私有化的目的；<br>但是也得慎用：样式不易（可）修改，而很多时候，我们是需要对公共组件的样式做微调的；</p><p><strong>解决办法：</strong></p><pre><code class="javascript">①：使用混合型的css样式：（混合使用全局跟本地的样式） &lt;style&gt; /* 全局样式 */ &lt;/style&gt;&lt;style scoped&gt; /* 本地样式 */ &lt;/style&gt;②：深度作用选择器（&gt;&gt;&gt;）如果你希望 scoped 样式中的一个选择器能够作用得“更深”，例如影响子组件，你可以使用 &gt;&gt;&gt; 操作符：&lt;style scoped&gt;    .a &gt;&gt;&gt; .b &#123; /* ... */ &#125; &lt;/style&gt;</code></pre><h2 id="vue常用修饰符"><a href="#vue常用修饰符" class="headerlink" title="vue常用修饰符"></a>vue常用修饰符</h2><p><strong>修饰符分为：一般修饰符，事件修身符，按键、系统</strong></p><p><strong>①一般修饰符</strong></p><ol><li><p>.lazy：v-model 在每次 input 事件触发后将输入框的值与数据进行同步 。你可以添加 lazy 修饰符，从而转变为使用 change 事件进行同步</p><input v-model.lazy="msg" > </li><li><p>.number：将用户输入的内容转换为数字类型</p><input v-model.number="age" type="number"></li><li><p>.trim：如果要自动过滤用户输入的首尾空白字符</p><input v-model.trim='trim'></li></ol><p><strong>② 事件修饰符</strong></p><pre><code class="javascript">1. 阻止单击事件继续传播 &lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;  2.提交事件不再重载页面&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt; 3.添加事件监听器时使用事件捕获模式(即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理)&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;   4.只当在 event.target 是当前元素自身时触发处理函数(即事件不是从内部元素触发的)&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt; 5.点击事件将只会触发一次 &lt;a v-on:click.once=&quot;doThis&quot;&gt;&lt;/a&gt;  6.vue组件添加事件&lt;Tabber @click.native=&quot;doThis&quot;&gt;&lt;/Tabbar&gt; 7.修饰符可以串联&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt; </code></pre><p><strong>③按键修饰符</strong></p><p>.enter<br>.tab<br>.delete (捕获“删除”和“退格”键)<br>.esc<br>.space<br>.up<br>.down<br>.left<br>.right<br>.ctrl<br>.alt<br>.shift<br>.meta<br><input v-on:keyup.enter="submit"> 或者 &lt;input @keyup.enter&#x3D;”submit”&gt;</p><p><strong>④系统修饰键 （可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器）</strong></p><p>.ctrl<br>.alt<br>.shift<br>.meta<br>&lt;input @keyup.alt.67&#x3D;”clear”&gt; 或者 &lt;div @click.ctrl&#x3D;”doSomething”&gt;Do something</div><!-- Ctrl + Click --></p><p><strong>⑤特殊修饰符</strong></p><p>.sync: 用于实现父组件与子组件之间的双向数据绑定<br><child-component :value.sync="parentValue"></child-component></p><pre><code class="text">子组件更新父组件的数据：当在一个子组件中需要修改父组件的数据时，可以使用 v-model 的 sync 修饰符。通过在子组件中使用 v-model:sync 绑定一个父组件的属性，子组件可以直接修改该属性的值，并且父组件中对应的数据也会更新。子组件和父组件之间的双向绑定：有时候我们需要在父组件和子组件之间实现双向数据绑定，即当子组件的值改变时，父组件的数据也要随之更新，反之亦然。在这种情况下，可以使用 v-model 的 sync 修饰符实现双向绑定。状态管理库的双向数据绑定：如果你在 Vue.js 项目中使用了像 Vuex 这样的状态管理库，你可能希望能够在组件中实现双向数据绑定到 Vuex 的状态。使用 v-model 的 sync 修饰符可以帮助你实现与 Vuex 状态之间的便捷双向数据绑定。</code></pre><h2 id="v-on可以监听多个事件处理吗？（可以的）"><a href="#v-on可以监听多个事件处理吗？（可以的）" class="headerlink" title="v-on可以监听多个事件处理吗？（可以的）"></a>v-on可以监听多个事件处理吗？（可以的）</h2><p>一个元素绑定多个事件的两种写法，一个事件绑定多个函数的两种写法，修饰符的使用。</p><pre><code class="js">&lt;a style=&quot;cursor:default&quot; v-on=&#39;&#123;click:DoSomething,mouseleave:MouseLeave&#125;&#39;&gt;doSomething&lt;/a&gt;</code></pre><p>在method方法里面分别写两个事件；</p><pre><code class="js">&lt;button @click=&quot;a(),b()&quot;&gt;点我ab&lt;/button&gt;</code></pre><h2 id="vue事件中使用event对象"><a href="#vue事件中使用event对象" class="headerlink" title="vue事件中使用event对象"></a>vue事件中使用event对象</h2><pre><code class="js">&lt;template&gt;    //不加括号的的时候，直接拿到event对象&lt;button @click=&quot;btn&quot;&gt;点击&lt;/button&gt;  &lt;/template&gt;btn(event)&#123;    console.log(&#39;event&#39;,event)&#125;//现在的需求是点击事件直接传值过来，但是也要event对象&lt;template&gt;    //加了括号&lt;button @click=&quot;btn($event,1,2)&quot;&gt;点击&lt;/button&gt;  &lt;/template&gt;btn(event,...a)&#123;    console.log(&#39;event&#39;,event)    console.log(&#39;a&#39;,a)  // [1,2]&#125;</code></pre><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>nextTick 的使用场景包括</li></ol><ul><li>在修改数据后，想要立即基于更新后的视图进行操作。</li><li>在 Vue 生命周期钩子函数中，想要等待视图更新完成后执行其他逻辑。</li><li>在使用 $refs 访问组件实例或原生 DOM 元素时，想要确保能够访问到正确的实例或元素。</li></ul><ol start="3"><li>执行原理(简单来说，nextTick 方法会延迟执行回调函数，等待当前代码块执行完成并进入下一个 DOM 更新循环时，再执行回调函数。这样可以确保在回调函数中访问到最新的 DOM 状态。)</li></ol><ul><li>当你调用 nextTick(callback) 方法时，Vue 会将这个回调函数添加到一个队列中，而不是立即执行它。</li><li>在当前 JavaScript 执行的上下文中，Vue 会尽可能快地执行队列中的所有回调函数。</li><li>在执行完成当前 JavaScript 执行上下文后（即完成当前代码片段的执行），Vue 会开始执行下一个 DOM 更新循环。</li><li>在下一个 DOM 更新循环开始时，Vue 会清空队列，并按照添加的顺序依次执行队列中的回调函数。</li></ul><pre><code class="js">比如你想让一个dom元素显示，然后下一步去获取这个元素的offsetWidth，最后你获取到的会是0。openSubmenu() &#123;    this.show = true //获取不到宽度    this.$nextTick(() =&gt;       //这里才可以 let w = this.$refs.submenu.offsetWidth;   &#125;)&#125;</code></pre><h2 id="Vue组件间传递数据的方式"><a href="#Vue组件间传递数据的方式" class="headerlink" title="Vue组件间传递数据的方式"></a>Vue组件间传递数据的方式</h2><h3 id="props配置项-父传子-or-子传父"><a href="#props配置项-父传子-or-子传父" class="headerlink" title="props配置项(父传子 or 子传父)"></a>props配置项(父传子 or 子传父)</h3><ol><li><p>功能：让组件接收外部传过来的数据</p></li><li><p>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></p></li><li><p>接收数据：</p><ol><li><p>第一种方式（只接收）：<code>props:[&#39;name&#39;] </code></p></li><li><p>第二种方式（限制类型）：<code>props:&#123;name:String&#125;</code></p></li><li><p>第三种方式（限制类型、限制必要性、指定默认值）：</p><pre><code class="js">props:&#123;    name:&#123;    type:String, //类型    required:true, //必要性    default:&#39;老王&#39; //默认值    &#125;&#125;</code></pre></li></ol><blockquote><p>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p></blockquote></li></ol><h3 id="组件的自定义事件-子传父"><a href="#组件的自定义事件-子传父" class="headerlink" title="组件的自定义事件(子传父)"></a>组件的自定义事件(子传父)</h3><ol><li><p>一种组件间通信的方式，适用于：<strong style="color:red">子组件 &#x3D;&#x3D;&#x3D;&gt; 父组件</strong></p></li><li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<span style="color:red">事件的回调在A中</span>）。</p></li><li><p>绑定自定义事件：</p><ol><li><p>第一种方式，在父组件中：<code>&lt;Demo @dataarr=&quot;test&quot;/&gt;</code>  或 <code>&lt;Demo v-on:dataarr=&quot;test&quot;/&gt;</code></p></li><li><p>第二种方式，在父组件中：</p><pre><code class="js">&lt;Demo ref=&quot;demo&quot;/&gt;......mounted()&#123;   this.$refs.xxx.$on(&#39;dataarr&#39;,this.test)&#125;</code></pre></li><li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p></li></ol></li><li><p>触发自定义事件：<code>this.$emit(&#39;dataarr&#39;,数据)</code></p></li><li><p>解绑自定义事件<code>this.$off(&#39;dataarr&#39;)</code></p></li><li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符。</p></li><li><p>注意：通过<code>this.$refs.xxx.$on(&#39;dataarr&#39;,回调)</code>绑定自定义事件时，回调<span style="color:red">要么配置在methods中</span>，<span style="color:red">要么用箭头函数</span>，否则this指向会出问题！</p></li></ol><h3 id="全局事件总线（GlobalEventBus）"><a href="#全局事件总线（GlobalEventBus）" class="headerlink" title="全局事件总线（GlobalEventBus）"></a>全局事件总线（GlobalEventBus）</h3><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>安装全局事件总线：</p><pre><code class="js">new Vue(&#123;    ......    beforeCreate() &#123;        Vue.prototype.$bus = this //安装全局事件总线，$bus就是当前应用的vm    &#125;,    ......&#125;) </code></pre></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<span style="color:red">回调留在A组件自身。</span></p><pre><code class="js">methods()&#123;  demo(data)&#123;......&#125;&#125;......mounted() &#123;  this.$bus.$on(&#39;xxxx&#39;,this.demo)&#125;</code></pre></li><li><p>提供数据：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></p></li></ol></li><li><p>最好在beforeDestroy钩子中，用$off去解绑<span style="color:red">当前组件所用到的</span>事件。</p></li></ol><h3 id="消息订阅与发布（pubsub）"><a href="#消息订阅与发布（pubsub）" class="headerlink" title="消息订阅与发布（pubsub）"></a>消息订阅与发布（pubsub）</h3><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>使用步骤：</p><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<span style="color:red">回调留在A组件自身。</span></p><pre><code class="js">methods()&#123;  demo(data)&#123;......&#125;&#125;......mounted() &#123;  this.pid = pubsub.subscribe(&#39;xxx&#39;,this.demo) //订阅消息&#125;</code></pre></li><li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p></li><li><p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅。</span></p></li></ol></li></ol><h3 id="prvide-amp-inject"><a href="#prvide-amp-inject" class="headerlink" title="prvide &amp; inject"></a>prvide &amp; inject</h3><h3 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h3><pre><code class="javascript">Vue 组件间通信只要指以下 3 类通信：父子组件通信、隔代组件通信、兄弟组件通信，下面我们分别介绍每种通信方式且会说明此种方法可适用于哪类组件间通信。（1）props / $emit 适用 父子组件通信这种方法是 Vue 组件的基础，相信大部分同学耳闻能详，所以此处就不举例展开介绍。（2）ref 与 $parent / $children适用 父子组件通信ref：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例$parent / $children：访问父 / 子实例（3）EventBus （$emit / $on）适用于 父子、隔代、兄弟组件通信这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子、隔代、兄弟组件。（4）$attrs/$listeners适用于 隔代组件通信$attrs：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 ( class 和 style 除外 )。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 ( class 和 style 除外 )，并且可以通过 v-bind=&quot;$attrs&quot; 传入内部组件。通常配合 inheritAttrs 选项一起使用。$listeners：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=&quot;$listeners&quot; 传入内部组件（5）provide / inject适用于 隔代组件通信祖先组件中通过 provider 来提供变量，然后在子孙组件中通过 inject 来注入变量。provide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。（6）Vuex适用于 父子、隔代、兄弟组件通信Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。</code></pre><pre><code class="javascript">//父组件需要拿到子组件的数据和实例父组件调用子组件的方法 :this.$refs.yeluosen.childMethod()//子组件拿到父组件的实例 (可以处理父组件分数据和调用父组件的方法) this.$parent</code></pre><h2 id="vue更新响应式的缺陷和-set的使用"><a href="#vue更新响应式的缺陷和-set的使用" class="headerlink" title="vue更新响应式的缺陷和$set的使用"></a>vue更新响应式的缺陷和$set的使用</h2><pre><code class="javascript">&lt;template&gt;  &lt;div class=&quot;container&quot;&gt;    &lt;ul&gt;      &lt;li v-for=&quot;(item, index) in person&quot; :key=&quot;index&quot;&gt;        &#123;&#123; item &#125;&#125;      &lt;/li&gt;    &lt;/ul&gt;    &lt;button @click=&quot;addsex&quot;&gt;手动点击给对象添加属性&lt;/button&gt;    &lt;hr /&gt;    &lt;ul&gt;      &lt;li v-for=&quot;(item, index) in hobby&quot; :key=&quot;index&quot;&gt;        &#123;&#123; item &#125;&#125;      &lt;/li&gt;    &lt;/ul&gt;    &lt;button @click=&quot;addhobby&quot;&gt;手动点击给数组修改属性&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  name: &quot;index&quot;,  data() &#123;    return &#123;      person: &#123;        name: &quot;jack&quot;,        age: 18,      &#125;,      hobby: [&quot;抽烟&quot;, &quot;喝酒&quot;, &quot;烫头&quot;],      persons: [        &#123; name: &quot;gsq&quot;, age: 18 ,status : false &#125;,        &#123; name: &quot;gsq02&quot;, age: 19,status : false &#125;,        &#123; name: &quot;gsq03&quot;, age: 20,status : false &#125;,      ],    &#125;;  &#125;,  methods: &#123;    addsex() &#123;      // 对象不能这么添加      // this.person.sex = &#39;男&#39;      //正确写法      this.$set(this.person, &quot;sex&quot;, &quot;男&quot;)    &#125;,    addhobby()&#123;      // 必须使用响应式的数组方法可以更新/或者使用this.$set      // 哪些数组是相应式的？      // push,pop,shift,unshift,splice,sort,reverse        // this.hobby.splice(0,1,&#39;哈哈&#39;)      // 或者使用      this.$set(this.hobby,0,&#39;哈哈&#39;)      &#125;  &#125;,&#125;;&lt;/script&gt;&lt;style lang=&quot;less&quot;&gt;.container &#123;  width: 100vw;  height: 100vh;&#125;&lt;/style&gt;Vue监视数据的原理：1. vue会监视data中所有层次的数据。2. 如何监测对象中的数据？通过setter实现监视，且要在new Vue时就传入要监测的数据。    (1).对象中后追加的属性，Vue默认不做响应式处理    (2).如需给后添加的属性做响应式，请使用如下API：        Vue.set(target，propertyName/index，value) 或         vm.$set(target，propertyName/index，value)3. 如何监测数组中的数据？通过包裹数组更新元素的方法实现，本质就是做了两件事：    (1).调用原生对应的方法对数组进行更新。    (2).重新解析模板，进而更新页面。4.在Vue修改数组中的某个元素一定要用如下方法：    1.使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()    2.Vue.set() 或 vm.$set()特别注意：Vue.set() 和 vm.$set() 不能给vm 或 vm的根数据对象 添加属性！！！</code></pre><h2 id="Vue获取dom元素节点并操作元素的样式"><a href="#Vue获取dom元素节点并操作元素的样式" class="headerlink" title="Vue获取dom元素节点并操作元素的样式"></a>Vue获取dom元素节点并操作元素的样式</h2><pre><code class="text">$refs 获取的是组件对象$el 获取的是dom节点1.获取到元素节点(这里通过this.$refs获取元素节点)this.$refs.xxxxx.$el2.操作元素的样式this.$refs.num1Underline.$el.style.transform = &#39;scaleX(1)&#39;这种方法需要注意的是$el 用于获取vue挂载的实例的dom对象，如果不添加$el则获取不到style的属性值，会打印 TypeError: Cannot read property &#39;style&#39; of undefined 错误，这个错误大家一定都很熟悉，是类型错误，没有访问到dom元素</code></pre><h2 id="forceUpdate"><a href="#forceUpdate" class="headerlink" title="forceUpdate"></a>forceUpdate</h2><ol><li>语法：<code>this.$forceUpdate()</code></li><li>应用场景包括：</li></ol><ul><li>当组件的数据发生变化，但没有触发响应式更新时，可以使用 forceUpdate 强制组件重新渲染。这种情况通常出现在使用了非响应式数据或直接修改了响应式数据的属性（例如通过 this.$set 或直接修改数组下标访问元素）。</li><li>当你需要手动触发组件的重新渲染，而不是等待依赖的数据发生变化时，也可以使用 forceUpdate。这对于一些特殊需求或性能优化可能是必要的。</li></ul><ol start="2"><li>缺点：</li></ol><ul><li>使用 forceUpdate 会跳过虚拟 DOM 的比对过程，直接进行重新渲染。这可能会带来性能上的损耗</li></ul><h2 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin(混入)"></a>mixin(混入)</h2><pre><code class="javascript">1. 功能：可以把多个组件共用的配置提取成一个混入对象2. 使用方式：   第一步定义混合：</code></pre><p>   {<br>       data(){….},<br>       methods:{….}<br>       ….<br>   }</p><pre><code>第二步使用混入：​全局混入：```Vue.mixin(xxx)```​局部混入：```mixins:[&#39;xxx&#39;]```</code></pre><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><pre><code class="javascript">1. 功能：用于增强Vue2. 本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。3. 定义插件： // 创建一个名为 MyPlugin 的插件对象const MyPlugin = &#123;  // 在 install 方法中定义插件逻辑  install(Vue) &#123;    // 添加全局方法或属性    Vue.myGlobalMethod = function () &#123;      console.log(&#39;This is a global method&#39;);    &#125;;    // 添加一个全局指令    Vue.directive(&#39;my-directive&#39;, &#123;      bind(el, binding) &#123;        el.innerHTML = `My directive value: $&#123;binding.value&#125;`;      &#125;,    &#125;);    // 添加一个全局过滤器    Vue.filter(&#39;my-filter&#39;, function (value) &#123;      return value.toUpperCase();    &#125;);    // 添加一个全局混入    Vue.mixin(&#123;      created() &#123;        console.log(&#39;This is a global mixin&#39;);      &#125;,    &#125;);  &#125;,&#125;;// 使用插件Vue.use(MyPlugin);</code></pre><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><ol><li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 &#x3D;&#x3D;&#x3D;&gt; 子组件</strong> 。</p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p><pre><code class="vue">父组件中：        &lt;Category&gt;           &lt;div&gt;html结构1&lt;/div&gt;        &lt;/Category&gt;子组件中：        &lt;template&gt;            &lt;div&gt;               &lt;!-- 定义插槽 --&gt;               &lt;slot&gt;插槽默认内容...&lt;/slot&gt;            &lt;/div&gt;        &lt;/template&gt;</code></pre></li><li><p>具名插槽：</p><pre><code class="vue">父组件中：        &lt;Category&gt;            &lt;template slot=&quot;center&quot;&gt;              &lt;div&gt;html结构1&lt;/div&gt;            &lt;/template&gt;            &lt;template v-slot:footer&gt;               &lt;div&gt;html结构2&lt;/div&gt;            &lt;/template&gt;        &lt;/Category&gt;子组件中：        &lt;template&gt;            &lt;div&gt;               &lt;!-- 定义插槽 --&gt;               &lt;slot name=&quot;center&quot;&gt;插槽默认内容...&lt;/slot&gt;               &lt;slot name=&quot;footer&quot;&gt;插槽默认内容...&lt;/slot&gt;            &lt;/div&gt;        &lt;/template&gt;</code></pre></li><li><p>作用域插槽：</p><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p></li><li><p>具体编码：</p><pre><code class="vue">父组件中：        &lt;Category&gt;            &lt;template scope=&quot;scopeData&quot;&gt;                &lt;!-- 生成的是ul列表 --&gt;                &lt;ul&gt;                    &lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;                &lt;/ul&gt;            &lt;/template&gt;        &lt;/Category&gt;        &lt;Category&gt;            &lt;template slot-scope=&quot;scopeData&quot;&gt;                &lt;!-- 生成的是h4标题 --&gt;                &lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;            &lt;/template&gt;        &lt;/Category&gt;子组件中：        &lt;template&gt;            &lt;div&gt;                &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;            &lt;/div&gt;        &lt;/template&gt;                &lt;script&gt;            export default &#123;                name:&#39;Category&#39;,                props:[&#39;title&#39;],                //数据在子组件自身                data() &#123;                    return &#123;                        games:[&#39;红色警戒&#39;,&#39;穿越火线&#39;,&#39;劲舞团&#39;,&#39;超级玛丽&#39;]                    &#125;                &#125;,            &#125;        &lt;/script&gt;</code></pre></li></ol></li></ol></li></ol><h2 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h2><ol><li>keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，避免重新渲染 ，其有以下特性：</li></ol><ul><li>一般结合路由和动态组件一起使用，用于缓存组件；</li><li>提供 include 和 exclude 属性，两者都支持字符串或正则表达式， include 表示只有名称匹配的组件会被缓存，exclude 表示任何名称匹配的组件都不会被缓存 ，其中 exclude 的优先级比 include 高；</li><li>对应两个钩子函数 activated 和 deactivated ，当组件被激活时，触发钩子函数 activated，当组件被移除时，触发钩子函数 deactivated。</li></ul><ol start="2"><li>原理<br><keep-alive> 组件的原理是通过将组件进行缓存来提高性能，避免不必要的重新渲染和销毁。</li></ol><p>当 <keep-alive> 包裹的组件第一次被渲染时，Vue 会将该组件的实例缓存起来。当组件被切换隐藏时，而不是直接销毁，它的状态和 DOM 结构会被保留在内存中。</p><p>当组件再次显示时，Vue 会复用缓存的组件实例，而不是重新创建一个新的组件。这样可以避免重复初始化组件、重新计算数据、重新挂载 DOM 的开销，从而提高应用的性能。</p><p>在缓存期间，即使组件处于隐藏状态，它的生命周期钩子函数仍然会被调用。例如，created、mounted 等钩子函数会在组件被缓存时执行一次，以及在组件再次显示时执行一次。但是，destroyed 钩子函数不会被调用，因为组件并没有被销毁。</p><p>需要注意的是，被 <keep-alive> 缓存的组件在切换显示时，并不会触发组件的重新渲染过程。但是，如果组件的数据或属性发生了变化，当组件再次展示时，会触发 activated 钩子函数，可以在该钩子函数中处理数据更新的逻辑。</p><h1 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue-Router"></a>Vue-Router</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ol><li><p>安装vue-router，命令：<code>npm i vue-router</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写router配置项:</p><pre><code class="js">//引入VueRouterimport VueRouter from &#39;vue-router&#39;//引入Luyou 组件import About from &#39;../components/About&#39;import Home from &#39;../components/Home&#39;//创建router实例对象，去管理一组一组的路由规则const router = new VueRouter(&#123;    routes:[        &#123;            path:&#39;/about&#39;,            component:About        &#125;,        &#123;            path:&#39;/home&#39;,            component:Home        &#125;    ]&#125;)//暴露routerexport default router</code></pre></li><li><p>实现切换（active-class可配置高亮样式）</p><pre><code class="vue">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</code></pre></li><li><p>指定展示位置</p><pre><code class="vue">&lt;router-view&gt;&lt;/router-view&gt;</code></pre></li></ol><h2 id="几个注意点"><a href="#几个注意点" class="headerlink" title="几个注意点"></a>几个注意点</h2><ol><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li><li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到。</li></ol><h2 id="多级路由（多级路由）"><a href="#多级路由（多级路由）" class="headerlink" title="多级路由（多级路由）"></a>多级路由（多级路由）</h2><ol><li><p>配置路由规则，使用children配置项：</p><pre><code class="js">routes:[    &#123;        path:&#39;/about&#39;,        component:About,    &#125;,    &#123;        path:&#39;/home&#39;,        component:Home,        children:[ //通过children配置子级路由            &#123;                path:&#39;news&#39;, //此处一定不要写：/news                component:News            &#125;,            &#123;                path:&#39;message&#39;,//此处一定不要写：/message                component:Message            &#125;        ]    &#125;]</code></pre></li><li><p>跳转（要写完整路径）：</p><pre><code class="vue">&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</code></pre></li></ol><h2 id="路由的query参数"><a href="#路由的query参数" class="headerlink" title="路由的query参数"></a>路由的query参数</h2><ol><li><p>传递参数</p><pre><code class="vue">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;&lt;router-link :to=&quot;/home/message/detail?id=666&amp;title=你好&quot;&gt;跳转&lt;/router-link&gt;                &lt;!-- 跳转并携带query参数，to的对象写法 --&gt;&lt;router-link     :to=&quot;&#123;        path:&#39;/home/message/detail&#39;,        query:&#123;           id:666,            title:&#39;你好&#39;        &#125;    &#125;&quot;&gt;跳转&lt;/router-link&gt;</code></pre></li><li><p>接收参数：</p><pre><code class="js">$route.query.id$route.query.title</code></pre></li></ol><h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><ol><li><p>作用：可以简化路由的跳转。</p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p><pre><code class="js">&#123;    path:&#39;/demo&#39;,    component:Demo,    children:[        &#123;            path:&#39;test&#39;,            component:Test,            children:[                &#123;                    name:&#39;hello&#39; //给路由命名                    path:&#39;welcome&#39;,                    component:Hello,                &#125;            ]        &#125;    ]&#125;</code></pre></li><li><p>简化跳转：</p><pre><code class="vue">&lt;!--简化前，需要写完整的路径 --&gt;&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;&lt;!--简化后，直接通过名字跳转 --&gt;&lt;router-link :to=&quot;&#123;name:&#39;hello&#39;&#125;&quot;&gt;跳转&lt;/router-link&gt;&lt;!--简化写法配合传递参数 --&gt;&lt;router-link     :to=&quot;&#123;        name:&#39;hello&#39;,        query:&#123;           id:666,            title:&#39;你好&#39;        &#125;    &#125;&quot;&gt;跳转&lt;/router-link&gt;</code></pre></li></ol></li></ol><h2 id="路由的params参数"><a href="#路由的params参数" class="headerlink" title="路由的params参数"></a>路由的params参数</h2><ol><li><p>配置路由，声明接收params参数</p><pre><code class="js">&#123;    path:&#39;/home&#39;,    component:Home,    children:[        &#123;            path:&#39;news&#39;,            component:News        &#125;,        &#123;            component:Message,            children:[                &#123;                    name:&#39;xiangqing&#39;,                    path:&#39;detail/:id/:title&#39;, //使用占位符声明接收params参数                    component:Detail                &#125;            ]        &#125;    ]&#125;</code></pre></li><li><p>传递参数</p><pre><code class="vue">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;&lt;router-link :to=&quot;/home/message/detail/666/你好&quot;&gt;跳转&lt;/router-link&gt;                &lt;!-- 跳转并携带params参数，to的对象写法 --&gt;&lt;router-link     :to=&quot;&#123;        name:&#39;xiangqing&#39;,        params:&#123;           id:666,            title:&#39;你好&#39;        &#125;    &#125;&quot;&gt;跳转&lt;/router-link&gt;</code></pre><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p></blockquote></li><li><p>接收参数：</p><pre><code class="js">$route.params.id$route.params.title</code></pre></li></ol><h2 id="路由的props配置"><a href="#路由的props配置" class="headerlink" title="路由的props配置"></a>路由的props配置</h2><p>​作用：让路由组件更方便的收到参数</p><pre><code class="js">&#123;    name:&#39;xiangqing&#39;,    path:&#39;detail/:id&#39;,    component:Detail,    //第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件    // props:&#123;a:900&#125;    //第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件    // props:true        //第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件    props(route)&#123;        return &#123;            id:route.query.id,            title:route.query.title        &#125;    &#125;&#125;</code></pre><h2 id="的replace属性"><a href="#的replace属性" class="headerlink" title="的replace属性"></a><router-link>的replace属性</h2><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></li><li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li></ol><h2 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h2><ol><li><p>作用：不借助<code>&lt;router-link&gt; </code>实现路由跳转，让路由跳转更加灵活</p></li><li><p>具体编码：</p><pre><code class="js">//$router的两个APIthis.$router.push(&#123;    name:&#39;xiangqing&#39;,        params:&#123;            id:xxx,            title:xxx        &#125;&#125;)this.$router.replace(&#123;    name:&#39;xiangqing&#39;,        params:&#123;            id:xxx,            title:xxx        &#125;&#125;)this.$router.forward() //前进this.$router.back() //后退this.$router.go() //可前进也可后退</code></pre></li></ol><h2 id="缓存路由组件"><a href="#缓存路由组件" class="headerlink" title="缓存路由组件"></a>缓存路由组件</h2><ol><li><p>作用：让不展示的路由组件保持挂载，不被销毁。</p></li><li><p>具体编码：</p><pre><code class="vue">&lt;keep-alive include=&quot;News&quot;&gt;     &lt;router-view&gt;&lt;/router-view&gt;&lt;/keep-alive&gt;</code></pre></li></ol><h2 id="两个新的生命周期钩子"><a href="#两个新的生命周期钩子" class="headerlink" title="两个新的生命周期钩子"></a>两个新的生命周期钩子</h2><ol><li><p>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</p></li><li><p>具体名字：</p><ol><li><code>activated</code>路由组件被激活时触发。</li><li><code>deactivated</code>路由组件失活时触发。</li></ol><p>keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染。</p><pre><code class="javascript">&lt;keep-alive&gt;  &lt;component&gt;    &lt;!-- 该组件将被缓存！ --&gt;  &lt;/component&gt;&lt;/keep-alive&gt;如果只想 router-view 里面某个组件被缓存export default [  &#123;    path: &#39;/&#39;,    name: &#39;home&#39;,    component: Home,    meta: &#123;      keepAlive: true // 需要被缓存    &#125;  &#125;, &#123;    path: &#39;/:id&#39;,    name: &#39;edit&#39;,    component: Edit,    meta: &#123;      keepAlive: false // 不需要被缓存    &#125;  &#125;]&lt;keep-alive&gt;    &lt;router-view v-if=&quot;$route.meta.keepAlive&quot;&gt;        &lt;!-- 这里是会被缓存的视图组件，比如 Home！ --&gt;    &lt;/router-view&gt;&lt;/keep-alive&gt; &lt;router-view v-if=&quot;!$route.meta.keepAlive&quot;&gt;    &lt;!-- 这里是不被缓存的视图组件，比如 Edit！ --&gt;&lt;/router-view&gt;</code></pre></li></ol><h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><ol><li><p>作用：对路由进行权限控制</p></li><li><p>分类：全局守卫、独享守卫、组件内守卫</p></li><li><p>全局守卫:</p><pre><code class="js">//全局前置守卫：初始化时执行、每次路由切换前执行router.beforeEach((to,from,next)=&gt;&#123;    console.log(&#39;beforeEach&#39;,to,from)    if(to.meta.isAuth)&#123; //判断当前路由是否需要进行权限控制        if(localStorage.getItem(&#39;school&#39;) === &#39;atguigu&#39;)&#123; //权限控制的具体规则            next() //放行        &#125;else&#123;            alert(&#39;暂无权限查看&#39;)            // next(&#123;name:&#39;guanyu&#39;&#125;)        &#125;    &#125;else&#123;        next() //放行    &#125;&#125;)//全局后置守卫：初始化时执行、每次路由切换后执行router.afterEach((to,from)=&gt;&#123;    console.log(&#39;afterEach&#39;,to,from)    if(to.meta.title)&#123;         document.title = to.meta.title //修改网页的title    &#125;else&#123;        document.title = &#39;vue_test&#39;    &#125;&#125;)</code></pre></li><li><p>独享守卫:</p><pre><code class="js">beforeEnter(to,from,next)&#123;    console.log(&#39;beforeEnter&#39;,to,from)    if(to.meta.isAuth)&#123; //判断当前路由是否需要进行权限控制        if(localStorage.getItem(&#39;school&#39;) === &#39;atguigu&#39;)&#123;            next()        &#125;else&#123;            alert(&#39;暂无权限查看&#39;)            // next(&#123;name:&#39;guanyu&#39;&#125;)        &#125;    &#125;else&#123;        next()    &#125;&#125;</code></pre></li><li><p>组件内守卫：</p><pre><code class="js">//进入守卫：通过路由规则，进入该组件时被调用beforeRouteEnter (to, from, next) &#123;&#125;,//离开守卫：通过路由规则，离开该组件时被调用beforeRouteLeave (to, from, next) &#123;&#125;</code></pre></li></ol><h2 id="vue-router实现路由懒加载（-动态加载路由-）"><a href="#vue-router实现路由懒加载（-动态加载路由-）" class="headerlink" title="vue-router实现路由懒加载（ 动态加载路由 ）"></a>vue-router实现路由懒加载（ 动态加载路由 ）</h2><pre><code class="javascript">import Vue from &#39;vue&#39;import VueRouter from &#39;vue-router&#39;Vue.use(VueRouter)const routes = [  &#123;    path: &#39;/&#39;,    name: &#39;Home&#39;,    component: () =&gt; import( &#39;../views/Home.vue&#39;)   //使用import的方式导入组件  &#125;,  &#123;    path: &#39;/about&#39;,    name: &#39;About&#39;,    component: () =&gt; import( &#39;../views/About.vue&#39;)  &#125;]const router = new VueRouter(&#123;  mode: &#39;history&#39;,  base: process.env.BASE_URL,  routes&#125;)export default router</code></pre><h2 id="vue-router如何响应-路由参数-的变化？"><a href="#vue-router如何响应-路由参数-的变化？" class="headerlink" title="vue-router如何响应 路由参数 的变化？"></a>vue-router如何响应 路由参数 的变化？</h2><p><strong>原来的组件实例会被复用。这也意味着组件的生命周期钩子不会再被调用。你可以简单地 watch (监测变化) $route 对象：</strong></p><pre><code class="js">const User = &#123;  template: &#39;...&#39;,  watch: &#123;    &#39;$route&#39; (to, from) &#123;      // 对路由变化作出响应...    &#125;  &#125;&#125;</code></pre><h2 id="route和-router的区别是什么"><a href="#route和-router的区别是什么" class="headerlink" title="$route和$router的区别是什么"></a>$route和$router的区别是什么</h2><pre><code class="javascript">$route为当前router跳转当前路由组件里可获取name、path、query、params等$router为VueRouter实例，想要导航到不同URL，则使用$router.push方法</code></pre><h2 id="hash和history的区别"><a href="#hash和history的区别" class="headerlink" title="hash和history的区别"></a>hash和history的区别</h2><ol><li>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</li><li>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</li><li>hash模式：<ul><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ul></li><li>history模式：<ul><li>地址干净，美观 。</li><li>兼容性和hash模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ul></li></ol><h2 id="vue-router-路由模式有几种？"><a href="#vue-router-路由模式有几种？" class="headerlink" title="vue-router 路由模式有几种？"></a>vue-router 路由模式有几种？</h2><pre><code class="javascript">vue-router 有 3 种路由模式：hash、history、abstract，对应的源码如下所示：switch (mode) &#123;  case &#39;history&#39;:    this.history = new HTML5History(this, options.base)    break  case &#39;hash&#39;:    this.history = new HashHistory(this, options.base, this.fallback)    break  case &#39;abstract&#39;:    this.history = new AbstractHistory(this, options.base)    break  default:    if (process.env.NODE_ENV !== &#39;production&#39;) &#123;      assert(false, `invalid mode: $&#123;mode&#125;`)    &#125;&#125;</code></pre><p>hash: 使用 URL hash 值来作路由。支持所有浏览器，包括不支持 HTML5 History Api 的浏览器；<br>history : 依赖 HTML5 History API 和服务器配置。具体可以查看 HTML5 History 模式；<br>abstract : 支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式.</p><p>在 hash 模式下，URL 中的路由会以 # 符号后面的路径来表示。例如，<span class="exturl" data-url="aHR0cDovL2V4YW1wbGUuY29tLyMvaG9tZSVFMyU4MCU4Mg==">http://example.com/#/home。</span><br>这种模式不会触发浏览器页面刷新，因为 # 后面的内容不会被发送到服务器。<br>在 Vue Router 中，默认使用 hash 模式，你可以通过以下方式创建 Vue Router 对象时手动指定该模式：</p><p>在 history 模式下，URL 中的路由会直接使用正常的路径，没有 # 符号。例如，<span class="exturl" data-url="aHR0cDovL2V4YW1wbGUuY29tL2hvbWUlRTMlODAlODI=">http://example.com/home。</span><br>这种模式通过使用 HTML5 History API，将路由状态保存到浏览器的历史记录中。<br>注意，使用 history 模式需要服务器配置适配，以避免用户在直接访问 URL 时出现 404 错误。<br>在 Vue Router 中，你可以通过以下方式创建 Vue Router 对象时启用 history 模式：</p><h2 id="vue-router-中常用的-hash-和-history-路由模式实现原理吗？"><a href="#vue-router-中常用的-hash-和-history-路由模式实现原理吗？" class="headerlink" title="vue-router 中常用的 hash 和 history 路由模式实现原理吗？"></a>vue-router 中常用的 hash 和 history 路由模式实现原理吗？</h2><pre><code class="javascript">（1）hash 模式的实现原理早期的前端路由的实现就是基于 location.hash 来实现的。其实现原理很简单，location.hash 的值就是 URL 中 # 后面的内容。比如下面这个网站，它的 location.hash 的值为 ‘#search’：https://www.word.com#searchhash 路由模式的实现主要是基于下面几个特性：URL 中 hash 值只是客户端的一种状态，也就是说当向服务器端发出请求时，hash 部分不会被发送；hash 值的改变，都会在浏览器的访问历史中增加一个记录。因此我们能通过浏览器的回退、前进按钮控制hash 的切换；可以通过 a 标签，并设置 href 属性，当用户点击这个标签后，URL 的 hash 值会发生改变；或者使用 JavaScript 来对 loaction.hash 进行赋值，改变 URL 的 hash 值；我们可以使用 hashchange 事件来监听 hash 值的变化，从而对页面进行跳转（渲染）。（2）history 模式的实现原理HTML5 提供了 History API 来实现 URL 的变化。其中做最主要的 API 有以下两个：history.pushState() 和 history.repalceState()。这两个 API 可以在不进行刷新的情况下，操作浏览器的历史纪录。唯一不同的是，前者是新增一个历史记录，后者是直接替换当前的历史记录，如下所示：window.history.pushState(null, null, path);window.history.replaceState(null, null, path);history 路由模式的实现主要基于存在下面几个特性：pushState 和 repalceState 两个 API 来操作实现 URL 的变化 ；我们可以使用 popstate 事件来监听 url 的变化，从而对页面进行跳转（渲染）；history.pushState() 或 history.replaceState() 不会触发 popstate 事件，这时我们需要手动触发页面跳转（渲染）。</code></pre><h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>​在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读&#x2F;写），也是一种组件间通信的方式，且适用于任意组件间通信。</p><h2 id="何时使用？"><a href="#何时使用？" class="headerlink" title="何时使用？"></a>何时使用？</h2><p>​多个组件需要共享数据时，音乐播放、登录状态、加入购物车</p><h2 id="搭建vuex环境"><a href="#搭建vuex环境" class="headerlink" title="搭建vuex环境"></a>搭建vuex环境</h2><ol><li><p>创建文件：<code>src/store/index.js</code></p><pre><code class="js">//引入Vue核心库import Vue from &#39;vue&#39;//引入Vueximport Vuex from &#39;vuex&#39;//应用Vuex插件Vue.use(Vuex)//准备actions对象——响应组件中用户的动作const actions = &#123;&#125;//准备mutations对象——修改state中的数据const mutations = &#123;&#125;//准备state对象——保存具体的数据const state = &#123;&#125;//创建并暴露storeexport default new Vuex.Store(&#123;    actions,    mutations,    state&#125;)</code></pre></li><li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p><pre><code class="js">......//引入storeimport store from &#39;./store&#39;......//创建vmnew Vue(&#123;    el:&#39;#app&#39;,    render: h =&gt; h(App),    store&#125;)</code></pre></li></ol><h2 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h2><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><pre><code class="js">//引入Vue核心库import Vue from &#39;vue&#39;//引入Vueximport Vuex from &#39;vuex&#39;//引用VuexVue.use(Vuex)const actions = &#123;    //响应组件中加的动作    jia(context,value)&#123;        // console.log(&#39;actions中的jia被调用了&#39;,miniStore,value)        context.commit(&#39;JIA&#39;,value)    &#125;,&#125;const mutations = &#123;    //执行加    JIA(state,value)&#123;        // console.log(&#39;mutations中的JIA被调用了&#39;,state,value)        state.sum += value    &#125;&#125;//初始化数据const state = &#123;   sum:0&#125;//创建并暴露storeexport default new Vuex.Store(&#123;    actions,    mutations,    state,&#125;)</code></pre></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p><blockquote><p> 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h2 id="getters的使用"><a href="#getters的使用" class="headerlink" title="getters的使用"></a>getters的使用</h2><ol><li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><pre><code class="js">......const getters = &#123;    bigSum(state)&#123;        return state.sum * 10    &#125;&#125;//创建并暴露storeexport default new Vuex.Store(&#123;    ......    getters&#125;)</code></pre></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h2 id="四个map方法的使用"><a href="#四个map方法的使用" class="headerlink" title="四个map方法的使用"></a>四个map方法的使用</h2><ol><li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p><pre><code class="js">computed: &#123;    //借助mapState生成计算属性：sum、school、subject（对象写法）     ...mapState(&#123;sum:&#39;sum&#39;,school:&#39;school&#39;,subject:&#39;subject&#39;&#125;),             //借助mapState生成计算属性：sum、school、subject（数组写法）    ...mapState([&#39;sum&#39;,&#39;school&#39;,&#39;subject&#39;]),&#125;,</code></pre></li><li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p><pre><code class="js">computed: &#123;    //借助mapGetters生成计算属性：bigSum（对象写法）    ...mapGetters(&#123;bigSum:&#39;bigSum&#39;&#125;),    //借助mapGetters生成计算属性：bigSum（数组写法）    ...mapGetters([&#39;bigSum&#39;])&#125;,</code></pre></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><pre><code class="js">methods:&#123;    //靠mapActions生成：incrementOdd、incrementWait（对象形式）    ...mapActions(&#123;incrementOdd:&#39;jiaOdd&#39;,incrementWait:&#39;jiaWait&#39;&#125;)    //靠mapActions生成：incrementOdd、incrementWait（数组形式）    ...mapActions([&#39;jiaOdd&#39;,&#39;jiaWait&#39;])&#125;</code></pre></li><li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><pre><code class="js">methods:&#123;    //靠mapActions生成：increment、decrement（对象形式）    ...mapMutations(&#123;increment:&#39;JIA&#39;,decrement:&#39;JIAN&#39;&#125;),        //靠mapMutations生成：JIA、JIAN（对象形式）    ...mapMutations([&#39;JIA&#39;,&#39;JIAN&#39;]),&#125;</code></pre></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><h2 id="模块化-命名空间"><a href="#模块化-命名空间" class="headerlink" title="模块化+命名空间"></a>模块化+命名空间</h2><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><pre><code class="javascript">const countAbout = &#123;  namespaced:true,//开启命名空间  state:&#123;x:1&#125;,  mutations: &#123; ... &#125;,  actions: &#123; ... &#125;,  getters: &#123;    bigSum(state)&#123;       return state.sum * 10    &#125;  &#125;&#125;const personAbout = &#123;  namespaced:true,//开启命名空间  state:&#123; ... &#125;,  mutations: &#123; ... &#125;,  actions: &#123; ... &#125;&#125;const store = new Vuex.Store(&#123;  modules: &#123;    countAbout,    personAbout  &#125;&#125;)</code></pre></li><li><p>开启命名空间后，组件中读取state数据：</p><pre><code class="js">//方式一：自己直接读取this.$store.state.personAbout.list//方式二：借助mapState读取：...mapState(&#39;countAbout&#39;,[&#39;sum&#39;,&#39;school&#39;,&#39;subject&#39;]),</code></pre></li><li><p>开启命名空间后，组件中读取getters数据：</p><pre><code class="js">//方式一：自己直接读取this.$store.getters[&#39;personAbout/firstPersonName&#39;]//方式二：借助mapGetters读取：...mapGetters(&#39;countAbout&#39;,[&#39;bigSum&#39;])</code></pre></li><li><p>开启命名空间后，组件中调用dispatch</p><pre><code class="js">//方式一：自己直接dispatchthis.$store.dispatch(&#39;personAbout/addPersonWang&#39;,person)//方式二：借助mapActions：...mapActions(&#39;countAbout&#39;,&#123;incrementOdd:&#39;jiaOdd&#39;,incrementWait:&#39;jiaWait&#39;&#125;)</code></pre></li><li><p>开启命名空间后，组件中调用commit</p><pre><code class="js">//方式一：自己直接committhis.$store.commit(&#39;personAbout/ADD_PERSON&#39;,person)//方式二：借助mapMutations：...mapMutations(&#39;countAbout&#39;,&#123;increment:&#39;JIA&#39;,decrement:&#39;JIAN&#39;&#125;),</code></pre></li></ol><p>##Vuex state数据的双向绑定</p><pre><code class="javascript">// 在从组件的computed中computed: &#123;    user: &#123;        get() &#123;          return this.$store.state.user        &#125;,        set(v) &#123;          // 使用vuex中的mutations中定义好的方法来改变          this.$store.commit(&#39;USER&#39;, v)        &#125;    &#125;&lt;br&gt;&#125;&lt;br&gt;// 在组件中就可以使用                     &lt;input v-modle=&quot;user&quot; /&gt;        </code></pre><h2 id="相关文档-写的比较好的文档"><a href="#相关文档-写的比较好的文档" class="headerlink" title="相关文档(写的比较好的文档)"></a>相关文档(写的比较好的文档)</h2><pre><code class="javascript">https://zhuanlan.zhihu.com/p/78981485</code></pre><h2 id="简要概括vuex"><a href="#简要概括vuex" class="headerlink" title="简要概括vuex"></a>简要概括vuex</h2><pre><code class="javascript">主要包括以下几个模块：State =&gt; 基本数据，定义了应用状态的数据结构，可以在这里设置默认的初始状态。Getter =&gt; 从基本数据派生的数据，允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。Mutation =&gt; 是唯一更改 store 中状态的方法，且必须是同步函数。Action =&gt; 像一个装饰器，包裹mutations，使之可以异步。用于提交 mutation，而不是直接变更状态，可以包含任意异步操作。Module =&gt; 模块化Vuex，允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中。</code></pre><h1 id="Vue中的开发经验"><a href="#Vue中的开发经验" class="headerlink" title="Vue中的开发经验"></a>Vue中的开发经验</h1><h2 id="搭建Vue脚手架（vue-cli）并创建一个项目"><a href="#搭建Vue脚手架（vue-cli）并创建一个项目" class="headerlink" title="搭建Vue脚手架（vue-cli）并创建一个项目"></a>搭建Vue脚手架（vue-cli）并创建一个项目</h2><pre><code class="javascript">1.安装node.js环境      [官网下载地址](https://nodejs.org/en/download/)               一路安装完成后 打开cmd                 输入 node -v               输入 npm -v               如果能看到node和npm的版本号了，说明已经安装成功                              2.安装vue-cli               有npm和cnpm两种方式，网上都说cnpm好些，所以我也用的cnpm安装，               首先利用淘宝镜像安装cnpm                     npm install cnpm -g --registry=https://registry.npm.taobao.org                      安装完成               输入 cnpm -v                                3.然后全局安装 vue-cli               输入指令 cnpm install -g vue-cli               这个命令只需要运行一次就可以了。安装上之后，以后就不用安装了。               查看vue版本号               vue -V    //注：V是大写字母V               如果提示“无法识别 ‘vue’ ” ，有可能是 npm 版本过低，需要手动更新npm的版本号，这也是上面说的为什么要保证npm版本号高的原因，npm的版本可以手动升级更新，没记错的话应该是                              npm install -g npm                                              4.使用vue-cli来创建一个基于 webpack 模板的新项目                              创建               cmd利用cd指令进入到保存项目的文件夹下，然后输入命令                          输入 vue init webpack5.安装项目所需要的依赖                                  进入新建的项目文件夹下，就是上头有一些文件的里面，输入命令                输入 指令 cnpm install6.运行项目               根据你package.json里的配置里的指令               一般情况下都是 npm run dev               7.打包资源上线               根据你package.json里的配置里的指令               一般情况下都是 npm run build                   8.具体创建项目 博客地址               https://www.cnblogs.com/coober/p/10875647.html               </code></pre><h2 id="关于不同版本的Vue"><a href="#关于不同版本的Vue" class="headerlink" title="关于不同版本的Vue"></a>关于不同版本的Vue</h2><ol><li>vue.js与vue.runtime.xxx.js的区别：<ul><li>vue.js是完整版的Vue，包含：核心功能 + 模板解析器。</li><li>vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</li></ul></li><li>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template这个配置项，需要使用render函数接收到的createElement函数去指定具体内容。</li></ol><h2 id="vue-config-js配置文件"><a href="#vue-config-js配置文件" class="headerlink" title="vue.config.js配置文件"></a>vue.config.js配置文件</h2><ol><li>使用vue inspect &gt; output.js可以查看到Vue脚手架的默认配置。</li><li>使用vue.config.js可以对脚手架进行个性化定制，详情见：<span class="exturl" data-url="aHR0cHM6Ly9jbGkudnVlanMub3JnL3po">https://cli.vuejs.org/zh</span></li></ol><h2 id="vue中如何编写可复用的组件？"><a href="#vue中如何编写可复用的组件？" class="headerlink" title="vue中如何编写可复用的组件？"></a>vue中如何编写可复用的组件？</h2><p>①创建组件页面eg Toast.vue；<br>②用Vue.extend()扩展一个组件构造器,再通过实例化组件构造器,就可创造出可复用的组件<br>③将toast组件挂载到新创建的div上；<br>④把toast组件的dom添加到body里；<br>⑤修改优化达到动态控制页面显示文字跟显示时间；</p><pre><code class="javascript">import Vue from &#39;vue&#39;; import Toast from &#39;@/components/Toast&#39;;     //引入组件let ToastConstructor  = Vue.extend(Toast) // 返回一个“扩展实例构造器” let myToast = (text,duration)=&gt;&#123;    let toastDom = new ToastConstructor(&#123;        el:document.createElement(&#39;div&#39;)    //将toast组件挂载到新创建的div上    &#125;)    document.body.appendChild( toastDom.$el )   //把toast组件的dom添加到body里        toastDom.text = text;    toastDom.duration = duration;     // 在指定 duration 之后让 toast消失    setTimeout(()=&gt;&#123;        toastDom.isShow = false;      &#125;, toastDom.duration);&#125;export default myToast;</code></pre><p>点击查看 <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTYzODQ1L2FydGljbGUvZGV0YWlscy83NzUyNDkzNA==">https://blog.csdn.net/qq_38563845/article/details/77524934</span> </p><h2 id="vue父组件向子组件传对象，不实时更新解决"><a href="#vue父组件向子组件传对象，不实时更新解决" class="headerlink" title="vue父组件向子组件传对象，不实时更新解决"></a>vue父组件向子组件传对象，不实时更新解决</h2><pre><code class="javascript">思路1：就是让利用v-if的重新渲染机制1.首先考虑的就是手动刷了，给组件加个v-if=”someShow“;//  这是组件上写法 ：&lt;my-component v-if=&quot;someShow&quot;&gt;&lt;/my-component&gt; // 下边写在父组件的methods里refesh:function()&#123;    this.someShow=false;    var _this=this;    this.$nextTick(function()&#123;        _this.someShow = true;    &#125;)  &#125;// $nextTick// $nextTick 是在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后使用 $nextTick，则可以在回调中获取更新后的 DOM  这样重新渲染就会是最新数据了思路2：利用watch监听在子组件中监听你要的数据，当然别监听对象，监听了不一定好使。亲测不好使，测过好使的，可以给我留言。data:function()&#123;    return &#123;        title:&quot;&quot;,        content:&quot;&quot;,        btn:&quot;&quot;    &#125;&#125;,   methods:&#123;        changeTitle:function()&#123;            this.title=this.listTitle;            // 这里的每次变化了就复制给组件上的变量，视图也就更改了        &#125;,        changeList:function()&#123;            this.content=this.listList;        &#125;,        changeBtn:function()&#123;            this.btn=this.listBtn;        &#125;    &#125;,watch:&#123;        listTitle:&quot;changeTitle&quot;,        listList:&quot;changeList&quot;,        listBtn:&quot;changeBtn&quot;        // 冒号前边这个就是从父组件传过来的，后边的就是变化了的监听函数&#125;</code></pre><h2 id="is的用法（用于动态组件且基于-DOM-内模板的限制来工作。）"><a href="#is的用法（用于动态组件且基于-DOM-内模板的限制来工作。）" class="headerlink" title="is的用法（用于动态组件且基于 DOM 内模板的限制来工作。）"></a>is的用法（用于动态组件且基于 DOM 内模板的限制来工作。）</h2><p><strong>is用来动态切换组件，DOM模板解析</strong></p><pre><code class="js">&lt;table&gt; &lt;tr is=&quot;my-row&quot;&gt;&lt;/tr&gt; &lt;/table&gt;</code></pre><h2 id="vue脚手架配置代理"><a href="#vue脚手架配置代理" class="headerlink" title="vue脚手架配置代理"></a>vue脚手架配置代理</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>​在vue.config.js中添加如下配置：</p><pre><code class="js">devServer:&#123;  proxy:&quot;http://localhost:5000&quot;&#125;</code></pre><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li></ol><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>​编写vue.config.js配置具体代理规则：</p><pre><code class="js">module.exports = &#123;    devServer: &#123;      proxy: &#123;      &#39;/api1&#39;: &#123;// 匹配所有以 &#39;/api1&#39;开头的请求路径        target: &#39;http://localhost:5000&#39;,// 代理目标的基础路径        changeOrigin: true,        pathRewrite: &#123;&#39;^/api1&#39;: &#39;&#39;&#125;      &#125;,      &#39;/api2&#39;: &#123;// 匹配所有以 &#39;/api2&#39;开头的请求路径        target: &#39;http://localhost:5001&#39;,// 代理目标的基础路径        changeOrigin: true,        pathRewrite: &#123;&#39;^/api2&#39;: &#39;&#39;&#125;      &#125;    &#125;  &#125;&#125;/*   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080   changeOrigin默认值为true*/</code></pre><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><h2 id="1：vue-js2-x的两个核心是什么-数据驱动、组件系统。"><a href="#1：vue-js2-x的两个核心是什么-数据驱动、组件系统。" class="headerlink" title="1：vue.js2.x的两个核心是什么(数据驱动、组件系统。)"></a>1：vue.js2.x的两个核心是什么(数据驱动、组件系统。)</h2><p>数据驱动:Object.defineProperty和存储器属性: getter和setter（所以只兼容IE9及以上版本），可称为基于依赖收集的观测机制,核心是VM，即ViewModel，保证数据和视图的一致性。</p><pre><code class="javascript">            let number = 18            let person = &#123;                name : &#39;jack&#39;,                sex : &#39;男&#39;            &#125;            Object.defineProperty(person,&#39;age&#39;,&#123;                // value : 18,                // enumerable : true, //控制熟悉是否可以枚举，默认值是false                // writable : true, //控制熟悉是否可以被修改，默认值是false                // configurable : true, //控制属性是否可以被删除,默认值是false                //当有人读取person的age属性时，get函数(getter)就会被调用,且返回值就是age的值                get()&#123;                    console.log(&#39;有人读取了age&#39;)                    return number                &#125;,                //当有人修改person的age属性时，set函数(setter)就会被调用,且会收到修改的具体值                set(value)&#123;                    console.log(`有人修改了age，值为:$&#123;value&#125;`)                    number = value                &#125;            &#125;)</code></pre><p>组件系统:</p><h2 id="2：VUE数据代理的原理"><a href="#2：VUE数据代理的原理" class="headerlink" title="2：VUE数据代理的原理"></a>2：VUE数据代理的原理</h2><pre><code class="javascript">通过一个对象代理对另一个对象中的属性的操作(读写)let obj = &#123;x:100&#125;let obj2 = &#123;y:200&#125;Object.defineProperty(obj2,&#39;x&#39;,&#123;    get()&#123;        return obj.x    &#125;,    set()&#123;        obj.x = value    &#125;&#125;)1.Vue中的数据代理：    通过vm对象代理data对象中的数据(读/写)2.Vue中数据代理的好处：    更加方便的操作data中的数据3.基本原理    通过Object.defineProperty()把data对象中所有属性添加到vm上    为每一个添加到vm上的属性，都指定一个getter/setter    在getter/setter内部去操作(读/写)data中对应的属性</code></pre><h2 id="3：Vue-组件中-data-为什么必须是函数"><a href="#3：Vue-组件中-data-为什么必须是函数" class="headerlink" title="3：Vue 组件中 data 为什么必须是函数"></a>3：Vue 组件中 data 为什么必须是函数</h2><p>vue组件中data值不能为对象，因为对象是引用类型，组件可能会被多个实例同时引用。<br>如果data值为对象，将导致多个实例共享一个对象，其中一个组件改变data属性值，其它实例也会受到影响。</p><h2 id="4：Vue双向绑定的原理"><a href="#4：Vue双向绑定的原理" class="headerlink" title="4：Vue双向绑定的原理"></a>4：Vue双向绑定的原理</h2><pre><code class="javascript">如果被问到 Vue 怎么实现数据双向绑定，大家肯定都会回答 通过 Object.defineProperty() 对数据进行劫持，但是 Object.defineProperty() 只能对属性进行数据劫持，不能对整个对象进行劫持。同理无法对数组进行劫持，但是我们在使用 Vue 框架中都知道，Vue 能检测到对象和数组（部分方法的操作）的变化，那它是怎么实现的呢？我们查看相关代码如下：  /**   * Observe a list of Array items.   */  observeArray (items: Array&lt;any&gt;) &#123;    for (let i = 0, l = items.length; i &lt; l; i++) &#123;      observe(items[i])  // observe 功能为监测数据的变化    &#125;  &#125;  /**   * 对属性进行递归遍历   */  let childOb = !shallow &amp;&amp; observe(val) // observe 功能为监测数据的变化  通过以上 Vue 源码部分查看，我们就能知道 Vue 框架是通过遍历数组 和递归遍历对象，从而达到利用 Object.defineProperty() 也能对对象和数组（部分方法的操作）进行监听。  </code></pre><h2 id="5：Vue的diff算法（列表渲染key的作用和原理）"><a href="#5：Vue的diff算法（列表渲染key的作用和原理）" class="headerlink" title="5：Vue的diff算法（列表渲染key的作用和原理）"></a>5：Vue的diff算法（列表渲染key的作用和原理）</h2><pre><code class="javascript">1.虚拟DOM中key的作用:key是虚拟DOM对象的标识，当状态中的数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】随后，Vue进行【新的虚拟DOM】与【旧的虚拟DOM】的差异比较，比较规则如下2.对比规则:(1).旧虚拟DOM中找到了与新虚拟DOM相同的key:    1.若虚拟DOM中的内容没变，直接使用之前的真实DOM！    2.若虚拟DOM中的内容变了，则生成新的真实DOM，随后替换掉页面中之前的真实DOM(2).旧虚拟DOM中未找到与新虚拟DOM相同的key    1.创建新的真实DOM，随后渲染到页面3.用index作为key可能会引发的问题:    1.若对数据进行，逆序添加，逆序删除等破坏顺寻操作：        会产生没有必要的真实DOM更新 =&gt; 界面效果没问题，但是效率低    2.如果结构中还有包含输入类的DOM：        会产生错误DOM更新 =&gt; 界面有问题4.开发中如何选择key?:    1.最好使用每条数据的唯一标识作为key,比如id,手机号，身份证号，学号等唯一值    2.如果不存在对数据的逆序添加，逆序删除等破坏性顺序操作，仅用于渲染列表展示，使用index作为key是没问题的</code></pre><h2 id="6：Vue是怎么检测数据的改变的原理"><a href="#6：Vue是怎么检测数据的改变的原理" class="headerlink" title="6：Vue是怎么检测数据的改变的原理"></a>6：Vue是怎么检测数据的改变的原理</h2><pre><code class="javascript">let data = &#123;    name :&#39;jack&#39;,    age : 18&#125;//创建一个监视的实例对象，用于监视data中属性的变化const obs = new Observer(data)//准备一个vm实例对象let vm = &#123;&#125;vm._data = data = obsfunction Observer(obj)&#123;    //汇总对象中所有属性形成的数组    const keys = Object.keys(obj)    //遍历    keys.forEach((k)=&gt;&#123;        Object.defineProperty(this,k,&#123;            get()&#123;                return obj[k]            &#125;,            set(val)&#123;                console.log(`$&#123;k&#125;被改了，我要去解析模板了，生成虚拟DOM`)                obj[k] = val            &#125;        &#125;)    &#125;)&#125;  //自己实现的基本的原理，只是对第一层的基本数据类型进行检测。无法检测到里面的Vue的底层对data中的对象数据检测进行了递归，所以都能检测到，数组里的对象数据没有检测</code></pre><h2 id="7-v-model-的原理？"><a href="#7-v-model-的原理？" class="headerlink" title="7. v-model 的原理？"></a>7. v-model 的原理？</h2><h2 id="8-使用过-Vue-SSR-吗？说说-SSR？"><a href="#8-使用过-Vue-SSR-吗？说说-SSR？" class="headerlink" title="8.使用过 Vue SSR 吗？说说 SSR？"></a>8.使用过 Vue SSR 吗？说说 SSR？</h2><pre><code class="javascript">Vue.js 是构建客户端应用程序的框架。默认情况下，可以在浏览器中输出 Vue 组件，进行生成 DOM 和操作 DOM。然而，也可以将同一个组件渲染为服务端的 HTML 字符串，将它们直接发送到浏览器，最后将这些静态标记&quot;激活&quot;为客户端上完全可交互的应用程序。即：SSR大致的意思就是vue在客户端将标签渲染成的整个 html 片段的工作在服务端完成，服务端形成的html 片段直接返回给客户端这个过程就叫做服务端渲染。服务端渲染 SSR 的优缺点如下：（1）服务端渲染的优点：更好的 SEO：因为 SPA 页面的内容是通过 Ajax 获取，而搜索引擎爬取工具并不会等待 Ajax 异步完成后再抓取页面内容，所以在 SPA 中是抓取不到页面通过 Ajax 获取到的内容；而 SSR 是直接由服务端返回已经渲染好的页面（数据已经包含在页面中），所以搜索引擎爬取工具可以抓取渲染好的页面；更快的内容到达时间（首屏加载更快）：SPA 会等待所有 Vue 编译后的 js 文件都下载完成后，才开始进行页面的渲染，文件下载等需要一定的时间等，所以首屏渲染需要一定的时间；SSR 直接由服务端渲染好页面直接返回显示，无需等待下载 js 文件及再去渲染等，所以 SSR 有更快的内容到达时间；（2) 服务端渲染的缺点：更多的开发条件限制：例如服务端渲染只支持 beforCreate 和 created 两个钩子函数，这会导致一些外部扩展库需要特殊处理，才能在服务端渲染应用程序中运行；并且与可以部署在任何静态文件服务器上的完全静态单页面应用程序 SPA 不同，服务端渲染应用程序，需要处于 Node.js server 运行环境；更多的服务器负载：在 Node.js 中渲染完整的应用程序，显然会比仅仅提供静态文件的 server 更加大量占用CPU 资源 (CPU-intensive - CPU 密集)，因此如果你预料在高流量环境 ( high traffic ) 下使用，请准备相应的服务器负载，并明智地采用缓存策略。</code></pre><h2 id="9-Vue-框架怎么实现对象和数组的监听？"><a href="#9-Vue-框架怎么实现对象和数组的监听？" class="headerlink" title="9. Vue 框架怎么实现对象和数组的监听？"></a>9. Vue 框架怎么实现对象和数组的监听？</h2><pre><code class="javascript">Vue 数据双向绑定主要是指：数据变化更新视图，视图变化更新数据。即：输入框内容变化时，Data 中的数据同步变化。即 View =&gt; Data 的变化。Data 中的数据变化时，文本节点的内容同步变化。即 Data =&gt; View 的变化。其中，View 变化更新 Data ，可以通过事件监听的方式来实现，所以 Vue 的数据双向绑定的工作主要是如何根据 Data 变化更新 View。Vue 主要通过以下 4 个步骤来实现数据双向绑定的：实现一个监听器 Observer：对数据对象进行遍历，包括子属性对象的属性，利用 Object.defineProperty() 对属性都加上 setter 和 getter。这样的话，给这个对象的某个值赋值，就会触发 setter，那么就能监听到了数据变化。实现一个解析器 Compile：解析 Vue 模板指令，将模板中的变量都替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，调用更新函数进行数据更新。实现一个订阅者 Watcher：Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁 ，主要的任务是订阅 Observer 中的属性值变化的消息，当收到属性值变化的消息时，触发解析器 Compile 中对应的更新函数。实现一个订阅器 Dep：订阅器采用 发布-订阅 设计模式，用来收集订阅者 Watcher，对监听器 Observer 和 订阅者 Watcher 进行统一管理。</code></pre><h2 id="10-Vue-怎么用-vm-set-解决对象新增属性不能响应的问题-？"><a href="#10-Vue-怎么用-vm-set-解决对象新增属性不能响应的问题-？" class="headerlink" title="10. Vue 怎么用 vm.$set() 解决对象新增属性不能响应的问题 ？"></a>10. Vue 怎么用 vm.$set() 解决对象新增属性不能响应的问题 ？</h2><pre><code class="javascript">受现代 JavaScript 的限制 ，Vue 无法检测到对象属性的添加或删除。由于 Vue 会在初始化实例时对属性执行 getter/setter 转化，所以属性必须在 data 对象上存在才能让 Vue 将它转换为响应式的。但是 Vue 提供了 Vue.set (object, propertyName, value) / vm.$set (object, propertyName, value)来实现为对象添加响应式属性，那框架本身是如何实现的呢？我们查看对应的 Vue 源码：vue/src/core/instance/index.jsexport function set (target: Array&lt;any&gt; | Object, key: any, val: any): any &#123;  // target 为数组  if (Array.isArray(target) &amp;&amp; isValidArrayIndex(key)) &#123;    // 修改数组的长度, 避免索引&gt;数组长度导致splcie()执行有误    target.length = Math.max(target.length, key)    // 利用数组的splice变异方法触发响应式    target.splice(key, 1, val)    return val  &#125;  // key 已经存在，直接修改属性值  if (key in target &amp;&amp; !(key in Object.prototype)) &#123;    target[key] = val    return val  &#125;  const ob = (target: any).__ob__  // target 本身就不是响应式数据, 直接赋值  if (!ob) &#123;    target[key] = val    return val  &#125;  // 对属性进行响应式处理  defineReactive(ob.value, key, val)  ob.dep.notify()  return val&#125;我们阅读以上源码可知，vm.$set 的实现原理是：如果目标是数组，直接使用数组的 splice 方法触发相应式；如果目标是对象，会先判读属性是否存在、对象是否是响应式，最终如果要对属性进行响应式处理，则是通过调用 defineReactive 方法进行响应式处理（ defineReactive 方法就是 Vue 在初始化对象时，给对象属性采用 Object.defineProperty 动态添加 getter 和 setter 的功能所调用的方法）</code></pre><h2 id="11-虚拟-DOM-的优缺点？"><a href="#11-虚拟-DOM-的优缺点？" class="headerlink" title="11. 虚拟 DOM 的优缺点？"></a>11. 虚拟 DOM 的优缺点？</h2><pre><code class="javascript">优点：保证性能下限： 框架的虚拟 DOM 需要适配任何上层 API 可能产生的操作，它的一些 DOM 操作的实现必须是普适的，所以它的性能并不是最优的；但是比起粗暴的 DOM 操作性能要好很多，因此框架的虚拟 DOM 至少可以保证在你不需要手动优化的情况下，依然可以提供还不错的性能，即保证性能的下限；无需手动操作 DOM： 我们不再需要手动去操作 DOM，只需要写好 View-Model 的代码逻辑，框架会根据虚拟 DOM 和 数据双向绑定，帮我们以可预期的方式更新视图，极大提高我们的开发效率；跨平台： 虚拟 DOM 本质上是 JavaScript 对象,而 DOM 与平台强相关，相比之下虚拟 DOM 可以进行更方便地跨平台操作，例如服务器渲染、weex 开发等等。缺点:无法进行极致优化： 虽然虚拟 DOM + 合理的优化，足以应对绝大部分应用的性能需求，但在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化。</code></pre><h2 id="12-虚拟-DOM-实现原理？"><a href="#12-虚拟-DOM-实现原理？" class="headerlink" title="12. 虚拟 DOM 实现原理？"></a>12. 虚拟 DOM 实现原理？</h2><pre><code class="javascript">虚拟 DOM 的实现原理主要包括以下 3 部分：用 JavaScript 对象模拟真实 DOM 树，对真实 DOM 进行抽象；diff 算法 — 比较两棵虚拟 DOM 树的差异；pach 算法 — 将两个虚拟 DOM 对象的差异应用到真正的 DOM 树。</code></pre><h2 id="13-Vue-中的-key-有什么作用？"><a href="#13-Vue-中的-key-有什么作用？" class="headerlink" title="13. Vue 中的 key 有什么作用？"></a>13. Vue 中的 key 有什么作用？</h2><pre><code class="javascript">key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速。Vue 的 diff 过程可以概括为：oldCh 和 newCh 各有两个头尾的变量 oldStartIndex、oldEndIndex 和 newStartIndex、newEndIndex，它们会新节点和旧节点会进行两两对比，即一共有4种比较方式：newStartIndex 和oldStartIndex 、newEndIndex 和 oldEndIndex 、newStartIndex 和 oldEndIndex 、newEndIndex 和 oldStartIndex，如果以上 4 种比较都没匹配，如果设置了key，就会用 key 再进行比较，在比较的过程中，遍历会往中间靠，一旦 StartIdx &gt; EndIdx 表明 oldCh 和 newCh 至少有一个已经遍历完了，就会结束比较。所以 Vue 中 key 的作用是：key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速!更准确：因为带 key 就不是就地复用了，在 sameNode 函数 a.key === b.key 对比中可以避免就地复用的情况。所以会更加准确。更快速：利用 key 的唯一性生成 map 对象来获取对应节点，比遍历方式更快，源码如下：function createKeyToOldIdx (children, beginIdx, endIdx) &#123;  let i, key  const map = &#123;&#125;  for (i = beginIdx; i &lt;= endIdx; ++i) &#123;    key = children[i].key    if (isDef(key)) map[key] = i  &#125;  return map&#125;</code></pre><h2 id="14-你有对-Vue-项目进行哪些优化？"><a href="#14-你有对-Vue-项目进行哪些优化？" class="headerlink" title="14. 你有对 Vue 项目进行哪些优化？"></a>14. 你有对 Vue 项目进行哪些优化？</h2><pre><code class="javascript">（1）代码层面的优化v-if 和 v-show 区分使用场景computed 和 watch 区分使用场景v-for 遍历必须为 item 添加 key，且避免同时使用 v-if长列表性能优化事件的销毁图片资源懒加载路由懒加载第三方插件的按需引入优化无限列表性能服务端渲染 SSR or 预渲染（2）Webpack 层面的优化Webpack 对图片进行压缩减少 ES6 转为 ES5 的冗余代码提取公共代码模板预编译提取组件的 CSS优化 SourceMap构建结果输出分析Vue 项目的编译优化（3）基础的 Web 技术的优化开启 gzip 压缩浏览器缓存CDN 的使用使用 Chrome Performance 查找性能瓶颈</code></pre><h2 id="15-对于-vue3-0-特性你有什么了解的吗？"><a href="#15-对于-vue3-0-特性你有什么了解的吗？" class="headerlink" title="15. 对于 vue3.0 特性你有什么了解的吗？"></a>15. 对于 vue3.0 特性你有什么了解的吗？</h2><pre><code class="javascript">Vue 3.0 的目标是让 Vue 核心变得更小、更快、更强大，因此 Vue 3.0 增加以下这些新特性：（1）监测机制的改变3.0 将带来基于代理 Proxy 的 observer 实现，提供全语言覆盖的反应性跟踪。这消除了 Vue 2 当中基于 Object.defineProperty 的实现所存在的很多限制：只能监测属性，不能监测对象检测属性的添加和删除；检测数组索引和长度的变更；支持 Map、Set、WeakMap 和 WeakSet。新的 observer 还提供了以下特性：用于创建 observable 的公开 API。这为中小规模场景提供了简单轻量级的跨组件状态管理解决方案。默认采用惰性观察。在 2.x 中，不管反应式数据有多大，都会在启动时被观察到。如果你的数据集很大，这可能会在应用启动时带来明显的开销。在 3.x 中，只观察用于渲染应用程序最初可见部分的数据。更精确的变更通知。在 2.x 中，通过 Vue.set 强制添加新属性将导致依赖于该对象的 watcher 收到变更通知。在 3.x 中，只有依赖于特定属性的 watcher 才会收到通知。不可变的 observable：我们可以创建值的“不可变”版本（即使是嵌套属性），除非系统在内部暂时将其“解禁”。这个机制可用于冻结 prop 传递或 Vuex 状态树以外的变化。更好的调试功能：我们可以使用新的 renderTracked 和 renderTriggered 钩子精确地跟踪组件在什么时候以及为什么重新渲染。（2）模板模板方面没有大的变更，只改了作用域插槽，2.x 的机制导致作用域插槽变了，父组件会重新渲染，而 3.0 把作用域插槽改成了函数的方式，这样只会影响子组件的重新渲染，提升了渲染的性能。同时，对于 render 函数的方面，vue3.0 也会进行一系列更改来方便习惯直接使用 api 来生成 vdom 。（3）对象式的组件声明方式vue2.x 中的组件是通过声明的方式传入一系列 option，和 TypeScript 的结合需要通过一些装饰器的方式来做，虽然能实现功能，但是比较麻烦。3.0 修改了组件的声明方式，改成了类式的写法，这样使得和 TypeScript 的结合变得很容易。此外，vue 的源码也改用了 TypeScript 来写。其实当代码的功能复杂之后，必须有一个静态类型系统来做一些辅助管理。现在 vue3.0 也全面改用 TypeScript 来重写了，更是使得对外暴露的 api 更容易结合 TypeScript。静态类型系统对于复杂代码的维护确实很有必要。（4）其它方面的更改vue3.0 的改变是全面的，上面只涉及到主要的 3 个方面，还有一些其他的更改：支持自定义渲染器，从而使得 weex 可以通过自定义渲染器的方式来扩展，而不是直接 fork 源码来改的方式。支持 Fragment（多个根节点）和 Protal（在 dom 其他部分渲染组建内容）组件，针对一些特殊的场景做了处理。基于 treeshaking 优化，提供了更多的内置功能。</code></pre><h2 id="16-响应式原理（变化侦测）"><a href="#16-响应式原理（变化侦测）" class="headerlink" title="16. 响应式原理（变化侦测）"></a>16. 响应式原理（变化侦测）</h2><p><strong>使用发布订阅模式将数据劫持和模板编译结合，实现双向绑定</strong></p><pre><code class="javascript">1、observer: 封装 Object.defineProperty 方法用来劫持对象属性的getter和setter，以此来追踪数据变化。2、读取数据时触发getter来收集依赖(Watcher)到Dep。3、修改数据时触发setter，并遍历依赖列表，通知所有相关依赖（Watcher）4、Dep 类为依赖找一个存储依赖的地方，用来收集和管理依赖，在getter中收集，在setter中通知。5、Watcher 类就是收集的依赖，实际上是一个订阅器，Watcher会将自己的实例赋值给window.target（全局变量）上，然后去主动访问属性，触发属性的getter，getter中会将此Watcher收集到Dep中，Watcher的update方法会在Dep的通知方法中被调用，触发更新。6、Observer 类用来将一个对象的所有属性和子属性都变成响应式的，通过递归调用defineReactive来实现。7、由于无法侦测对象上新增/删除属性，所以提供 $set 和 $delete API5。28. Object.defineProperty怎么用， 三个参数？，有什么作用啊？Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。   obj：需要定义属性的对象     prop：需要定义的属性     &#123;&#125;：要定义或修改的属性描述符。         value: &quot;18&quot;,         // 设置默认值 （与 get() 互斥）         enumerable: true,    //这一句控制属性可以枚举 enumerable 改为true 就可以参与遍历了   默认值false         writable: true,      // 该属性是否可写   默认值false （与 set() 互斥）         configurable: true,  // 该属性是否可被删除   默认值false          get // 当有人读取 prop 的时候  get函数就会调用,并且返回就是 sss 的值          set // 当有人修改 prop 的时候  set函数就会调用, 有个参数这个参数就是修改后的值</code></pre><h2 id="17-vue2和vue3的响应式原理都有什么区别呢？"><a href="#17-vue2和vue3的响应式原理都有什么区别呢？" class="headerlink" title="17. vue2和vue3的响应式原理都有什么区别呢？"></a>17. vue2和vue3的响应式原理都有什么区别呢？</h2><pre><code class="javascript">vue2 用的是 Object.defindProperty 但是vue3用的是ProxyObject.defindProperty 缺点：一次只能对一个属性进行监听，需要遍历来对所有属性监听对于对象的新增属性，需要手动监听对于数组通过push、unshift方法增加的元素，也无法监听Proxy就没有这个问题，可以监听整个对象的数据变化，所以用vue3.0会用Proxy代替definedProperty。</code></pre><h2 id="18-Vue-模板编译原理"><a href="#18-Vue-模板编译原理" class="headerlink" title="18. Vue 模板编译原理"></a>18. Vue 模板编译原理</h2><pre><code class="javascript">模板字符串 转换成 element AST（解析器）Vue-loader 切割解析 .vue 文件（parseHTML按标签以出栈入栈形式切割（自闭合不入栈直接处理），出栈时维护父子关系）生成 AST（抽象语法树）使用大量正则匹配开始结束标签，while指针定位解析位置，对 AST 进行静态节点标记，主要用来做虚拟DOM的渲染优化（优化器）在dom更新时不需 diff 静态节点。使用 element AST 生成 render 函数代码字符串（代码生成器）Vue-template-compiler再解析成render（可执行函数字符串-with(this)=&gt;&#123;return _c(‘div’)&#125;），new Function 生成函数，传递给组件的 render在组件渲染的时候直接调用 render 即可</code></pre><h2 id="19-Vue原理总结"><a href="#19-Vue原理总结" class="headerlink" title="19. Vue原理总结"></a>19. Vue原理总结</h2><pre><code class="javascript">【模板编译】将template模板，经过编译系统后生成VNode，（模板字符串→AST→Render函数）【渲染】然后再通过渲染系统来将VNode生成真实DOM（document.createElement &amp;&amp; Mount挂载到真实DOM节点上）【响应式】通过响应式系统对数据进行监听，当数据发生改变时，触发依赖项（组件）【Diff &amp; Patch】组件内收到通知后，会通过diff算法对比VNode的变化，尽可能复用代码，找出最小差异，保证性能消耗最小。【渲染】拿到需要新增/删除/修改的VNode后，逐一去操作真实DOM进行修改（通过选择器选择到对应真实DOM节点进行修改）</code></pre><h1 id="对Vue的理解"><a href="#对Vue的理解" class="headerlink" title="对Vue的理解"></a>对Vue的理解</h1><h2 id="谈谈对MVVM的理解"><a href="#谈谈对MVVM的理解" class="headerlink" title="谈谈对MVVM的理解"></a>谈谈对MVVM的理解</h2><p>M-model，model代表数据模型，也可以在model中定义数据修改和操作的业务逻辑</p><p>V-view,view代表UI组件，它负责将数据模型转化为UI展现出来</p><p>VM-viewmodel,viewmodel监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步view和model的对象，连接model和view</p><h2 id="vue是渐进式的框架的理解：-主张最少-没有多做职责之外的事"><a href="#vue是渐进式的框架的理解：-主张最少-没有多做职责之外的事" class="headerlink" title="vue是渐进式的框架的理解：(主张最少,没有多做职责之外的事)"></a>vue是渐进式的框架的理解：(主张最少,没有多做职责之外的事)</h2><p>Vue的核心的功能，是一个视图模板引擎，但这不是说Vue就不能成为一个框架。如下图所示，这里包含了Vue的所有部件，在声明式渲染（视图模板引擎）的基础上，我们可以通过添加组件系统、客户端路由、大规模状态管理来构建一个完整的框架。更重要的是，这些功能相互独立，你可以在核心功能的基础上任意选用其他的部件，不一定要全部整合在一起。可以看到，所说的“渐进式”，其实就是Vue的使用方式，同时也体现了Vue的设计的理念<br>在我看来，渐进式代表的含义是：主张最少。视图模板引擎<br>每个框架都不可避免会有自己的一些特点，从而会对使用者有一定的要求，这些要求就是主张，主张有强有弱，它的强势程度会影响在业务开发中的使用方式。<br>比如说，Angular，它两个版本都是强主张的，如果你用它，必须接受以下东西：<br>必须使用它的模块机制- 必须使用它的依赖注入- 必须使用它的特殊形式定义组件（这一点每个视图框架都有，难以避免）<br>所以Angular是带有比较强的排它性的，如果你的应用不是从头开始，而是要不断考虑是否跟其他东西集成，这些主张会带来一些困扰。<br>Vue可能有些方面是不如React，不如Angular，但它是渐进的，没有强主张，你可以在原有大系统的上面，把一两个组件改用它实现，当jQuery用；也可以整个用它全家桶开发，当Angular用；还可以用它的视图，搭配你自己设计的整个下层用。也可以函数式，都可以，它只是个轻量视图而已，只做了自己该做的事，没有做不该做的事，仅此而已。<br><strong>渐进式的含义，我的理解是：没有多做职责之外的事。</strong></p><h2 id="SPA-单页面应用及其优缺点"><a href="#SPA-单页面应用及其优缺点" class="headerlink" title="SPA 单页面应用及其优缺点"></a>SPA 单页面应用及其优缺点</h2><p><strong>缺点：</strong></p><p>不支持低版本的浏览器，最低只支持到IE9；<br>不利于SEO的优化（如果要支持SEO，建议通过服务端来进行渲染组件）；<br>第一次加载首页耗时相对长一些；<br>不可以使用浏览器的导航按钮需要自行实现前进、后退。</p><p><strong>优点：</strong></p><p>无刷新体验,提升了用户体验；<br>前端开发不再以页面为单位，更多地采用组件化的思想，代码结构和组织方式更加规范化，便于修改和调整；<br>API 共享，同一套后端程序代码不用修改就可以用于Web界面、手机、平板等多种客户端<br>用户体验好、快，内容的改变不需要重新加载整个页面。</p><h2 id="怎样理解-Vue-的单向数据流？"><a href="#怎样理解-Vue-的单向数据流？" class="headerlink" title="怎样理解 Vue 的单向数据流？"></a>怎样理解 Vue 的单向数据流？</h2><pre><code class="javascript">所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。子组件想修改时，只能通过 $emit 派发一个自定义事件，父组件接收到后，由父组件修改。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express + vue搭建SSR</title>
      <link href="/performance-optimization/Express%20+%20vue%E6%90%AD%E5%BB%BASSR/"/>
      <url>/performance-optimization/Express%20+%20vue%E6%90%AD%E5%BB%BASSR/</url>
      
        <content type="html"><![CDATA[<h2 id="Express-vue搭建SSR"><a href="#Express-vue搭建SSR" class="headerlink" title="Express + vue搭建SSR"></a><strong>Express + vue搭建SSR</strong></h2><p>最近简单的研究了一下<code>SSR</code>，对<code>SSR</code>已经有了一个简单的认知，主要应用于单页面应用，<code>Nuxt</code>是<code>SSR</code>很不错的框架。也有过调研，简单的用了一下，感觉还是很不错。但是还是想知道若不依赖于框架又应该如果处理<code>SSR</code>,研究一下做个笔记。</p><h3 id="什么是SSR"><a href="#什么是SSR" class="headerlink" title="什么是SSR"></a><strong>什么是SSR</strong></h3><p>把<code>Vue</code>组件渲染为服务器端的<code>HTML</code>字符串，将他们直接发送到浏览器，最后将静态标记<code>混合</code>为客户端上完全交互的应用程序。</p><h3 id="为什么要使用SSR"><a href="#为什么要使用SSR" class="headerlink" title="为什么要使用SSR"></a><strong>为什么要使用SSR</strong></h3><p>更好的SEO，搜索引擎爬虫爬取工具可以直接查看完全渲染的页面 更宽的内容达到时间（time-to-content），当权请求页面的时候，服务端渲染完数据之后，把渲染好的页面直接发送给浏览器，并进行渲染。浏览器只需要解析<code>html</code>不需要去解析<code>js</code>。</p><h3 id="SSR弊端"><a href="#SSR弊端" class="headerlink" title="SSR弊端"></a><strong>SSR弊端</strong></h3><p>开发条件受限，<code>Vue</code>组件的某些生命周期钩子函数不能使用 开发环境基于<code>Node.js</code> 会造成服务端更多的负载。在<code>Node.js</code>中渲染完整的应用程序，显然会比仅仅提供静态文件<code>server</code>更加占用<code>CPU</code>资源，因此如果你在预料在高流量下使用，请准备响应的服务负载，并明智的采用缓存策略。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a><strong>准备工作</strong></h3><p>在正式开始之前，在<code>vue</code>官网找到了一张这个图片，图中详细的讲述了<code>vue</code>中对<code>ssr</code>的实现思路。如下图简单的说一下。</p><p>下图中很重要的一点就是<code>webpack</code>，在项目过程中会用到<code>webpack</code>的配置，从最左边开始就是我们所写入的源码文件，所有的文件都有一个公共的入口文件<code>app.js</code>，然后就进入了<code>server-entry</code>(服务端入口)和<code>client-entry</code>(客户端入口)，两个入口文件都要经过<code>webpack</code>，当访问<code>node</code>端的时候，使用的是服务端渲染，在服务端渲染的时候，会生成一个<code>server-Bender</code>，最后通过<code>server-Bundle</code>可以渲染出<code>HTML</code>页面，若在客户端访问的时候则是使用客户端渲染，通过<code>client-Bundle</code>在以后渲染出<code>HTML</code>页面。so~通过这个图可以很清晰的看出来，接下来会用到两个文件，一个<code>server</code>入口，一个<code>client</code>入口，最后由<code>webpack</code>生成<code>server-Bundle</code>和<code>client-Bundle</code>，最终当去请求页面的时候，<code>node</code>中的<code>server-Bundle</code>会生成<code>HTML</code>界面通过<code>client-Bundle</code>混合到<code>html</code>页面中即可。</p><html><pre><code>&lt;img src=&quot;https://pic.xiaohuochai.site/blogssr1.png&quot;/&gt;</code></pre></html><p>对于<code>vue</code>中使用<code>ssr</code>做了一些简单的了解之后，那么就开始我们要做的第一步吧，首先要创建一个项目，创建一个文件夹，名字不重要，但是最好不要使用中文。</p><pre><code>mkdir domecd domenpm init</code></pre><p><code>npm init</code>命令用来初始化<code>package.json</code>文件：</p><pre><code>&#123;  &quot;name&quot;: &quot;dome&quot;,   //  项目名称  &quot;version&quot;: &quot;1.0.0&quot;,   //  版本号  &quot;description&quot;: &quot;&quot;,    //  描述  &quot;main&quot;: &quot;index.js&quot;,   //  入口文件  &quot;scripts&quot;: &#123;          //  命令行执行命令 如：npm run test    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;  &#125;,  &quot;author&quot;: &quot;Aaron&quot;,     //  作者  &quot;license&quot;: &quot;ISC&quot;      //  许可证&#125;</code></pre><p>初始化完成之后接下来需要安装，项目所需要依赖的包，所有依赖项如下：</p><pre><code>npm install express --save-devnpm install vue --save-devnpm install vue-server-renderer --save-devnpm install vue-router --save-dev</code></pre><p>如上所有依赖项一一安装即可，安装完成之后就可以进行下一步了。前面说过<code>SSR</code>是服务端预渲染，所以当然要创建一个<code>Node</code>服务来支撑。在<code>dome</code>文件夹下面创建一个<code>index.js</code>文件，并使用<code>express</code>创建一个服务。</p><p>代码如下：</p><pre><code>const express = require(&quot;express&quot;);const app = express();app.get(&#39;*&#39;,(request,respones) =&gt; &#123;    respones.end(&quot;ok&quot;);&#125;)app.listen(3000,() =&gt; &#123;    console.log(&quot;服务已启动&quot;)&#125;);</code></pre><p>完成上述代码之后，为了方便我们需要在<code>package.json</code>添加一个命令，方便后续开发启动项目。</p><pre><code>&#123;  &quot;scripts&quot;: &#123;    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,    &quot;start&quot;: &quot;node index.js&quot;  &#125;&#125;</code></pre><p>创建好之后，在命令行直接输入<code>npm start</code>即可，当控制台显示<code>服务已启动</code>则表示该服务已经启动成功了。接下来需要打开浏览器看一下渲染的结果。在浏览器地址栏输入<code>locahost:3000</code>则可以看到<code>ok</code>两个字。</p><h3 id="SSR渲染手动搭建"><a href="#SSR渲染手动搭建" class="headerlink" title="SSR渲染手动搭建"></a><strong>SSR渲染手动搭建</strong></h3><p>前面的准备工作已经做好了，千万不要完了我们的主要目的不是为了渲染文字，主要的目标是为了渲染<code>*.vue</code>文件或<code>html</code>所以。接下来就是做我们想要做的事情了。接下来就是要修改<code>index.js</code>文件，将之前安装的<code>vue</code>和<code>vue-server-renderer</code>引入进来。</p><p>由于返回的不再是文字，而是<code>html</code>模板，所以我们要对响应头进行更改，告诉浏览器我们渲染的是什么，否则浏览器是不知道该如何渲染服务器返回的数据。</p><p>在<code>index.js</code>中引入了<code>vue-server-renderer</code>之后，在使用的时候，我们需要执行一下<code>vue-server-renderer</code>其中的<code>createRenderer</code>方法，这个方法的作用就是会将<code>vue</code>的实例转换成<code>html</code>的形式。</p><p>既然有了<code>vue-server-renderer</code>的方法，接下来就需要引入主角了<code>vue</code>,引入之后然后接着在下面创建一个<code>vue</code>实例，在<code>web</code>端使用<code>vue</code>的时候需要传一些参数给<code>Vue</code>然而在服务端也是如此也可以传递一些参数给<code>Vue</code>实例，这个实例也就是后续添加的那些<code>*.vue</code>文件。为了防止用户访问的时候页面数据不会互相干扰，暂时需要把实例放到<code>get</code>请求中，每次有访问的时候就会创建一个新的实例，渲染新的模板。</p><p><code>creteRender</code>方法能够把<code>vue</code>的实例转成<code>html</code>字符串传递到浏览器。那么接下来由应该怎么做？在<code>vueServerRender</code>方法下面有一个<code>renderToString</code>方法，这个方法就可以帮助我们完成这步操作。这个方法接受的第一个参数是<code>vue</code>的实例，第二个参数是一个回调函数，如果不想使用回调函数的话，这个方法也返回了一个<code>Promise</code>对象，当方法执行成功之后，会在<code>then</code>函数里面返回<code>html</code>结构。</p><p>index.js改动如下：</p><pre><code>const express = require(&quot;express&quot;);const Vue = require(&quot;vue&quot;);const vueServerRender = require(&quot;vue-server-renderer&quot;).createRenderer();const app = express();app.get(&#39;*&#39;,(request,respones) =&gt; &#123;    const vueApp = new Vue(&#123;        data:&#123;            message:&quot;Hello,Vue SSR!&quot;        &#125;,        template:`&lt;h1&gt;&#123;&#123;message&#125;&#125;&lt;/h1&gt;`     &#125;);    respones.status(200);    respones.setHeader(&quot;Content-Type&quot;,&quot;text/html;charset-utf-8;&quot;);    vueServerRender.renderToString(vueApp).then((html) =&gt; &#123;        respones.end(html);    &#125;).catch(error =&gt; console.log(error));&#125;)app.listen(3000,() =&gt; &#123;    console.log(&quot;服务已启动&quot;)&#125;);</code></pre><p>上述操作完成之后，一定要记得保存，然后重启服务器，继续访问一下<code>locahost:3000</code>，就会看到在服务端写入的<code>HTML</code>结构了。这样做好像给我们添加了大量的工作，到底与在<code>web</code>端直接使用有什么区别么？</p><p>接下来见证奇迹的时刻到了。在网页中右键<code>查看源代码</code>就会发现与之前的在<code>web</code>端使用的时候完全不同，可以看到渲染的模板了。如果细心的就会发现一件很有意思的事情，在<code>h1</code>标签上会有一个<code>data-server-rendered=true</code>这样的属性，这个可以告诉我们这个页面是通过服务端渲染来做的。大家可以去其他各大网站看看哦。没准会有其他的收获。</p><p>上面的案例中，虽然已经实现了服务端预渲染，但是会有一个很大的缺陷，就是我们所渲染的这个网页并不完整，没有文档声明，<code>head</code>等等等，当然可能会有一个其他的想法，就是使用<code>es6</code>的模板字符串做拼接就好了啊。确实，这样也是行的通的，但是这个仍是饮鸩止渴不能彻底的解决问题，如果做过传统<code>MVC</code>开发的话，就应该知道，<code>MVC</code>开发模式全是基于模板的，现在这种与<code>MVC</code>有些相似的地方，同理也是可以使用模板的。在<code>dome</code>文件夹下创建<code>index.html</code>，并创建好<code>HTML</code>模板。</p><p>模板现在有了该如何使用？在<code>createRenderer</code>函数可以接收一个对象作为配置参数。配置参数中有一项为<code>template</code>,这项配置的就是我们即将使用的<code>Html</code>模板。这个接收的不是一个单纯的路径，我们需要使用<code>fs</code>模块将<code>html</code>模板读取出来。</p><p>其配置如下：</p><pre><code>let path = require(&quot;path&quot;);const vueServerRender = require(&quot;vue-server-renderer&quot;).createRenderer(&#123;    template:require(&quot;fs&quot;).readFileSync(path.join(__dirname,&quot;./index.html&quot;),&quot;utf-8&quot;)&#125;);</code></pre><p>现在模板已经有了，在<code>web</code>端进行开发的时候，需要挂在一个<code>el</code>的挂载点，这样<code>Vue</code>才知道把这些<code>template</code>渲染在哪，服务端渲染也是如此，同样也需要告诉<code>Vue</code>将<code>template</code>渲染到什么地方。接下来要做的事情就是在<code>index.html</code>中做手脚。来通知<code>createRenderer</code>把<code>template</code>添加到什么地方。</p><p>更改<code>index.html</code>文件：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html &gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;meta name=&quot;viewport&quot; content=&quot;&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;&lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;!--vue-ssr-outlet--&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>可以发现，在<code>html</code>的<code>body</code>里面添加了一段注释，当将<code>vueServerRender</code>编译好的<code>html</code>传到模板当中之后这个地方将被替换成服务端预编译的模板内容，这样也算是完成一个简单的服务端预渲染了。虽然写入的只是简单的<code>html</code>渲染，没有数据交互也没有页面交互，也算是一个不小的进展了。</p><p>使用<code>SSR</code>搭建项目我们继续延续上个项目继续向下开发，大家平时在使用<code>vue-cli</code>搭建项目的时候，都是在<code>src</code>文件夹下面进行开发的，为了和<code>vue</code>项目结构保持一致，同样需要创建一个<code>src</code>文件夹，并在<code>src</code>文件夹创建<code>conponents,router,utils,view</code>,暂定项目结构就这样，随着代码的编写会逐渐向项目里面添加内容。</p><pre><code>└─src|   ├─components|   ├─router|   ├─utils|   ├─view|   └─app.js└─index.js</code></pre><p>初始的目录结构已经搭建好了之后，接下来需要继续向下进行，首先要做的就是要在<code>router</code>目录中添加一个<code>index.js</code>文件，用来创建路由信息（在使用路由的时候一定要确保路由已经安装）。路由在项目中所起到的作用应该是重要的，路由会通过路径把页面和组件之间建立联系，并且一一的对应起来，完成路由的渲染。</p><p>接下来在<code>router</code>下面的<code>index.js</code>文件中写入如下配置：</p><pre><code>const vueRouter = require(&quot;vue-router&quot;);const Vue = require(&quot;vue&quot;);Vue.use(vueRouter);module.exports = () =&gt; &#123;    return new vueRouter(&#123;        mode:&quot;history&quot;,        routes:[            &#123;                path:&quot;/&quot;,                component:&#123;                    template:`&lt;h1&gt;这里是首页&lt;/h1&gt;`                &#125;,                name:&quot;home&quot;            &#125;,            &#123;                path:&quot;/about&quot;,                component:&#123;                    template:`&lt;h1&gt;这里是关于我&lt;/h1&gt;`                &#125;,                name:&quot;about&quot;            &#125;        ]    &#125;)&#125;</code></pre><p>上面的代码中，仔细观察的话，和平时在<code>vue-cli</code>中所导出的方式是不一样的，这里采用了工厂方法，这里为什么要这样？记得在雏形里面说过，为了保证用户每次访问都要生成一个新的路由，防止用户与用户之间相互影响，也就是说Vue实例是新的，我们的<code>vue-router</code>的实例也应该保证它是一个全新的。</p><p>现在<code>Vue</code>实例和服务端混在一起，这样对于项目的维护是很不好的，所以也需要把<code>Vue</code>从服务端单独抽离出来，放到<code>app.js</code>中去。这里采用和<code>router</code>同样的方式使用工厂方式，以保证每次被访问都是一个全新的<code>vue</code>实例。在<code>app.js</code>导入刚刚写好的路由，在每次触发工厂的时候，创建一个新的路由实例，并绑定到<code>vue</code>实例里面，这样用户在访问路径的时候无论是<code>vue</code>实例还是<code>router</code>都是全新的了。</p><p>app.js：</p><pre><code>const Vue = require(&quot;vue&quot;);const createRouter = require(&quot;../router&quot;)module.exports = (context) =&gt; &#123;    const router = createRouter();    return new Vue(&#123;        router,        data:&#123;            message:&quot;Hello,Vue SSR!&quot;        &#125;,        template:`            &lt;div&gt;                &lt;div&gt;                    &lt;h1&gt;&#123;&#123;message&#125;&#125;&lt;/h1&gt;                    &lt;ul&gt;                        &lt;li&gt;                            &lt;router-link to=&quot;/&quot;&gt;首页&lt;/router-link&gt;                        &lt;/li&gt;                        &lt;li&gt;                            &lt;router-link to=&quot;/about&quot;&gt;关于我&lt;/router-link&gt;                        &lt;/li&gt;                    &lt;/ul&gt;                &lt;/div&gt;                &lt;router-view&gt;&lt;/router-view&gt;            &lt;/div&gt;        `     &#125;);&#125;</code></pre><p>做完这些东西貌似好像就能用了一样，但是还是不行，仔细想想好像忘了一些什么操作，刚刚把<code>vue</code>实例从<code>index.js</code>中抽离出来了，但是却没有在任何地方使用它，哈哈，好像是一件很尴尬的事情。</p><p>修改<code>index.js</code>文件：</p><pre><code>const express = require(&quot;express&quot;);const vueApp = require(&quot;./src/app.js&quot;);let path = require(&quot;path&quot;);const vueServerRender = require(&quot;vue-server-renderer&quot;).createRenderer(&#123;  template:require(&quot;fs&quot;).readFileSync(path.join(__dirname,&quot;./index.html&quot;),&quot;utf-8&quot;)&#125;);const app = express();app.get(&#39;*&#39;,(request,respones) =&gt; &#123;        //  这里可以传递给vue实例一些参数    let vm = vueApp(&#123;&#125;)        respones.status(200);    respones.setHeader(&quot;Content-Type&quot;,&quot;text/html;charset-utf-8;&quot;);    vueServerRender.renderToString(vm).then((html) =&gt; &#123;        respones.end(html);    &#125;).catch(error =&gt; console.log(error));&#125;)app.listen(3000,() =&gt; &#123;    console.log(&quot;服务已启动&quot;)&#125;);</code></pre><p>准备工作都已经做好啦，完事具备只欠东风啦。现在运行一下<code>npm start</code>可以去页面上看一下效果啦。看到页面中已经渲染出来了，但是好像是少了什么？虽然导航内容已经都显示出来了，但是路由对应的组件好像没得渲染噻。具体是什么原因导致的呢，<code>vue-router</code>是由前端控制渲染的，当访问路由的时候其实，在做首屏渲染的时候并没有授权给服务端让其去做渲染路由的工作。(⊙﹏⊙)，是的我就是这么懒…</p><p>这个问题解决方案也提供了相对应的操作，不然就知道该怎么写下去了。既然在做渲染的时候分为服务端渲染和客户端渲染两种，那么我们就需要两个入口文件，分别对应的服务端渲染的入口文件，另个是客户端渲染的入口文件。</p><p>在<code>src</code>文件夹下面添加两个<code>.js</code>文件(当然也可以放到其他地方，这里只是为了方便),<code>entry-client.js</code>这个文件用户客户端的入口文件，<code>entry-server.js</code>那么这个文件则就作为服务端的入口文件。既然入口文件已经确定了，接下来就是要解决刚才的问题了,首先解决的是服务端渲染，在服务端这里需要把用户所访问的路径传递给<code>vue-router</code>，如果不传递给<code>vue-router</code>的话，<code>vue-router</code>会一脸懵逼的看着你，你什么都不给我，我怎么知道渲染什么？</p><p>在<code>entry-server</code>中需要做的事情就是需要把<code>app.js</code>导入进来，这里可以向上翻一下<code>app.js</code>中保存的是创建vue实例的方法。首先在里面写入一个函数，至于为什么就不多说了（同样也是为了保证每次访问都有一个新的实例），这个函数接收一个参数（<code>[object]</code>），由于这里考虑到可能会有异步操作(如懒加载)，在这个函数中使用了<code>Promise</code>，在<code>Promise</code>中首先要拿到连个东西，不用猜也是能想到的，很重要的<code>vue</code>实例和<code>router</code>实例，so~但是在<code>app</code>中好像只导出了<code>vue</code>实例，还要根据当前所需要的去更改<code>app.js</code>。</p><p>app.js:</p><pre><code>const Vue = require(&quot;vue&quot;);const createRouter = require(&quot;../router&quot;)module.exports = (context) =&gt; &#123;    const router = createRouter();    const app = new Vue(&#123;        router,        data:&#123;            message:&quot;Hello,Vue SSR!&quot;        &#125;,        template:`            &lt;div&gt;                &lt;div&gt;                    &lt;h1&gt;&#123;&#123;message&#125;&#125;&lt;/h1&gt;                    &lt;ul&gt;                        &lt;li&gt;                            &lt;router-link to=&quot;/&quot;&gt;首页&lt;/router-link&gt;                        &lt;/li&gt;                        &lt;li&gt;                            &lt;router-link to=&quot;/about&quot;&gt;关于我&lt;/router-link&gt;                        &lt;/li&gt;                    &lt;/ul&gt;                &lt;/div&gt;                &lt;router-view&gt;&lt;/router-view&gt;            &lt;/div&gt;        `     &#125;);    return &#123;        app,        router    &#125;&#125;</code></pre><p>通过上面的改造之后，就可以在<code>entry-server.js</code>中轻松的拿到<code>vue</code>和<code>router</code>的实例了，现在查看一下当前<code>entry-server.js</code>中有那些可用参数，<code>vue</code>,<code>router</code>,提及到的<code>URL</code>从哪里来？既然这个函数是给服务端使用的，那么当服务端去执行这个函数的时候，就可以通过参数形式传递进来，获取到我们想要的参数，我们假设这个参数叫做<code>url</code>，我们需要让路由去做的就是跳转到对应的路由中（这一步很重要），然后再把对<code>router</code>的实例挂载到<code>vue</code>实例中，然后再把<code>vue</code>实例返回出去，供<code>vueServerRender</code>消费。那么就需要导出这个函数，以供服务端使用。</p><p>由于我们不能预测到用户所访问的路由就是在<code>vue-router</code>中所配置的，所以需要在<code>onReady</code>的时候进行处理，我们可以通过<code>router</code>的<code>getMatchedComponents</code>这个方法，获取到我们所导入的组件，这些有个我们就可通过判断组件对匹配结果进行渲染。</p><p>entry-server.js</p><pre><code>const createApp = require(&quot;./app.js&quot;);module.exports = (context) =&gt; &#123;    return new Promise((reslove,reject) =&gt; &#123;        let &#123;url&#125; = context;        let &#123;app,router&#125; = createApp(context);        router.push(url);        //  router回调函数        //  当所有异步请求完成之后就会触发        router.onReady(() =&gt; &#123;            let matchedComponents = router.getMatchedComponents();            if(!matchedComponents.length)&#123;                return reject(&#123;                    code:404,                &#125;);            &#125;            reslove(app);        &#125;,reject)    &#125;)&#125;</code></pre><p>既然实例又发生了变化，需要对应发生变化的<code>index.js</code>同样也需要做出对应的改动。把刚才的引入<code>vue</code>实例的路径改为<code>entey-server.js</code>，由于这里返回的是一个<code>Promise</code>对象，这里使用<code>async/await</code>处理接收一下，并拿到<code>vue</code>实例。不要忘了把<code>router</code>所需要的<code>url</code>参数传递进去。</p><p>index.js:</p><pre><code>const express = require(&quot;express&quot;);const App = require(&quot;./src/entry-server.js&quot;);let path = require(&quot;path&quot;);const vueServerRender = require(&quot;vue-server-renderer&quot;).createRenderer(&#123;  template:require(&quot;fs&quot;).readFileSync(path.join(__dirname,&quot;./index.html&quot;),&quot;utf-8&quot;)&#125;);const app = express();app.get(&#39;*&#39;,async (request,respones) =&gt; &#123;    respones.status(200);    respones.setHeader(&quot;Content-Type&quot;,&quot;text/html;charset-utf-8;&quot;);    let &#123;url&#125; = request;    //  这里可以传递给vue实例一些参数    let vm = await App(&#123;url&#125;);    vueServerRender.renderToString(vm).then((html) =&gt; &#123;        respones.end(html);    &#125;).catch(error =&gt; console.log(error));&#125;)app.listen(3000,() =&gt; &#123;    console.log(&quot;服务已启动&quot;)&#125;);</code></pre><p>这下子就完成了，启动项目吧，当访问根路径的时候，就会看到刚才缺少的组件也已经渲染出来了，当然我们也可以切换路由，也是没有问题的。大功告成。。。好像并没有emmmmmmmmm，为什么，细心的话应该会发现，当我们切换路由的时候，地址栏旁边的刷新按钮一直在闪动，这也就是说，我们所做出来的并不是一个单页应用（手动笑哭），出现这样的问题也是难怪的，毕竟我们没有配置前端路由，我们把所有路由的控制权都交给了服务端，每次访问一个路由的时候，都会向服务端发送一个请求，返回路由对应的页面。想要解决这个问题，当处于前端的时候我们需要让服务端把路由的控制权交还给前端路由，让前端去控制路由的跳转。</p><p>之前在<code>src</code>文件夹下面添加了两个文件，只用到了服务端的文件，为了在客户端能够交还路由控制权，要对<code>web</code>端路由进行配置。由于在客户端在使用<code>vue</code>的时候需要挂载一个<code>document</code>，因为<code>vue</code>的实例已经创建完成了，所以，这里需要使用<code>$mount</code>这个钩子函数，来完成客户端的挂载。同样为了解决懒加载这种类似的问题so~同样需要使用<code>onReady</code>里进行路由的处理，只有当<code>vue-router</code>加载完成以后再去挂载。</p><p>在客户端是使用的时候很简单，只需要把路由挂载到<code>app</code>里面就可以了。</p><p>entry-client.js</p><pre><code>const createApp = require(&quot;./app.js&quot;);let &#123;app,router&#125; = createApp(&#123;&#125;);router.onReady(() =&gt; &#123;    app.$mount(&quot;#app&quot;)&#125;);</code></pre><p>整个项目的雏形也就这样了，由于服务端把路由控制权交还给客户端，需要复杂的<code>webpack</code>配置，so~不再赘述了，下面直接使用<code>vue-cli</code>继续（做的是使用需要用到上面的代码）。</p><h3 id="vue-cli项目搭建"><a href="#vue-cli项目搭建" class="headerlink" title="vue-cli项目搭建"></a><strong>vue-cli项目搭建</strong></h3><p>在做准备工作的时候简单讲述了<code>vue</code>中使用<code>ssr</code>的运行思路，里面提及了一个很重要的<code>webpack</code>，因此这里需要借助<code>vue-cli</code>脚手架，直接更改原有的<code>webpack</code>就可以了，这样会方便很多。</p><p>这里建议大家返回顶部再次看一下<code>vue</code>服务端渲染的流程，在介绍中的<code>client-bundle</code>和<code>server-bundle</code>，，所以需要构建两个配置，分别是服务端配置和客户端的配置。</p><p>如想要实现服务端渲染需要对<code>vue-cli</code>中个<code>js</code>文件中的配置进行修改。以下只展示更改部分的代码，不展示全部。</p><p>文件分别是：</p><p>webpack.server.conf.js - 服务端webpack配置 dev-server.js - 获取服务端bundle server.js - 创建后端服务 webpack.dev.conf.js - 客户端的bundle webpack.base.conf - 修改入口文件</p><p><strong>客户端配置</strong></p><p>客户端生成一份客户端构建清单，记录客户端的资源，最终会将客户端构建清单中记录的文件，注入到执行的执行的模板中，这个清单与服务端类似，同样也会生成一份<code>json</code>文件，这个文件的名字是<code>vue-ssr-client-manifest.json</code>（项目启动以后可以通过地址&#x2F;文件名访问到），当然必不可少的是，同样也需要引入一个叫做<code>vue-server-renderer/client-plugin</code>模块，作为<code>webpack</code>的插件供其使用。</p><p>首先要安装一下<code>vue-server-renderer</code>这个模块，这个是整个服务端渲染的核心，没有整个<code>ssr</code>是没有任何灵魂的。</p><pre><code>npm install vue-server-renderer -S</code></pre><p>安装完成之后，首先要找到<code>webpack.dev.conf.js</code>，首先要对其进行相关配置。</p><p>webpack.dev.conf.js</p><pre><code>//  添加引入  vue-server-render/client-plugin  模块const vueSSRClientPlugin = require(&quot;vue-server-renderer/client-plugin&quot;);const devWebpackConfig = merge(baseWebpackConfig,&#123;    plugins:[        new vueSSRClientPlugin()    ] &#125;);</code></pre><p>添加了这个配置以后，重新启动项目通过地址就可以访问到<code>vue-ssr-client-manifest.json</code>（<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgwL3Z1ZS1zc3ItY2xpZW50LW1hbmlmZXN0Lmpzb24lRUYlQkMlODklRUYlQkMlOEMlRTklQTElQjUlRTklOUQlQTIlRTQlQjglQUQlRTUlODclQkElRTclOEUlQjAlRTclOUElODQlRTUlODYlODUlRTUlQUUlQjklRTUlQjAlQjElRTYlOTglQUYlRTYlODklODAlRTklOUMlODAlRTglQTYlODElRTclOUElODQlNjBjbGllbnQtYnVuZGxlJTYwJUUzJTgwJTgy">http://localhost:8080/vue-ssr-client-manifest.json），页面中出现的内容就是所需要的`client-bundle`。</span></p><p><strong>服务端配置</strong></p><p>服务端会默认生成一个<code>vue-ssr-server-bundle.json</code>文件，在文件中会记录整个服务端整个输出，怎么才能生成这个文件呢？要在这个<code>json</code>文件，必须要引入<code>vue-server-renderer/server-plugin</code>,并将其作为<code>webpack</code>的插件。</p><p>在开始服务端配置之前，需要在<code>src</code>文件夹下面创建三个文件，<code>app.js</code>，<code>entry-client.js</code>，<code>entry-server.js</code>，创建完成之后需要对其写入相关代码。</p><p>src&#x2F;router&#x2F;index.js</p><pre><code>import vueRouter from &quot;vue-router&quot;;import Vue from &quot;vue&quot;;import HelloWorld from &quot;@/components/HelloWorld&quot;;Vue.use(vueRouter);export default () =&gt; &#123;    return new vueRouter(&#123;        mode:&quot;history&quot;,        routes:[            &#123;                path:&quot;/&quot;,                component:HelloWorld,                name:&quot;HelloWorld&quot;            &#125;        ]    &#125;)&#125;</code></pre><p>app.js</p><pre><code>import Vue from &quot;vue&quot;;import createRouter from &quot;./router&quot;;import App from &quot;./App.vue&quot;;export default (context) =&gt; &#123;    const router = createRouter();    const app = new Vue(&#123;        router,        components: &#123; App &#125;,        template: &#39;&lt;App/&gt;&#39;    &#125;);    return &#123;        app,        router    &#125;&#125;</code></pre><p>entry-server.js</p><pre><code>import createApp from &quot;./app.js&quot;;export default (context) =&gt; &#123;    return new Promise((reslove,reject) =&gt; &#123;        let &#123;url&#125; = context;        let &#123;app,router&#125; = createApp(context);        router.push(url);        router.onReady(() =&gt; &#123;            let matchedComponents = router.getMatchedComponents();            if(!matchedComponents.length)&#123;                return reject(&#123;                    code:404,                &#125;);            &#125;            reslove(app);        &#125;,reject)    &#125;)&#125;</code></pre><p>entry-client.js</p><pre><code>import createApp from &quot;./app.js&quot;;let &#123;app,router&#125; = createApp();router.onReady(() =&gt; &#123;    app.$mount(&quot;#app&quot;);&#125;);</code></pre><p>webpack.base.conf.js</p><pre><code>module.exports = &#123;    entry:&#123;        app:&quot;./src/entry-client.js&quot;    &#125;,    output:&#123;        publicPath:&quot;http://localhost:8080/&quot;    &#125;&#125;;</code></pre><p>webpack.server.conf.js(手动创建)</p><pre><code>const webpack = require(&quot;webpack&quot;);const merge = require(&quot;webpack-merge&quot;);const base = require(&quot;./webpack.base.conf&quot;);//  手动安装//  在服务端渲染中，所需要的文件都是使用require引入，不需要把node_modules文件打包const webapckNodeExternals = require(&quot;webpack-node-externals&quot;);const vueSSRServerPlugin = require(&quot;vue-server-renderer/server-plugin&quot;);module.exports = merge(base,&#123;    //  告知webpack，需要在node端运行    target:&quot;node&quot;,    entry:&quot;./src/entry-server.js&quot;,    devtool:&quot;source-map&quot;,    output:&#123;        filename:&#39;server-buldle.js&#39;,        libraryTarget: &quot;commonjs2&quot;    &#125;,    externals:[        webapckNodeExternals()    ],    plugins:[        new webpack.DefinePlugin(&#123;            &#39;process.env.NODE_ENV&#39;:&#39;&quot;devlopment&quot;&#39;,            &#39;process.ent.VUE_ENV&#39;: &#39;&quot;server&quot;&#39;        &#125;),        new vueSSRServerPlugin()    ]&#125;);</code></pre><p>dev-server.js(手动创建)</p><pre><code>const serverConf = require(&quot;./webpack.server.conf&quot;);const webpack = require(&quot;webpack&quot;);const fs = require(&quot;fs&quot;);const path = require(&quot;path&quot;);//  读取内存中的.json文件//  这个模块需要手动安装const Mfs = require(&quot;memory-fs&quot;);const axios = require(&quot;axios&quot;);module.exports = (cb) =&gt; &#123;    const webpackComplier = webpack(serverConf);    var mfs = new Mfs();        webpackComplier.outputFileSystem = mfs;        webpackComplier.watch(&#123;&#125;,async (error,stats) =&gt; &#123;        if(error) return console.log(error);        stats = stats.toJson();        stats.errors.forEach(error =&gt; console.log(error));        stats.warnings.forEach(warning =&gt; console.log(warning));        //  获取server bundle的json文件        let serverBundlePath = path.join(serverConf.output.path,&#39;vue-ssr-server-bundle.json&#39;);        let serverBundle = JSON.parse(mfs.readFileSync(serverBundlePath,&quot;utf-8&quot;));        //  获取client bundle的json文件        let clientBundle = await axios.get(&quot;http://localhost:8080/vue-ssr-client-manifest.json&quot;);        //  获取模板        let template = fs.readFileSync(path.join(__dirname,&quot;..&quot;,&quot;index.html&quot;),&quot;utf-8&quot;);        cb &amp;&amp; cb(serverBundle,clientBundle,template);    &#125;)&#125;;</code></pre><p>根目录&#x2F;server.js(手动创建)</p><pre><code>const devServer = require(&quot;./build/dev-server.js&quot;);const express = require(&quot;express&quot;);const app = express();const vueRender = require(&quot;vue-server-renderer&quot;);app.get(&#39;*&#39;,(request,respones) =&gt; &#123;    respones.status(200);    respones.setHeader(&quot;Content-Type&quot;,&quot;text/html;charset-utf-8;&quot;);    devServer((serverBundle,clientBundle,template) =&gt; &#123;        let render = vueRender.createBundleRenderer(serverBundle,&#123;            template,            clientManifest:clientBundle.data,            //  每次创建一个独立的上下文            renInNewContext:false        &#125;);         render.renderToString(&#123;            url:request.url        &#125;).then((html) =&gt; &#123;            respones.end(html);        &#125;).catch(error =&gt; console.log(error));    &#125;);&#125;)app.listen(5000,() =&gt; &#123;    console.log(&quot;服务已启动&quot;)&#125;);</code></pre><p>index.html</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html &gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;meta name=&quot;viewport&quot; content=&quot;&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;&lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div &gt;        &lt;!--vue-ssr-outlet--&gt;    &lt;/div&gt;    &lt;!-- built files will be auto injected --&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>以上就是所有要更改和添加的配置项，配置完所有地方就可以完成服务端渲染。此时需要在<code>package.json</code>中的<code>sctipt</code>中添加启动项：<code>http:node server.js</code>，就可以正常运行项目了。注意一定要去访问服务端设置的端口，同时要保证你的客户端也是在线的。</p><h3 id="nuxt是一个基于-Vue-js-的通用应用框架，它提供了一种简单而强大的方式来创建服务器渲染的-Vue-js-应用"><a href="#nuxt是一个基于-Vue-js-的通用应用框架，它提供了一种简单而强大的方式来创建服务器渲染的-Vue-js-应用" class="headerlink" title="nuxt是一个基于 Vue.js 的通用应用框架，它提供了一种简单而强大的方式来创建服务器渲染的 Vue.js 应用"></a>nuxt是一个基于 Vue.js 的通用应用框架，它提供了一种简单而强大的方式来创建服务器渲染的 Vue.js 应用</h3><ol><li><p>服务器端渲染（SSR）：Nuxt.js 提供了内置的服务器端渲染支持，可以在服务器端生成完整的 HTML 页面，并将其发送给客户端展示。这样可以提供更快的首次加载速度和更好的搜索引擎优化。同时，Nuxt.js 还为前端开发人员隐藏了大部分 SSR 的复杂性，使得开发 SSR 应用变得更加简单。</p></li><li><p>自动路由配置：Nuxt.js 根据项目目录结构自动生成路由配置，无需手动配置每个页面的路由信息。只需按照约定的目录结构组织代码即可实现自动路由匹配。这样可以极大地提高开发效率。</p></li><li><p>强大的异步数据处理：Nuxt.js 提供了一个特殊的 asyncData 方法，可以在页面组件中获取和处理异步数据。这样，在渲染页面之前，可以先获取页面所需的数据，并将数据注入到组件中。这种方式简化了前后端数据交互的过程，同时也提供了更好的性能和用户体验。</p></li><li><p>插件机制：Nuxt.js 提供了插件机制，可以方便地扩展和集成第三方库。通过插件，可以在项目中引入和使用其他 Vue.js 生态系统中的工具和功能。</p></li><li><p>静态文件服务：Nuxt.js 能够自动处理静态文件，例如图片、样式表和字体等。它提供了一个特殊的目录（static），其中的文件将被直接复制到构建目录中，使得这些文件可以通过 HTTP 服务器直接访问。</p></li><li><p>开发和调试工具：Nuxt.js 集成了很多开发和调试工具，例如热重载、代码分割和错误定位等。这些工具可以提高开发效率，并帮助开发人员更快地找到和解决问题。</p></li><li><p>生态系统支持：Nuxt.js 基于 Vue.js 生态系统，可以充分利用 Vue.js 的丰富生态系统，包括 Vue 组件、Vue 插件和 Vue CLI 等。这样开发者可以通过 Nuxt.js 构建出更加强大和灵活的应用程序。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 前端性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue首屏优化</title>
      <link href="/performance-optimization/Vue%E9%A6%96%E5%B1%8F%E4%BC%98%E5%8C%96/"/>
      <url>/performance-optimization/Vue%E9%A6%96%E5%B1%8F%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<ol><li>代码压缩和优化：使用工具（如Webpack、UglifyJS等）对代码进行压缩和优化，减少不必要的空格、注释和代码体积，以提高加载速度。<br><strong>优化的方向</strong></li></ol><ul><li>移除注释和空格：工具会删除代码中的多余注释和空格，以减小文件体积。</li><li>变量重命名：工具会对代码中的变量和函数进行重命名，使用更短、没有语义的名称，以缩小文件大小。这种压缩技术称为代码混淆。</li><li>语法转换：工具可以将一些较新版本的JavaScript语法转换为较旧版本，以增加代码的兼容性，并使之在更多的浏览器中运行。</li><li>静态资源优化：工具可以对图片、字体等静态资源进行优化，如压缩、缓存等，以减小静态资源的大小和提高加载速度。</li><li>代码拆分：工具可以将代码拆分成多个模块或块，按需加载，以避免一次性加载过多的代码，提高页面的首次加载速度。</li><li>依赖管理：工具可以分析代码中的依赖关系，将多个文件合并为一个或多个较小的文件，以减少网络请求和优化加载顺序。<br><strong>具体操作</strong></li><li>uglifyjs-webpack-plugin（或terser-webpack-plugin）：这是一个用于压缩JavaScript代码的插件。它可以移除注释、空格，并对代码进行混淆和压缩，以减小文件体积。</li><li>html-webpack-plugin：该插件用于生成HTML文件，并自动将打包后的脚本和样式文件引入HTML文件中。它还可以配置参数，如压缩HTML、添加哈希值等。</li><li>mini-css-extract-plugin：这个插件用于提取CSS代码到单独的文件中，并通过link标签将其引入HTML文件，以减少页面加载时的样式闪烁问题。</li><li>optimize-css-assets-webpack-plugin：该插件用于压缩提取出的CSS代码，以减小文件体积。</li><li>splitChunks方法：这是Webpack的内置方法，用于分割代码块。它根据配置策略将公共模块提取到一个单独的文件中，以避免重复加载，提高页面加载速度。</li><li>Tree Shaking：这是一种通过静态分析技术删除未使用的代码的方法。Webpack利用Tree Shaking来识别和删除项目中未使用的代码，进一步减小文件体积。</li><li>webpack-bundle-analyzer：这是一个用于可视化分析打包后文件大小的插件。它可以生成交互式的报告，帮助你了解哪些模块占用了大量的空间，并优化你的打包配置。</li></ul><ol start="2"><li>使用CDN：将静态资源（如Vue库、UI框架、图片等）托管到CDN（内容分发网络）上，利用CDN的全球节点分布加速静态资源的下载。</li></ol><ul><li>选择合适的CDN提供商：根据项目需求和预算，选择一个可靠的CDN提供商。常见的CDN提供商包括阿里云CDN、腾讯云CDN、华为云CDN等。</li><li>创建CDN加速域名：在CDN提供商的控制台上创建一个新的CDN加速域名。将你的域名绑定到CDN上，例如cdn.yourdomain.com。</li><li>上传静态资源到CDN：将需要加速的静态资源（如Vue库、UI框架、图片等）上传到CDN提供商的存储空间中，一般称为CDN源站或CDN加速源。</li><li>配置CDN缓存规则：在CDN提供商的控制台上，根据需要配置适当的缓存规则。可以设置缓存时间、缓存策略等，以实现最佳的缓存效果。</li><li>刷新CDN缓存：如果有更新的静态资源，需要手动刷新CDN缓存，以确保新的资源能够及时生效。CDN提供商一般会提供相应的刷新缓存接口或工具。</li><li>修改网页代码：将原来引用静态资源的链接修改为CDN加速域名的链接。例如，将原来引用Vue库的链接从<span class="exturl" data-url="aHR0cHM6Ly9jZG4uZXhhbXBsZS5jb20vdnVlLmpzJUU0JUJGJUFFJUU2JTk0JUI5JUU0JUI4JUJBaHR0cHM6Ly9jZG4ueW91cmRvbWFpbi5jb20vdnVlLmpzJUUzJTgwJTgy">https://cdn.example.com/vue.js修改为https://cdn.yourdomain.com/vue.js。</span></li><li>测试CDN加速效果：在你的网站上进行测试，确保静态资源能够从CDN上加载，并且加载速度有所提升。</li></ul><ol start="3"><li>按需加载：结合Vue的异步组件和路由懒加载功能，将页面中的组件和路由按需加载，而不是一次性全部加载。这样可以减少首次加载需要下载的资源量。</li></ol><pre><code class="javascript">1. 路由懒加载import &#123; createRouter, createWebHistory &#125; from &#39;vue-router&#39;;const router = createRouter(&#123;  history: createWebHistory(),  routes: [    &#123;      path: &#39;/&#39;,      name: &#39;Home&#39;,      component: () =&gt; import(&#39;./views/Home.vue&#39;) // 首页组件使用懒加载    &#125;,    &#123;      path: &#39;/about&#39;,      name: &#39;About&#39;,      component: () =&gt; import(&#39;./views/About.vue&#39;) // 关于页面组件使用懒加载    &#125;,    // 其他路由...  ]&#125;);2. 异步组件import Vue from &#39;vue&#39;;import VueRouter from &#39;vue-router&#39;;Vue.use(VueRouter);const router = new VueRouter(&#123;  routes: [    &#123;      path: &#39;/about&#39;,      name: &#39;About&#39;,      component: function (resolve) &#123;        // 使用Webpack的require.ensure方法实现异步加载        require.ensure([&#39;./views/About.vue&#39;], function () &#123;          resolve(require(&#39;./views/About.vue&#39;));        &#125;);      &#125;    &#125;,    // 其他路由...  ]&#125;);</code></pre><ol start="4"><li>图片优化：对页面中的图片进行压缩和优化，可以选择合适的图片格式、调整图片大小和质量，以减少图片的文件大小和加载时间。</li></ol><ul><li>选择合适的图片格式：不同的图片格式适用于不同类型的图片。常见的图片格式有JPEG、PNG和WebP。一般情况下，JPEG适用于照片和复杂图像，PNG适用于图标和透明背景的图像，而WebP是一种新的高效图片格式，具有更好的压缩率和质量。根据图片的特性选择适当的格式有助于减小文件大小。</li><li>调整图片尺寸和分辨率：根据实际需要，调整图片的尺寸和分辨率。将图片调整为适合在网页上展示的尺寸，避免使用过大的图片，这样可以减少文件大小和加载时间。可以使用图像处理工具（如Photoshop、GIMP）或在线压缩工具来调整图片尺寸。</li><li>降低图片质量：对于照片和复杂图像，适度降低图片的质量可以显著减小文件大小。选择合适的压缩质量，在保持视觉质量的同时减小文件大小。可以使用图像处理工具或在线压缩工具来降低图片质量。</li><li>使用图片压缩工具：使用专门的图片压缩工具，如TinyPNG、JPEG Optimizer等，可以自动优化和压缩图片。这些工具使用各种优化算法来减小文件大小，而不会显著降低视觉质量。</li><li>使用响应式图片：对于移动设备和不同屏幕尺寸，可以使用响应式图片来提供适合不同设备的图片。通过使用<picture>标签或CSS媒体查询可以根据不同设备加载适当尺寸的图片，从而减少加载时间和带宽消耗。</li><li>使用懒加载：对于页面中的大量图片，可以使用懒加载技术。懒加载意味着只有当图片进入视口时才加载它们，而不是一次性加载所有图片。这样可以减少初始加载时间，提高页面的性能和用户体验。</li></ul><ol start="5"><li><p>服务端渲染（SSR）：使用Vue的服务端渲染技术，将页面的初始渲染工作放到服务端完成，使得浏览器在收到页面时能够立即显示内容，缩短首次加载时间。</p></li><li><p>Prefetch和Preload：使用Vue Router的Prefetch和HTML标签的Preload技术，在页面加载完成后，提前预加载一些未访问过但可能会用到的资源，加快后续页面切换时的加载速度。<br><strong>Prefetch（Vue Router</strong></p><ul><li>在Vue Router中，可以使用<code>&lt;router-link&gt;</code>组件的<code>prefetch</code>属性来启用预加载。</li><li>在定义路由时，将<code>prefetch</code>属性设置为<code>true</code>，表示该路由的组件将在后台被异步地下载。</li><li>例如：<pre><code>javascriptCopy Codeconst routes = [  &#123;    path: &#39;/example&#39;,    component: () =&gt; import(&#39;@/views/Example.vue&#39;),    prefetch: true  &#125;,  // 其他路由...]</code></pre></li><li>当用户浏览到其他路由时，Vue Router会自动触发预加载，将与当前路由相关的组件及其所需的资源异步加载到浏览器中。</li></ul></li></ol><p><strong>Preload（HTML标签）</strong></p><ul><li>使用HTML标签的Preload技术可以在页面加载完成后预加载一些资源，包括脚本、样式表和图片等。</li><li>可以使用<code>&lt;link&gt;</code>标签的<code>rel</code>属性设置为<code>preload</code>，并使用<code>as</code>属性指定资源的类型。</li><li>例如：<pre><code>htmlCopy Code&lt;link rel=&quot;preload&quot; href=&quot;/path/to/resource.js&quot; as=&quot;script&quot;&gt;&lt;link rel=&quot;preload&quot; href=&quot;/path/to/resource.css&quot; as=&quot;style&quot;&gt;&lt;link rel=&quot;preload&quot; href=&quot;/path/to/resource.jpg&quot; as=&quot;image&quot;&gt;</code></pre></li><li>这样，在页面加载完成后，浏览器会预加载指定的资源，以便在后续需要使用时能够更快地加载。</li></ul><ol start="9"><li>缓存策略：利用浏览器缓存机制，合理设置静态资源的缓存策略，使得在用户再次访问时能够直接使用本地缓存，减少服务器请求和下载时间。</li></ol><ul><li>强缓存</li><li>协商缓存</li><li>离线缓存</li></ul><ol start="10"><li>代码分割：将代码按照功能模块或路由进行分割，使得每个页面只加载当前需要的代码，而不是整个应用的所有代码。可以使用Webpack的代码分割功能来实现。</li></ol><ul><li>splitChunks方法：这是Webpack的内置方法，用于分割代码块。它根据配置策略将公共模块提取到一个单独的文件中，以避免重复加载，提高页面加载速度。</li></ul><ol start="11"><li><p>使用Vue CLI的生产模式构建：在项目部署前，使用Vue CLI的生产模式构建项目，该构建过程会自动进行代码压缩、优化和哈希命名等操作，以减小文件大小和提高加载速度。</p></li><li><p>性能监测和优化：使用工具（如Lighthouse、WebPageTest、Chrome开发者工具等）对项目进行性能监测和分析，找出存在的性能问题并进行相应优化。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 前端性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html 加载优化</title>
      <link href="/performance-optimization/html%E9%A6%96%E5%B1%8F%E4%BC%98%E5%8C%96/"/>
      <url>/performance-optimization/html%E9%A6%96%E5%B1%8F%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<ol><li><p>压缩和合并文件：压缩和合并HTML、CSS和JavaScript文件可以减少文件大小，从而加快下载速度。使用压缩工具（如UglifyJS和Terser）来压缩JavaScript代码，使用CSS压缩工具（如CSSNano和csso）来压缩CSS代码。</p></li><li><p>使用浏览器缓存：通过设置适当的缓存头，浏览器可以缓存静态资源，使得再次访问时不需要重新下载。确保你的服务器返回正确的缓存控制头，例如设置Cache-Control和Expires头。</p></li><li><p>延迟加载非关键资源：将非关键的资源，如图片、视频、社交媒体插件等，延迟加载。可以使用懒加载技术或在用户滚动到相应区域时再加载这些资源。</p></li><li><p>使用异步加载脚本：将JavaScript脚本标记为异步加载（通过添加async属性）或延迟加载（通过添加defer属性）。这样可以防止脚本阻塞页面的渲染，使得首屏内容能够更快呈现给用户。</p></li><li><p>优化CSS和JavaScript的渲染顺序：将关键的CSS和JavaScript放在HTML文档的头部，并将非关键的CSS和JavaScript放在文档底部。这可以确保浏览器优先加载和渲染关键的内容。</p></li><li><p>使用图像优化技术：使用合适的图片格式（如JPEG、PNG和WebP）和压缩，同时提供多种大小的图像，以便在不同设备上显示最佳质量的图片。</p></li><li><p>减少HTTP请求：减少页面中的资源数量，如合并和内联CSS和JavaScript，选择使用CSS Sprites来减少图片请求等。</p></li><li><p>使用字体子集：如果使用了自定义字体，可以通过创建字体子集来减少字体文件的大小，只包含页面所需的字符。</p></li><li><p>响应式设计：使用响应式设计来适配不同的设备和屏幕尺寸，以提供更好的用户体验。</p></li><li><p>使用服务端渲染：对于大型应用程序，考虑使用服务端渲染（Server-side Rendering，SSR）来生成首屏内容，以减少客户端渲染的时间和工作量。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> 前端性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jquery原理</title>
      <link href="/front-end/Jquery/"/>
      <url>/front-end/Jquery/</url>
      
        <content type="html"><![CDATA[<p>jQuery是一个基于JavaScript的快速、小巧且功能强大的JavaScript库。它主要用于简化针对HTML文档操作、处理事件、执行动画和进行AJAX等常见任务的     JavaScript码。</p><pre><code class="text">1. jQuery的原理可以总结为以下几个方面：    - 封装DOM操作：jQuery通过封装浏览器提供的DOM（文档对象模型）接口，提供了一组简洁且易于使用的方法，使开发者能够轻松地对HTML元素进行选择、创建、修改和删除等操作。它通过选择器引擎，类似于CSS选择器语法，快速定位到指定的元素集合。    - 事件处理：jQuery提供了统一的事件处理机制，可以方便地绑定和解绑事件，支持各种常见的事件类型（如点击、鼠标移入移出、键盘按下释放等）。它的事件处理功能兼容不同浏览器，并提供了一套一致的跨浏览器解决方案。    - 动画效果：jQuery通过提供一些内置的动画方法和效果，使得开发者能够轻松地在页面上实现各种动画效果，如淡入淡出、滑动、展开收起等。这些动画效果可以通过调用方法来实现，也可以通过设置CSS属性实现。    - AJAX封装：jQuery通过封装XMLHttpRequest对象和其他相关API，简化了进行AJAX交互的过程。开发者可以使用jQuery提供的ajax()方法来发送HTTP请求、处理响应、实现异步加载等，而无需直接操作底层XMLHttpRequest对象。    - 扩展性和插件机制：jQuery提供了丰富的插件生态系统，开发者可以方便地使用现有的插件来扩展和增强jQuery的功能。插件可以是一些已经实现的功能模块，也可以是一些自定义的功能代码。</code></pre><p>简单实现原理</p><pre><code class="javascript">function jQuery(selector) &#123;    this.elements = []    this.querySelectorAll(selector)&#125;jQuery.prototype = &#123;    querySelectorAll(selector) &#123;        this.elements = document.querySelectorAll(selector)        return this    &#125;,    attr(key, value) &#123;        /**         * 第一种情况 只有key         * 也就是取元素的属性值         * 取值就返回属性值 不需要返回this         */        if ( value === void 0 ) &#123;            var el = this.elements[0]            return el &amp;&amp; el.getAttribute(key)        &#125;        /**         * 第二种情况 key + value         * 也就是给元素添加属性         * 返回this         */        this.elements.forEach(function(el) &#123;            el.setAttribute(key, value)        &#125;)        return this    &#125;&#125;window.$ = function(selector) &#123;    return new jQuery(selector)&#125;/** * 使用 */$(&#39;div&#39;).attr(&#39;a&#39;, 1).attr(&#39;b&#39;, 2).attr(&#39;c&#39;, 3)</code></pre><h1 id="jQuery或zepto源码有哪些写的好的地⽅"><a href="#jQuery或zepto源码有哪些写的好的地⽅" class="headerlink" title="jQuery或zepto源码有哪些写的好的地⽅"></a>jQuery或zepto源码有哪些写的好的地⽅</h1><pre><code class="javascript">jquery源码封装在⼀个匿名函数的⾃执⾏环境中，有助于防⽌变量的全局污染，然后通过传⼊window对象参数，可以使window对象作为局部变量使⽤，好处是当jquery中访问window对象的时候，就不⽤将作⽤域链退回到顶层作⽤域了，从⽽可以更快的访问window对象。同样，传⼊undefined参数，可以缩短查找undefined时的作⽤域链(function( window, undefined ) &#123; //⽤⼀个函数域包起来，就是所谓的沙箱 //在这⾥边var定义的变量，属于这个函数域内的局部变量，避免污染全局 //把当前沙箱需要的外部变量通过函数参数引⼊进来 //只要保证参数对内提供的接⼝的⼀致性，你还可以随意替换传进来的这个参数 window.jQuery = window.$ = jQuery; &#125;)( window );jquery将⼀些原型属性和⽅法封装在了jquery.prototype中，为了缩短名称，⼜赋值给了jquery.fn，这是很形象的写法有⼀些数组或对象的⽅法经常能使⽤到，jQuery将其保存为局部变量以提⾼访问速度jquery实现的链式调⽤可以节约代码，所返回的都是同⼀个对象，可以提⾼代码效率</code></pre><h1 id="jQuery-fn-的-init-⽅法返回的-this-指的是什么对象"><a href="#jQuery-fn-的-init-⽅法返回的-this-指的是什么对象" class="headerlink" title="jQuery.fn 的 init ⽅法返回的 this 指的是什么对象"></a>jQuery.fn 的 init ⽅法返回的 this 指的是什么对象</h1><pre><code class="text">jQuery.fn 的 init ⽅法 返回的 this 就是 jQuery 对象⽤户使⽤ jQuery() 或 $() 即可初始化 jQuery 对象，不需要动态的去调⽤ init ⽅法</code></pre><h1 id="jQuery-extend-与-jQuery-fn-extend-的区别"><a href="#jQuery-extend-与-jQuery-fn-extend-的区别" class="headerlink" title="jQuery.extend 与 jQuery.fn.extend 的区别"></a>jQuery.extend 与 jQuery.fn.extend 的区别</h1><ol><li><p>$.fn.extend() 和 $.extend() 是 jQuery 为扩展插件提拱了两个⽅法</p></li><li><p>$.extend(object) ; &#x2F;&#x2F; 为jQuery添加“静态⽅法”（⼯具⽅法）</p></li></ol><pre><code class="javascript">$.extend(&#123;min: function(a, b) &#123; return a &lt; b ? a : b; &#125;,max: function(a, b) &#123; return a &gt; b ? a : b; &#125;&#125;);$.min(2,3); // 2$.max(4,5); // 5</code></pre><ol start="3"><li>$.extend([true,] targetObject, object1[, object2]); &#x2F;&#x2F; 对targt对象进⾏扩展</li></ol><pre><code class="javascript">var settings = &#123;validate:false, limit:5&#125;;var options = &#123;validate:true, name:&quot;bar&quot;&#125;;$.extend(settings, options); // 注意：不⽀持第⼀个参数传 false// settings == &#123;validate:true, limit:5, name:&quot;bar&quot;&#125;</code></pre><ol start="4"><li>$.fn.extend(json) ; &#x2F;&#x2F; 为jQuery添加“成员函数”（实例⽅法）</li></ol><pre><code class="javascript">$.fn.extend(&#123;    alertValue: function() &#123;    $(this).click(function()&#123;    alert($(this).val());&#125;);&#125;);$(&quot;#email&quot;).alertValue();</code></pre><h1 id="jQuery-的属性拷⻉-extend-的实现原理是什么，如何实现深拷⻉"><a href="#jQuery-的属性拷⻉-extend-的实现原理是什么，如何实现深拷⻉" class="headerlink" title="jQuery 的属性拷⻉(extend)的实现原理是什么，如何实现深拷⻉"></a>jQuery 的属性拷⻉(extend)的实现原理是什么，如何实现深拷⻉</h1><ol><li>浅拷⻉（只复制⼀份原始对象的引⽤） var newObject &#x3D; $.extend({}, oldObject);</li><li>深拷⻉（对原始对象属性所引⽤的对象进⾏进⾏递归拷⻉） var newObject &#x3D; $.extend(true, {}, oldObject);</li></ol><h1 id="jQuery-的队列是如何实现的"><a href="#jQuery-的队列是如何实现的" class="headerlink" title="jQuery 的队列是如何实现的"></a>jQuery 的队列是如何实现的</h1><ol><li><p>jQuery 核⼼中有⼀组队列控制⽅法，由 queue()&#x2F;dequeue()&#x2F;clearQueue() 三个⽅法组成。</p></li><li><p>主要应⽤于 animate() ， ajax ，其他要按时间顺序执⾏的事件中</p></li></ol><pre><code class="javascript">var func1 = function()&#123;alert(&#39;事件1&#39;);&#125;var func2 = function()&#123;alert(&#39;事件2&#39;);&#125;var func3 = function()&#123;alert(&#39;事件3&#39;);&#125;var func4 = function()&#123;alert(&#39;事件4&#39;);&#125;// ⼊栈队列事件$(&#39;#box&#39;).queue(&quot;queue1&quot;, func1); // push func1 to queue1$(&#39;#box&#39;).queue(&quot;queue1&quot;, func2); // push func2 to queue1// 替换队列事件$(&#39;#box&#39;).queue(&quot;queue1&quot;, []); // delete queue1 with empty array$(&#39;#box&#39;).queue(&quot;queue1&quot;, [func3, func4]); // replace queue1// 获取队列事件（返回⼀个函数数组）$(&#39;#box&#39;).queue(&quot;queue1&quot;); // [func3(), func4()]// 出栈队列事件并执⾏$(&#39;#box&#39;).dequeue(&quot;queue1&quot;); // return func3 and do func3$(&#39;#box&#39;).dequeue(&quot;queue1&quot;); // return func4 and do func4// 清空整个队列$(&#39;#box&#39;).clearQueue(&quot;queue1&quot;); // delete queue1 with clearQueue</code></pre><h1 id="jQuery-中的-bind-live-delegate-on-的区别"><a href="#jQuery-中的-bind-live-delegate-on-的区别" class="headerlink" title="jQuery 中的 bind(), live(), delegate(), on()的区别"></a>jQuery 中的 bind(), live(), delegate(), on()的区别</h1><ol><li>bind() 直接绑定在⽬标元素上</li><li>live() 通过冒泡传播事件，默认 document 上，⽀持动态数据</li><li>delegate() 更精确的⼩范围使⽤事件代理，性能优于 live</li><li>on() 是最新的 1.9 版本整合了之前的三种⽅式的新事件绑定机制</li></ol><h1 id="是否知道⾃定义事件"><a href="#是否知道⾃定义事件" class="headerlink" title="是否知道⾃定义事件"></a>是否知道⾃定义事件</h1><ol><li><p>事件即“发布&#x2F;订阅”模式，⾃定义事件即“消息发布”，事件的监听即“订阅订阅”</p></li><li><p>JS 原⽣⽀持⾃定义事件，示例：</p></li></ol><pre><code class="javascript"> document.createEvent(type); // 创建事件 event.initEvent(eventType, canBubble, prevent); // 初始化事件 target.addEventListener(&#39;dataavailable&#39;, handler, false); // 监听事件 target.dispatchEvent(e); // 触发事件</code></pre><ol start="3"><li>jQuery ⾥的 fire 函数⽤于调⽤ jQuery ⾃定义事件列表中的事件</li></ol><h1 id="jQuery-通过哪个⽅法和-Sizzle-选择器结合的"><a href="#jQuery-通过哪个⽅法和-Sizzle-选择器结合的" class="headerlink" title="jQuery 通过哪个⽅法和 Sizzle 选择器结合的"></a>jQuery 通过哪个⽅法和 Sizzle 选择器结合的</h1><ol><li>Sizzle 选择器采取 Right To Left 的匹配模式，先搜寻所有匹配标签，再判断它的⽗节点</li><li>jQuery 通过 $(selecter).find(selecter); 和 Sizzle 选择器结合</li></ol><h1 id="jQuery-中如何将数组转化为-JSON-字符串，然后再转化回来"><a href="#jQuery-中如何将数组转化为-JSON-字符串，然后再转化回来" class="headerlink" title="jQuery 中如何将数组转化为 JSON 字符串，然后再转化回来"></a>jQuery 中如何将数组转化为 JSON 字符串，然后再转化回来</h1><pre><code class="javascript">// 通过原⽣ JSON.stringify/JSON.parse 扩展 jQuery 实现 $.array2json = function(array) &#123; return JSON.stringify(array);&#125; $.json2array = function(array) &#123; // $.parseJSON(array); // 3.0 开始，已过时 return JSON.parse(array);&#125;// 调⽤var json = $.array2json([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]);var array = $.json2array(json);</code></pre><h1 id="jQuery-⼀个对象可以同时绑定多个事件，这是如何实现的"><a href="#jQuery-⼀个对象可以同时绑定多个事件，这是如何实现的" class="headerlink" title="jQuery ⼀个对象可以同时绑定多个事件，这是如何实现的"></a>jQuery ⼀个对象可以同时绑定多个事件，这是如何实现的</h1><pre><code class="javascript">$(&quot;#btn&quot;).on(&quot;mouseover mouseout&quot;, func); $(&quot;#btn&quot;).on(&#123; mouseover: func1, mouseout: func2, click: func3 &#125;);</code></pre><h1 id="针对-jQuery-的优化⽅法"><a href="#针对-jQuery-的优化⽅法" class="headerlink" title="针对 jQuery 的优化⽅法"></a>针对 jQuery 的优化⽅法</h1><ol><li>缓存频繁操作 DOM 对象</li><li>尽量使⽤ id 选择器代替 class 选择器</li><li>总是从 #id 选择器来继承</li><li>尽量使⽤链式操作</li><li>使⽤时间委托 on 绑定事件</li><li>采⽤ jQuery 的内部函数 data() 来存储数据</li><li>使⽤最新版本的 jQuery</li></ol><h1 id="jQuery-的-slideUp-动画，当⿏标快速连续触发-动画会滞后反复执⾏，该如何处理呢"><a href="#jQuery-的-slideUp-动画，当⿏标快速连续触发-动画会滞后反复执⾏，该如何处理呢" class="headerlink" title="jQuery 的 slideUp 动画，当⿏标快速连续触发, 动画会滞后反复执⾏，该如何处理呢"></a>jQuery 的 slideUp 动画，当⿏标快速连续触发, 动画会滞后反复执⾏，该如何处理呢</h1><ol><li>在触发元素上的事件设置为延迟处理：使⽤ JS 原⽣ setTimeout ⽅法</li><li>在触发元素的事件时预先停⽌所有的动画，再执⾏相应的动画事件： $(‘.tab’).stop().slideUp();</li></ol><h1 id="jQuery-UI-如何⾃定义组件"><a href="#jQuery-UI-如何⾃定义组件" class="headerlink" title="jQuery UI 如何⾃定义组件"></a>jQuery UI 如何⾃定义组件</h1><ol><li>通过向 $.widget() 传递组件名称和⼀个原型对象来完成</li><li>$.widget(“ns.widgetName”, [baseWidget], widgetPrototype);</li></ol><h1 id="jQuery-与-jQuery-UI、jQuery-Mobile-区别"><a href="#jQuery-与-jQuery-UI、jQuery-Mobile-区别" class="headerlink" title="jQuery 与 jQuery UI、jQuery Mobile 区别"></a>jQuery 与 jQuery UI、jQuery Mobile 区别</h1><ol><li>jQuery 是 JS 库，兼容各种PC浏览器，主要⽤作更⽅便地处理 DOM 、事件、动画、AJAX</li><li>jQuery UI 是建⽴在 jQuery 库上的⼀组⽤户界⾯交互、特效、⼩部件及主题</li><li>jQuery Mobile 以 jQuery 为基础，⽤于创建“移动Web应⽤”的框架</li></ol><h1 id="jQuery-和-Zepto-的区别？-各⾃的使⽤场景"><a href="#jQuery-和-Zepto-的区别？-各⾃的使⽤场景" class="headerlink" title="jQuery 和 Zepto 的区别？ 各⾃的使⽤场景"></a>jQuery 和 Zepto 的区别？ 各⾃的使⽤场景</h1><ol><li>jQuery 主要⽬标是 PC 的⽹⻚中，兼容全部主流浏览器。在移动设备⽅⾯，单独推出 jQuery Mobile</li><li>Zepto 从⼀开始就定 位移动设备，相对更轻量级。它的 API 基本兼容 jQuery&#96;，但对PC浏览器兼容不理想</li></ol><h1 id="jQuery对象的特点"><a href="#jQuery对象的特点" class="headerlink" title="jQuery对象的特点"></a>jQuery对象的特点</h1><ol><li>只有 JQuery 对象才能使⽤ JQuery ⽅法</li><li>JQuery 对象是⼀个数组对象</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> Jquery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jquery </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
